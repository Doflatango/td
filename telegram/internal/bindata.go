// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _data/public_keys.pem
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __dataPublic_keysPem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\xd3\xb7\x0e\x84\xf8\xb5\xc7\xf1\x1e\x89\x77\xd8\x1e\x5d\x91\x06\x06\x4a\xf2\x10\x86\x38\x43\xea\xc8\x39\xff\x87\xf4\xf4\x57\x5e\xbb\xb0\xe4\x95\x5c\x79\x4f\xfb\xed\xce\x47\xbf\xff\xfb\xc7\xf1\x92\xa2\x9a\x7f\xb8\x1e\xf7\x87\xfd\xe5\x0d\x55\xf8\x43\x97\xa2\x3f\x03\x0c\xbd\x55\x95\x17\x2a\x5d\xe0\x1c\x89\x3b\x7c\x4e\xb0\x1b\xf6\x20\xc8\x41\x26\x01\xdf\xe5\xf1\x8d\xdc\xc7\x7a\xeb\x56\x92\x38\xf9\x8a\xe1\x3b\x97\x7e\x1f\x12\x3e\xef\x5d\xd9\x3e\xb6\x45\xdc\x06\x1a\x86\xfa\x4b\xb4\x4c\xef\xc9\xb0\x9b\x3f\x89\xe8\x29\x78\x6c\x84\xd5\x5d\x27\x90\x15\x30\x70\xe0\x95\x9f\xbe\x12\xde\x96\xf5\xeb\xd9\x3e\x6b\xce\x5e\xd2\xef\x43\x97\xcc\x16\x8f\x6e\x74\x7b\xe6\x89\x07\x43\xc9\xc8\x82\xe5\x20\xd3\xf2\xeb\xa3\xe3\x52\xa5\xb5\x12\x32\xf8\x8e\x22\x4f\x57\xe6\xa4\x1c\x71\x0f\x79\xd4\x9f\x09\x12\x46\x3d\xbb\xf5\xbf\xfb\xe5\x5e\xbe\x9f\x7c\x3e\x7b\xc1\x13\x4a\x72\x7f\x0e\x18\x92\xca\xbb\x23\xc4\xa0\xea\xf8\xfe\x37\xf4\x8c\xe5\x4a\xc3\x5e\xae\x49\x48\xa6\xdd\x2b\xd6\x3e\x7a\xf8\x90\x1c\xaf\xe5\xd3\x34\xd7\x88\x38\x54\x37\x77\x8d\xac\xb0\x4c\x38\xe4\x4c\x2e\x49\xe1\x11\x18\x62\xea\xbc\x37\x06\xae\x4d\x05\xbf\x4c\x9a\xea\x0c\x31\x41\x5c\x82\xc2\xc5\x2f\xd9\x60\xbb\x23\x67\x6d\xcc\xdc\x62\xd7\xde\x86\x69\xf1\x8f\x77\xfa\xfe\x3d\x07\x0f\xc8\x49\x43\x27\x6a\x9d\x91\x23\x0c\x79\xfd\xce\x74\x15\xbb\xec\xf8\x40\x87\x2f\xdf\x89\x48\x7b\x94\x0e\xc4\x71\xc0\xe2\xa9\x61\xd7\xbf\x0e\x55\xe4\x1c\x8e\x87\xa1\x3f\x5f\x2f\x99\xe2\x5f\x8b\xfc\xab\xff\xd3\xec\x2f\xbd\xd4\x96\x33\xf9\xaa\x5b\xea\xae\x51\xd8\x03\xe3\x39\x47\x92\x39\xce\x12\x38\x87\xe1\xfe\xdd\x73\xfd\x1d\xc4\x65\xa3\xbc\x90\x6d\x5a\xdf\xb8\x53\x40\x15\x3c\x0c\xf9\xbc\xdf\x17\x6c\x0e\x5a\xed\x40\xac\x48\x12\x71\x1a\x0b\xae\xf4\x37\xb0\x5e\x08\x78\xde\x08\xd7\xe6\x00\x8f\xd5\xb5\x72\x36\xdb\x76\x0c\x60\xd6\x4b\x48\x3e\x83\xbb\xf0\x99\x83\x69\x4c\x79\xc2\x50\x6d\xd2\x68\x36\xbb\xb8\x12\x54\x56\xec\x7e\xb9\xc6\x39\xa7\xf7\xd8\x03\xcc\x65\x49\x43\x08\xd1\x16\xcf\x47\x3f\x41\x2b\x3f\x15\xda\xdc\x3b\xe7\x74\x2d\x23\xa2\x22\x8c\x47\xb9\xde\xad\xb6\xe7\x30\xd4\x33\x0f\x3d\x67\x2d\x37\x6a\x45\x89\xbb\xe4\x51\xe2\x9e\xb9\x48\x51\xb4\x35\x83\xca\x70\x1c\xa2\x20\x1a\xdf\x5c\x18\x33\x36\xa2\xcf\x6d\xcc\x54\x34\x5b\xb9\x85\xe7\x93\x8e\x00\xb0\xf6\xa0\x82\xa1\xea\x23\x5c\x94\xb7\xea\x85\x31\x09\xb6\x9d\x5a\x95\xb2\xe5\xa7\x76\x5e\x37\xa5\xeb\x59\x3c\x7a\x46\x8b\xd3\x97\x44\xbd\x76\xcd\x19\x31\xc1\x9c\xdd\x5c\x32\x77\xf7\x1b\x16\x34\xe0\xed\x27\x63\xc1\x10\xc9\x4e\x1a\xc3\x7f\x5e\x33\x3b\xa9\x6d\x4e\x87\x41\xc8\x6d\x33\x21\xec\xfa\x83\xb2\x7a\xe6\x90\x43\x45\x7e\xe2\xd8\xc1\xf6\x87\xa0\x98\xe9\x60\x9e\x66\x54\x03\xb5\xcb\x97\x72\x93\xb2\xc3\xa5\x60\x48\xfb\x4f\xd1\xff\xa1\xe6\x5e\x1a\xaf\x32\x7a\x11\x2b\xeb\x3e\xb1\x83\x99\xd7\x57\xda\xc3\x50\x00\xd0\x51\xec\x6a\x24\xec\xaa\xb9\xec\x17\xc7\xcf\x46\xae\xf4\x7e\x1f\x60\x61\x54\x6f\xda\xdb\xec\x0c\x06\x13\x11\x61\xeb\x7f\x1e\x80\xc9\x3e\xf4\xc9\x75\x79\x55\x0e\xc3\x3e\xee\xae\x6d\x59\x30\xa4\xdb\x0d\x66\x95\x5a\x38\xb9\xfe\xd5\xcb\x37\xe7\x28\x68\xcb\x90\x3f\x4a\x27\x3b\xd7\x48\x93\xe2\x59\x1a\x59\xe6\xd7\x7a\x5c\x47\x0f\xba\xdf\xb7\x5f\xa1\xe2\xb5\x93\x1b\x95\xe9\xb3\x23\x9e\x39\x30\x44\x7e\x44\x8f\x98\x1d\x4b\x00\xd3\xae\x3c\x0a\xb1\x67\x8f\x24\x5b\x43\x4b\xfb\x28\x04\xcb\x62\x7e\x5b\x8d\xaa\x6e\x72\xd8\xf7\x3d\xd9\x88\x2e\x63\xe4\x72\xaf\xd7\xa2\x02\x72\xfa\xec\xf1\x82\x91\x30\x24\x5e\x41\xae\xe8\x08\x17\xb7\x15\x6f\x24\xa2\xee\x8d\x02\xbd\x88\x44\x26\x47\x0c\xfe\x5d\x2f\x37\xb0\x92\x94\xb9\xf5\x2e\xe0\xc6\xfa\x20\x3a\x79\xce\x96\x5a\xc5\xda\xdc\xa7\x9c\xc4\x13\xa4\x13\x86\xf6\x71\x6b\xfd\x24\xc4\x22\xdc\xc4\x98\x27\xc6\x92\x38\x4a\x69\x29\xab\x0a\xc5\x63\x3c\x8a\x98\xed\x3c\x51\x46\xab\x66\x26\xbb\xc0\x50\xb0\x89\x09\x9d\x59\xa8\xc5\xf2\xda\xb7\x85\x67\x2d\xc3\x87\x21\xf4\x6f\xd5\xdc\xd0\xbc\x01\xf7\x80\x0c\xb6\x29\xd2\x67\x57\xdf\x87\xac\xc2\xd0\x4d\x6b\x28\x4b\x33\x02\xe8\x32\x4f\x42\x9f\x31\xb1\x70\x5a\x13\xa6\x43\x4c\x7e\x45\xcd\x56\xd6\x7b\xf9\x88\xaf\xce\x22\x31\x97\xf1\x0b\xf7\x8d\xea\x37\x51\x3e\x46\x17\xa3\x14\x55\x6e\xd4\x4f\x0f\x43\x8f\x54\x6a\xf7\xf9\x7a\x9e\x8b\x2b\x6e\xb3\x96\x09\xb2\x6a\x65\x57\x38\x30\x49\xea\x8b\xb5\x8c\x80\x9a\xee\x46\xef\x8b\x5d\x06\x30\xf5\x9f\xe3\xdb\xf4\x3e\xbd\xd7\x11\xb0\x6f\x1f\x0f\x59\xc2\x80\x21\x25\x76\x8c\x2a\x7f\xc5\xa9\xed\xdc\x58\x4c\x2d\xea\x9c\xe8\x75\x7e\x71\x8c\x28\xed\x41\xb0\x7b\xdf\xe3\xc8\x90\xab\xc1\xd1\x4a\x49\xae\xf4\xe8\xef\xf8\x58\xc2\x68\xb2\xad\xfa\x78\x17\xe9\xad\xc3\xd0\xb7\xc3\xce\x00\x7f\xd4\x20\xd3\x56\x77\x5d\x10\x3b\x0c\x9d\xd4\xbd\x3f\xef\x6b\xdc\x0a\x61\xb2\xd5\xa9\x2b\xb0\x1c\x08\x53\x9e\x72\xe4\xe2\x9c\xce\xb4\x4b\x38\xbd\xb0\xf7\xfd\xb0\xc0\x4e\x74\x30\xf4\x68\x69\x32\xbb\x29\x52\x43\x86\xba\xf3\x03\xae\x08\x4e\x5f\x51\xb1\xbe\x07\xda\x10\x00\x29\xd2\xe9\x62\x65\xfc\x65\x09\x26\x40\x8e\xcb\x10\xbc\xc3\xa9\x5a\x2b\xd7\xa8\xaa\x1d\x35\xd3\x74\x82\xa1\xc9\xf9\x5b\xb7\x39\xcc\xa7\x1f\x3d\xfb\x1c\x65\x44\xae\xbd\x69\x99\x5e\x30\x18\xa2\xb6\xba\xad\x18\xf4\x31\xd3\xd8\xe3\x99\x8e\x34\x3a\x30\x97\x7d\xe1\x2e\xbf\xed\xea\xb5\xff\xc4\x9f\x32\xda\xa8\x7b\xdb\x52\x7d\x87\x0e\xfb\xd5\xa8\x68\x1c\x6a\x22\xd4\xe2\xea\x35\x49\xec\x99\xc2\xd0\x58\x9e\x06\xc5\x87\xaf\xb9\xd7\xea\x37\xe0\xc4\x50\x7f\xb3\x69\xc0\xe3\xb8\xfd\xc5\xa5\x66\xca\x48\x84\x0b\x79\x9e\x71\x1a\x53\xe6\x47\x22\x54\xa9\x6f\x67\x51\xb5\x5d\xa7\x29\x3b\x68\x73\xcb\xc1\x10\xfb\xad\x0f\x46\xca\xcb\x45\xb3\x19\xa7\x00\xfe\xa6\xa2\xe7\x2a\x48\xe9\x21\x85\x05\x76\xee\x4d\xe9\x1a\x5a\x1a\x61\x0c\xaa\xcc\x34\xad\xcf\xce\x7e\x3d\x2b\xe6\x78\xfa\x3c\x73\xf4\x55\x61\x17\x30\x74\x06\xe4\xfc\xc1\x49\x6e\xa6\xf7\x9f\x80\x0c\xce\x4f\xb3\xaf\xe6\xb5\x7b\x67\x2b\xe9\xaf\x6a\x29\xec\xb6\x61\x4d\x9b\x04\xda\x57\x76\xda\x4c\x12\x96\x6c\xc0\x2e\xff\x89\x12\x39\x06\xd0\x39\x15\x60\x68\x40\xe2\x17\xbe\x25\x79\xbc\xcd\x8e\x20\xd9\xf6\x0a\xd2\xce\xe1\xfb\xfd\x95\x3e\x2c\xa3\x51\x03\x5b\x79\xe9\xde\xbb\x70\xe5\x7d\x26\xd5\x20\x1b\x72\x6d\x09\x93\xfa\x34\x84\xaf\x87\x4b\x35\xfd\x86\x21\xee\xbf\x6a\xfe\x7f\x00\x00\x00\xff\xff\xf5\xdf\xa3\xcf\xe8\x08\x00\x00")

func _dataPublic_keysPemBytes() ([]byte, error) {
	return bindataRead(
		__dataPublic_keysPem,
		"_data/public_keys.pem",
	)
}

func _dataPublic_keysPem() (*asset, error) {
	bytes, err := _dataPublic_keysPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_data/public_keys.pem", size: 2280, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_data/public_keys.pem": _dataPublic_keysPem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_data": &bintree{nil, map[string]*bintree{
		"public_keys.pem": &bintree{_dataPublic_keysPem, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
