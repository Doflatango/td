// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/header.tmpl
// _template/main.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xce\x31\x4e\x03\x31\x10\x85\xe1\x7e\x4e\xf1\x64\x51\x80\x04\xf6\x09\x68\x20\x14\x34\x09\x45\x7a\xe4\x5d\x8f\x1d\x2b\xda\x19\xcb\x4c\x10\xc8\xf2\xdd\x51\x14\xca\xd7\xbc\xff\x1b\x03\x89\x73\x15\x86\x3b\x71\x4c\xdc\x1d\xe6\xa4\x10\xf0\xaa\x89\x51\x58\xb8\x47\xe3\x84\xe5\x17\x45\x2d\x15\x96\x47\xec\x0e\xd8\x1f\x8e\x78\xdb\xbd\x1f\x3d\x51\x8b\xeb\x39\x16\xc6\x18\xb8\xf3\x1f\xff\x63\x4e\xa2\xba\x35\xed\x86\x7b\x72\xab\x8a\xf1\x8f\x39\x72\x79\x33\x47\xe4\x4a\xb5\xd3\x65\xf1\xab\x6e\x81\xbb\xc4\xa4\xc1\x52\x58\xaa\x38\x7a\xa0\x6b\x7c\xaf\x4f\xda\x6e\xb0\x6a\x55\x05\x59\x3b\xce\xcc\xad\x4a\xc1\xed\xf7\xcb\xd3\x77\xec\xf8\xc4\x33\x96\x2a\xfe\xe5\x92\x33\xf7\x31\x89\xc6\x00\x4b\xba\x0a\xfe\x02\x00\x00\xff\xff\xbd\x55\x2c\xdb\xdc\x00\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 220, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5b\x6f\xdb\x3a\x12\x7e\xf7\xaf\x98\x13\xe4\x9c\x95\xb6\x8e\xdc\xe7\xa4\x79\x68\x2e\x6d\x0d\x64\x8b\xa0\x49\xf7\xa5\x28\x02\x46\x1a\xd9\x44\x64\xca\x10\x29\xdb\x5d\x41\xff\x7d\xc1\x8b\x24\x4a\xa2\x6c\x25\x9b\xed\xb6\xeb\x97\x38\xbc\xcc\xf5\x9b\xe1\x70\xe8\xa2\x80\x08\x63\xca\x10\x8e\x38\x5d\xad\x13\x3c\x82\xb2\x9c\x14\x05\x1c\xaf\x9f\x16\x70\x7a\x0e\xc7\xc1\x2d\x09\x9f\xc8\x02\xcd\xb8\xc0\xd5\x3a\x21\x02\xe1\x68\x89\x24\xc2\xec\x08\x8e\xe5\x8c\x9c\xca\x08\x5b\x20\x1c\x73\xb5\xeb\x4e\x64\x79\x28\xb8\x9c\x9b\xcd\x40\x12\xe4\xc1\x65\xba\x5a\x21\x13\x72\x4c\xfc\x58\xa3\x19\xfd\x4c\x56\x92\x38\x70\xb5\x03\x8a\x49\x51\x9c\x54\xb4\x62\x25\x02\x0f\x3e\x50\x4c\x22\x45\x0c\x00\xc0\x10\x8c\x6d\x82\x72\x13\x8d\x81\xb0\x08\x3c\x35\xc3\x22\x2a\x68\xca\x48\xe2\x83\xc7\x52\x01\xed\xc1\x8b\x34\x4d\x7c\x2d\x9c\x94\xef\x2b\x47\xb8\x43\xa1\xa9\x56\x02\x49\x5a\x1f\xbb\x83\x4b\x4c\xd6\x98\xf1\x40\x31\x44\x16\x55\x32\x19\xfe\xc7\x71\x70\x95\xe6\x8f\x09\xde\x25\x34\xc4\x66\xd2\x26\xf1\xed\xfb\xb7\xef\x7a\xe4\x5e\x5a\xc1\x22\x80\x09\x47\x43\x65\xef\xfe\x3d\xbb\x9d\x3b\x06\xd6\x6b\xe9\xad\xaf\xe5\xa4\x71\x96\xd9\x2b\x37\xcd\xaf\x80\x72\xb8\xbf\x01\xe5\x35\x1a\x41\x1a\xb7\x17\x05\x93\x30\x65\x5c\x38\x77\x9e\xc3\xdb\x9d\x1e\xff\x84\xbb\xf9\x15\x94\xe5\x99\xe2\x72\xcd\xc2\x34\x42\x50\xa0\x93\x4e\xe4\xf0\x48\x59\xa0\x47\xb3\x60\x12\xe7\x2c\x04\x4f\x6f\xfc\x82\x21\xd2\x0d\x66\x52\x95\xbf\xb7\x78\xf8\x86\x8c\x59\x78\x91\xc7\xef\xb3\x85\x5a\x26\x89\x5d\xe4\x71\x8c\x99\x0f\x98\x65\x69\x06\x85\x52\x9c\x56\xa2\xdb\x44\xcf\xcf\x81\xd1\xc4\xac\x90\x9f\x0c\x45\x9e\x31\x88\x57\x22\xb8\x96\x9b\x63\xef\x28\x24\xec\x6f\x02\x50\x4b\xad\x49\xdc\xdf\x18\x93\x02\xe1\x92\xc0\x91\xaf\x08\xe8\xf8\xb1\xa4\x09\x6e\x73\x31\xbf\xf2\x1c\xd6\xf1\x0f\x83\xdd\x00\xcb\x0d\xe1\x3e\xfa\xac\x05\xd5\xa4\x4b\xe5\xa0\x0a\xa0\x7a\xb5\xe2\x2a\x67\x3e\x11\xee\xf5\x66\xe7\x2c\xc2\x9d\x32\x78\xd1\xc5\x4f\x9b\xff\x3f\x31\x14\x69\x66\xc3\xb0\x63\x08\xbd\xe0\x93\x4a\x1e\x5e\x82\xac\xef\xe3\xa0\x05\x5e\x5f\x1b\x35\x96\x1e\x2c\x0c\x13\x83\x12\x28\x4b\x1a\x49\x70\x19\xe4\x3f\xc8\xaf\x4a\xa8\x69\x2f\x1e\x6b\xb9\xb2\x74\x5b\x14\x72\x43\x59\x6e\x8a\x02\x59\x54\x96\xd2\xee\xda\x07\x07\x64\xb1\x94\x77\xd2\xae\xf1\x33\x46\xef\x2c\xdd\x1a\xdd\x2a\xfd\x1e\xa6\xb0\x69\x64\xc9\xd2\xed\x21\x63\x37\x76\xb0\x38\x57\x93\x1f\x91\x61\x46\x43\x7b\xd2\xa0\x61\xd3\x07\xfc\x00\xe8\x73\x46\x1e\x13\x04\x91\x0e\x00\xff\x14\x62\x05\x1b\x93\x60\x6e\x2a\x3b\xa1\x8e\x69\xd8\x52\xb1\x04\xaa\xb0\xf3\x67\x24\x93\x88\x8c\x92\x29\xd0\x68\xe7\xb7\x58\xb7\xe5\x57\x4e\x99\x58\x02\x63\x96\x49\xbb\x6c\x02\x77\xb4\xfb\x67\x6a\xc5\x1f\xff\x0b\xa5\x4e\xe1\xcf\xad\xd6\x68\x2a\x85\x68\xd4\x72\xe7\xe5\x01\x70\x68\x56\x1f\x64\xce\x2b\x4b\x6f\xe3\xef\x77\xfb\x10\xea\x7a\xa9\x7d\x58\x8e\x41\x0c\x0d\xe2\x67\x4f\x16\xa9\x0c\x34\x26\x8d\xbe\xd4\xf8\xb4\x9d\x61\xfb\x50\x69\x60\x72\x40\xcc\x67\x82\xe8\xf5\x74\x30\x50\xa9\x51\x32\x7c\x72\xef\x45\xc7\xa1\x7c\x39\x84\x1d\x27\x94\x1c\xc7\xc5\xe0\x8e\x7e\xbd\x60\xd9\x87\xd1\x64\xa2\xca\xc0\x3d\xc7\x59\x9d\xbf\x3b\x5c\x67\xb3\x7e\xf1\xc5\x51\x70\xd8\x90\x24\xc7\xaa\xda\x68\xe6\x42\x6b\xbb\xb2\xf4\xf8\x72\xa1\xcb\xc7\xd3\x2c\x5a\x05\x92\x6f\x6a\xd0\x9e\xac\xf6\x89\x2b\xd3\xa8\xde\xda\x89\xeb\x71\x87\xec\x1d\x8a\x3d\x87\xac\xf6\x83\x86\xc5\xcb\xe8\x7f\x65\x7c\x04\x87\x89\x1b\x7c\xaf\xa6\xc2\xc1\x84\xa1\x6d\xd8\x29\x41\x0f\x56\x3c\xb3\x59\xbf\x2e\xd7\x30\x1c\x0f\x19\x59\xdd\x4b\x42\x8f\x69\x9a\x20\x61\xb0\x5d\xd2\x70\x29\xb3\x8c\xc8\x72\x55\x83\xeb\x55\x5b\xc2\x25\x14\xc7\x03\xac\x2b\x98\xe7\x83\x0b\x63\x53\x48\x9f\x14\x6f\xbf\xa9\x4b\xff\x78\xf5\x2a\xcd\x8a\x4f\x25\xc3\x14\x62\x92\x70\xb4\xc2\xdc\xcc\x1e\x70\xd4\x54\x59\xa5\xf2\x8d\xf1\xd4\xc4\x9d\x13\xa4\x51\xaf\xd0\x55\xdb\xeb\xd1\x67\xd4\xf6\x7a\xc3\x4f\xab\xed\x23\x74\xd6\xf6\x22\xed\x9d\x3c\xdd\xb3\xa6\xc9\xd6\x97\x29\xe3\xf9\x0a\x07\xaa\xfd\x97\x1c\x31\x6e\xa9\xfa\x67\xc9\xd8\x8b\xc4\x70\x4a\x1b\x17\xb1\xaf\x07\xd2\x3d\x05\x92\x43\xd2\x7e\x19\xfb\x5f\x09\x97\x4a\x9e\x0e\xbb\xa2\x5b\xa0\xba\xe5\xed\xd7\x64\xf2\xa3\x3b\x25\x37\xc8\xa6\x43\xb0\x69\x5d\x0e\xfc\xae\xa2\x83\xc5\xed\x8b\xc1\x33\xaa\x3e\xa9\x3e\x6d\x65\xe4\x45\x85\x46\x3b\xa9\xc5\xdb\x33\xf5\xed\x5d\xa3\xa0\x1a\x78\xf3\x06\x8a\x49\xdb\x7a\x07\x4b\xd7\x5a\x5b\xc6\x5e\x6c\xa9\x31\xd6\xfa\x39\x16\xeb\x5b\x4d\x7e\x36\x24\x53\x97\x3a\x57\xff\xa6\x67\x61\x69\x07\x8d\x4f\x63\xe8\x66\xe0\x5d\x6d\xa5\xb3\xfa\x9b\xb2\x79\xd7\xe4\x1d\x98\xc2\x98\xeb\xa1\x16\x54\x9d\x15\xc6\x03\x3a\x0b\xb7\x44\xee\xd5\xce\xbf\x8d\x1f\x3a\x5d\x36\xc7\x05\xda\xf6\x96\xe3\xe0\x1e\xd2\xf4\xd4\xd4\x32\x81\xfb\xd0\xda\x77\x45\xfd\x15\xec\x71\x10\x05\xdd\x38\x6c\xdf\x49\x7e\x33\x00\xf4\xe3\x02\x9e\x95\xa5\x94\xf0\xe9\x16\xce\x81\xac\xd7\xc8\x22\x2f\x4b\xb7\x53\x6d\xb0\x31\x89\xe0\xf0\x21\x6b\xc8\x1e\x2c\xcb\xb2\x74\xdb\x67\xe8\x3a\x52\x5f\x9f\xf5\x80\xb6\x03\xf6\x2d\x7b\x07\xec\xb3\x9a\x56\xff\x61\x46\xfa\xd5\xce\xd0\xb1\xf7\xa2\x9e\xcd\xf6\x66\xad\xf1\x1d\x90\x97\xe5\xa8\x9f\x69\xa5\x21\x0c\xbf\x3c\x29\xfd\x5f\x60\xa0\x5f\x77\xba\x3b\x7d\xa3\x3a\x35\x0a\x4d\x5c\x5d\x59\xd4\xd3\x9b\xce\x75\xb3\x19\x84\xd5\x88\x7d\x83\x0b\xad\x65\xf5\xfb\xcf\x9c\x09\xcc\x62\x12\xea\x47\xa0\xa1\x7b\x5d\xe7\x5a\x57\x53\xf2\x7c\x07\x19\x28\x2a\x41\xff\xea\x53\x52\x3d\x24\xeb\xa2\x79\xcd\x78\x9e\x51\xb6\x00\x5a\x51\xe0\x40\x19\x84\xe9\x6a\x4d\x13\x3c\x11\x74\x85\xd5\xcb\x81\xfd\x5a\x25\xcf\x76\x6f\xf2\x60\xbf\x38\xc1\x79\xc5\xcf\xac\x2a\x4a\xb3\xc0\x5c\x5b\x5d\x0b\x86\x6c\xf8\xe0\xd2\xcb\xbd\xdf\x28\xe3\xdb\x8a\x35\x6f\xa9\xb1\x7a\x4b\x9d\x37\xca\x35\xcf\xa9\x76\xeb\x63\x9d\x21\x57\x4e\x6a\x4f\x2c\x4c\x32\x15\x3f\xd6\x18\x98\x97\xce\xeb\x1d\x91\x3e\x3d\x95\xdf\x61\xe1\x4c\xa9\x55\xe7\xe2\x31\x8f\x7d\xb5\xac\x1b\x3a\x72\x4c\x7e\xd6\x84\xd1\xd0\x53\x38\x97\x43\x4a\x34\xe0\x5b\x2a\xc2\xa5\x7e\xc8\x58\x04\x9e\xe4\xad\x1b\x6a\x95\x4e\xa1\xba\x9d\xc6\xb6\xcd\x38\x9c\x68\xc5\x20\x24\x1c\x75\x1f\x20\x0c\xea\x70\x32\x1a\x87\x4d\xe4\x55\xd6\xaa\xb6\x45\x18\x93\x3c\x11\xa7\x46\xa4\x4d\x25\x50\xfd\xcc\xdc\x18\xa5\x46\x8a\xc9\x01\x16\x06\xea\xff\x8d\xcb\xd5\xff\x5d\xb4\xd6\x94\x26\x76\xaf\xa3\xc3\xa3\xd5\xf8\x20\xd9\x0f\x88\xf0\x84\x63\x46\x49\x42\xff\x45\xe4\xe5\xb3\x46\x65\x93\x94\x75\xf8\xb8\xc8\x49\x4f\xb4\xbb\x1e\x5e\xe7\x30\x56\x5d\x90\xba\x95\x14\xd5\x6e\x7d\xcc\xe3\xe0\x16\xf1\x69\x7e\x65\xb2\xe1\x50\x16\x6c\x72\x83\xda\x6b\xe5\x13\xe3\x4f\x1a\x59\x8f\x51\xfb\x3c\x69\x92\x8d\x72\x64\xcb\x8f\xba\x07\x72\x5a\xb3\xac\x6c\x27\xc3\xb7\xe3\xde\xa0\x5e\xb4\xa9\xd2\x7c\x68\x85\x4d\xff\xc0\xdb\x54\x47\x9a\xc4\xec\xe1\xd7\x20\xa5\xe6\xc1\x4c\x1f\x07\x7b\x12\x7a\xd9\x35\xdd\x5f\x9b\xa9\x4a\xad\x8e\xc4\x5c\xa1\xd3\x69\xed\x67\x8b\x21\x71\xf0\x19\xb7\x5f\x19\xee\xd6\x18\x0a\x8c\xe6\x57\x1e\x8d\xfc\xaa\x0f\xa4\xf3\x87\x95\x23\x2f\x13\x8a\x4c\x40\x84\x3c\xcc\xe8\x23\x72\xf8\x72\x7b\x09\x2b\x14\xcb\x34\xe2\x32\x93\xdf\xdf\x00\x0f\x97\xb8\x22\x81\x0e\x17\xb3\xde\x8e\x93\x26\x78\x57\xfa\x37\x21\xff\x30\xdb\xcd\x6f\x45\x56\x0d\x54\x43\xb1\x93\x21\x23\x70\x27\x24\x2e\xe4\x5f\xbb\x35\x45\xd4\xfe\x55\xf0\x3e\x5b\xe4\x3a\x40\x64\x0c\x4f\x95\xa2\xc4\xfe\xbd\x82\xcc\xab\xa4\xf3\x5b\x0a\xf3\xc3\x89\xba\x12\x22\x41\x33\x53\xeb\xac\x29\x19\x20\x55\x8e\x38\x51\x4d\x1e\xab\xaf\xbc\x0a\xbe\x20\xcf\x13\x11\x5c\x24\x84\x3d\xa9\x3c\xe2\x55\x55\x68\x3d\x37\x40\xbd\x9e\xaf\x7b\xb9\x3a\xfc\x9a\x6e\xba\x24\xa7\xc6\x26\x96\x00\x96\x5b\xca\x89\xed\xa4\x7f\x07\x00\x00\xff\xff\x5f\x3f\xb6\xa6\x84\x23\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 9092, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/header.tmpl": _templateHeaderTmpl,
	"_template/main.tmpl":   _templateMainTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"header.tmpl": &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":   &bintree{_templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
