// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/header.tmpl
// _template/main.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\xc1\x6a\xc3\x30\x10\x44\xef\xfb\x15\x8b\xe8\xc1\x86\x56\xfe\x82\x5e\xd2\xf4\xd0\x4b\x52\x68\xee\x45\xb6\x56\x8a\x70\xbd\x6b\xb6\xeb\xd2\x22\xf4\xef\x25\x24\xe4\x38\x33\x30\xef\xd5\x8a\x91\x52\x61\x42\x77\xa6\x10\x49\x1d\xb6\x06\xc3\x80\x2f\x12\x09\x33\x31\x69\x30\x8a\x38\xfe\x61\x16\x8b\x99\xf8\x11\xf7\x47\x3c\x1c\x4f\xf8\xba\x7f\x3b\x79\x80\x35\x4c\x73\xc8\x84\xb5\xe2\x83\x7f\xbf\x85\xd6\x00\xca\xb2\x8a\x1a\x76\xe0\x26\x61\xa3\x5f\x73\xe0\xd2\x62\x0e\xc0\xe5\x62\xe7\x6d\xf4\x93\x2c\x03\x29\x87\x28\x83\xc5\x61\x2c\xec\xa0\x87\x0b\xfc\x20\x4f\xb2\x5e\xc5\x8a\x15\x61\x4c\xa2\x38\x13\xad\x85\x33\x5e\x7f\xbf\x3d\xfc\x04\xc5\x4f\x7c\xc6\xb1\xb0\xdf\x6d\x29\x91\xd6\x76\x2f\x6f\x4c\xbf\x0b\xd3\x9c\x55\x36\x8e\x5d\x7f\x1f\xd3\x62\xfe\xc3\xb4\x70\x26\xed\xb8\x7c\xf5\x00\xb5\x22\x71\xbc\x88\xff\x07\x00\x00\xff\xff\x8f\x5b\x90\xf9\x13\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 275, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x5b\x6f\xd3\xca\x16\x7e\xcf\xaf\x58\x54\x85\x63\x1f\x52\x87\xe7\x96\x3e\x1c\x68\x39\x44\x42\x08\x51\xd8\x2f\x08\x55\x53\x7b\x39\x1d\xd5\x19\x47\x63\x3b\x29\xdb\xf2\x7f\xdf\x9a\x9b\x3d\xb6\xc7\x97\x56\xdd\x6c\xd8\x79\x72\xe6\xb2\xae\xdf\xac\xcb\x4c\x59\x42\x84\x31\x65\x08\x47\x5b\x42\xd9\x11\x54\xd5\xa2\x2c\xe1\x78\x77\xb7\x81\xd3\x73\x38\x0e\x3e\x91\xf0\x8e\x6c\x50\x8f\xe7\xb8\xdd\x25\x24\x47\x38\xba\x45\x12\x21\x3f\x82\x63\x31\x23\xa6\x38\x61\x1b\x84\xe3\x4c\xee\xba\xca\x79\x11\xe6\x99\x98\x5b\xad\x40\x10\xcc\x82\xb7\xe9\x76\x8b\x2c\x17\x63\xf9\x8f\x1d\xea\xd1\x8f\x64\x2b\x88\x43\x26\x77\x40\xb9\x28\xcb\x13\x43\x2b\x96\x22\x64\xc1\x3b\x8a\x49\x24\x89\x01\x00\x68\x82\xb1\x4d\x50\x6c\xa2\x31\x10\x16\x81\x27\x67\x58\x44\x73\x9a\x32\x92\xf8\xe0\xb1\x34\x87\xf6\xe0\x9b\x34\x4d\x7c\x25\x9c\x90\xef\x6b\x86\x70\x85\xb9\xa2\x6a\x04\x12\xb4\xfe\xdf\x1d\xbc\xc5\x64\x87\x3c\x0b\x24\x43\x64\x91\x91\x49\xf3\x3f\x8e\x83\x8b\xb4\xb8\x49\xf0\x2a\xa1\x21\x36\x93\x36\x89\x6f\xdf\xbf\x7d\x57\x23\x5f\x84\x15\x2c\x02\x98\x64\xa8\xa9\x8c\xee\x1f\xd9\xed\xdc\x31\xb0\x5e\x49\x6f\x7d\x56\x8b\xc6\x59\x7a\xaf\xd8\xb4\xbe\x00\x9a\xc1\x97\x0f\x20\xbd\x46\x23\x48\xe3\xf6\xa2\x60\x11\xa6\x2c\xcb\x9d\x3b\xcf\xe1\xd5\xbd\x1a\x7f\x8f\xf7\xeb\x0b\xa8\xaa\x33\xc9\xe5\x92\x85\x69\x84\x40\xb7\xbb\x04\x85\x13\x33\xb8\xa1\x2c\x50\xa3\x3c\x58\xc4\x05\x0b\xc1\x53\x1b\x3f\x63\x88\x74\x8f\x5c\xa8\xf2\xdf\x16\x0f\x5f\x93\xd1\x0b\xdf\x14\xf1\xff\xf8\x46\x2e\x13\xc4\xde\x14\x71\x8c\xdc\x07\xe4\x3c\xe5\x50\x4a\xc5\xa9\x11\xdd\x26\x7a\x7e\x0e\x8c\x26\x7a\x85\xf8\x71\xcc\x0b\xce\x20\xde\xe6\xc1\xa5\xd8\x1c\x7b\x47\x21\x61\xff\xc9\x01\x95\xd4\x9a\x04\x39\x68\x9b\x02\xc9\x04\x85\x23\x5f\x52\x50\x07\xc8\x12\x27\xf8\x54\xe4\xeb\x0b\xcf\x61\x1e\x7f\x1a\xed\x1a\x59\x6e\x0c\xf7\xe1\x67\x2d\x30\x93\x2e\x9d\x03\x73\x82\xea\xd5\x92\xab\x98\x79\x4f\x32\xaf\x37\xbb\x66\x11\xde\x4b\x8b\x97\x5d\x00\xb5\xf9\xff\x81\x61\x9e\x72\x1b\x87\x1d\x43\xa8\x05\xef\x65\xf4\xf0\x12\x64\x7d\x27\x07\x2d\xf4\xfa\xca\xa8\xb1\x70\x61\xa9\x99\x68\x98\x40\x55\xd1\x48\xa0\x4b\x43\xff\x5a\x7c\x4a\xa1\x96\xbd\x03\x59\xcb\xc5\xd3\x43\x59\x8a\x0d\x55\xb5\x2f\x4b\x64\x51\x55\x09\xbb\x2b\x1f\x4c\xc8\x62\x29\xef\xa4\x5d\x03\x68\x8e\xde\x3c\x3d\x68\xdd\x8c\x7e\xd7\x4b\xd8\x37\xb2\xf0\xf4\x30\x65\xec\xc6\x0e\x16\x67\x33\xb9\x66\x39\xf2\x98\x34\x61\xc4\xfc\x68\x0c\xfb\x3e\xe6\x07\x70\x5f\x30\x72\x93\x20\xe4\xe9\x10\xf6\x4f\x21\x96\xc8\x51\x86\xfa\x4c\x0e\xc6\x56\xa8\x0e\x36\x1c\x68\x7e\x0b\x54\xe2\xe7\x79\x24\x22\x89\x38\x29\x4b\xa0\xd1\xbd\xdf\x62\xde\xd6\x41\x3a\x66\x61\x89\x8c\x9c\x0b\xdb\xec\x03\xf7\x91\xf7\xcf\xe4\x8a\x67\xff\x8c\x5a\xa7\xf0\xfc\xa0\x74\x5a\x0a\x31\x1a\xc5\xdc\xe1\x79\x00\x22\x8a\xd7\x3b\x11\xfa\xaa\xca\xdb\xfb\xe3\xce\x1f\xc2\x5e\x2f\xc2\x0f\xcb\x31\x88\xa4\x11\x14\x8d\x44\x13\x63\xa2\x39\xf1\xf4\xf1\x0e\xa0\xed\x58\xdb\x07\x4c\x03\x96\x09\x41\x1f\x08\xa5\xa7\xd4\x42\x03\xa6\xc6\xca\x70\x1a\x1f\xc5\xc8\x54\xec\x1c\x42\x90\x13\x50\x8e\xd4\x31\xb8\xa3\x5f\x3c\x58\x16\x62\x34\x59\xc8\x9a\x70\x24\xb5\xd5\xb1\xbc\xc3\x75\xb5\xea\x57\x62\x19\xe6\x19\xec\x49\x52\xa0\x29\x3d\x9a\xb9\xd0\xda\x2e\x4d\x3d\xbf\x76\xe8\xf2\xf1\x14\x8b\x5a\xb2\x76\x25\xa7\xcb\x36\x47\x8d\xa6\xc6\xa5\x15\xda\xa5\x96\xaf\xab\xd9\x9e\xa2\x76\xea\x16\xd1\x58\xf1\xed\x84\x86\x79\xd9\xfa\x0a\xf3\x91\x6c\xad\x9c\xa8\x84\x7e\x1c\xfd\xaf\x2c\x9b\xc1\x61\xe1\x46\xee\x93\xa9\x30\x19\x71\x94\x0d\x3b\xc5\xec\x64\xe9\xb4\x5a\xf5\x2b\x7c\x85\xe1\xf9\x78\x13\x7d\x82\x20\x74\x93\xa6\x09\x12\x06\x87\x5b\x1a\xde\x8a\x20\x95\xf3\x42\x22\x45\xad\x3a\x90\x4c\xe0\x78\x3e\x3a\xbb\x82\x79\x3e\x3c\x01\x40\x5b\xf8\x5c\x42\x7a\x27\xe5\xf6\x9b\xea\xf8\xd9\x93\x97\x8a\x56\x60\x90\xf2\x2f\x21\x26\x49\x86\x56\x7c\xd1\xb3\x13\x4e\x5e\x4a\x8b\x1a\xbf\x6a\x2f\x2f\xdc\xc1\x48\x38\xe4\x02\x5d\x1d\x86\x1a\x7d\x40\x87\xa1\x36\xfc\xb4\x0e\x23\x42\x77\x87\x91\xa7\xbd\xac\xd7\xcd\x73\x4d\x9e\x78\x9b\xb2\xac\xd8\xe2\x40\xcf\xf1\x98\xf4\x36\x20\x56\x3f\x8d\xcd\xed\x67\x86\x03\xe2\xbc\xf3\xfe\x74\x30\x1d\xa9\xd0\x1c\x92\xf6\x6b\xe9\xbf\xe5\xc0\x18\x79\x3a\xec\xca\x6e\x8d\xec\x96\xb7\x5f\x14\x8a\x9f\xba\xb1\xf9\x80\x6c\x39\x84\x9b\x56\x8f\xe2\x77\x15\x1d\xac\xaf\x1f\x8f\x9e\x79\xc5\x91\xf9\xb5\xd5\x11\x1d\x13\x8d\xee\x85\x1e\xaf\xce\xe4\xd7\xeb\x46\x45\x39\xf0\xf2\x25\x94\x8b\xb6\xfd\x26\xab\xe7\x5a\x5f\xc6\x1e\x6d\xab\x39\xf6\xfa\x59\x36\xeb\xdb\x4d\xfc\xf6\x84\xcb\xfe\xd2\x75\x97\xd4\xb3\xb1\xb0\x84\xc2\xa8\x36\x75\x33\xf0\xba\xb6\xd3\x59\xfd\x25\xad\xde\x35\x7a\x07\xaa\x30\xaf\x53\x55\xa2\xca\x9c\xa1\xbd\xa0\xa2\xb1\x12\xba\xde\xd6\xae\x86\x9b\x3a\xfe\x37\x72\x4a\xe7\xfa\xcf\xd1\xd8\xdb\xae\xab\xeb\x80\x11\xd7\x59\x2d\xb3\x58\x1d\xb8\xf3\xd8\x58\xdb\xfc\x6b\x58\x64\x12\x12\xdd\x83\xd9\xee\x90\x7e\x3b\x10\xf4\x0f\x0a\x3c\x28\x70\x49\xf1\xd3\x03\x9c\x03\xd9\xed\x90\x45\x1e\x4f\x0f\x4b\x65\xb2\x39\x91\x61\x3a\xf3\x6a\xb2\x93\xd5\x1a\x4f\x0f\x7d\x86\xae\x3c\xfb\xf4\xac\x07\xb4\x1d\xb0\x6f\xd5\xcb\xba\x0f\xbc\x50\x7b\xaa\x10\xf5\xeb\xe5\xd8\xb9\x7d\x57\xcf\x80\xa3\x61\x6c\xfe\x05\xcd\xe3\x82\xd6\xcf\xb5\xd3\x10\xa4\x1f\x1f\xa5\xfe\x25\x38\xe8\x57\xa7\xee\x0b\xc9\x59\x57\x49\x12\x51\x59\xfb\x0c\xae\x56\x20\x1f\x9e\xe4\xc3\xa1\xd5\xe7\xd5\x83\x29\x6f\xde\xaa\xec\x9d\xc3\xdd\x5f\xa7\xf9\xab\x29\x79\xbe\x83\x0c\x94\x46\xcc\x17\x7d\x4a\xf2\x8a\xcb\x6a\x47\x2f\x59\x56\x70\xca\x36\x40\x0d\x85\x0c\x28\x83\x30\xdd\xee\x68\x82\x27\x39\xdd\xa2\x79\xe4\xb0\x5f\xd6\x44\xba\xf7\x16\xd7\xf6\xeb\x18\x9c\x1b\x7e\x7a\x55\x59\xe9\x05\xba\xb9\x75\x2d\x70\x5b\xf0\xda\xa5\x95\x7b\xb7\x56\xc5\xb7\xd5\x6a\x5e\x7d\x63\xf9\xea\xbb\x6e\x54\x6b\x1e\x7e\xed\xab\x95\x1d\xc7\x4c\xba\xa8\x86\xa1\xe9\x6f\x37\xc8\x90\xd3\x50\xbe\x31\x06\xfa\x59\xf6\xf2\x9e\x08\xa7\x9e\x8a\x6f\xd8\x38\x03\xac\x39\x40\x37\x45\xec\xcb\x65\xdd\xb3\x23\xc6\xc4\x6f\x47\x18\x0d\x3d\x09\x73\x31\x24\xa5\x83\xec\x40\xf3\xf0\x56\x3d\xba\x6c\x02\x4f\xf0\x56\x77\x76\x46\xad\x50\xb6\xb0\xb2\x5b\x33\x88\xca\xe0\x44\xe9\x06\x21\xc9\x50\x5d\x17\x84\x41\x7d\x9a\xb4\xd2\xa1\xa5\x9b\xb1\x98\xd9\x17\x61\x4c\x8a\x24\x3f\xd5\x32\xed\x8d\x44\xf5\xa3\x78\x63\xb1\x1a\x2b\x3a\x0a\x58\x28\xa8\xff\x6b\xa7\xcb\xff\x5d\xbc\xd6\x94\x16\xf6\x9d\x48\xcb\x74\x9d\x0b\x12\xc2\x7f\x40\x84\x27\x19\x72\x4a\x12\xfa\x27\x11\x2d\x6a\x8d\xcb\x26\x30\xab\x03\xe4\x22\x27\x5c\xd1\xbe\x1d\xf1\x3a\xd9\x59\xde\x96\xd4\x57\x4e\x51\xed\xd7\x9b\x22\x0e\x3e\x21\xde\xad\x2f\x74\x3c\x1c\x8a\x83\x4d\x6c\x90\x7b\xad\x78\xa2\x1d\x4a\x23\xeb\xe5\x6c\xcc\x95\x3a\xd8\x48\x4f\xb6\x1c\xa9\xae\x4a\x4e\x6b\x96\xc6\x76\xe2\x00\x77\xfd\x1b\xd4\xab\xf6\x26\xd2\x87\xd6\xd9\xe9\x67\xbd\xbd\xc9\x6b\x02\xb5\xd3\xef\x56\x52\xcf\xc9\x60\x1f\x07\x23\x11\xbd\xea\xda\xee\xc5\x7e\x29\x63\xab\x23\x32\x1b\x78\x3a\xcd\xfd\x60\x31\x04\x10\x3e\xe2\xe1\x2b\xc3\xfb\x1d\x86\x39\x46\xeb\x0b\x8f\x46\xbe\xb9\x2e\x52\x41\xc4\x8a\x27\xfa\xf3\xaf\x00\x00\x00\xff\xff\xdf\xec\xf6\xd5\x97\x22\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 8855, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/header.tmpl": _templateHeaderTmpl,
	"_template/main.tmpl":   _templateMainTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"header.tmpl": &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":   &bintree{_templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
