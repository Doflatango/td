// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/header.tmpl
// _template/main.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xce\x31\x4e\x03\x31\x10\x85\xe1\x7e\x4e\xf1\x64\x51\x80\x04\xf6\x09\x68\x20\x14\x34\x09\x45\x7a\xe4\x5d\x8f\x1d\x2b\xda\x19\xcb\x4c\x10\xc8\xf2\xdd\x51\x14\xca\xd7\xbc\xff\x1b\x03\x89\x73\x15\x86\x3b\x71\x4c\xdc\x1d\xe6\xa4\x10\xf0\xaa\x89\x51\x58\xb8\x47\xe3\x84\xe5\x17\x45\x2d\x15\x96\x47\xec\x0e\xd8\x1f\x8e\x78\xdb\xbd\x1f\x3d\x51\x8b\xeb\x39\x16\xc6\x18\xb8\xf3\x1f\xff\x63\x4e\xa2\xba\x35\xed\x86\x7b\x72\xab\x8a\xf1\x8f\x39\x72\x79\x33\x47\xe4\x4a\xb5\xd3\x65\xf1\xab\x6e\x81\xbb\xc4\xa4\xc1\x52\x58\xaa\x38\x7a\xa0\x6b\x7c\xaf\x4f\xda\x6e\xb0\x6a\x55\x05\x59\x3b\xce\xcc\xad\x4a\xc1\xed\xf7\xcb\xd3\x77\xec\xf8\xc4\x33\x96\x2a\xfe\xe5\x92\x33\xf7\x31\x89\xc6\x00\x4b\xba\x0a\xfe\x02\x00\x00\xff\xff\xbd\x55\x2c\xdb\xdc\x00\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 220, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\xdd\x6f\xdb\x36\x10\x7f\xf7\x5f\x71\x0d\xd2\x4e\x5a\x1d\xb9\xcf\xee\xf2\xd0\x7c\xb4\x35\x90\x15\x41\x93\xee\x65\x18\x0a\x46\x3a\xd9\x44\x24\xca\x10\x29\xc7\x9d\xe1\xff\x7d\xe0\x97\x44\x49\x94\xed\x64\x59\xd7\x4d\x2f\x71\xf8\x71\x9f\xbf\x3b\xde\x91\x9b\x0d\x24\x98\x52\x86\x70\xc4\x69\xbe\xcc\xf0\x08\xb6\xdb\xd1\x66\x03\xc7\xcb\xfb\x39\x4c\x4f\xe1\x38\xba\x26\xf1\x3d\x99\xa3\x19\x17\x98\x2f\x33\x22\x10\x8e\x16\x48\x12\x2c\x8f\xe0\x58\xce\xc8\xa9\x92\xb0\x39\xc2\x31\x57\xbb\x6e\x44\x59\xc5\x82\xcb\xb9\xc9\x04\x24\x41\x1e\x9d\x17\x79\x8e\x4c\xc8\x31\xf1\x6d\x89\x66\xf4\x13\xc9\x25\x71\xe0\x6a\x07\x6c\x46\x9b\xcd\x89\xa5\x95\x2a\x11\x78\xf4\x9e\x62\x96\x28\x62\x00\x00\x86\x60\xea\x12\x94\x9b\x68\x0a\x84\x25\x10\xa8\x19\x96\x50\x41\x0b\x46\xb2\x10\x02\x56\x08\x68\x0f\x9e\x15\x45\x16\x6a\xe1\xa4\x7c\x5f\x38\xc2\x0d\x0a\x4d\xd5\x0a\x24\x69\x7d\xe8\x0e\x2e\x30\x5b\x62\xc9\x23\xc5\x10\x59\x62\x65\x32\xfc\x8f\xd3\xe8\x26\xa3\x31\x36\xc3\xee\xe6\xdf\xff\xd0\xff\xdf\x4a\xed\x9d\x8d\x98\xf1\x81\x1d\x03\xeb\x35\x5f\xe7\xe7\x76\xd4\x98\xd9\xec\x95\x9b\x66\x17\x40\x39\xdc\x5e\x81\xb2\x37\x4d\xa0\x48\xdb\x8b\xa2\x51\x5c\x30\x2e\xbc\x3b\x4f\xe1\xcd\x5a\x8f\x7f\xc4\xf5\xec\x02\xb6\xdb\xb7\x8a\xcb\x25\x8b\x8b\x04\x41\xc1\x45\x9a\x9f\xc3\x1d\x65\x91\x1e\x2d\xa3\x51\x5a\xb1\x18\x02\xbd\xf1\x33\xc6\x48\x57\x58\x4a\x55\x7e\x6e\xf1\x08\x0d\x19\xb3\xf0\xac\x4a\xdf\x95\x73\xb5\x4c\x12\x3b\xab\xd2\x14\xcb\x10\xb0\x2c\x8b\x12\x36\x4a\x71\x6a\x45\x77\x89\x9e\x9e\x02\xa3\x99\x59\x21\xbf\x12\x45\x55\x32\x48\x73\x11\x5d\xca\xcd\x69\x70\x14\x13\xf6\x93\x00\xd4\x52\x6b\x12\xb7\x57\xc6\xa4\x40\xb8\x24\x70\x14\x2a\x02\x1a\xf9\x8e\x34\xd1\x75\x25\x66\x17\x81\xc7\x3a\xe1\x7e\x98\x1a\x48\xf8\xc1\xd7\xc7\x8d\xb3\xc0\x4e\xfa\x54\x8e\x2c\xf4\xeb\xd5\x8a\xab\x9c\xf9\x48\x78\xd0\x9b\x9d\xb1\x04\xd7\xca\xe0\x9b\x2e\x7e\xda\xfc\x7f\xc3\x58\x14\xa5\x0b\xc3\x8e\x21\xf4\x82\x8f\x2a\xec\x83\x0c\x59\xdf\xc7\x51\x0b\xbc\xa1\x36\x6a\x2a\x3d\xb8\x31\x4c\x0c\x4a\x60\xbb\xa5\x89\x04\x97\x41\xfe\x57\xf9\x53\x09\x35\x86\x95\x34\xa6\x36\xec\x1e\x06\x8e\x46\x5d\xea\x35\x1e\x9a\xc9\x0f\xc8\xb0\xa4\xb1\x3b\x69\x6c\xbc\xea\xc3\x68\x00\x4a\x15\x23\x77\x19\x82\x28\x06\xe0\x34\x85\x54\x39\xc3\x84\xed\x95\x15\x14\x75\xa4\xc0\x03\x15\x0b\xa0\xca\x23\x2f\x13\x19\x9a\x12\x7b\x63\xa0\xc9\x3a\x6c\xb1\x6e\xcb\x8f\x2c\x71\x84\xa6\xa9\x0c\x0b\x69\xa4\x55\xe4\x8f\xa1\xf0\xad\x5a\xf1\xe2\xdf\x50\x6a\x0a\x2f\x1f\xb4\x46\x63\x29\x44\xa3\x96\x3f\xdb\x0d\x40\x4d\xb3\x7a\x2f\x33\xc9\x76\x1b\xac\x42\x1f\x72\x87\xd2\xe7\x00\x18\x06\x81\xb0\x23\xc8\xac\xa6\x87\x64\x99\xa7\x5a\x91\xb6\x13\x50\xdf\xe7\x8d\xbf\xf7\x88\xf9\x48\x34\x3c\x9f\x0e\xc6\xe7\xb5\xbb\x87\x0f\xb6\x9d\x6e\xde\x97\x4e\x86\xd2\x97\x37\x9b\x79\xb2\xe9\xe0\x8e\xfe\x71\xea\xd8\x87\xd1\x6c\xa4\xea\x9b\x1d\xd9\xbe\x4e\x6f\x1d\xae\x93\x49\xbf\xaa\xe0\x28\x38\xac\x48\x56\xa1\x3d\x8c\x9b\xb9\xd8\xd9\xae\x2c\x7d\xf8\x69\xda\xe5\x13\x68\x16\xad\xfa\x21\x34\xc5\x55\x4f\x56\xf7\x40\x92\xf9\x50\x6f\xed\x04\xe8\x61\x67\xd0\x0d\x8a\x1d\x67\x90\xf6\x83\x86\xc5\xd3\xe8\x7f\x61\xfc\x00\x0e\x23\x3f\xf8\x9e\x4d\x85\xbd\x09\x43\xdb\xb0\x53\xa1\xed\x2d\x08\x26\x93\x7e\xc1\xa9\x61\x78\x38\x64\x64\xd9\x2a\x09\xdd\x15\x45\x86\x84\xc1\xc3\x82\xc6\x0b\x99\x65\x44\x59\xa1\x64\xaf\x57\x3d\x10\x2e\xa1\x78\x38\xc0\xba\x82\x05\x21\xf8\x30\x36\x86\xe2\x5e\xf1\x0e\x9b\xb2\xed\xc5\xb3\x17\x31\x4e\x7c\x2a\x19\xc6\x90\x92\x8c\xa3\x13\xe6\x66\x76\x8f\xa3\xc6\xca\x2a\xd6\x37\xc6\x53\x23\x7f\x4e\x90\x46\xbd\x40\x5f\xe9\xab\x47\x1f\x51\xfa\xea\x0d\xdf\xad\xf4\x4d\xd0\x5b\xfa\x8a\xa2\x77\xf2\x74\xcf\x9a\x26\x5b\x9f\x17\x8c\x57\x39\x0e\x14\xc3\x4f\x39\x62\xfc\x52\xf5\xcf\x92\x43\xeb\xec\xe1\x94\x76\x58\xc4\x3e\x1f\x48\x77\x54\x3a\x1e\x49\xfb\xf5\xe8\x3f\x12\x2e\x56\x9e\x0e\xbb\x4d\xb7\xd2\xf4\xcb\xdb\x6e\x0e\xec\xa7\xaf\x00\xae\x90\x8d\x87\x60\xd3\xea\x19\xc2\xae\xa2\x83\x55\xea\x93\xc1\x73\x50\x7d\x62\xbf\xb6\x32\xb2\x4f\xa1\xc9\x5a\x6a\xf1\xe6\xad\xfa\xf5\x4b\xa3\xa0\x1a\x78\xfd\x1a\x36\xa3\xb6\xf5\xf6\x75\x17\xf2\x33\x19\xca\x58\x48\xc7\x7e\x2b\x67\xf6\x2a\xb6\x1e\x89\x7d\xb6\xfa\x3e\xf6\xea\xdb\xac\x06\xf9\x60\xff\xd5\x18\xa1\x04\xcf\x71\x31\xa4\xe9\xd4\x9c\xa0\x91\x3f\x55\xee\xea\x70\x7e\x04\x7b\xec\x45\x41\x37\x4e\xda\x95\xf0\x7f\x0c\x00\xed\xa4\xd1\x4c\xed\xcb\xb8\x64\xb9\x44\x96\xec\xab\xfb\xc7\xda\x74\x3b\x1b\xe4\xc1\x3c\x3b\x10\x96\x7f\x33\x24\x7f\xb4\xd4\x75\x68\x39\xda\xb3\xd9\xce\xb0\x3d\xbc\xf1\x7c\x5a\x90\x7e\x4f\x2b\xf9\x50\xd2\x07\xc2\x63\xa2\xf2\x7f\x81\x81\xfe\x71\xef\xbf\x60\x39\xa8\x41\x56\x68\xe2\xaa\x52\x54\x57\xf9\xba\x5e\x98\x4c\x20\xb6\x23\x6e\xe1\x1c\x3b\xcb\xea\x5b\xe9\x19\x13\x58\xa6\x24\xd6\x57\xd3\x43\xe5\x74\xa7\x9a\xae\x29\x05\xa1\x87\x0c\x6c\xac\xa0\xaf\xfa\x94\x54\xeb\xee\xd4\xf7\x97\x8c\x57\x25\x65\x73\xa0\x96\x02\x07\xca\x20\x2e\xf2\x25\xcd\xf0\x44\xd0\x1c\xed\x7d\xa6\x7b\x87\x2e\x0f\xb7\x60\xf4\xd5\xbd\x07\x87\x53\xcb\xcf\xac\xda\x6c\xcd\x02\xd3\x2d\xf8\x16\x0c\xd9\xf0\xab\x4f\x2f\xff\x7e\xa3\x4c\xe8\x2a\xd6\xbc\xcd\xa4\xea\x6d\x66\xd6\x28\xd7\x3c\xcf\xb8\x1d\xe7\xb2\x44\xae\x9c\xd4\x9e\x98\x9b\x64\x2a\xbe\x2d\x31\x32\x2f\x27\x97\x6b\x22\x7d\x3a\x95\xbf\x61\xee\x4d\xa9\xb6\x61\xbc\xab\xd2\x50\x2d\xeb\x86\x8e\x1c\x93\xdf\x92\x30\x1a\x07\x0a\xe7\x72\x48\x89\x06\xfc\x81\x8a\x78\xa1\x6f\x85\xe7\x51\x20\x79\xeb\x7b\x0c\xab\x53\xac\x9a\x82\xd4\xb5\x19\x87\x13\xad\x18\xc4\x84\xa3\x6e\xbf\xe2\xa8\x0e\x27\xa3\x71\xdc\x44\x9e\xb5\x96\xdd\x96\x60\x4a\xaa\x4c\x4c\x8d\x48\x2b\x2b\x50\xfd\x6c\xd5\x18\xa5\x46\x8a\xc9\x01\x0e\x06\xea\xff\x8d\xcb\xd5\xff\x5d\xb4\xd6\x94\x46\x6e\x8b\xd9\xe1\xd1\xea\x37\x49\xf9\x0d\x12\x3c\xe1\x58\x52\x92\xd1\x3f\x89\xac\xf9\x6b\x54\x36\x49\x59\x87\x8f\x8f\x9c\xf4\x44\xbb\xd9\x0c\x3a\x27\xae\x6a\x3e\xeb\x0e\x3e\xa9\xdd\x7a\x57\xa5\xd1\x35\xe2\xfd\xec\xc2\x64\xc3\xa1\x2c\xd8\xe4\x06\xb5\xd7\xc9\x27\xc6\x9f\x34\x71\x6e\xef\x77\x79\xd2\x24\x1b\xe5\xc8\x96\x1f\x75\xeb\x39\xad\x59\x5a\xdb\xc9\xf0\xed\xb8\x37\xaa\x17\xad\x6c\x9a\x8f\x9d\xb0\xe9\x1f\x78\x2b\x7b\xa4\x49\xcc\xee\xbf\x4d\x57\x6a\xee\xcd\xf4\x69\xb4\x23\xa1\x6f\xbb\xa6\x7b\xb5\x1a\xab\xd4\xea\x49\xcc\x16\x9d\x5e\x6b\x3f\x5a\x0c\x89\x83\x4f\xf8\xf0\x85\xe1\x7a\x89\xb1\xc0\x64\x76\x11\xd0\x24\xb4\xed\xb7\xce\x1f\x4e\x8e\x3c\xcf\x28\x32\x01\x09\xf2\xb8\xa4\x77\xc8\xe1\xf3\xf5\x39\xe4\x28\x16\x45\xc2\x65\x26\xbf\xbd\x02\x1e\x2f\x30\x27\x91\x0e\x17\xb3\xde\x8d\x93\x26\x78\x73\xfd\xc6\xfc\xab\xd9\x6e\xde\x9e\xf3\x06\xaa\xb1\x58\xcb\x90\x11\xb8\x16\x12\x17\xf2\xaf\x7b\x23\x40\xd4\xfe\x3c\x7a\x57\xce\x2b\x1d\x20\x32\x86\xc7\x4a\x51\xe2\xbe\xa2\xca\xbc\x4a\xea\xb7\x59\xf5\x10\xab\x75\xd2\x2b\x0d\x50\xac\xa1\x4f\x54\xef\xec\x5c\xd7\xe5\xd1\x67\xe4\x55\x26\xa2\xb3\x8c\xb0\x7b\x95\x27\x02\x5b\x65\xd6\x73\x03\xd4\xeb\xf9\xfa\x8a\x4c\x87\x57\x73\x49\x29\xc9\xa9\xb1\x91\x23\x80\x63\xf6\xed\xc8\x75\xc2\x5f\x01\x00\x00\xff\xff\xd8\xdf\xfa\xcb\xb4\x1f\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 8116, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/header.tmpl": _templateHeaderTmpl,
	"_template/main.tmpl":   _templateMainTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"header.tmpl": &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":   &bintree{_templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
