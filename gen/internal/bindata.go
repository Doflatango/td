// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/header.tmpl
// _template/main.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xce\x31\x4e\x03\x31\x10\x46\xe1\x7e\x4e\xf1\xcb\xa2\x00\x09\xec\x13\xd0\x40\x28\x68\x12\x8a\xf4\xc8\xbb\x9e\x9d\x58\x21\x33\xab\x89\x83\x16\x59\x7b\x77\x14\x25\xe5\xab\xde\xd7\x3b\x0a\x4f\x55\x19\xe1\xc0\xb9\xb0\x07\xac\x2b\xa5\x84\x77\x2b\x0c\x61\x65\xcf\x8d\x0b\x86\x3f\x88\xb5\x22\xac\xcf\xd8\xec\xb0\xdd\xed\xf1\xb1\xf9\xdc\x47\xa2\x39\x8f\xc7\x2c\x8c\xde\xf1\x10\xbf\xee\xb1\xae\x44\xf5\x34\x9b\x37\x3c\x52\x18\x4d\x1b\x2f\x2d\x10\x05\xb1\x9f\xac\x12\xcd\x25\x2d\x69\x61\x77\xf3\x73\xa0\x20\xb5\x1d\x2e\x43\x1c\xed\x94\xd8\x35\x17\x4b\xad\xa4\xa1\x6a\xa0\x27\xba\x6a\xb6\xf6\x62\xf3\x4d\x5a\x5b\x35\xc5\x64\x8e\x23\xf3\x5c\x55\x70\x1b\x9d\x23\xfd\x66\xc7\x37\x5e\x31\x54\x8d\x6f\x97\x69\x62\xef\x2b\x51\xef\x60\x2d\x57\xd2\x7f\x00\x00\x00\xff\xff\xf3\x8d\xc7\x6c\xed\x00\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 237, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x4d\x6f\xdb\x38\x13\xbe\xfb\x57\x4c\x83\xb4\xaf\xf4\xd6\x91\x7b\x4e\x37\x87\xe6\xa3\xad\x81\x6c\x11\xb4\xe9\x5e\x16\x8b\x82\x91\x46\x36\x11\x99\x32\x44\xca\x71\x57\xf0\x7f\x5f\xf0\x4b\xa2\x24\xca\x72\xd3\x6c\xb7\xbb\xba\xc4\xa1\xc8\xe1\x7c\x3c\xf3\x70\x86\xaa\x2a\x48\x30\xa5\x0c\xe1\x88\xd3\xd5\x3a\xc3\x23\xd8\xed\x26\x55\x05\xc7\xeb\xfb\x05\x9c\x9e\xc1\x71\x74\x43\xe2\x7b\xb2\x40\x33\x2e\x70\xb5\xce\x88\x40\x38\x5a\x22\x49\xb0\x38\x82\x63\xf9\x46\xbe\x2a\x08\x5b\x20\x1c\x73\xb5\xea\x93\x28\xca\x58\x70\xf9\x6e\x36\x03\x29\x90\x47\x17\xf9\x6a\x85\x4c\xc8\x31\xf1\x75\x8d\x66\xf4\x03\x59\x49\xe1\xc0\xd5\x0a\xa8\x26\x55\x75\x62\x65\xa5\x4a\x05\x1e\xbd\xa5\x98\x25\x4a\x18\x00\x80\x11\x98\xba\x02\xe5\x22\x9a\x02\x61\x09\x04\xea\x0d\x4b\xa8\xa0\x39\x23\x59\x08\x01\xcb\x05\xb4\x07\xcf\xf3\x3c\x0b\xb5\x72\x52\xbf\xcf\x1c\xe1\x13\x0a\x2d\xd5\x2a\x24\x65\xbd\xeb\x0e\x2e\x31\x5b\x63\xc1\x23\xb5\x21\xb2\xc4\xea\x64\xf6\x3f\x4e\xa3\xdf\x30\x16\x79\xd1\x8c\xbb\xab\x7f\xff\x43\xff\x7f\x2b\xcd\x77\x56\x62\xc6\xd1\xbf\x62\x60\xbe\xde\xd8\xf9\xb9\x9b\x34\x7e\x36\x6b\xe5\xa2\xf9\x25\x50\x0e\xb7\xd7\xa0\x1c\x4e\x13\xc8\xd3\xf6\xa4\x68\x12\xe7\x8c\x0b\xef\xca\x33\x78\xb5\xd5\xe3\xef\x71\x3b\xbf\x84\xdd\xee\xb5\xda\xe5\x8a\xc5\x79\x82\xa0\xf0\x22\xfd\xcf\xe1\x8e\xb2\x48\x8f\x16\xd1\x24\x2d\x59\x0c\x81\x5e\xf8\x11\x63\xa4\x1b\x94\xee\x80\xff\xb7\xf6\x08\x8d\x18\x33\xf1\xbc\x4c\xdf\x14\x0b\x35\x4d\x0a\x3b\x2f\xd3\x14\x8b\x10\xb0\x28\xf2\x02\x2a\x65\x38\xb5\xaa\xbb\x42\xcf\xce\x80\xd1\xcc\xcc\x90\x4f\x81\xa2\x2c\x18\x6c\xd5\x4a\x1e\x5d\xc9\x3f\x69\x70\x14\x13\xf6\x3f\x01\xa8\x35\xd7\x62\x6e\xaf\x8d\x5b\x81\x70\x29\xe4\x28\x54\x42\x34\xfc\x1d\x8d\xa2\x9b\x52\xcc\x2f\x03\x8f\x87\xc2\x71\xac\x1a\x5c\xf8\x11\xd8\x07\x8f\x33\xc1\xbe\xf4\x99\x1d\x59\xfc\xd7\xb3\xd5\xae\xf2\xcd\x7b\xc2\x83\xde\xdb\x39\x4b\x70\xab\x9c\x5e\x75\x31\x34\x06\xde\x8e\x23\xf4\x84\xf7\x2a\xf7\x83\x0c\x59\x3f\xce\x51\x0b\xc0\xa1\x76\x6a\x2a\xa3\x58\x99\x4d\xde\x21\xc3\x82\xc6\xb0\xdb\xd1\x44\x02\xcc\xa0\xff\x8b\xfc\xa9\x94\x9a\xc2\x46\x3a\x53\x3b\x76\x64\x03\xc7\x22\x2d\xdd\xe0\xd0\xda\xd0\x7e\xd9\x6c\x5d\xbf\x34\x3e\xde\xf4\xa1\xb4\x07\x4e\x25\x23\x77\x19\x82\xc8\x07\x20\x75\x0a\xa9\x0a\x88\x49\xdf\x6b\xab\x2c\xea\x8c\x81\x07\x2a\x96\x40\x55\x54\x9e\x27\x32\x45\x25\xfe\xa6\x40\x93\x6d\xd8\xda\xbe\x6d\x03\xb2\xc4\x51\x9c\xa6\x32\x3d\xa4\xa3\x36\x91\x3f\x97\xc2\xd7\x6a\xc6\xb3\x7f\xca\xb0\x53\x78\xfe\xa0\xad\x9a\x4a\x45\x1a\xd3\xfc\xcc\x37\x00\x39\xbd\xd5\x5b\xc9\x2a\xbb\x5d\xb0\x09\x7d\x08\x1e\xa2\xd2\x01\x50\x0c\x02\x62\x4f\xb2\x59\x4b\xc7\x18\xe7\x03\x3e\x3c\xde\x8d\xb4\xcd\x44\xfd\xc0\x37\x41\x1f\xd1\xf3\x1b\x21\xf1\xb4\x70\x30\x81\xaf\x63\x3e\x7c\xd2\xed\x8d\xf5\x18\xb7\x0c\x71\x99\x97\xda\x3c\xd4\x3a\xb8\xa2\x7f\xbe\x3a\x3e\x62\x34\x9b\xa8\x8a\x67\x0f\xf5\xd7\x5c\xd7\xd9\x75\x36\xeb\xd7\x19\x1c\x05\x87\x0d\xc9\x4a\xb4\xa7\x73\xf3\x2e\x76\x96\x2b\x4f\x1f\x7e\xbc\x76\xf7\x09\xf4\x16\xad\x82\x22\x34\xe5\x56\x4f\x57\xf7\x74\x92\xe4\xa8\x97\x76\xb2\xf4\xb0\x03\xe9\x13\x8a\x3d\x07\x92\x8e\x83\x86\xc5\xe3\xe4\x7f\x66\xfc\x80\x1d\x26\x7e\xf0\x3d\x99\x09\xa3\xac\xa1\x7d\xd8\x29\xd9\x46\xab\x83\xd9\xac\x5f\x82\x6a\x18\x1e\x0e\x19\x59\xc8\x4a\x41\x77\x79\x9e\x21\x61\xf0\xb0\xa4\xf1\x52\x32\x8d\x28\x4a\x94\xdb\xeb\x59\x0f\x84\x4b\x28\x1e\x0e\xb0\xae\x62\x41\x08\x3e\x8c\x4d\x21\xbf\x57\x7b\x87\x4d\x1d\xf7\xec\xc9\x2b\x1a\x27\x3f\x95\x0e\x53\x48\x49\xc6\xd1\x49\x73\xf3\x76\x24\x50\x53\xe5\x15\x1b\x1b\x13\xa9\x89\x9f\x13\xa4\x53\x2f\xd1\x57\x0b\xeb\xd1\x6f\xa8\x85\xf5\x82\x1f\x5a\x0b\x27\xe8\xad\x85\x45\xde\x3b\x81\xba\x67\x4e\xc3\xd8\x17\x39\xe3\xe5\x0a\x07\xaa\xe3\xc7\x1e\x35\x7e\xcd\xfa\x67\xca\xa1\xc5\xf7\x30\xb5\x1d\x96\xb9\x4f\x07\xd6\x3d\x65\x8f\x47\xd3\x7e\x91\xfa\xb7\xa4\x8d\xd5\xa7\xb3\x5d\xd5\x2d\x3d\xfd\xfa\xb6\x3b\x06\xfb\xe8\xcb\x81\x6b\x64\xd3\x21\xe8\xb4\x1a\x89\xb0\x6b\xe8\x60\xd9\xfa\x5d\x00\x3a\xa8\x56\xb1\x4f\xdb\x20\xd9\xc0\xd0\x64\x2b\x2d\x79\xf5\x5a\xfd\xfa\xa5\x31\x52\x0d\xbc\x7c\x09\xd5\xa4\xed\xc1\xb1\xb6\x43\x3e\x86\xad\x8c\x97\x34\x0f\xb4\xf8\xb3\x57\xc1\xf5\x44\x8c\xf9\xeb\xc7\xf9\xac\xef\xb7\x1a\xec\x83\xcd\x59\xe3\x88\x02\x3c\xc7\xc7\x90\xb5\xa7\xe6\x44\x8d\xfc\xd4\xb9\xaf\xf5\xf9\x59\x7c\x32\x8a\x86\x6e\xce\xb4\xab\xe3\x7f\x21\x10\xda\x24\xd2\xbc\x1a\x63\x60\xb2\x5e\x23\x4b\xc6\xfa\x81\xa9\x76\xdf\xde\x0e\x7a\x90\x77\x07\x52\xf4\x3b\xd3\xf3\x67\xa4\xb2\x43\x4b\xd5\x9e\xdf\xf6\xa6\xf0\xe1\x8d\xe9\xe3\x12\xf6\x47\x7b\xca\x87\x96\x3e\x20\xbe\x25\x43\xff\x33\x58\xe8\x97\x02\xfe\x9b\x98\x83\x9a\x68\x85\x2a\xae\x2a\x49\xf5\x01\x40\xd7\x12\xb3\x19\xc4\x76\xc4\x2d\xae\x63\x67\x5a\x7d\x95\x3d\x67\x02\x8b\x94\xc4\xfa\x3e\x7b\xa8\xe4\xee\x54\xdc\xb5\xa4\x20\xf4\x88\x81\xca\x2a\xfa\xa2\x2f\x49\xb5\xf7\x4e\x0f\x70\xc5\x78\x59\x50\xb6\x00\x6a\x25\x70\xa0\x0c\xe2\x7c\xb5\xa6\x19\x9e\x08\xba\x42\x7b\x01\xea\x5e\xbc\xcb\x03\x2f\x98\x7c\x71\x2f\xcf\xe1\xcc\xee\x67\x66\x55\x3b\x33\xc1\x74\x14\xbe\x09\x43\x3e\xfc\xe2\xb3\xcb\xbf\xde\x18\x13\xba\x86\x35\x5f\x74\x52\xf5\x45\x67\xde\x18\xd7\x7c\xd4\x71\xbb\xd2\x75\x81\x5c\x05\xa9\xfd\x62\x61\x88\x55\x7c\x5d\x63\x64\xbe\xb7\x5c\x6d\x89\x8c\xe9\xa9\xfc\x0d\x0b\x2f\xbd\xda\xa6\xf2\xae\x4c\x43\x35\xad\x9b\x3e\x72\x4c\x3e\x6b\xc2\x68\x1c\x28\x9c\xcb\x21\xa5\x1a\xf0\x07\x2a\xe2\xa5\xbe\x46\x5e\x44\x81\xdc\x5b\xdf\x75\x58\x9b\x62\xd5\x30\xa4\xae\xcf\x38\x9c\x68\xc3\x20\x26\x1c\x75\x8b\x16\x47\x75\x3a\x19\x8b\xe3\x26\xf3\xac\xb7\xec\xb2\x04\x53\x52\x66\xe2\xd4\xa8\xb4\xb1\x0a\xd5\x1f\xbb\x1a\xa7\xd4\x48\x31\x3c\xe0\x60\xa0\xfe\xdf\x84\x5c\xfd\xdf\x45\x6b\x2d\x69\xe2\xb6\xa1\x9d\x3d\x5a\x3d\x29\x29\xbe\x42\x82\x27\x1c\x0b\x4a\x32\xfa\x27\x91\xfd\x40\x8d\xca\x86\x9c\x75\xfa\xf8\xc4\xc9\x48\xb4\x1b\xd2\xa0\x73\xfa\x2a\xe2\xaa\xbb\xfc\xa4\x0e\xeb\x5d\x99\x46\x37\x88\xf7\xf3\x4b\xc3\x88\x43\x4c\xd8\x70\x83\x5a\xeb\xf0\x89\x89\x27\x4d\x9c\xeb\xfe\x7d\x91\x34\x64\xa3\x02\xd9\x8a\xa3\x6e\x4d\x4f\xeb\x2d\xad\xef\x64\xfa\x76\xc2\x1b\xd5\x93\x36\x96\xea\x63\x27\x6d\xfa\x07\xdf\xc6\x1e\x6d\x12\xb3\xe3\x57\xef\xca\xcc\x83\xd8\x3e\x8d\xf6\x90\xfa\xae\xeb\xbe\x17\x9b\xa9\xa2\x57\x0f\x39\x5b\x84\x7a\x3d\xfe\x28\x55\x24\x1e\x3e\xe0\xc3\x67\x86\xdb\x35\xc6\x02\x93\xf9\x65\x40\x93\xd0\xb6\xe8\x9a\x47\x1c\xae\xbc\xc8\x28\x32\x01\x09\xf2\xb8\xa0\x77\xc8\xe1\xe3\xcd\x05\xac\x50\x2c\xf3\x84\x4b\x46\xbf\xbd\x06\x1e\x2f\x71\x45\x22\x9d\x36\x66\xbe\x9b\x2f\x4d\x12\xaf\xf4\x17\xea\x5f\xcd\x72\xf3\xe5\x7a\xd5\x40\x36\x16\x5b\x99\x3a\x02\xb7\x42\xe2\x43\xfe\x75\x6f\x0d\x88\x5a\xbf\x8a\xde\x14\x8b\x52\x27\x8a\xcc\xe5\xa9\x32\x94\xb4\x3e\xc1\x12\x5b\xee\x59\x87\x9e\xa8\x1e\xda\xb9\xbe\x5b\x45\x1f\x91\x97\x99\x88\xce\x33\xc2\xee\x15\x27\x04\x5a\x1b\x33\x5e\x5f\x87\xe9\x34\x69\x2e\x24\xe5\x54\x35\x36\x71\x84\x3b\x6e\xdb\x4d\x5c\x27\xfe\x15\x00\x00\xff\xff\x8a\x7e\x5c\x88\xb2\x1f\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 8114, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/header.tmpl": _templateHeaderTmpl,
	"_template/main.tmpl":   _templateMainTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"header.tmpl": &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":   &bintree{_templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
