// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/header.tmpl
// _template/main.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\xc1\x6a\xc3\x30\x10\x44\xef\xfb\x15\x8b\xe8\xc1\x86\x56\xfe\x82\x5e\xd2\xf4\xd0\x4b\x52\x68\xee\x45\xb6\x56\x8a\x70\xbd\x6b\xb6\xeb\xd2\x22\xf4\xef\x25\x24\xe4\x38\x33\x30\xef\xd5\x8a\x91\x52\x61\x42\x77\xa6\x10\x49\x1d\xb6\x06\xc3\x80\x2f\x12\x09\x33\x31\x69\x30\x8a\x38\xfe\x61\x16\x8b\x99\xf8\x11\xf7\x47\x3c\x1c\x4f\xf8\xba\x7f\x3b\x79\x80\x35\x4c\x73\xc8\x84\xb5\xe2\x83\x7f\xbf\x85\xd6\x00\xca\xb2\x8a\x1a\x76\xe0\x26\x61\xa3\x5f\x73\xe0\xd2\x62\x0e\xc0\xe5\x62\xe7\x6d\xf4\x93\x2c\x03\x29\x87\x28\x83\xc5\x61\x2c\xec\xa0\x87\x0b\xfc\x20\x4f\xb2\x5e\xc5\x8a\x15\x61\x4c\xa2\x38\x13\xad\x85\x33\x5e\x7f\xbf\x3d\xfc\x04\xc5\x4f\x7c\xc6\xb1\xb0\xdf\x6d\x29\x91\xd6\x76\x2f\x6f\x4c\xbf\x0b\xd3\x9c\x55\x36\x8e\x5d\x7f\x1f\xd3\x62\xfe\xc3\xb4\x70\x26\xed\xb8\x7c\xf5\x00\xb5\x22\x71\xbc\x88\xff\x07\x00\x00\xff\xff\x8f\x5b\x90\xf9\x13\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 275, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5b\x6f\xe3\x36\x16\x7e\xf7\xaf\x38\x0d\xd2\xae\xb4\x75\xe4\x3e\x27\xcd\x43\x73\x69\xc7\x40\xb6\x08\x26\x99\x7d\x29\x06\x01\x23\x1d\xd9\x44\x24\xca\x10\x29\xdb\xb3\x82\xfe\xfb\x82\x37\x89\xba\xd9\x4a\x36\x3b\x3b\xb3\x7e\x19\x0d\x2f\x87\xe7\xf2\xf1\xe3\xe1\x61\xca\x12\x22\x8c\x29\x43\x38\x49\x09\x65\x27\x50\x55\xb3\xb2\x84\xd3\xcd\xcb\x0a\xce\x2f\xe1\x34\xb8\x27\xe1\x0b\x59\xa1\x69\x17\x98\x6e\x12\x22\x10\x4e\xd6\x48\x22\xcc\x4f\xe0\x54\xf6\xc8\xae\x9c\xb0\x15\xc2\x29\x57\xb3\x1e\x44\x5e\x84\x82\xcb\xbe\xc5\x02\xa4\x40\x1e\x5c\x67\x69\x8a\x4c\xc8\x36\xf1\x65\x83\xa6\xf5\x4f\x92\x4a\xe1\xc0\xd5\x0c\x28\x67\x65\x79\x66\x65\xc5\x4a\x05\x1e\xfc\x4e\x31\x89\x94\x30\x00\x00\x23\x30\x76\x05\xca\x49\x34\x06\xc2\x22\xf0\x54\x0f\x8b\xa8\xa0\x19\x23\x89\x0f\x1e\xcb\x04\xb4\x1b\xaf\xb2\x2c\xf1\xb5\x72\x52\xbf\x4f\x1c\xe1\x01\x85\x96\x6a\x15\x92\xb2\xfe\xe8\x36\xae\x31\xd9\x60\xce\x03\xb5\x20\xb2\xc8\xea\x64\xd6\x3f\x8d\x83\x9b\xac\x78\x4e\xf0\x21\xa1\x21\x36\x9d\xae\x88\xbf\x3e\xff\xf5\x59\xb7\x3c\x4a\x2f\x38\x02\x30\xe1\x68\xa4\x1c\x9c\x7f\x60\xf6\xe0\x8c\x91\xf1\x5a\x7b\xe7\xb3\x9a\x35\xc1\x32\x73\xe5\xa4\xe5\x0d\x50\x0e\x8f\x77\xa0\xa2\x46\x23\xc8\xe2\xf6\xa0\x60\x16\x66\x8c\x8b\xc1\x99\x97\xf0\xcb\x5e\xb7\x7f\xc0\xfd\xf2\x06\xaa\xea\x42\xad\x72\xcb\xc2\x2c\x42\xa0\xe9\x26\x41\x19\x44\x0e\xcf\x94\x05\xba\x35\x0f\x66\x71\xc1\x42\xf0\xf4\xc4\x8f\x18\x22\xdd\x62\x2e\x4d\xf9\x7b\x6b\x0d\xdf\x88\x31\x03\xaf\x8a\xf8\xb7\x7c\xa5\x86\x49\x61\x57\x45\x1c\x63\xee\x03\xe6\x79\x96\x43\xa9\x0c\xa7\x56\x75\x57\xe8\xe5\x25\x30\x9a\x98\x11\xf2\x97\xa3\x28\x72\x06\x71\x2a\x82\x5b\x39\x39\xf6\x4e\x42\xc2\xfe\x26\x00\xb5\xd6\x5a\xc4\xe3\x9d\x71\x29\x10\x2e\x05\x9c\xf8\x4a\x80\xde\x3f\x8e\x36\xc1\x7d\x21\x96\x37\xde\x80\x77\xfc\xe3\x60\x37\xc0\x1a\x86\x70\x1f\x7d\xce\x00\xdb\x39\x64\x72\x60\x37\x50\x3d\x5a\xad\x2a\x7b\x3e\x10\xee\xf5\x7a\x97\x2c\xc2\xbd\x72\x78\xd9\xc5\x4f\x7b\xfd\x7f\x62\x28\xb2\xdc\x85\x61\xc7\x11\x7a\xc0\x07\x45\x1e\x5e\x82\xac\x1f\xe3\xa0\x05\x5e\x5f\x3b\x35\x96\x11\x2c\xcd\x22\x06\x25\x50\x55\x34\x92\xe0\x32\xc8\x7f\x92\x9f\x4a\xa9\x79\x6f\x3f\xd6\x7a\xe5\xd9\xae\x2c\xe5\x84\xaa\xda\x96\x25\xb2\xa8\xaa\xa4\xdf\x75\x0c\x8e\xe8\xe2\x18\x3f\x28\xbb\xc6\xcf\x14\xbb\xf3\x6c\x67\x6c\xb3\xf6\x3d\xcd\x61\xdb\xe8\x92\x67\xbb\x63\xce\x6e\xfc\xe0\xac\x6c\x3b\xff\x40\x86\x39\x0d\xdd\x4e\x83\x86\x6d\x1f\xf0\x23\xa0\x2f\x18\x79\x4e\x10\x44\x36\x02\xfc\x73\x88\x15\x6c\x0c\xc1\xdc\x59\x3f\xa1\xde\xd3\xb0\xa3\x62\x0d\x54\x61\xe7\xc7\x48\x92\x88\xdc\x25\x73\xa0\xd1\xde\x6f\x2d\xdd\xd6\x5f\x05\x65\xe6\x28\x8c\x79\x2e\xfd\xb2\x0d\x86\x77\xbb\x7f\xa1\x46\xfc\xf0\xbf\x30\xea\x1c\x7e\xdc\x69\x8b\xe6\x52\x89\xc6\xac\x61\x5e\x1e\x01\x87\x5e\xea\x77\xc9\x79\x55\xe5\x6d\xfd\xc3\x61\x1f\x43\x5d\x8f\xda\xc7\xf5\x18\xc5\xd0\x28\x7e\x0e\xb0\x88\x75\xd0\x14\x1a\x7d\xab\xf3\x69\x9b\x61\xfb\x50\x69\x60\x72\x44\xcd\x57\x82\xe8\xfd\x6c\x30\x50\xa9\x51\x32\x7e\x72\x1f\x44\xc7\x31\xbe\x1c\xc3\xce\x20\x94\x06\x8e\x8b\xd1\x19\xfd\x7c\xc1\xf1\x0f\xa3\xc9\x4c\xa5\x81\x07\x8e\xb3\x9a\xbf\x3b\xab\x2e\x16\xfd\xe4\x8b\xa3\xe0\xb0\x25\x49\x81\x36\xdb\x68\xfa\x42\x67\xba\xf2\xf4\xf4\x74\xa1\xbb\x8e\xa7\x97\xa8\x35\x6b\x27\x6f\x26\x53\x1b\x48\xcb\x74\xbb\xf2\x42\x3b\xbb\xf2\x4d\x02\xdb\x33\xd4\x3d\xae\x25\x07\xeb\x75\x3b\xa4\x30\xed\x84\x7e\x40\x71\xe0\x84\xd6\x41\xd4\x4a\xbf\x4d\xfe\x27\xc6\x27\xac\x30\x1b\x46\xee\xbb\x99\x70\x94\x6d\xb4\x0f\x3b\xf9\xeb\xd1\x74\x69\xb1\xe8\x27\xf5\x1a\xc3\xd3\xf1\x26\xaf\x06\x52\xd0\x73\x96\x25\x48\x18\xec\xd6\x34\x5c\x4b\x8a\x12\x79\xa1\x90\xa2\x47\xed\x08\x97\x38\x9e\x8e\xce\xae\x62\x9e\x0f\xef\x00\xd0\x16\x3e\xe7\x90\xbd\x28\xbd\xfd\x26\x21\xfe\xe1\xdd\xd3\x43\x87\x18\x94\xfe\x73\x88\x49\xc2\xd1\xe1\x17\xd3\x7b\x24\xc8\x73\xe5\x51\x1b\x57\x13\xe5\xd9\x30\x19\xc9\x80\xdc\xe0\xd0\xa5\x42\xb7\xbe\xe2\x52\xa1\x27\x7c\xb5\x4b\x45\x84\x83\x97\x0a\x91\xf5\x8e\xbc\xee\x21\xd7\x1c\x13\xd7\x19\xe3\x45\x8a\x23\xd7\x8c\xb7\x9c\x6d\xc3\x5a\xf5\x0f\xb1\xa9\x37\x98\x71\x3a\x9c\xb6\xdb\xdf\x0f\xa4\x07\x32\xb3\x01\x4d\xfb\xf9\xf3\x7f\x65\xbb\x58\x7d\x3a\xcb\x95\xdd\xcc\x78\x58\xdf\x7e\x32\x28\x7f\xba\x44\x73\x87\x6c\x3e\x06\x9b\xd6\xad\xc4\xef\x1a\x3a\x9a\x55\xbf\x19\x3c\x93\x12\x23\xfb\x6b\x1b\x23\x6f\x48\x34\xda\x4b\x2b\x7e\xb9\x50\x5f\xbf\x36\x06\xaa\x86\x9f\x7f\x86\x72\xd6\xf6\xde\xd1\x9c\xb9\xb6\x96\xb1\x37\x7b\x6a\x8a\xb7\xbe\x8e\xc7\xfa\x5e\x93\xbf\x2d\xc9\xd5\x6d\x72\xa8\x70\xd4\xf3\xb0\xf4\x83\xc6\xa7\x71\x74\xd3\xf0\x6b\xed\xa5\x8b\xfa\x4b\xf9\xbc\xeb\xf2\x0e\x4c\x61\xca\xbd\x54\x2b\xaa\xce\x0a\x13\x01\xcd\xc2\x2d\x95\x7b\x49\xfb\x77\x13\x87\x4e\x79\x6f\xe0\xe6\xee\x46\xab\x3e\xf4\x0f\x44\xcb\xb9\x17\xcb\xd1\xc1\xf0\xa1\x75\xe8\x6e\xfc\x2d\xf8\xe3\x28\x0a\xba\xfb\xb0\x7d\x19\xfa\xce\x00\xd0\xdf\x17\xf0\x2a\x96\x52\xca\x67\x3b\xb8\x04\xb2\xd9\x20\x8b\xbc\x3c\xdb\xcd\xb5\xc3\xa6\x10\xc1\xf1\x43\xd6\x88\x3d\x9a\x96\xe5\xd9\xae\xbf\xe0\xd0\x91\xfa\xfe\x4b\x8f\x58\x3b\xe2\xdf\xaa\x77\xc0\xbe\xaa\x5a\xf6\x1f\x32\xd2\xb7\x76\x86\x4e\xbd\x53\xf5\x7c\x76\x90\xb5\xa6\x97\x5e\xde\xc6\x51\x5f\xd3\x4b\x63\x18\x7e\x3b\x29\xfd\x5f\x60\xa0\x9f\x77\x0e\x97\x18\x27\x95\x88\x14\x9a\xb8\xba\xb2\xa8\x37\x3f\xcd\x75\x8b\x05\x84\xb6\xc5\xbd\xc1\x85\xce\xb0\xfa\xe1\x69\xc9\x04\xe6\x31\x09\xf5\xeb\xd3\xd8\xbd\xae\x73\xad\xab\x25\x79\xfe\x80\x18\x28\xad\xa2\x3f\xf5\x25\xa9\xe2\x95\x73\xd1\xbc\x65\xbc\xc8\x29\x5b\x01\xb5\x12\x38\x50\x06\x61\x96\x6e\x68\x82\x67\x82\xa6\x68\x9f\x2c\xdc\x67\x32\x79\xb6\x7b\xb3\x27\xf7\xa9\x0b\x2e\xed\x7a\x66\x54\x59\x99\x01\xe6\xda\x3a\x34\x60\xcc\x87\x4f\x43\x76\x0d\xcf\x37\xc6\xf8\xae\x61\xcd\x23\x6e\xac\x1e\x71\x97\x8d\x71\xcd\x3b\xae\x5b\x36\xd9\xe4\xc8\x55\x90\xda\x1d\x2b\x43\xa6\xe2\xcb\x06\x03\xf3\xc4\x7a\xbb\x27\x32\xa6\xe7\xf2\x1b\x56\x83\x94\x6a\xab\x1e\xcf\x45\xec\xab\x61\xdd\xad\x23\xdb\xe4\x6f\x43\x18\x0d\x3d\x85\x73\xd9\xa4\x54\x03\xbe\xa3\x22\x5c\xeb\x17\x94\x55\xe0\xc9\xb5\x75\x31\xce\xda\x14\xaa\xdb\x69\xec\xfa\x8c\xc3\x99\x36\x0c\x42\xc2\x51\xd7\x01\xc2\xa0\xde\x4e\xc6\xe2\xb0\xd9\x79\xd6\x5b\x76\x5a\x84\x31\x29\x12\x71\x6e\x54\xda\x5a\x85\xea\xf7\xed\xc6\x29\x35\x52\x0c\x07\x38\x18\xa8\xff\x6f\x42\xae\xfe\xdf\x45\x6b\x2d\x69\xe6\xd6\x3a\x3a\x6b\xb4\x0a\x1f\x24\xff\x02\x11\x9e\x71\xcc\x29\x49\xe8\xbf\x88\xbc\x7c\xd6\xa8\x6c\x48\x59\x6f\x9f\x21\x71\x32\x12\xed\xaa\x87\xd7\x39\x8c\x55\x15\xa4\x2e\x25\x45\x75\x58\x9f\x8b\x38\xb8\x47\x7c\x59\xde\x18\x36\x1c\x63\xc1\x86\x1b\xd4\x5c\x87\x4f\x4c\x3c\x69\xe4\xbc\x82\x1d\x8a\xa4\x21\x1b\x15\xc8\x56\x1c\x75\x0d\xe4\xbc\x5e\xd2\xfa\x4e\x6e\xdf\x4e\x78\x83\x7a\xd0\xd6\xd2\x7c\xe8\x6c\x9b\xfe\x81\xb7\xb5\x47\x9a\xc4\xec\xf1\x67\x28\x65\xe6\x51\xa6\x8f\x83\x03\x84\x5e\x75\x5d\xf7\xd3\x76\xae\xa8\x75\x80\x98\x2d\x3a\x07\xbd\xfd\x6a\x35\x24\x0e\xfe\xc4\xdd\x27\x86\xfb\x0d\x86\x02\xa3\xe5\x8d\x47\x23\xdf\xd6\x81\x34\x7f\x38\x54\x22\x19\x2a\xf8\x78\x7f\x6d\xb8\xe3\x3a\xa1\xc8\x04\x44\xc8\xc3\x9c\x3e\x23\x07\xd9\x95\xa2\x58\x67\x11\x97\xc4\xfe\x78\x07\x3c\x5c\x63\x4a\x02\xbd\x7b\xcc\x78\x77\xdb\x34\x7b\x39\xd5\x7f\x9b\xf2\x0f\x33\xdd\xfc\xcd\x4a\xda\x20\x37\x14\x7b\xb9\x83\x04\xee\x85\x84\x89\xfc\xd7\xad\x54\x11\x35\x3f\x0d\x7e\xcb\x57\x85\xde\x2f\x72\x4b\xcf\x95\xdd\xc4\xfd\xbb\x09\x69\x04\x39\x52\x75\x25\x63\x55\x57\x62\xb3\x44\x1b\x97\x33\x55\xf3\x71\x4a\xd4\x69\xf0\x11\x79\x91\x88\xe0\x2a\x21\xec\x45\xd1\x8a\x67\x93\xd2\xba\x6f\x44\x7a\xdd\x5f\x97\x76\xf5\x6e\x6c\x0a\xf3\x52\x9c\x6a\x9b\x39\x0a\x38\x51\xaa\x66\xdd\x98\x99\xcf\x7f\x07\x00\x00\xff\xff\x0a\x6e\x7b\xdd\x15\x24\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 9237, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/header.tmpl": _templateHeaderTmpl,
	"_template/main.tmpl":   _templateMainTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"header.tmpl": &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":   &bintree{_templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
