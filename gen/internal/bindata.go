// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/header.tmpl
// _template/main.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xce\xc1\x4a\x73\x31\x10\xc5\xf1\xfd\x3c\xc5\x21\x74\xf1\x7d\xa0\xc9\x13\xb8\xb1\x75\xe1\xa6\x2d\xd2\xbd\xe4\xde\x4c\xd2\x50\xee\xcc\x25\xa6\xa2\x0c\x79\x77\x29\x15\x5c\x1e\x38\xf0\xff\x99\x21\x71\xae\xc2\x70\x67\x8e\x89\x9b\xc3\x18\x14\x02\xb6\x9a\x18\x85\x85\x5b\xec\x9c\x30\x7d\xa3\x68\x4f\x85\xe5\x01\xbb\x03\xf6\x87\x13\x5e\x76\xaf\x27\x4f\xb4\xc6\xf9\x12\x0b\xc3\x0c\x1b\x7f\xfc\x1d\x63\x10\xd5\x65\xd5\xd6\xf1\x8f\xcc\x50\x33\x36\xfe\xed\xb8\xc5\x18\x6e\x56\xe9\xfc\xd5\x9d\x19\x58\xd2\xed\xea\xf2\xd2\x1d\x91\x2b\xb5\x9f\xaf\x93\x9f\x75\x09\xdc\x24\x26\x0d\x3d\x85\xa9\x8a\xa3\xff\x74\x33\xed\xf5\x51\xd7\xbb\xb7\xf6\xaa\x82\xac\x0d\x17\xe6\xb5\x4a\xc1\x3d\xf7\xe1\xe9\x33\x36\xbc\xe3\x09\x53\x15\xff\x7c\xcd\x99\x9b\x0d\xa2\xbf\xda\x4f\x00\x00\x00\xff\xff\x9c\xb3\x66\xf1\xf3\x00\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 243, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x4b\x6f\xe3\x38\x12\xbe\xfb\x57\xd4\x04\x99\x59\x69\xc7\x91\xe7\x9c\x4c\x0e\x93\xc7\x4c\x1b\xc8\x0e\x82\x4e\x7a\x2f\x83\x46\xc0\x48\x25\x9b\x88\x44\x19\x22\x65\xbb\x57\xd0\x7f\x5f\xf0\x21\x89\x92\x28\x5b\xc9\x66\x7b\xbb\xd7\x97\x38\x7c\xd4\xf3\xab\x62\xb1\xe8\xb2\x84\x08\x63\xca\x10\x4e\x52\x42\xd9\x09\x54\xd5\xac\x2c\xe1\x74\xf3\xb2\x82\xf3\x4b\x38\x0d\xee\x49\xf8\x42\x56\x68\xc6\x05\xa6\x9b\x84\x08\x84\x93\x35\x92\x08\xf3\x13\x38\x95\x33\x72\x2a\x27\x6c\x85\x70\xca\xd5\xae\x07\x91\x17\xa1\xe0\x72\x6e\xb1\x00\x49\x90\x07\xd7\x59\x9a\x22\x13\x72\x4c\x7c\xd9\xa0\x19\xfd\x93\xa4\x92\x38\x70\xb5\x03\xca\x59\x59\x9e\xd5\xb4\x62\x25\x02\x0f\x7e\xa7\x98\x44\x8a\x18\x00\x80\x21\x18\xdb\x04\xe5\x26\x1a\x03\x61\x11\x78\x6a\x86\x45\x54\xd0\x8c\x91\xc4\x07\x8f\x65\x02\xba\x83\x57\x59\x96\xf8\x5a\x38\x29\xdf\x27\x8e\xf0\x80\x42\x53\xad\x05\x92\xb4\xfe\xe8\x0f\xae\x31\xd9\x60\xce\x03\xc5\x10\x59\x54\xcb\x64\xf8\x9f\xc6\xc1\x4d\x56\x3c\x27\xf8\x90\xd0\x10\xdb\x49\x9b\xc4\x5f\x9f\xff\xfa\xac\x47\x1e\xa5\x15\x2c\x02\x98\x70\x34\x54\x0e\xee\x3f\xb0\xdb\xb9\x63\x64\xbd\x96\xde\xfa\x5a\xcd\x5a\x67\x99\xbd\x72\xd3\xf2\x06\x28\x87\xc7\x3b\x50\x5e\xa3\x11\x64\x71\x77\x51\x30\x0b\x33\xc6\x85\x73\xe7\x25\xfc\xb2\xd7\xe3\x1f\x70\xbf\xbc\x81\xaa\xba\x50\x5c\x6e\x59\x98\x45\x08\x34\xdd\x24\x28\x9d\xc8\xe1\x99\xb2\x40\x8f\xe6\xc1\x2c\x2e\x58\x08\x9e\xde\xf8\x11\x43\xa4\x5b\xcc\xa5\x2a\x7f\xef\xf0\xf0\x0d\x19\xb3\xf0\xaa\x88\x7f\xcb\x57\x6a\x99\x24\x76\x55\xc4\x31\xe6\x3e\x60\x9e\x67\x39\x94\x4a\x71\x5a\x8b\x6e\x13\xbd\xbc\x04\x46\x13\xb3\x42\x7e\x72\x14\x45\xce\x20\x4e\x45\x70\x2b\x37\xc7\xde\x49\x48\xd8\xdf\x04\xa0\x96\x5a\x93\x78\xbc\x33\x26\x05\xc2\x25\x81\x13\x5f\x11\xd0\xf1\x63\x49\x13\xdc\x17\x62\x79\xe3\x39\xac\xe3\x1f\x07\xbb\x01\x96\x1b\xc2\x43\xf4\x59\x0b\xea\x49\x97\xca\x41\x1d\x40\xcd\x6a\xc5\x55\xce\x7c\x20\xdc\x1b\xcc\x2e\x59\x84\x7b\x65\xf0\xb2\x8f\x9f\x2e\xff\x7f\x62\x28\xb2\xdc\x86\x61\xcf\x10\x7a\xc1\x07\x95\x3c\xbc\x04\xd9\xd0\xc7\x41\x07\xbc\xbe\x36\x6a\x2c\x3d\x58\x1a\x26\x06\x25\x50\x55\x34\x92\xe0\x32\xc8\x7f\x92\x5f\x95\x50\xf3\x41\x3c\x36\x72\xe5\xd9\xae\x2c\xe5\x86\xaa\xda\x96\x25\xb2\xa8\xaa\xa4\xdd\xb5\x0f\x8e\xc8\x62\x29\xef\xa4\xdd\xe0\x67\x8a\xde\x79\xb6\x33\xba\xd5\xfa\x3d\xcd\x61\xdb\xca\x92\x67\xbb\x63\xc6\x6e\xed\x60\x71\xae\x27\xff\x40\x86\x39\x0d\xed\x49\x83\x86\xed\x10\xf0\x23\xa0\x2f\x18\x79\x4e\x10\x44\x36\x02\xfc\x73\x88\x15\x6c\x4c\x82\xb9\xab\xed\x84\x3a\xa6\x61\x47\xc5\x1a\xa8\xc2\xce\x8f\x91\x4c\x22\x32\x4a\xe6\x40\xa3\xbd\xdf\x61\xdd\x95\x5f\x39\x65\x66\x09\x8c\x79\x2e\xed\xb2\x0d\xdc\xd1\xee\x5f\xa8\x15\x3f\xfc\x2f\x94\x3a\x87\x1f\x77\x5a\xa3\xb9\x14\xa2\x55\xcb\x9d\x97\x47\xc0\xa1\x59\xfd\x2e\x73\x5e\x55\x79\x5b\xff\xb0\xdb\xc7\x50\x37\x48\xed\xe3\x72\x8c\x62\x68\x14\x3f\x07\xb2\x48\x6d\xa0\x29\x69\xf4\xad\xc6\xa7\xdd\x0c\x3b\x84\x4a\x0b\x93\x23\x62\xbe\x12\x44\xef\xa7\x83\x81\x4a\x83\x92\xf1\x93\xfb\x20\x3a\x8e\xe5\xcb\x31\xec\x38\xa1\xe4\x38\x2e\x46\x77\x0c\xeb\x05\xcb\x3e\x8c\x26\x33\x55\x06\x1e\x38\xce\x9a\xfc\xdd\xe3\xba\x58\x0c\x8b\x2f\x8e\x82\xc3\x96\x24\x05\xd6\xd5\x46\x3b\x17\x5a\xdb\x95\xa5\xa7\x97\x0b\x7d\x3e\x9e\x66\xd1\x29\x90\x7c\x53\x83\x0e\x64\xb5\x4f\x5c\x99\x46\xf5\xd6\x5e\x5c\x4f\x3b\x64\x1f\x50\x1c\x38\x64\xb5\x1f\x34\x2c\xde\x46\xff\x13\xe3\x13\x38\xcc\xdc\xe0\x7b\x37\x15\x8e\x26\x0c\x6d\xc3\x5e\x09\x7a\xb4\xe2\x59\x2c\x86\x75\xb9\x86\xe1\x74\xc8\xc8\xea\x5e\x12\x7a\xce\xb2\x04\x09\x83\xdd\x9a\x86\x6b\x99\x65\x44\x5e\xa8\x1a\x5c\xaf\xda\x11\x2e\xa1\x38\x1d\x60\x7d\xc1\x3c\x1f\x5c\x18\x9b\x43\xf6\xa2\x78\xfb\x6d\x5d\xfa\xc3\xbb\x57\x69\x56\x7c\x2a\x19\xe6\x10\x93\x84\xa3\x15\xe6\x66\xf6\x88\xa3\xe6\xca\x2a\xb5\x6f\x8c\xa7\x66\xee\x9c\x20\x8d\x7a\x83\xae\xda\x5e\x8f\xbe\xa2\xb6\xd7\x1b\xbe\x5a\x6d\x1f\xa1\xb3\xb6\x17\xd9\xe0\xe4\xe9\x9f\x35\x6d\xb6\xbe\xce\x18\x2f\x52\x1c\xa9\xf6\xdf\x72\xc4\xb8\xa5\x1a\x9e\x25\x53\x2f\x12\xe3\x29\x6d\x5a\xc4\xbe\x1f\x48\x0f\x14\x48\x0e\x49\x87\x65\xec\x7f\x25\x5c\x6a\x79\x7a\xec\xca\x7e\x81\xea\x96\x77\x58\x93\xc9\x8f\xee\x94\xdc\x21\x9b\x8f\xc1\xa6\x73\x39\xf0\xfb\x8a\x8e\x16\xb7\x6f\x06\xcf\xa4\xfa\xa4\xfe\x74\x95\x91\x17\x15\x1a\xed\xa5\x16\xbf\x5c\xa8\x6f\xbf\xb6\x0a\xaa\x81\x9f\x7f\x86\x72\xd6\xb5\xde\xd1\xd2\xb5\xd1\x96\xb1\x37\x5b\x6a\x8a\xb5\xbe\x8e\xc5\x86\x56\x93\x9f\x2d\xc9\xd5\xa5\xce\xd5\xbf\x19\x58\x58\xda\x41\xe3\xd3\x18\xba\x1d\xf8\xb5\xb1\xd2\x45\xf3\x4d\xd9\xbc\x6f\xf2\x1e\x4c\x61\xca\xf5\x50\x0b\xaa\xce\x0a\xe3\x01\x9d\x85\x3b\x22\x0f\x6a\xe7\xef\xc6\x0f\xbd\x2e\x9b\xe3\x02\x6d\x7b\xcb\x71\x70\x8f\x69\x7a\x6e\x6a\x99\xc0\x7d\x68\x1d\xba\xa2\x7e\x0b\xf6\x38\x8a\x82\x7e\x1c\x76\xef\x24\xdf\x19\x00\x86\x71\x01\xaf\xca\x52\x4a\xf8\x6c\x07\x97\x40\x36\x1b\x64\x91\x97\x67\xbb\xb9\x36\xd8\x94\x44\x70\xfc\x90\x35\x64\x8f\x96\x65\x79\xb6\x1b\x32\x74\x1d\xa9\xef\xcf\x7a\x44\xdb\x11\xfb\x56\x83\x03\xf6\x55\x4d\xab\xff\x30\x23\x7d\x6b\x67\xe8\xd4\x7b\xd1\xc0\x66\x07\xb3\xd6\xf4\x0e\xc8\xdb\x72\xd4\xd7\xb4\xd2\x18\x86\xdf\x9e\x94\xfe\x2f\x30\x30\xac\x3b\xdd\x9d\xbe\x49\x9d\x1a\x85\x26\xae\xae\x2c\xea\xe9\x4d\xe7\xba\xc5\x02\xc2\x7a\xc4\xbe\xc1\x85\xd6\xb2\xe6\xfd\x67\xc9\x04\xe6\x31\x09\xf5\x23\xd0\xd8\xbd\xae\x77\xad\x6b\x28\x79\xbe\x83\x0c\x94\xb5\xa0\x3f\x0d\x29\xa9\x1e\x92\x75\xd1\xbc\x65\xbc\xc8\x29\x5b\x01\xad\x29\x70\xa0\x0c\xc2\x2c\xdd\xd0\x04\xcf\x04\x4d\xb1\x7e\x39\xb0\x5f\xab\xe4\xd9\xee\xcd\x9e\xec\x17\x27\xb8\xac\xf9\x99\x55\x65\x65\x16\x98\x6b\xab\x6b\xc1\x98\x0d\x9f\x5c\x7a\xb9\xf7\x1b\x65\x7c\x5b\xb1\xf6\x2d\x35\x56\x6f\xa9\xcb\x56\xb9\xf6\x39\xd5\x6e\x7d\x6c\x72\xe4\xca\x49\xdd\x89\x95\x49\xa6\xe2\xcb\x06\x03\xf3\xd2\x79\xbb\x27\xd2\xa7\xe7\xf2\x3b\xac\x9c\x29\xb5\xee\x5c\x3c\x17\xb1\xaf\x96\xf5\x43\x47\x8e\xc9\xcf\x86\x30\x1a\x7a\x0a\xe7\x72\x48\x89\x06\x7c\x47\x45\xb8\xd6\x0f\x19\xab\xc0\x93\xbc\x75\x43\xad\xd6\x29\x54\xb7\xd3\xd8\xb6\x19\x87\x33\xad\x18\x84\x84\xa3\xee\x03\x84\x41\x13\x4e\x46\xe3\xb0\x8d\xbc\xda\x5a\xf5\xb6\x08\x63\x52\x24\xe2\xdc\x88\xb4\xad\x05\x6a\x9e\x99\x5b\xa3\x34\x48\x31\x39\xc0\xc2\x40\xf3\xbf\x71\xb9\xfa\xbf\x8f\xd6\x86\xd2\xcc\xee\x75\xf4\x78\x74\x1a\x1f\x24\xff\x02\x11\x9e\x71\xcc\x29\x49\xe8\xbf\x88\xbc\x7c\x36\xa8\x6c\x93\xb2\x0e\x1f\x17\x39\xe9\x89\x6e\xd7\xc3\xeb\x1d\xc6\xaa\x0b\xd2\xb4\x92\xa2\xc6\xad\xcf\x45\x1c\xdc\x23\xbe\x2c\x6f\x4c\x36\x1c\xcb\x82\x6d\x6e\x50\x7b\xad\x7c\x62\xfc\x49\x23\xeb\x31\xea\x90\x27\x4d\xb2\x51\x8e\xec\xf8\x51\xf7\x40\xce\x1b\x96\xb5\xed\x64\xf8\xf6\xdc\x1b\x34\x8b\xb6\x75\x9a\x0f\xad\xb0\x19\x1e\x78\xdb\xfa\x48\x93\x98\x3d\xfe\x1a\xa4\xd4\x3c\x9a\xe9\xe3\xe0\x40\x42\xaf\xfa\xa6\xfb\x69\x3b\x57\xa9\xd5\x91\x98\x6b\x74\x3a\xad\xfd\x6a\x31\x24\x0e\xfe\xc4\xdd\x27\x86\xfb\x0d\x86\x02\xa3\xe5\x8d\x47\x23\xbf\xee\x03\xe9\xfc\x61\xa5\x12\x99\xa1\x82\x8f\xf7\xd7\x26\x77\x5c\x27\x14\x99\x80\x08\x79\x98\xd3\x67\xe4\x20\xa7\x52\x14\xeb\x2c\xe2\x32\xb1\x3f\xde\x01\x0f\xd7\x98\x92\x40\x47\x8f\x59\x6f\x87\x4d\x1b\xcb\xa9\xfe\x89\xc8\x3f\xcc\x76\xf3\xd3\x91\xb4\x45\x6e\x28\xf6\x32\x82\x04\xee\x85\x84\x89\xfc\x6b\x77\xaa\x88\xda\x9f\x06\xbf\xe5\xab\x42\xc7\x8b\x0c\xe9\xb9\xd2\x9b\xd8\x3f\x5f\x90\x4a\x90\xde\x4f\x2b\xcc\xef\x28\x9a\xc2\x88\x04\xed\x4c\x63\x02\x4d\xc9\xe0\xaa\xf6\xcb\x99\xea\xf9\x58\x6d\xe6\x34\xf8\x88\xbc\x48\x44\x70\x95\x10\xf6\xa2\xd2\x8a\x57\x17\xa5\xcd\xdc\x08\xf5\x66\xbe\x69\xed\xea\x68\x6c\x9b\xeb\x92\x9c\x1a\x9b\x59\x02\x58\x5e\xaa\x66\x7d\x9f\x99\xaf\xff\x0e\x00\x00\xff\xff\x5d\x50\x1f\x98\x9c\x23\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 9116, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/header.tmpl": _templateHeaderTmpl,
	"_template/main.tmpl":   _templateMainTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"header.tmpl": &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":   &bintree{_templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
