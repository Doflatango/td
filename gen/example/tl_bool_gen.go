// Code generated by gotdgen, DO NOT EDIT.

package td

import (
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}

// False represents TL type false#bc799737.
type False struct {
}

// FalseTypeID is TL type id of False.
const FalseTypeID = 0xbc799737

// Encode implements bin.Encoder.
func (f *False) Encode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't encode false#bc799737 as nil")
	}
	b.PutID(FalseTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (f *False) Decode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't decode false#bc799737 to nil")
	}
	if err := b.ConsumeID(FalseTypeID); err != nil {
		return fmt.Errorf("unable to decode false#bc799737: %w", err)
	}
	return nil
}

// construct implements constructor of Bool.
func (f False) construct() Bool { return &f }

// Ensuring interfaces in compile-time for False.
var (
	_ bin.Encoder = &False{}
	_ bin.Decoder = &False{}

	_ Bool = &False{}
)

// True represents TL type true#997275b5.
type True struct {
}

// TrueTypeID is TL type id of True.
const TrueTypeID = 0x997275b5

// Encode implements bin.Encoder.
func (t *True) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode true#997275b5 as nil")
	}
	b.PutID(TrueTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (t *True) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode true#997275b5 to nil")
	}
	if err := b.ConsumeID(TrueTypeID); err != nil {
		return fmt.Errorf("unable to decode true#997275b5: %w", err)
	}
	return nil
}

// construct implements constructor of Bool.
func (t True) construct() Bool { return &t }

// Ensuring interfaces in compile-time for True.
var (
	_ bin.Encoder = &True{}
	_ bin.Decoder = &True{}

	_ Bool = &True{}
)

// Bool represents Bool generic type.
//
// Example:
//  g, err := DecodeBool(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *False: // false#bc799737
//  case *True: // true#997275b5
//  default: panic(v)
//  }
type Bool interface {
	bin.Encoder
	bin.Decoder
	construct() Bool
}

// DecodeBool implements binary de-serialization for Bool.
func DecodeBool(buf *bin.Buffer) (Bool, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case FalseTypeID:
		// Decoding false#bc799737.
		v := False{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode Bool: %w", err)
		}
		return &v, nil
	case TrueTypeID:
		// Decoding true#997275b5.
		v := True{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode Bool: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode Bool: %w", bin.NewUnexpectedID(id))
	}
}
