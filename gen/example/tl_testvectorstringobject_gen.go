// Code generated by gotdgen, DO NOT EDIT.

package td

import (
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}

// A simple object containing a vector of objects that hold a string; for testing only
type TestVectorStringObject struct {
	// Vector of objects
	Value []TestString
}

// TestVectorStringObjectTypeID is TL type id of TestVectorStringObject.
const TestVectorStringObjectTypeID = 0xe5ecc0d

// Encode implements bin.Encoder.
func (t *TestVectorStringObject) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode testVectorStringObject#e5ecc0d as nil")
	}
	b.PutID(TestVectorStringObjectTypeID)
	b.PutVectorHeader(len(t.Value))
	for idx, v := range t.Value {
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode testVectorStringObject#e5ecc0d: field value element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (t *TestVectorStringObject) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode testVectorStringObject#e5ecc0d to nil")
	}
	if err := b.ConsumeID(TestVectorStringObjectTypeID); err != nil {
		return fmt.Errorf("unable to decode testVectorStringObject#e5ecc0d: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode testVectorStringObject#e5ecc0d: field value: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value TestString
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode testVectorStringObject#e5ecc0d: field value: %w", err)
			}
			t.Value = append(t.Value, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for TestVectorStringObject.
var (
	_ bin.Encoder = &TestVectorStringObject{}
	_ bin.Decoder = &TestVectorStringObject{}
)
