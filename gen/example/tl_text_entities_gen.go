// Code generated by gotdgen, DO NOT EDIT.

package td

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// TextEntities represents TL type `textEntities#cf89c258`.
type TextEntities struct {
	// List of text entities
	Entities []TextEntity
}

// TextEntitiesTypeID is TL type id of TextEntities.
const TextEntitiesTypeID = 0xcf89c258

// Encode implements bin.Encoder.
func (t *TextEntities) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntities#cf89c258 as nil")
	}
	b.PutID(TextEntitiesTypeID)
	b.PutVectorHeader(len(t.Entities))
	for idx, v := range t.Entities {
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode textEntities#cf89c258: field entities element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (t *TextEntities) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntities#cf89c258 to nil")
	}
	if err := b.ConsumeID(TextEntitiesTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntities#cf89c258: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode textEntities#cf89c258: field entities: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value TextEntity
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode textEntities#cf89c258: field entities: %w", err)
			}
			t.Entities = append(t.Entities, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for TextEntities.
var (
	_ bin.Encoder = &TextEntities{}
	_ bin.Decoder = &TextEntities{}
)
