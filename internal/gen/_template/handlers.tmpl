{{ define "handlers" }}
{{ $pkg := $.Package }}
{{ template "header" $ }}

type handler = func(UpdateContext, UpdateClass) error

type UpdateDispatcher struct {
    handlers map[uint32]handler
}

func NewUpdateDispatcher() UpdateDispatcher {
    return UpdateDispatcher{
        handlers: map[uint32]handler{},
    }
}

type UpdateContext struct {
    context.Context

    Short bool
    Users map[int]*User
    Chats map[int]*Chat
    Channels map[int]*Channel
    init bool
}

func (u *UpdateContext) lazyInitFromUpdates(updates *Updates) {
    if u.init {
        return
    }

    u.init = true
    u.Users = updates.MapUsers().NotEmptyToMap()
    chats := updates.MapChats()
    u.Chats = chats.ChatToMap()
    u.Channels = chats.ChannelToMap()
}

func (u *UpdateContext) short(ctx context.Context) {
    if u.init {
        return
    }
    u.init = true

    u.Context = ctx
    u.Short = true
    u.Users = make(map[int]*User, 0)
    u.Chats = make(map[int]*Chat, 0)
    u.Channels = make(map[int]*Channel, 0)
}

// Handle implements UpdateDispatcher.
func (u UpdateDispatcher) Handle(ctx context.Context, updates *Updates) error {
    uctx := UpdateContext{
        Context:      ctx,
    }

    var err error
	for _, update := range updates.Updates {
        uctx.lazyInitFromUpdates(updates)
        multierr.AppendInto(&err, u.dispatch(uctx, update))
	}
	return nil
}

// HandleShort implements UpdateDispatcher.
func (u UpdateDispatcher) HandleShort(ctx context.Context, short *UpdateShort) error {
    uctx := UpdateContext{}
    uctx.short(ctx)
    return u.dispatch(uctx, short.Update)
}

func (u UpdateDispatcher) dispatch(uctx UpdateContext, update UpdateClass) error {
    if update == nil {
        return nil
    }
    typeID := update.TypeID()
    handler, ok := u.handlers[typeID]
    if !ok {
        return nil
    }
    return handler(uctx, update)
}

{{- range $s := $.Structs }}{{ if eq $s.Interface "UpdateClass" }}
{{ $eventName := trimPrefix $s.Name "Update"}}
// {{ $eventName }}Handler is a {{ $eventName }} event handler.
type {{ $eventName }}Handler func(ctx UpdateContext, update *{{ $s.Name }}) error

// On{{ $eventName }} sets {{ $eventName }} handler.
func (u UpdateDispatcher) On{{ $eventName }}(handler {{ $eventName }}Handler) {
    u.handlers[{{ $s.Name }}TypeID] = func(ctx UpdateContext, update UpdateClass) error {
        return handler(ctx, update.(*{{ $s.Name }}))
    }
}
{{- end }}{{ end }}

{{ end }}
