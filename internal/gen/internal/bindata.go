// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/client.tmpl
// _template/handlers.tmpl
// _template/header.tmpl
// _template/main.tmpl
// _template/registry.tmpl
// _template/string.tmpl
// _template/utils.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfe\x8a\xc1\x84\x92\x94\xe0\xdc\x03\x3d\xa5\x3d\x14\xda\x12\x4a\x7e\x40\x95\xd7\x89\x88\xbd\x12\xeb\x75\x92\x22\xf2\xef\x45\xb2\xd2\x93\x96\xa7\xd1\x68\x66\x63\x44\x4b\x9d\x63\x42\x6d\x7b\x47\xac\x35\xee\xf7\x2a\x46\x2c\xc2\xf9\x88\xed\x0b\x16\xcd\xde\xd8\xb3\x39\x52\xe1\x4a\x43\xe8\x8d\x12\xea\x13\x99\x96\xa4\xc6\x22\xdd\x54\x9b\x0d\xde\xf9\xe2\xcf\x24\xb0\x86\xe1\xf2\x0c\x31\x57\x7c\x1e\xf6\xe2\xd5\x43\x82\x85\x35\x7d\x3f\x36\x95\xfe\x06\xfa\x97\x3b\x56\x92\xce\x58\x42\xac\x50\xe8\xb7\xb9\x2e\xad\xde\x60\x3d\x2b\xdd\xb4\xd9\xcd\xe7\x1a\x8e\xc3\xa4\xf8\x71\xdc\xbc\xb1\xf5\x2d\xc9\x1a\x7e\xd2\x07\x7b\xa5\xcc\x56\x20\x11\x2f\xd5\x1c\x6b\x97\x7b\xc1\x0d\xa1\xa7\x21\x4d\x03\xe9\xc9\xb7\x23\x3a\x2f\x39\x90\xe3\x23\xba\x89\xad\x3a\xcf\x23\x3a\xf1\x03\x0e\x1f\x18\xed\x89\x06\x83\x8b\x33\x8f\xa4\x25\x77\xf1\x1b\x55\x26\xab\x39\x73\x6a\x56\x34\xe9\xcf\xe4\x85\x2f\xba\xce\xc2\xa5\x2b\x3d\x8b\x62\x85\xe7\xe2\x90\x9f\x92\x4e\xc2\x78\x9a\x51\x22\xd9\x6e\x5b\x16\x28\xeb\x0a\xb8\x27\xd3\x18\x41\xdc\xa6\x55\xff\x05\x00\x00\xff\xff\x88\xcc\x3e\xfd\xb3\x01\x00\x00")

func _templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateClientTmpl,
		"_template/client.tmpl",
	)
}

func _templateClientTmpl() (*asset, error) {
	bytes, err := _templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/client.tmpl", size: 435, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHandlersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x3b\x6f\xe3\x38\x10\xae\xc5\x5f\x31\x31\x5c\x48\x81\x4f\xee\x1d\xa8\x4a\x70\x88\x9b\x5c\x80\xbb\x54\x46\x70\xe0\xca\xa3\x98\xb0\x4c\x69\x49\x6a\xe3\xac\xc0\xff\xbe\x18\x92\x92\xf5\x88\x37\xc5\xba\xb1\x38\x8f\x6f\x5e\x1f\x87\x6d\x0b\x7b\x2c\x84\x44\x58\x1c\xb8\xdc\x97\xa8\xf4\x02\xac\x65\x6d\x0b\xcb\xfa\xf8\x06\x9b\x0c\x96\xe9\x33\xcf\x8f\xfc\x0d\x83\xdc\xe0\xa9\x2e\xb9\x21\x0f\xe4\x7b\x54\x0b\x58\x92\x86\x99\x8f\x1a\x21\x80\x40\x06\x45\x23\xf3\xf8\xa5\xde\x73\x83\xf7\x95\x34\x78\x36\x2b\x08\xc7\x92\x6b\x9d\x00\x2a\x55\xa9\xe0\xe6\x15\x0f\x42\xd7\xdc\xe4\x07\x54\xa0\x8d\x6a\x72\x03\x2d\x03\x80\x0e\x54\xc3\x89\xd7\x3b\x21\xcd\x6b\x10\x30\xcb\x18\x85\x81\x27\x7c\x9f\x22\xc4\xc9\x1c\xd4\xa3\x29\x34\x8d\x92\x33\xad\x57\x0e\xc3\x6d\xa6\xf1\x5a\xbb\x72\x46\x96\xd9\x51\xde\xa1\xbe\x71\xd2\xb9\x17\xa6\x41\xc9\x9c\xf0\x45\x0f\xcb\xb8\xa5\xa3\x93\xdf\x1f\xb8\x19\xc8\xe9\xe8\xe4\x42\x0a\x03\xdf\xaa\xaa\xec\x4b\x8d\x1b\xb8\x1d\x45\x4d\xa0\xe4\x3f\x3f\xb6\x52\x98\xbf\x55\x75\xf2\x2a\x1d\x37\xfe\xbf\xb3\xd5\x49\xc8\x4a\x14\xd0\xa4\x0e\xf5\x52\xaf\x6f\x48\xa8\xcc\xfd\x05\x93\x0c\x8c\x6a\x30\x48\x7c\xea\x19\x9c\xf8\x11\xe3\x51\x05\x2b\x28\x51\x76\x11\xbd\x5d\x92\xb0\xa8\xa8\x14\xfc\xbf\x82\x9c\xa6\x4d\x3c\x52\x5c\xbe\x21\x8c\xcc\xa0\x65\x51\xd4\x38\x88\xea\x48\x36\xce\x38\x8d\x1d\x6c\xc2\xa2\x48\x14\x70\x53\x1d\x9d\x59\x44\x0d\x15\xb2\x41\x16\x45\x96\xdc\x3c\xc4\x8e\xdc\xd3\xed\xc3\x2b\x64\x40\x9f\x2c\xea\x6b\xf0\x4d\x9d\x66\x4c\xd2\x71\xc6\xce\xee\xeb\x8c\x3d\x1c\xa5\x92\x3b\x88\x71\xc6\xa4\xfd\x32\x63\x07\xb1\x23\xf7\x90\x31\x7d\x52\xc6\x83\xe9\x4e\x79\x99\xc0\xa3\x63\x5f\x9c\x9b\xf3\x94\x54\x2b\x98\xcf\xd9\x5d\xab\x30\xdd\x86\x7c\x36\xd9\x98\xa6\x97\xc1\x07\xc1\xc6\x9f\x72\x73\xee\xe8\xdd\xb7\xc2\xc3\x7f\x32\xbd\x10\xf6\x82\xa5\xdf\x85\xc9\x0f\xc1\x20\x8d\xe9\x76\x10\xe7\xda\xf6\xaf\xe0\xba\xd4\x6e\x97\xfc\xeb\xee\x88\x06\x6b\xdb\x96\xd8\x88\xdf\x61\xa9\xd3\xad\x34\xa8\x0a\x9e\x23\x2c\x06\x3b\xc2\x6d\xa2\x2e\x40\xce\x35\xc2\x2d\xed\x25\x9d\x3e\xf1\x13\x6d\xa3\x4d\xaf\x0c\xd4\x0e\xf7\xb4\x9b\x4d\x93\x76\x57\x79\x37\xf2\xfb\xef\xa3\xc6\xed\xc3\xeb\x1d\xb8\x41\xc1\xe4\x47\x4d\x4b\x7f\x73\xa7\x92\x99\x07\x95\xa1\x14\x45\x0c\xf1\x62\xc2\xe8\xba\x97\xdc\x39\xed\x4d\x06\x52\x94\x9f\xc4\x1b\xec\x24\x54\x6a\xa6\xb6\x6c\x7c\xa2\x8e\xa2\xdc\xfb\x06\xfa\x0f\x76\xd1\x12\xd1\x02\x98\x14\x6e\x6b\xfc\xf9\x04\xa8\x77\xf8\x03\xa5\x71\xed\xdb\xd0\x56\x10\xa7\x67\x85\x85\x38\xf7\x4d\x0d\x4e\x0b\x6b\xd9\x7a\x0d\x63\x0f\x6b\x1f\xc3\xab\x20\x34\xf0\x99\x12\xdc\xa1\x6b\x5d\xea\x17\xeb\x35\x04\xf7\xaa\x10\xab\x27\x2f\x4b\x20\xea\x98\x1f\xfd\x1b\xb3\x5e\xc3\x3f\x72\x16\x57\x23\xdd\xe7\xa9\xb4\xcf\xe3\xfa\x85\x9c\x63\xc5\xdd\xbb\x77\x25\xef\x6e\xfd\x7e\xc1\xc8\xee\xd9\xbc\x5e\xe0\xfc\x05\x9d\x2d\xf2\x9e\x84\x03\x0e\xa6\xf1\xa4\x33\x49\xff\x90\x7d\xc6\x27\x76\xf9\xfc\x15\x00\x00\xff\xff\x5e\x75\x8c\xdd\x21\x08\x00\x00")

func _templateHandlersTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHandlersTmpl,
		"_template/handlers.tmpl",
	)
}

func _templateHandlersTmpl() (*asset, error) {
	bytes, err := _templateHandlersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/handlers.tmpl", size: 2081, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xc1\x6a\xc3\x30\x0c\x86\xef\x7a\x0a\x61\x76\x48\x61\x73\x9e\x60\x97\xac\x3b\xec\xd2\x0e\xd6\xfb\x70\x62\xd9\x15\x69\xe4\xe0\x28\x63\xc3\xe4\xdd\x47\xda\xd0\x5e\x04\xd2\x0f\x9f\xbe\xbf\x14\xf4\x14\x58\x08\xcd\x99\x9c\xa7\x6c\x70\x59\xa0\xae\xf1\x2d\x79\xc2\x48\x42\xd9\x29\x79\x6c\xff\x30\x26\xf5\x91\xe4\x19\xf7\x47\x3c\x1c\x4f\xf8\xbe\xff\x38\x59\x80\xd1\x75\xbd\x8b\x84\xa5\xe0\x93\xfd\xdc\x96\x65\x01\xe0\x61\x4c\x59\xb1\x02\xd3\x25\x51\xfa\x55\x03\x26\x0c\xeb\x9c\x34\xb3\xc4\xc9\x00\x98\xc8\x7a\x9e\x5b\xdb\xa5\xa1\x5e\xf9\xb5\xfa\xba\x65\x31\xb0\x83\x55\xe2\x90\x5e\xd2\x78\x13\x64\xe5\x24\x18\x52\xc6\x9e\x68\x64\x89\x78\xe3\x4f\x16\x7e\x5c\xc6\x6f\x7c\xc5\x96\xc5\x36\x73\x08\x94\xcb\x72\x3f\x6e\xbf\x6d\xe3\xba\x3e\xe6\x34\x8b\xaf\x76\xf7\x30\x0c\x6a\xbf\xae\x32\x94\x2b\xe1\xcb\x23\xd9\x14\x6d\x33\xf3\xc5\x5f\x81\x50\x0a\x92\xf8\xb5\xda\x7f\x00\x00\x00\xff\xff\xaa\xa0\x2f\x0c\x35\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 309, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\xdd\x73\xdb\x36\x12\x7f\xd7\x5f\xb1\xf5\xb8\x3d\x32\x55\xe8\x3e\x3b\xf5\xc3\x39\x4e\x2f\x9e\xc9\xf5\x32\x76\x72\x2f\x9d\x8e\x07\x22\x97\x32\x46\x14\xa0\x03\xa8\x8f\x9c\xca\xff\xfd\x06\x5f\x24\x48\x82\x22\xed\x71\xd3\xf6\xf4\x44\xe1\x63\xb1\xfb\xdb\xc5\x7e\x00\x38\x1e\x21\xc3\x9c\x32\x84\xb3\x35\xa1\xec\x0c\xaa\x6a\x76\x3c\xc2\xf9\x66\xb5\x84\xcb\x2b\x38\x4f\x3e\x92\x74\x45\x96\x68\xdb\x4b\x5c\x6f\x0a\x52\x22\x9c\x3d\x22\xc9\x50\x9c\xc1\xb9\xea\x51\x5d\x82\xb0\x25\xc2\xb9\xd4\xb3\xee\x4b\xb1\x4d\x4b\xa9\xfa\x2e\x2e\x40\x11\x94\xc9\x5b\xbe\x5e\x23\x2b\x0d\xa5\xd7\x40\x73\xd5\x78\xc3\x53\xe9\x5a\x2c\x85\x4c\x51\x68\x7a\xcc\xfc\x52\xd0\x35\x9c\x67\x6e\x28\xb2\xd0\xa7\x21\xf9\xf9\xee\x83\x99\xa7\xa6\xde\x23\xda\xe5\x4d\x33\xe4\x5c\x80\xc0\x1c\x05\xb2\x14\x13\x9f\x42\xf9\x65\xe3\xc6\xfe\x4c\xd6\x4a\x62\x90\x5a\x0c\x38\xfa\xec\xe5\x60\xf8\xfb\x89\x62\x91\x69\x0e\x01\x00\xac\x94\x79\x40\x4a\xc2\x32\x88\x74\x0f\xcb\x68\x49\x39\x23\x45\x0c\x11\xe3\x25\xb4\x1b\xaf\x39\x2f\xe2\x86\xf3\xcf\x12\xe1\x1e\x4b\x43\xd5\x31\xa4\x68\xfd\xa3\xdb\xf8\x88\xc5\x06\x85\x6c\x09\xa3\x78\x6a\x8f\x6a\x69\x6f\x23\x28\x2b\x1f\x94\xc4\x67\x4a\xa2\x36\x94\x5a\x9f\x9a\x75\xcd\xa4\x4c\xfe\x8d\x69\xc9\x45\x4b\x99\x96\xea\xa7\x2f\x1b\xbc\xbd\x01\x2a\xe1\xd3\x07\xd0\x00\xd2\x0c\x78\xde\x1e\x94\xcc\x52\xce\x64\x19\x9c\x79\x05\x3f\x1c\x4c\xfb\x7b\x3c\xdc\xde\x40\x55\xbd\xf1\x59\x99\x1d\x8f\x0d\xd3\xb2\x14\x94\x2d\x1f\x32\x14\x74\xa7\xf8\xd6\xe0\x2b\x96\xde\xb1\x94\x67\x08\x74\xbd\x29\x50\x81\x2f\x61\x41\x59\x62\x5a\x45\x32\xcb\xb7\x2c\x85\xc8\xac\x72\x87\x29\xd2\x1d\x2a\x61\xe0\x55\x8b\xa1\xd8\x92\xb1\x03\xaf\xb7\xf9\xdf\xc5\x52\x0f\x53\xc4\xae\xb7\x79\x8e\x22\x06\x14\x82\x0b\x38\x6a\x7c\xa9\x93\xd3\x27\x7a\x75\x05\x8c\x16\x76\x84\xfa\x09\x2c\xb7\x82\x41\xbe\x2e\x93\x77\x6a\x72\x1e\x9d\xa5\x84\xfd\xad\x04\x34\x5c\x5b\x12\x64\xaf\x10\xd1\x3a\x96\x8a\xc2\x59\xac\x29\x54\x83\xaa\xe8\xb0\x99\x7c\xdc\x96\xb7\x37\x51\x00\xe3\xb8\xbb\x4d\x4e\x1a\xb2\xbf\x5c\xcf\x3c\x3b\x83\xda\x03\x5c\x67\x08\x96\xc4\x6d\x8e\x7a\xb4\x5e\x55\xf5\xbc\x27\x32\xea\xf5\xde\xb2\x0c\x0f\x5a\x29\xc7\x7a\xc1\x96\x65\xbb\xf5\x1b\x3c\x9c\xc5\x77\x30\x31\x03\xde\x6b\x6f\x15\x15\xc8\xfa\x76\x90\xb4\xf6\x49\x6c\x70\x57\x6e\xe2\x78\xb4\x8b\x58\x4b\x82\xaa\xa2\x99\xb2\x56\x2c\xa4\x1a\xfa\xa0\x3e\x35\x53\x73\x8f\xa3\x1b\xbe\x5d\x14\x58\xf3\x25\xf8\xfe\x78\x54\x13\xaa\x6a\x77\x3c\x22\xcb\xaa\x4a\xe1\x6e\x74\x30\xc2\x8b\x27\x7c\x90\x76\x6d\x63\x53\xe4\x16\x7c\x6f\x65\x73\xf2\x3d\xcc\x61\xd7\xf0\x22\xf8\x7e\x0c\xec\x06\x07\x6f\x65\xd7\x79\xcb\x4a\x14\x39\x49\xd1\xef\xb6\xf6\xb0\xeb\x6f\x8b\x81\xad\xb1\x65\x64\x51\x20\x94\x7c\x68\x7b\x5c\x42\xae\x2d\xc7\x00\x75\x47\xf6\x0e\x2b\x34\x7b\x1f\xf6\xb4\x7c\x04\xaa\xed\xe7\xdb\x4c\x79\x26\xb5\x99\xe6\x40\xb3\x43\xdc\x5a\xbc\x2d\x83\x56\xcc\xcc\x63\x19\x85\x50\xd8\xec\x92\xb0\x57\x88\xdf\xe8\x11\xdf\xfc\x31\x62\x5d\xc2\xb7\x7b\x23\xd3\x5c\xb1\xd1\x08\xd6\x68\xcc\xda\xe8\x29\x13\x31\x6b\xfd\xa4\xbc\x63\x55\x45\xbb\xf8\xb4\xf2\x87\x6c\xaf\x0a\x4d\x0b\xf3\x31\x68\x49\x27\xac\xe8\x84\x37\x71\x10\x4d\x71\xb9\xcf\x57\x00\x6d\xbb\xe3\xbe\xc1\x34\xc6\x32\xc2\xe8\x13\x4d\xe9\x25\xa5\xb0\x06\x53\xdb\xca\x90\x7e\x46\x6c\x64\xcc\x77\x0e\x59\x50\xd0\xa0\x02\xa1\x63\x70\x46\x3f\xdf\xf3\x10\x62\xb4\x70\x39\xcb\x60\x68\xab\x7d\x79\x67\x55\x9d\x22\x76\xf2\x29\x89\xa5\x84\x1d\x29\xb6\xe8\x52\x99\xa6\x2f\xf5\xa6\x6b\xa8\xa7\xa7\x17\xdd\x75\x22\xb3\x44\xcd\x99\xd9\x60\xf7\x05\xd5\xc6\xff\xcb\xaf\xbf\xfc\xea\x42\x8d\xe9\x6f\x7a\xea\xb8\x63\x99\xb3\xca\x8f\x6d\xa2\xda\x13\xd4\x0f\xdd\xca\x1b\x9b\x75\x3b\xae\x61\x5a\xb4\xbe\xc7\xf2\x44\xb4\x36\x4a\x34\x4c\x3f\x8f\xfe\x67\x26\x27\xac\x30\x0b\x5b\xee\x8b\x89\x30\xea\x71\x0c\x86\x27\x92\xe6\x20\xfe\x17\x17\xfd\xe4\xdd\xd8\xf0\x74\x7b\x53\x25\x80\x22\xb4\xe0\xbc\x40\xc2\x60\xff\x48\xd3\x47\xe5\xa4\x4a\xb1\xd5\x96\x62\x46\xed\x89\x54\x76\x3c\xdd\x3a\xbb\x8c\x45\x31\x34\x06\x7a\xa2\x70\x98\x03\x5f\x69\x66\xe2\x26\x2b\xfe\xe6\xc5\xf3\x3f\x6f\xb7\x6b\xa6\xe6\x90\x93\x42\xa2\xe7\x34\x6c\xef\x88\xe6\xe6\x1a\x26\xa7\xac\xa6\xc8\x08\x79\x18\x85\xf2\x0d\x86\x2a\x0b\xd3\xfa\x84\xca\xc2\x4c\xf8\x6a\x95\x45\x86\xe1\xca\xa2\xe4\x93\x2a\x8b\x50\x50\x6b\x82\xc2\x5b\xce\xe4\x76\x8d\x03\xb5\xc6\x73\x62\xd9\x00\xbb\xfd\x98\xf5\x8c\x3a\x66\xd8\x11\x4e\xdb\xe7\x2f\x67\xc9\x27\x32\xb3\x00\xa7\xfd\x1c\xfa\x77\xd9\x53\x8e\x9f\xce\x72\xc7\x6e\x6e\x1c\xe6\xb7\x9f\x0c\xaa\x9f\x39\x19\xfa\x80\x6c\x3e\x64\x42\xad\xda\x24\xee\x0a\x3a\x98\x57\x3f\xdf\x90\xa6\x25\x45\xee\xd7\x16\x47\x55\x4a\x34\x3b\x28\x39\x7e\x78\xa3\xbf\x7e\x6c\x44\xd4\x0d\xdf\x7f\x0f\xc7\x59\x1b\xbf\xd1\xac\xb9\x96\x97\xb1\x67\x63\x35\x05\xaf\xaf\x85\x59\x1f\x37\xf5\xdb\x11\xa1\xeb\x4a\x9d\xb2\x34\x89\x4a\x6f\x9c\xc6\x58\x21\x61\x6c\xd4\x42\xdd\x34\xfc\x58\xe3\xf4\xa6\xfe\xd2\xa8\x77\x41\xef\x98\x2a\x4c\xab\x50\x0d\xab\x3a\xac\x58\x2d\x18\x87\x6d\x98\xae\xa7\xb5\xb3\xe0\x26\x7f\xff\x0b\x29\xa5\xf6\x3f\x83\x05\xbd\xaf\xba\x3a\xfe\x9f\x50\x9d\x57\x2a\xab\xd1\x49\x38\xd4\x9d\x2a\x97\xff\x1c\x88\x8c\x9a\x44\x77\x63\xb6\x2b\xa3\xbf\x9c\x11\xf4\x37\x0a\x3c\xc9\x71\x69\xf6\xf9\x1e\xae\x80\x6c\x36\xc8\xb2\x48\xf0\xfd\xdc\x40\x36\xc5\x33\x8c\x47\x5e\x4b\x76\x34\xa1\x13\x7c\xdf\x5f\x30\x14\x67\x5f\x7e\xe9\x01\x69\x07\xf0\xad\x7a\x51\xf7\x89\x07\x69\x2f\xe5\xa2\xfe\x7c\x31\x76\x6a\xbd\xd5\x03\xf0\xa4\x1b\x9b\x7e\x30\xf3\x3c\xa7\xf5\x75\x71\x1a\x32\xe9\xe7\x7b\xa9\xff\x13\x3b\xe8\x67\xa7\xe1\x83\xc8\x49\x47\x48\xf6\x0e\xb1\xb5\x07\x2f\x2e\x40\x5f\x60\xe9\xbb\x40\xaf\x14\xac\x1b\xb9\x68\xee\xbc\xfc\x99\xc3\x05\x62\xa7\x3e\xac\x29\x45\x71\x80\x0c\x1c\x1d\x9b\xdf\xf5\x29\xe9\xa3\x2d\xaf\x62\x7d\xc7\xe4\x56\x50\xb6\x04\xea\x28\x48\xa0\x0c\x52\xbe\xde\xd0\x02\x5f\x97\x74\x8d\xee\x72\xc3\xbf\xa1\x53\xe1\x3e\x9a\x3d\xf8\x17\x67\x70\xe5\xd6\xb3\xa3\x8e\x95\x1d\x60\xeb\xdf\xd0\x80\x30\x82\x0f\x21\xa9\xc2\xb3\xad\x28\xf1\xcc\xbb\xd1\xfd\x27\x96\x8f\x3c\x6b\xdd\x3f\xd6\x4d\x40\xd9\x8e\xaf\x50\xc2\xda\xb4\xf4\x8a\x5e\x03\x9d\x42\xc4\x54\xd8\xfa\x46\xf6\x4b\x32\x72\x07\x0d\x7f\xd0\x25\x74\x43\xe1\x0e\xe5\xb6\x28\x43\x6d\xf7\x94\x2d\xb7\x05\xd1\xfe\xce\x18\x58\x0a\xaf\xde\x16\x14\x59\x19\x77\xe1\x89\x5a\xa7\x37\x02\xff\xb3\x45\x59\x3e\x6c\x88\x20\x6b\x69\xaf\x50\x63\x6d\xa0\xcd\x41\x80\x59\xa4\x8e\xfc\xaf\x9c\xcd\x59\x76\x9a\xfb\x2f\x93\xd5\xbb\x2e\xeb\x63\xbc\x3b\x31\x8d\xb7\xab\x36\x75\x29\x60\x68\x74\x08\xba\x13\x37\xef\x90\x89\xa4\xab\x07\xcb\xab\xbb\xe7\x6d\x3b\xf4\x34\x11\x9b\x34\xb9\xd5\xaa\xbf\x23\xfb\x28\x2d\x0f\x73\xb0\x33\xe6\xf0\x9d\x59\x68\xe4\x30\x82\xd1\x42\xf3\xd8\xf1\x13\x3e\xd2\xed\xf4\xc7\xce\x33\xc4\x93\x77\x05\xae\xe5\x5c\x7b\x8e\x90\x7b\x76\x3b\xd6\x8c\xee\x8c\x73\x47\x86\xfe\xa4\x97\xd2\xa4\x52\x24\x7a\x00\x9f\x5d\x73\x5e\xbc\x2d\x88\x94\x67\x5a\x3b\x61\x5d\x2e\x38\x2f\x9e\xa8\x3a\xab\xf0\x6b\x7e\xf8\x6a\x1a\x74\x27\x56\x03\xf2\x41\x55\x75\x74\xeb\x01\xec\xa2\x19\x29\x24\x36\x7d\xa1\x48\x71\x7a\x85\x80\x29\xf8\xa8\x5c\x13\x89\x75\x82\x38\x64\x1c\x0f\xfa\xd4\xf4\xf2\x6a\x84\x40\x12\xbd\x52\x4b\x7f\x12\x2e\xcb\xb4\xcb\xf2\xd5\x29\x7b\xf2\xbc\xd2\x4b\x9a\x96\x7f\x3e\xa9\x2c\x82\xaf\xe0\x5f\xab\xdf\x41\xf3\x7c\x35\xb2\x6f\xdb\x5b\xb6\x15\xc0\x87\xbc\xb2\x77\xd2\x5b\x9f\x1a\xea\x77\x4a\xb7\x4d\x90\x6c\xa2\x8b\x7f\x38\xbf\x11\x28\x75\xb0\xaf\x13\x1a\x17\x57\x96\xc8\x50\xd0\x54\xbf\x7a\x49\x94\xa3\x6f\x32\xf8\xda\xf9\xd7\x9e\x3f\x1f\xf0\xfc\x76\x9a\x65\x4f\x85\xef\x03\x51\x09\xc6\xa5\xfa\x86\x65\x30\xd9\x77\xc9\xdc\x62\x9b\xc7\x7a\x58\x37\x8f\x53\x6d\xea\xb7\x21\x8c\xa6\x91\x4e\xb9\x54\x93\xa6\x0f\x72\x4f\xcb\xf4\xd1\x5c\xfc\x2f\x93\x48\x71\x6f\xee\x8d\x1c\x30\xa9\x0e\x7d\xfa\xe4\xd0\x65\x37\x12\x5e\x1b\xee\x20\x25\x12\xcd\xe9\x76\x9a\xd4\x99\x9d\x85\x2d\xf5\xd0\x71\x98\xbb\x79\x19\xe6\x64\x5b\x94\x97\x96\xa7\x9d\xe3\xa8\x7e\x73\xd5\x60\x5e\xe7\x2d\x56\xf3\x5e\x46\x52\xff\xb7\x09\x88\xfe\xdf\xcd\x9d\x6a\x4a\xba\x57\x25\xaf\xf7\xfa\xdd\x10\x8a\x99\x7f\xa6\xdf\xc2\xb2\x73\xc0\x4f\xc4\x17\xc8\xf0\xb5\x44\x41\x49\x41\xff\x4b\x4a\xca\x59\x9d\x34\x35\x55\x83\xd9\x57\x21\x72\x4a\x37\xed\xd3\xfd\xa8\x53\x3a\xb6\x1c\x2c\xcd\x6a\x45\x2f\xb6\x79\xf2\x11\x71\x75\x7b\x63\x93\xf5\xa1\x24\x7d\x38\x88\x59\x0d\xd3\xcc\x7b\xce\x71\x4a\xb7\x16\x29\xad\xda\x96\x66\xcd\x91\xfe\x65\xbd\xa4\xc3\x4e\xe5\x52\x5d\x85\x27\xf5\xa8\x9d\x2b\x43\x52\x2f\xb1\xeb\x94\x1c\xfa\x61\x85\x2d\xba\x94\x19\x8f\x3f\xa6\xd0\x72\x8e\x56\x22\x79\x72\xa2\xdc\xa8\xba\xd8\x7d\xb7\x0b\xba\x51\xf5\xd7\xd9\x6b\x10\xee\x27\xb3\xa1\x0c\xe1\x67\xdc\x7f\x66\x78\xd8\x60\x5a\x62\x76\x7b\x13\xd1\x2c\x76\xd7\x1a\xc6\x2c\xdb\x16\xb4\xe0\x07\x94\x50\x3e\x76\x77\xc7\x46\xf0\x1d\xd5\x1a\x20\xf6\xdd\x5f\xe2\x6f\xa2\x26\x26\x37\x6f\x17\xa1\x7e\x0a\xe8\x85\x96\xce\x56\x99\x70\xdb\xe5\x6d\x80\x66\x15\x57\xe1\x2c\x8c\x53\xf0\xbb\xea\x5b\xaf\xde\x5e\xe8\xdc\x74\x2d\x9e\xf8\x80\xa3\x05\xb4\x27\x70\xe7\x76\x4b\xdb\xe2\xb8\x03\x9d\xb0\xc7\x4e\xb2\xa1\x14\x95\x99\xb2\x34\xfc\xc8\x62\x91\xf4\xc1\xbf\x82\x5d\xa0\xfa\x1c\x79\xc9\xf8\x74\x05\xd8\xf7\x26\x93\x15\xf0\xdb\x6f\x61\x6e\x9f\xfb\x32\xc5\x7b\xb7\xda\x7f\x44\x63\x89\x04\x16\x4c\x1a\xbe\xe3\x59\x37\x7c\xdb\xcf\xff\x05\x00\x00\xff\xff\xd9\x52\x4b\x32\xb8\x2c\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 11448, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateRegistryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x31\x4b\x04\x31\x14\x84\xfb\xfc\x8a\x21\x6c\xa1\xa0\x7b\xa2\xdd\x81\x9d\x85\x82\x82\x1c\xd7\x89\xc5\xe3\x76\x36\x86\xbb\xe4\x42\x92\xc5\x5b\x42\xfe\xbb\xc4\x5d\xac\x2c\xdf\x0c\xf3\xf1\xbe\x52\x30\x70\xb4\x9e\xd0\x91\xc6\xa6\x1c\x67\x8d\x5a\x55\x29\xe8\xc2\xd1\x60\xfb\x88\xae\x7f\x97\xc3\x51\x0c\xd7\x3c\xd3\x85\x93\x64\x42\x7f\x51\x06\x46\x8d\xae\x35\x6a\xb3\xc1\x7e\x0e\x4c\x88\xcc\x53\xf4\x09\x4e\x42\xb0\xde\x60\x8c\x67\x87\x3c\x07\xc2\x0e\x09\xf9\x8c\xfd\xeb\x72\x7a\x71\x4c\xbd\x1a\x27\x7f\x58\xa6\x6f\x12\xae\xae\xdb\xee\x63\xb2\x3e\x3f\xdc\x7f\xa6\x1c\x1b\xa1\x28\xac\xd4\x7f\xcb\x52\x6e\x11\xc5\x1b\xa2\xe3\x89\x6e\x79\x7a\xb7\xea\xb4\xdf\x00\xe0\xee\xd2\x9c\x5a\xdf\x3f\xf3\xf2\xf2\x84\x5a\xb7\xd0\x7f\xd9\x4e\xbe\x51\xab\xbe\xf9\x85\xd1\x0f\xcb\xac\xaa\xaa\x9a\xf3\x1a\xfc\x04\x00\x00\xff\xff\x97\x1b\x2c\x20\x2e\x01\x00\x00")

func _templateRegistryTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateRegistryTmpl,
		"_template/registry.tmpl",
	)
}

func _templateRegistryTmpl() (*asset, error) {
	bytes, err := _templateRegistryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/registry.tmpl", size: 302, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateStringTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x8b\xdb\x30\x10\xbd\xfb\x57\x0c\xc6\x10\xab\xdd\x6a\xef\x0b\xb9\xa4\xdd\xd2\x5e\x7a\x68\xa1\x3d\x74\x97\xc5\x89\xc6\x8b\x40\x96\x16\x49\xf1\xb6\x08\xfd\xf7\x22\x59\x76\xfc\x95\x64\x9b\x43\xc0\x9a\x37\x6f\xde\xbc\x19\xc9\x39\x86\x35\x97\x08\xb9\xb1\x9a\xcb\xe7\x27\x86\x9a\xb7\x98\x83\xf7\xce\x41\x61\xe0\x6e\x0b\x05\x78\x9f\xdd\xde\xc2\x8f\x88\x00\xde\xbc\x08\x6c\x50\x5a\x03\x75\x63\x69\x77\x8a\x9a\x66\xf5\x51\x1e\xa0\x8c\x69\xf4\x3b\x1e\x90\xb7\xa8\xc1\x7b\x78\xd7\x1d\x7d\xab\x1a\x04\xef\x49\xe2\x29\x09\x74\x25\xc1\x65\x00\x00\xbc\x86\x65\xea\x76\x0b\x92\x8b\x84\x08\x3f\x8d\xf6\xa8\x25\xe4\x01\xda\x33\x96\x92\x0b\x92\x47\x88\x8f\xff\x6d\xa5\xc1\xec\x13\xbd\xa1\xbb\x23\x17\x0c\x75\x0c\x99\x3d\xfd\xa5\xb9\xc5\xa4\x61\xc2\x93\x93\xcc\xb9\x0f\x41\x48\x61\xe8\x4f\x3c\x58\x15\x34\x4c\xd2\x76\x7f\x2d\x96\x9b\xdf\x1b\x12\x4f\x6b\xa5\xe1\xe9\x06\x30\x98\xa4\x2b\xf9\x8c\xcb\x0e\xe8\xbd\xc0\xc6\x8c\x1a\x98\x09\x88\x0e\xbe\x68\x2e\x6d\x89\x04\xde\x43\x7e\xf3\x20\x73\x32\xea\x65\x5a\xf9\x71\xd3\x69\x44\x61\x70\xae\x6d\x68\x29\x32\x04\x54\xa7\xa9\xa8\xe3\x10\x0d\xfd\xcc\x51\x30\xd3\xa7\xa5\x56\xa5\xb2\x50\xd4\xf4\xa3\x92\x8c\x5b\xae\x64\x25\x76\x4a\x89\x19\x68\x0a\xe8\x83\x6b\x13\xa3\xe1\x64\x82\x8e\x55\x43\xe4\x4b\x65\xca\x45\xf4\xab\x64\xf8\x27\x6e\x85\x1b\x0a\xa2\x64\xcb\xfa\xff\x31\x8f\x53\xd2\x27\x75\xdc\x0b\x1c\x52\xb5\x7a\x75\x2e\x58\xe7\x7d\xeb\x1c\x4a\xe6\xfd\xa5\xd1\x75\x62\xd3\x72\x8c\xf4\xad\x72\x2f\x06\x3c\x95\x36\x92\xd7\x9e\x6a\x6a\xf5\xba\xde\xf7\xe5\x4d\x69\x09\x79\xa3\x98\x73\xb2\x1e\x37\x64\xad\xec\xb9\x95\x1b\xa0\x17\xd6\xee\xc1\x4e\xfc\xba\x83\x7c\x2e\xf2\x5e\x1e\x14\xc3\xc5\x0c\x13\xc1\x15\xff\x69\xff\x6a\xbc\x49\xcd\xc8\xac\x2b\xbc\x64\xd5\x88\x79\x73\xa7\x5b\x79\x76\x41\x57\x2e\x88\x3f\x97\x91\x3e\xaf\x14\xed\x1f\xa4\x11\x24\x3d\x7f\x66\x3f\xd8\x91\x4d\x68\xfe\x05\x00\x00\xff\xff\xbd\x79\x4c\x5c\xcf\x05\x00\x00")

func _templateStringTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateStringTmpl,
		"_template/string.tmpl",
	)
}

func _templateStringTmpl() (*asset, error) {
	bytes, err := _templateStringTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/string.tmpl", size: 1487, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateUtilsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xcf\x4a\xc4\x30\x10\xc6\xef\x7d\x8a\x8f\x52\x3c\x48\xed\x03\x2c\xec\x49\xf1\x28\x82\x7a\x5a\x96\x12\xdb\xa9\x04\xd3\x34\xa6\x59\xdc\x65\xc8\xbb\x4b\xba\xe9\x6e\xb6\xd4\x5c\x32\x99\xf9\xe6\xcf\x6f\xc2\x8c\x96\x3a\xa9\x09\xb9\xa5\x9f\x03\x8d\xae\x36\xc2\x8a\x7e\xcc\xe1\x7d\xe3\x8e\x68\x06\xed\xe8\xe8\xaa\xc7\xf3\xcd\xfc\x00\xd9\xa1\xfa\xd0\x46\x34\xdf\xaf\x41\x4a\x8e\xec\x08\xef\xe7\xd0\xb3\x24\xd5\x06\x47\x99\x05\x97\x15\xfa\x8b\x50\x74\xd8\x6c\x93\x18\x33\xd4\xf0\x4b\x16\x45\x57\xbd\x88\x9e\xe0\x3d\x98\xe1\xa8\x37\x4a\x38\x42\x6e\xac\xd4\xae\x76\x27\x43\x79\x48\xf6\xbe\x0c\xc5\x48\xb7\xde\x67\xd1\xc2\x6c\xaa\x31\xe4\x97\x88\x04\xb8\x67\xc6\x5c\x75\xa9\x3d\x9b\x59\xc2\x1d\x40\xea\x98\x9a\x27\x1c\x2b\x88\x19\x80\x4b\x97\xcd\x16\x77\xcc\x28\x2e\x9d\xa6\x68\x38\x4b\xec\xe2\xca\x9d\x68\x12\xf4\x0d\x56\xf6\x51\xde\xd4\x8b\x83\x87\x67\x4a\xf2\x1f\x53\xb2\xbd\x48\x2e\x3b\x14\xd5\xd3\x70\xf8\x54\xf4\xa6\x64\x13\x3a\xec\xf6\xbb\xfd\x44\xf0\x7e\x32\x74\xb3\xcd\x49\x7c\x95\xad\x8b\xa6\x5f\x5c\xf8\x97\x43\xfd\x05\x00\x00\xff\xff\xe6\x20\xb4\x6e\x60\x02\x00\x00")

func _templateUtilsTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateUtilsTmpl,
		"_template/utils.tmpl",
	)
}

func _templateUtilsTmpl() (*asset, error) {
	bytes, err := _templateUtilsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/utils.tmpl", size: 608, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/client.tmpl":   _templateClientTmpl,
	"_template/handlers.tmpl": _templateHandlersTmpl,
	"_template/header.tmpl":   _templateHeaderTmpl,
	"_template/main.tmpl":     _templateMainTmpl,
	"_template/registry.tmpl": _templateRegistryTmpl,
	"_template/string.tmpl":   _templateStringTmpl,
	"_template/utils.tmpl":    _templateUtilsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"client.tmpl":   &bintree{_templateClientTmpl, map[string]*bintree{}},
		"handlers.tmpl": &bintree{_templateHandlersTmpl, map[string]*bintree{}},
		"header.tmpl":   &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":     &bintree{_templateMainTmpl, map[string]*bintree{}},
		"registry.tmpl": &bintree{_templateRegistryTmpl, map[string]*bintree{}},
		"string.tmpl":   &bintree{_templateStringTmpl, map[string]*bintree{}},
		"utils.tmpl":    &bintree{_templateUtilsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
