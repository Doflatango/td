// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/client.tmpl
// _template/handlers.tmpl
// _template/header.tmpl
// _template/main.tmpl
// _template/registry.tmpl
// _template/utils.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfe\x8a\xc1\x84\x92\x94\xe0\xdc\x03\x3d\xa5\x3d\x14\xda\x12\x4a\x7e\x40\x95\xd7\x89\x88\xbd\x12\xeb\x75\x92\x22\xf2\xef\x45\xb2\xd2\x93\x96\xa7\xd1\x68\x66\x63\x44\x4b\x9d\x63\x42\x6d\x7b\x47\xac\x35\xee\xf7\x2a\x46\x2c\xc2\xf9\x88\xed\x0b\x16\xcd\xde\xd8\xb3\x39\x52\xe1\x4a\x43\xe8\x8d\x12\xea\x13\x99\x96\xa4\xc6\x22\xdd\x54\x9b\x0d\xde\xf9\xe2\xcf\x24\xb0\x86\xe1\xf2\x0c\x31\x57\x7c\x1e\xf6\xe2\xd5\x43\x82\x85\x35\x7d\x3f\x36\x95\xfe\x06\xfa\x97\x3b\x56\x92\xce\x58\x42\xac\x50\xe8\xb7\xb9\x2e\xad\xde\x60\x3d\x2b\xdd\xb4\xd9\xcd\xe7\x1a\x8e\xc3\xa4\xf8\x71\xdc\xbc\xb1\xf5\x2d\xc9\x1a\x7e\xd2\x07\x7b\xa5\xcc\x56\x20\x11\x2f\xd5\x1c\x6b\x97\x7b\xc1\x0d\xa1\xa7\x21\x4d\x03\xe9\xc9\xb7\x23\x3a\x2f\x39\x90\xe3\x23\xba\x89\xad\x3a\xcf\x23\x3a\xf1\x03\x0e\x1f\x18\xed\x89\x06\x83\x8b\x33\x8f\xa4\x25\x77\xf1\x1b\x55\x26\xab\x39\x73\x6a\x56\x34\xe9\xcf\xe4\x85\x2f\xba\xce\xc2\xa5\x2b\x3d\x8b\x62\x85\xe7\xe2\x90\x9f\x92\x4e\xc2\x78\x9a\x51\x22\xd9\x6e\x5b\x16\x28\xeb\x0a\xb8\x27\xd3\x18\x41\xdc\xa6\x55\xff\x05\x00\x00\xff\xff\x88\xcc\x3e\xfd\xb3\x01\x00\x00")

func _templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateClientTmpl,
		"_template/client.tmpl",
	)
}

func _templateClientTmpl() (*asset, error) {
	bytes, err := _templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/client.tmpl", size: 435, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHandlersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xcd\x6e\xe3\x38\x0c\x3e\x5b\x4f\xc1\x06\x39\xd8\x45\xd6\xb9\xa7\xf0\xa9\xc5\xa2\xb9\x74\x0b\xec\xf6\x14\x14\x0b\x8d\x43\x37\x42\x1c\xd9\x23\xc9\xd3\x74\x0c\xbd\xfb\x80\x92\xec\xf8\xa7\x99\x1e\x26\x97\x58\xfc\xf9\x48\x91\x9f\xc8\xb6\x85\x3d\x16\x42\x22\x2c\x0e\x5c\xee\x4b\x54\x7a\x01\xd6\xb2\xb6\x85\x65\x7d\x7c\x83\x4d\x06\xcb\xf4\x99\xe7\x47\xfe\x86\x41\x6e\xf0\x54\x97\xdc\x90\x07\xf2\x3d\xaa\x05\x2c\x49\xc3\xcc\x47\x8d\x10\x40\x20\x83\xa2\x91\x79\xfc\x52\xef\xb9\xc1\xfb\x4a\x1a\x3c\x9b\x15\x84\x63\xc9\xb5\x4e\x00\x95\xaa\x54\x70\xf3\x8a\x07\xa1\x6b\x6e\xf2\x03\x2a\xd0\x46\x35\xb9\x81\x96\x01\x40\x07\xaa\xe1\xc4\xeb\x9d\x90\xe6\x35\x08\x98\x65\x8c\xc2\xc0\x13\xbe\x4f\x11\xe2\x64\x0e\xea\xd1\x14\x9a\x46\xc9\x99\xd6\x2b\x87\xe1\x36\xd3\x78\xad\x5d\x39\x23\xcb\xec\x28\xef\x70\xbf\x71\xd2\xb9\x17\xa6\x41\xc9\x9c\xf0\x45\x0f\xaf\x71\x4b\x47\x27\xbf\x3f\x70\x33\x90\xd3\xd1\xc9\x85\x14\x06\xbe\x55\x55\xd9\x5f\x35\x6e\xe0\x76\x14\x35\x81\x92\xff\xfc\xd8\x4a\x61\xfe\x56\xd5\xc9\xab\x74\xdc\xf8\xff\xce\x56\x27\x21\x2b\x51\x40\x93\x3a\xd4\xcb\x7d\x7d\x41\xc2\xcd\xdc\x5f\x30\xc9\xc0\xa8\x06\x83\xc4\xa7\x9e\xc1\x89\x1f\x31\x1e\xdd\x60\x05\x25\xca\x2e\xa2\xb7\x4b\x12\x16\x15\x95\x82\xff\x57\x90\x53\xb7\x89\x47\x8a\xcb\x37\x84\x91\x19\xb4\x2c\x8a\x1a\x07\x51\x1d\xc9\xc6\x19\xa7\xb1\x83\x4d\x58\x14\x89\x02\x6e\xaa\xa3\x33\x8b\xa8\xa0\x42\x36\xc8\xa2\xc8\x92\x9b\x87\xd8\x91\x7b\xba\x7d\x78\x85\x0c\xe8\x93\x45\xfd\x1d\x7c\x51\xa7\x19\x93\x74\x9c\xb1\xb3\xfb\x3a\x63\x0f\x47\xa9\xe4\x0e\x62\x9c\x31\x69\xbf\xcc\xd8\x41\xec\xc8\x3d\x64\x4c\x9f\x94\xf1\xa0\xbb\x53\x5e\x26\xf0\xe8\xd8\x17\xe7\xe6\x3c\x25\xd5\x0a\xe6\x7d\x76\xcf\x2a\x74\xb7\x21\x9f\x4d\x36\xa6\xe9\xa5\xf1\x41\xb0\xf1\xa7\xdc\x9c\x3b\x7a\xf7\xa5\xf0\xf0\x9f\x74\x2f\x84\xbd\x60\x51\xa8\xf4\x37\x4c\x4c\x7a\x4b\xfd\x2e\x4c\x7e\x08\x50\x69\x4c\xef\x88\xd8\xd9\xb6\x7f\x85\x20\x4b\xed\xa6\xce\xbf\xee\x35\x69\xb0\xb6\x6d\x89\xb7\xf8\x1d\x96\x3a\xdd\x4a\x83\xaa\xe0\x39\xc2\x62\x30\x4d\xdc\xcc\xea\x02\xe4\x5c\x23\xdc\xd2\x04\xd3\xe9\x13\x3f\xd1\xdc\xda\xf4\xca\xf0\x08\xc2\x8b\xee\xba\xd8\xa4\xdd\xa3\xdf\x8d\xfc\xfe\xfb\xa8\x71\xfb\xf0\x7a\x07\xae\xa5\x30\xf9\x51\x52\x4a\x91\x7f\xf0\x8e\xa9\x0a\x5d\xd5\x92\x3b\xa7\xbd\xc9\x40\x8a\xf2\x13\xef\xc1\x2c\x42\xa5\x66\x6a\xcb\xc6\x27\xaa\x0f\xca\xbd\x2f\x87\xff\x60\x17\x2d\x11\x2c\x80\x49\xe1\xa6\xc5\x9f\xd7\x93\x2a\x81\x3f\x50\x1a\x57\x8c\x0d\x4d\x03\x71\x7a\x56\x58\x88\x73\x5f\xa2\xe0\xb4\xb0\x96\xad\xd7\x30\xf6\xb0\xf6\x31\x6c\x03\xa1\x81\xcf\x94\xe0\x0e\x5d\xe9\x52\x3f\x50\xaf\x21\xb8\x6d\x42\x6c\x9e\x6c\x94\x40\xd0\x71\xb7\xfb\xdd\xb2\x5e\xc3\x3f\x72\x16\x57\x23\xbd\xe3\xa9\xb4\xcf\xe3\xfa\x43\x9c\x63\xc5\xdd\xbe\xbb\x92\x77\x37\x76\xbf\xe0\x57\xb7\x2e\xaf\x5f\x70\xbe\x39\x67\x03\xbc\x27\xe1\x80\x83\x69\x3c\xa9\x4c\xd2\x2f\xb0\xcf\xf8\xc4\x2e\x9f\xbf\x02\x00\x00\xff\xff\xfc\x2a\x56\x2f\x19\x08\x00\x00")

func _templateHandlersTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHandlersTmpl,
		"_template/handlers.tmpl",
	)
}

func _templateHandlersTmpl() (*asset, error) {
	bytes, err := _templateHandlersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/handlers.tmpl", size: 2073, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x41\x6a\xc3\x30\x10\x45\xf7\x73\x8a\x8f\xe8\x22\x86\x56\x3e\x41\x37\x69\xba\xe8\x26\x29\x34\xfb\x22\x5b\x23\x45\xb8\x1e\x19\x75\x5c\x5a\x84\xee\x5e\x4c\x42\x96\x33\x1f\xde\x7b\xb5\xc2\x73\x48\xc2\x30\x17\x76\x9e\x8b\x41\x6b\xd4\xf7\x78\xc9\x9e\x11\x59\xb8\x38\x65\x8f\xe1\x0f\x31\xab\x8f\x2c\x8f\x38\x9c\x70\x3c\x9d\xf1\x7a\x78\x3b\x5b\xa2\xc5\x8d\x93\x8b\x8c\x5a\xf1\x60\xdf\x6f\x47\x6b\x44\x69\x5e\x72\x51\xec\xc8\x8c\x59\x94\x7f\xd5\x90\x09\xb3\x1a\x22\x13\x93\x5e\xd6\xc1\x8e\x79\xee\x37\x6a\xaf\xbe\x1f\x92\x18\xea\x68\x53\x1f\xf3\x53\x5e\xae\x59\x49\x53\x16\x84\x5c\x30\x31\x2f\x49\x22\xae\xd4\x6f\x4b\x3f\xae\xe0\x13\xcf\x18\x92\xd8\xfd\x1a\x02\x97\xda\xee\xcf\x9b\xd1\xee\xdd\x38\xc5\x92\x57\xf1\xbb\xee\x3e\x86\x59\xed\x87\x96\x24\x91\xcb\x4e\xd2\x57\x47\x54\x2b\x58\xfc\x96\xfd\x1f\x00\x00\xff\xff\xd8\x6f\x86\x9d\x11\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 273, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5f\x73\xdb\x36\x12\x7f\xd7\xa7\xd8\x7a\xd2\x1c\x99\x2a\x74\x9f\x9d\xfa\xe1\x1c\xa7\x17\xcf\xe4\x7a\x19\x3b\xb9\x97\x4e\xc7\x03\x91\x4b\x1b\x23\x0a\xd0\x01\xd4\x9f\x9c\xca\xef\x7e\x83\x7f\x24\x48\x82\x22\xad\x71\x73\x4d\xfd\x24\x83\xc0\x62\xf7\xb7\x3f\x2c\x76\x01\x1c\x0e\x90\x61\x4e\x19\xc2\xd9\x8a\x50\x76\x06\x55\x35\x3b\x1c\xe0\xc5\x7a\xf9\x00\x17\x97\xf0\x22\xf9\x48\xd2\x25\x79\x40\xdb\x5e\xe2\x6a\x5d\x90\x12\xe1\xec\x11\x49\x86\xe2\x0c\x5e\xa8\x2f\xea\x93\x20\xec\x01\xe1\x85\xd4\xa3\xee\x4a\xb1\x49\x4b\xa9\xbe\x9d\x9f\x83\x12\x28\x93\xb7\x7c\xb5\x42\x56\x1a\x49\xaf\x81\xe6\xaa\xf1\x9a\xa7\xd2\xb5\x58\x09\x99\x92\xd0\x7c\x31\xe3\x4b\x41\x57\xf0\x22\x73\x5d\x91\x85\x7e\x1a\x91\x1f\x28\x5b\xea\x91\x00\x00\xaa\xb9\x51\x7a\x2d\x28\x2b\xef\x0b\xd5\xe1\xac\xd5\x35\x28\xe8\xf3\xed\x07\xa3\x80\xd2\xe1\x0e\xd1\xda\x61\x9a\x21\xe7\x02\x04\xe6\x28\x90\xa5\x98\xf8\x12\xca\x2f\x6b\xd7\xf7\x17\xb2\x52\xd0\x81\xd4\x78\xc0\xc1\xb7\x33\x07\x63\xe8\xcf\x14\x8b\xcc\x87\x2a\x0f\x41\x95\x1b\x65\x27\x98\x95\x1f\x33\x8b\xb0\x0c\x22\x3d\x03\xcb\x68\x49\x39\x23\x45\x0c\x11\xe3\x25\xb4\x1b\xaf\x38\x2f\xe2\xc6\xfa\xcf\x12\xe1\x0e\x4b\xa3\x9d\x33\x4a\xc9\xfa\x47\xb7\xf1\x11\x8b\x35\x0a\xd9\x02\xc4\x68\xec\xf7\x6a\x51\xc9\xa8\xaf\x50\x53\xda\x77\xf4\xd6\xe4\xd2\xaa\x6b\x25\x65\xf2\x6f\x4c\x4b\x2e\x5a\xcc\xb2\x52\x3f\x7d\x59\xe3\xcd\x35\x50\x09\x9f\x3e\x80\x76\x02\xcd\x80\xe7\xed\x4e\xc9\x2c\xe5\x4c\x96\xc1\x91\x97\xf0\xe3\xde\xb4\xbf\xc7\xfd\xcd\x35\x54\xd5\x1b\x5f\x15\x35\xe1\x3b\x96\xf2\x0c\x81\xae\xd6\x05\x2a\x17\x49\x58\x50\x96\x98\x56\x91\xcc\xf2\x0d\x4b\x21\x32\x32\x6e\x31\x45\xba\x45\xa5\x2a\xbc\x6a\x4d\x17\x5b\x31\xb6\xe3\xd5\x26\xff\xbb\x78\xd0\xdd\x94\xb0\xab\x4d\x9e\xa3\x88\x01\x85\xe0\x02\x0e\x1a\x3d\xea\xac\xf0\x85\x5e\x5e\x02\xa3\x85\xed\xa1\xfe\x04\x96\x1b\xc1\x20\x5f\x95\xc9\x3b\x35\x38\x8f\xce\x52\xc2\xfe\x56\x02\x1a\xad\xad\x08\xb2\x53\xf6\x6a\x0f\x4a\x25\xe1\x2c\xd6\x12\xaa\x41\xa0\x3b\x6a\x26\x1f\x37\xe5\xcd\x75\x14\x40\x30\xee\x32\x6e\x90\xea\x8e\xc4\x6e\xba\x1e\xf9\x3a\x9d\xda\x1d\xdc\xc7\x10\x2c\x89\x5b\x42\x75\x6f\x3d\xab\xfa\xf2\x9e\xc8\xa8\xf7\xf5\x86\x65\xb8\xd7\x4e\x39\xd4\x13\xb6\x78\xeb\xe6\x6f\xf0\x70\x7c\xee\x60\x62\x3a\xbc\xd7\x81\x31\x2a\x90\xf5\x79\x90\xb4\x56\x41\x6c\x70\x57\x81\xe4\x70\xb0\x93\x58\x26\x41\x55\xd1\x4c\x71\x11\x0b\xa9\xba\xde\xab\x9f\x5a\xa9\xb9\xa7\xd1\x35\xdf\x2c\x0a\xac\xf5\x12\x7c\x77\x38\xa8\x01\x55\xb5\x3d\x1c\x90\x65\x55\xa5\x70\x37\x3e\x18\xd1\xc5\x33\x3e\x28\xbb\xe6\xd8\x14\xbb\x05\xdf\x59\xdb\x9c\x7d\xf7\x73\xd8\x36\xba\x08\xbe\x1b\x03\xbb\xc1\xc1\x9b\xd9\x7d\xbc\x61\x25\x8a\x9c\xa4\xe8\x7f\xb6\x7c\xd8\xf6\x97\xc5\xc0\xd2\xd8\x30\xb2\x28\x10\x4a\x3e\xb4\x3c\x2e\x20\xd7\xcc\x31\x40\xdd\x92\x9d\xc3\x0a\xcd\xda\x87\x1d\x2d\x1f\x81\x6a\xfe\x7c\x9f\xa9\xb8\xa3\x16\xd3\x1c\x68\xb6\x8f\x5b\x93\xb7\x6d\xd0\x8e\x99\x79\x2a\xa3\x10\x0a\x9b\x6d\x12\x8e\x0a\xf1\x1b\xdd\xe3\xbb\xff\x8f\x59\x17\xf0\xfd\xce\xd8\x34\x57\x6a\x34\x86\x35\x1e\xb3\x1c\x3d\x46\x11\x33\xd7\xcf\x2a\x3a\x56\x55\xb4\x8d\x8f\x3b\x7f\x88\x7b\x55\x68\x58\x58\x8f\x41\x26\x1d\x61\xd1\x91\x68\xe2\x20\x9a\x12\x72\x4f\x77\x00\x6d\x87\xe3\x3e\x61\x1a\xb2\x8c\x28\xfa\x44\x2a\x3d\xa7\x15\x96\x30\x35\x57\x86\xfc\x33\xc2\x91\xb1\xd8\x39\xc4\xa0\x20\xa1\x02\x5b\xc7\xe0\x88\x7e\x6a\xe9\x21\xc4\x68\xe1\x32\x92\xc1\xad\xad\x8e\xe5\x9d\x59\x75\x12\xd9\xc9\x96\x24\x96\x12\xb6\xa4\xd8\xa0\x4b\x54\x9a\x6f\xa9\x37\x5c\x43\x3d\x3d\xbd\xe8\xce\x13\x99\x29\x6a\xcd\xcc\x02\xbb\x2b\xa8\x26\xff\xaf\xbf\xfd\xfa\x9b\xdb\x6a\xcc\xf7\xe6\x4b\xbd\xef\x58\xe5\xac\xf3\x63\x9b\xca\xf6\x0c\xf5\xb7\x6e\x15\x8d\xcd\xbc\x9d\xd0\x30\x6d\xb7\xbe\xc3\xf2\xc8\x6e\x6d\x9c\x68\x94\x3e\x4d\xfe\x67\x26\x27\xcc\x30\x0b\x33\xf7\xd9\x4c\x18\x8d\x38\x06\xc3\x23\x29\x71\x10\xff\xf3\xf3\x7e\x6a\x6e\x38\x3c\x9d\x6f\x2a\xc1\x57\x82\x16\x9c\x17\x48\x18\xec\x1e\x69\xfa\xa8\x82\x54\x29\x36\x9a\x29\xa6\xd7\x8e\x48\xc5\xe3\xe9\xec\xec\x2a\x16\xc5\xd0\x10\xf4\x48\x59\x30\x07\xbe\xd4\xca\xc4\x4d\x56\xfc\xdd\xb3\xe7\x7f\xde\x6a\xd7\x4a\xcd\x21\x27\x85\x44\x2f\x68\xd8\xaf\x23\x9e\x9b\x6b\x98\x9c\xb3\x5c\x09\x11\x8e\x30\x0a\xe5\x6b\x0c\x55\x16\xa6\xf5\x09\x95\x85\x19\xf0\xd5\x2a\x8b\x0c\xc3\x95\x45\xc9\x27\x55\x16\xa1\x4d\xad\xd9\x14\xde\x72\x26\x37\x2b\x1c\xa8\x35\x4e\xd9\xcb\x06\xd4\xed\xef\x59\x27\xd4\x31\xc3\x81\x70\xda\x3a\x7f\x3e\x26\x1f\xc9\xcc\x02\x9a\xf6\x73\xe8\x3f\x64\x4d\x39\x7d\x3a\xd3\x1d\xba\xb9\x71\x58\xdf\x7e\x32\xa8\xfe\xcc\x21\xd4\x07\x64\xf3\x21\x0a\xb5\x6a\x93\xb8\x6b\xe8\x60\x5e\x7d\x3a\x91\xa6\x25\x45\xee\xaf\x6d\x8e\xaa\x94\x68\xb6\x57\x76\xfc\xf8\x46\xff\xfa\xa9\x31\x51\x37\xfc\xf0\x03\x1c\x66\x6d\xfc\x46\xb3\xe6\xda\x5e\xc6\x4e\xc6\x6a\x0a\x5e\x5f\x0b\xb3\x3e\x6e\xea\x6f\x4b\x84\xae\x2b\x75\xca\xd2\x24\x2a\xbd\x7e\x1a\x63\x85\x84\xe1\xa8\x85\xba\x69\xf8\xa9\xc6\xe9\x4d\xfd\x4b\xa3\xde\x05\xbd\x43\x55\x98\x56\xa1\x1a\x55\xf5\xb6\x62\xbd\x60\x02\xb6\x51\xba\x1e\xd6\xce\x82\x9b\xfc\xfd\x1b\x72\x4a\x1d\x7f\x06\x0b\x7a\xdf\x75\xf5\xfe\x7f\xc4\x75\x5e\xa9\xac\x7a\x27\xe1\xad\xee\x58\xb9\xfc\xe7\x40\x64\x94\x12\xdd\x85\xd9\xae\x8c\xbe\x39\x12\xf4\x17\x0a\x3c\x29\x70\x69\xf5\xf9\x0e\x2e\x81\xac\xd7\xc8\xb2\x48\xf0\xdd\xdc\x40\x36\x25\x32\x8c\xef\xbc\x56\xec\x68\x42\x27\xf8\xae\x3f\x61\x68\x9f\x7d\xfe\xa9\x07\xac\x1d\xc0\xb7\xea\xed\xba\x4f\x3c\x48\x7b\xae\x10\xf5\xe7\xdb\x63\xa7\xd6\x5b\x3d\x00\x8f\x86\xb1\xe9\x07\x33\xa7\x05\xad\xaf\x8b\xd3\x10\xa5\x4f\x8f\x52\x7f\x11\x1e\xf4\xb3\xd3\xf0\x41\xe4\xa4\x23\x24\x7b\xcb\xd8\x5a\x83\xe7\xe7\xa0\xaf\xa7\xf4\x6d\xa1\x57\x0a\xd6\x8d\x5c\x34\x37\x5a\xfe\xc8\xe1\x02\xb1\x53\x1f\xd6\x92\xa2\x38\x20\x06\x0e\x4e\xcd\x97\x7d\x49\xfa\x68\xab\x75\x17\x26\x37\x82\xb2\x07\xa0\x4e\x82\x04\xca\x20\xe5\xab\x35\x2d\xf0\x75\x49\x57\xe8\x2e\x37\xfc\xfb\x37\xb5\xdd\x47\xb3\x7b\xff\xe2\x0c\x2e\xdd\x7c\xb6\xd7\xa1\xb2\x1d\x6c\xfd\x1b\xea\x10\x46\xf0\x3e\x64\x55\x78\xb4\x35\x25\x9e\x79\x77\xbe\xff\xc4\xf2\x91\x67\xad\xdb\xc5\xba\x09\x28\xdb\xf2\x25\x4a\x58\x99\x96\x5e\xd1\x6b\xa0\x53\x88\x98\x0a\x5b\xdf\xb7\x7e\x49\x46\xae\xbb\xe1\x5b\xbf\xef\x6e\x24\xdc\xa2\xdc\x14\x65\xa8\xed\x8e\xb2\x87\x4d\x41\x74\xe0\x34\x4c\x4d\xe1\xd5\xdb\x82\x22\x2b\xe3\x2e\xce\x51\xeb\x18\x48\xe0\x7f\x36\x28\xcb\xfb\x35\x11\x64\xa5\xcd\xd0\x3c\x8e\x8c\xfb\xed\x89\x82\x99\xa4\x4e\x21\x5e\x39\xf2\x5a\x75\x9a\x8b\x34\x53\x1e\xb8\x4f\x36\x58\x79\x97\x6b\xda\x71\xae\x6c\xd5\x35\x85\x91\xd1\x11\xe8\x8e\xee\x3c\xa8\x49\xba\xbc\xb7\xba\x5a\x25\x3b\xa7\x1b\x69\x22\xd6\x69\x72\xa3\x39\x74\x4b\x76\x51\x5a\xee\xe7\x60\x47\xcc\xe1\xa5\x99\x68\xe4\x54\x83\xd1\x42\xeb\xd8\x09\x38\x3e\xd2\xed\x3c\xca\x8e\x33\xc2\x93\x77\x05\xae\xe4\x5c\x87\xa0\x50\x9c\x77\x4b\xdf\xf4\xee\xf4\x73\x67\x8f\xfe\xa0\xe7\xf2\xa4\x72\x24\x7a\x00\x9f\x5d\x71\x5e\xbc\x2d\x88\x94\x67\xda\x3b\x61\x5f\x2e\x38\x2f\x9e\xe8\x3a\xeb\xf0\x2b\xbe\xff\x6a\x1e\x74\x47\x5f\x03\xf6\x41\x55\x75\x7c\xeb\x01\xec\xb6\x45\x52\x48\x6c\xbe\x85\xb6\x9c\xe3\x33\x04\xa8\xe0\xa3\x72\x45\x24\xd6\x99\xe6\x10\x39\xee\xf5\xf1\xeb\xc5\xe5\x88\x80\x24\x7a\xa5\xa6\xfe\x24\x5c\xba\x6a\xa7\xe5\xcb\x63\x7c\xf2\xc2\xdb\x73\x52\xcb\x3f\xe8\x54\x8c\xe0\x4b\xf8\xd7\xf2\x0f\xf0\x3c\x5f\x8e\xac\xdb\xf6\x92\x6d\x65\x02\x43\xe1\xdd\x3b\x32\xae\x8f\x1f\xf5\xdb\xaa\x9b\x66\xb7\xf5\xdf\x0c\x35\xa7\xfc\x6b\x81\x52\x67\x0d\x75\x66\xe4\x36\xa8\x07\x64\x28\x68\xaa\x1f\xc7\x24\x2a\xd0\x37\xa5\x40\x1d\xfc\xeb\xc8\x9f\x0f\x44\x7e\x3b\xcc\xaa\xa7\xf2\x80\x3d\x51\x99\xca\x85\xfa\x0d\x0f\xc1\xaa\xc1\x65\x85\x8b\x4d\x1e\xeb\x6e\xdd\x84\x50\xb5\xa9\xbf\x35\x61\x34\x8d\x74\xee\xa6\x9a\xb4\x7c\x90\x3b\x5a\xa6\x8f\xe6\x05\xc1\x43\x12\x29\xed\xcd\x05\x94\x03\x26\xd5\x7b\xa8\x3e\x82\x74\x69\x92\x84\xd7\x46\x3b\x48\x89\x44\x73\x4c\x9e\x26\x75\x8a\x68\x61\x4b\x3d\x74\x1c\xe6\x6e\x5c\x86\x39\xd9\x14\xe5\x85\xd5\x69\xeb\x34\xaa\x9f\x77\x35\x98\xd7\x09\x90\xf5\xbc\x97\xda\xd4\xff\xdb\x4c\x46\xff\xdf\x4d\xc2\x6a\x49\x33\xff\x2e\xa0\x05\x5d\xe7\x62\x80\x88\x2f\x90\xe1\x6b\x89\x82\x92\x82\xfe\x97\x94\x94\xb3\x3a\xd9\x6a\xaa\x0d\xb3\x8c\x42\xe2\x94\x2b\xda\xb7\x02\x51\xa7\xe4\x6c\xc5\x53\x9a\xd5\x7e\x5d\x6c\xf2\xe4\x23\xe2\xf2\xe6\xda\x26\xf9\x43\xc9\xfd\xf0\x9e\x65\x1d\x4a\x33\xef\x19\xc8\x31\x57\xda\xf5\xa8\x3d\xd9\x72\xa4\xb9\x0a\xb8\xa8\xa7\x74\xd8\xa9\x1c\xac\xeb\xdf\xa4\xee\xb5\x75\xe5\x4b\xea\x25\x84\x9d\x52\x45\x3f\xc8\xb0\xc5\x9a\x62\xed\xf8\x23\x0c\x6d\xe7\x68\x05\x93\x27\x47\xca\x94\xaa\x8b\xdd\xcb\x6d\x30\x6a\xaa\x7f\x1d\x3d\x83\x70\x3f\x59\x0d\x45\x84\x5f\x70\xf7\x99\xe1\x7e\x8d\x69\x89\xd9\xcd\x75\x44\xb3\xd8\x5d\x87\x18\x5a\xb6\x19\xb4\xe0\x7b\x94\x50\x3e\x76\x17\xc3\x5a\xf0\x2d\xd5\x1e\x20\xf6\x35\x60\xe2\xaf\x99\x66\x0b\x6e\x5e\x45\x42\xfd\x40\xd0\xdb\x49\x8e\xac\x8c\x81\x5b\x32\x6f\x01\x34\xb3\xb8\xca\x68\x61\x62\x80\xff\xa9\xbe\x2d\xeb\xad\x85\xce\x0d\xd9\xe2\x89\x0f\x3f\x5a\x40\x7b\x06\x77\x6e\xc5\x34\x17\xc7\xe3\xe5\x84\x35\x76\x54\x0d\xe5\xa8\xcc\x94\xb3\xe1\xc7\x19\x8b\xa4\x0f\xfe\x25\x6c\x03\x55\xeb\xc8\x0b\xc8\xa7\x3b\xc0\xbe\x53\x99\xec\x80\xdf\x7f\x0f\x6b\x7b\xea\x8b\x16\xef\x35\x6b\xff\xf1\x8d\x15\x12\x98\x30\x69\xf4\x8e\x67\xdd\xdd\xda\xfe\xfc\x5f\x00\x00\x00\xff\xff\x72\xe1\xc1\x98\x5b\x2d\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 11611, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateRegistryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x31\x4b\x04\x31\x14\x84\xfb\xfc\x8a\x21\x6c\xa1\xa0\x7b\xa2\xdd\x81\x9d\x85\x82\x82\x1c\xd7\x89\xc5\xe3\x76\x36\x86\xbb\xe4\x42\x92\xc5\x5b\x42\xfe\xbb\xc4\x5d\xac\x2c\xdf\x0c\xf3\xf1\xbe\x52\x30\x70\xb4\x9e\xd0\x91\xc6\xa6\x1c\x67\x8d\x5a\x55\x29\xe8\xc2\xd1\x60\xfb\x88\xae\x7f\x97\xc3\x51\x0c\xd7\x3c\xd3\x85\x93\x64\x42\x7f\x51\x06\x46\x8d\xae\x35\x6a\xb3\xc1\x7e\x0e\x4c\x88\xcc\x53\xf4\x09\x4e\x42\xb0\xde\x60\x8c\x67\x87\x3c\x07\xc2\x0e\x09\xf9\x8c\xfd\xeb\x72\x7a\x71\x4c\xbd\x1a\x27\x7f\x58\xa6\x6f\x12\xae\xae\xdb\xee\x63\xb2\x3e\x3f\xdc\x7f\xa6\x1c\x1b\xa1\x28\xac\xd4\x7f\xcb\x52\x6e\x11\xc5\x1b\xa2\xe3\x89\x6e\x79\x7a\xb7\xea\xb4\xdf\x00\xe0\xee\xd2\x9c\x5a\xdf\x3f\xf3\xf2\xf2\x84\x5a\xb7\xd0\x7f\xd9\x4e\xbe\x51\xab\xbe\xf9\x85\xd1\x0f\xcb\xac\xaa\xaa\x9a\xf3\x1a\xfc\x04\x00\x00\xff\xff\x97\x1b\x2c\x20\x2e\x01\x00\x00")

func _templateRegistryTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateRegistryTmpl,
		"_template/registry.tmpl",
	)
}

func _templateRegistryTmpl() (*asset, error) {
	bytes, err := _templateRegistryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/registry.tmpl", size: 302, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateUtilsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x41\x6b\xf3\x30\x0c\x86\xef\xf9\x15\x2f\xc1\x7c\xf0\x8d\x2c\x61\xd7\x40\x4f\x1b\x3b\x8d\x31\xd8\x76\x2a\xa5\x78\x89\x32\x4c\x5d\x37\x73\x5c\xd6\x62\xfc\xdf\x87\xdc\xb4\x75\x4b\xc6\x72\x89\x2c\xbd\x92\xfc\xc8\xf2\x1e\x2d\x75\xca\x10\x72\x4b\x5f\x5b\x1a\xdc\xb2\x97\x56\xae\x87\x1c\x21\x34\x6e\x87\x66\x63\x1c\xed\x5c\x79\x7f\xf8\x7b\x7f\x0b\xd5\xa1\x7c\x37\xbd\x6c\x56\x2f\x2c\x25\x47\x76\x40\x08\xc7\xd0\xa3\x22\xdd\xb2\xa3\xc8\xd8\x65\xa5\xf9\x24\x88\x0e\xf5\x2c\x89\x79\x0f\xbd\xf9\x26\x0b\xd1\x95\xcf\x72\x4d\x08\x01\xde\xc3\xd1\xba\xd7\xd2\x11\xf2\xde\x2a\xe3\x96\x6e\xdf\x53\xce\xc9\x21\x14\x5c\x8c\x4c\x1b\x42\x36\x5a\x38\x9a\x7a\xe0\xfc\x02\x23\x01\x6e\xbc\xc7\xb1\xea\xb5\xf6\x60\x66\x09\x37\x83\x2c\xc7\xd4\x3c\xe1\x98\x40\xcc\x00\x9c\xba\xd4\x33\xfc\xf3\x1e\xe2\xd4\x29\x46\xf9\xbb\xc6\x16\x67\xee\x44\x93\xa0\xd7\x98\x98\x47\x71\x51\x6f\xbc\x38\x1f\x53\x92\xdf\x98\x92\xe9\x8d\xe4\xaa\x83\x28\x1f\x36\xdb\x0f\x4d\xaf\x5a\x35\xdc\x61\xbe\x98\x2f\x22\xc1\xdb\xbe\xa7\x8b\x69\x46\xf1\x59\x36\x2d\x8a\xaf\x78\xe5\xff\xfb\x52\x5a\x99\x55\xdc\xae\xac\xaa\xb2\xaa\xc2\x13\x9f\xeb\x74\x55\x54\x01\xc1\xaa\xb8\x31\x07\x61\x9c\x97\x6c\x5b\x08\x85\x3b\x84\xf0\x3f\xce\x2f\x8a\x26\xf6\x21\x9a\x3f\x01\x00\x00\xff\xff\x33\xe8\x16\x59\xda\x02\x00\x00")

func _templateUtilsTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateUtilsTmpl,
		"_template/utils.tmpl",
	)
}

func _templateUtilsTmpl() (*asset, error) {
	bytes, err := _templateUtilsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/utils.tmpl", size: 730, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/client.tmpl":   _templateClientTmpl,
	"_template/handlers.tmpl": _templateHandlersTmpl,
	"_template/header.tmpl":   _templateHeaderTmpl,
	"_template/main.tmpl":     _templateMainTmpl,
	"_template/registry.tmpl": _templateRegistryTmpl,
	"_template/utils.tmpl":    _templateUtilsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"client.tmpl":   &bintree{_templateClientTmpl, map[string]*bintree{}},
		"handlers.tmpl": &bintree{_templateHandlersTmpl, map[string]*bintree{}},
		"header.tmpl":   &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":     &bintree{_templateMainTmpl, map[string]*bintree{}},
		"registry.tmpl": &bintree{_templateRegistryTmpl, map[string]*bintree{}},
		"utils.tmpl":    &bintree{_templateUtilsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
