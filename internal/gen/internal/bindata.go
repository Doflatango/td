// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/client.tmpl
// _template/handlers.tmpl
// _template/header.tmpl
// _template/main.tmpl
// _template/registry.tmpl
// _template/string.tmpl
// _template/utils.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfe\x8a\xc1\x84\x92\x94\xe0\xdc\x03\x3d\xa5\x3d\x14\xda\x12\x4a\x7e\x40\x95\xd7\x89\x88\xbd\x12\xeb\x75\x92\x22\xf2\xef\x45\xb2\xd2\x93\x96\xa7\xd1\x68\x66\x63\x44\x4b\x9d\x63\x42\x6d\x7b\x47\xac\x35\xee\xf7\x2a\x46\x2c\xc2\xf9\x88\xed\x0b\x16\xcd\xde\xd8\xb3\x39\x52\xe1\x4a\x43\xe8\x8d\x12\xea\x13\x99\x96\xa4\xc6\x22\xdd\x54\x9b\x0d\xde\xf9\xe2\xcf\x24\xb0\x86\xe1\xf2\x0c\x31\x57\x7c\x1e\xf6\xe2\xd5\x43\x82\x85\x35\x7d\x3f\x36\x95\xfe\x06\xfa\x97\x3b\x56\x92\xce\x58\x42\xac\x50\xe8\xb7\xb9\x2e\xad\xde\x60\x3d\x2b\xdd\xb4\xd9\xcd\xe7\x1a\x8e\xc3\xa4\xf8\x71\xdc\xbc\xb1\xf5\x2d\xc9\x1a\x7e\xd2\x07\x7b\xa5\xcc\x56\x20\x11\x2f\xd5\x1c\x6b\x97\x7b\xc1\x0d\xa1\xa7\x21\x4d\x03\xe9\xc9\xb7\x23\x3a\x2f\x39\x90\xe3\x23\xba\x89\xad\x3a\xcf\x23\x3a\xf1\x03\x0e\x1f\x18\xed\x89\x06\x83\x8b\x33\x8f\xa4\x25\x77\xf1\x1b\x55\x26\xab\x39\x73\x6a\x56\x34\xe9\xcf\xe4\x85\x2f\xba\xce\xc2\xa5\x2b\x3d\x8b\x62\x85\xe7\xe2\x90\x9f\x92\x4e\xc2\x78\x9a\x51\x22\xd9\x6e\x5b\x16\x28\xeb\x0a\xb8\x27\xd3\x18\x41\xdc\xa6\x55\xff\x05\x00\x00\xff\xff\x88\xcc\x3e\xfd\xb3\x01\x00\x00")

func _templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateClientTmpl,
		"_template/client.tmpl",
	)
}

func _templateClientTmpl() (*asset, error) {
	bytes, err := _templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/client.tmpl", size: 435, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHandlersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x3b\x6f\xe3\x38\x10\xae\xc5\x5f\x31\x31\x5c\x48\x81\x4f\xee\x1d\xa8\x4a\x70\x88\x9b\x5c\x80\xbb\x54\x46\x70\xe0\xca\xa3\x98\xb0\x4c\x69\x49\x6a\xe3\xac\xc0\xff\xbe\x18\x92\x92\xf5\x88\x37\xc5\xba\xb1\x38\x8f\x6f\x5e\x1f\x87\x6d\x0b\x7b\x2c\x84\x44\x58\x1c\xb8\xdc\x97\xa8\xf4\x02\xac\x65\x6d\x0b\xcb\xfa\xf8\x06\x9b\x0c\x96\xe9\x33\xcf\x8f\xfc\x0d\x83\xdc\xe0\xa9\x2e\xb9\x21\x0f\xe4\x7b\x54\x0b\x58\x92\x86\x99\x8f\x1a\x21\x80\x40\x06\x45\x23\xf3\xf8\xa5\xde\x73\x83\xf7\x95\x34\x78\x36\x2b\x08\xc7\x92\x6b\x9d\x00\x2a\x55\xa9\xe0\xe6\x15\x0f\x42\xd7\xdc\xe4\x07\x54\xa0\x8d\x6a\x72\x03\x2d\x03\x80\x0e\x54\xc3\x89\xd7\x3b\x21\xcd\x6b\x10\x30\xcb\x18\x85\x81\x27\x7c\x9f\x22\xc4\xc9\x1c\xd4\xa3\x29\x34\x8d\x92\x33\xad\x57\x0e\xc3\x6d\xa6\xf1\x5a\xbb\x72\x46\x96\xd9\x51\xde\xa1\xbe\x71\xd2\xb9\x17\xa6\x41\xc9\x9c\xf0\x45\x0f\xcb\xb8\xa5\xa3\x93\xdf\x1f\xb8\x19\xc8\xe9\xe8\xe4\x42\x0a\x03\xdf\xaa\xaa\xec\x4b\x8d\x1b\xb8\x1d\x45\x4d\xa0\xe4\x3f\x3f\xb6\x52\x98\xbf\x55\x75\xf2\x2a\x1d\x37\xfe\xbf\xb3\xd5\x49\xc8\x4a\x14\xd0\xa4\x0e\xf5\x52\xaf\x6f\x48\xa8\xcc\xfd\x05\x93\x0c\x8c\x6a\x30\x48\x7c\xea\x19\x9c\xf8\x11\xe3\x51\x05\x2b\x28\x51\x76\x11\xbd\x5d\x92\xb0\xa8\xa8\x14\xfc\xbf\x82\x9c\xa6\x4d\x3c\x52\x5c\xbe\x21\x8c\xcc\xa0\x65\x51\xd4\x38\x88\xea\x48\x36\xce\x38\x8d\x1d\x6c\xc2\xa2\x48\x14\x70\x53\x1d\x9d\x59\x44\x0d\x15\xb2\x41\x16\x45\x96\xdc\x3c\xc4\x8e\xdc\xd3\xed\xc3\x2b\x64\x40\x9f\x2c\xea\x6b\xf0\x4d\x9d\x66\x4c\xd2\x71\xc6\xce\xee\xeb\x8c\x3d\x1c\xa5\x92\x3b\x88\x71\xc6\xa4\xfd\x32\x63\x07\xb1\x23\xf7\x90\x31\x7d\x52\xc6\x83\xe9\x4e\x79\x99\xc0\xa3\x63\x5f\x9c\x9b\xf3\x94\x54\x2b\x98\xcf\xd9\x5d\xab\x30\xdd\x86\x7c\x36\xd9\x98\xa6\x97\xc1\x07\xc1\xc6\x9f\x72\x73\xee\xe8\xdd\xb7\xc2\xc3\x7f\x32\xbd\x10\xf6\x82\xa5\xdf\x85\xc9\x0f\xc1\x20\x8d\xe9\x76\x10\xe7\xda\xf6\xaf\xe0\xba\xd4\x6e\x97\xfc\xeb\xee\x88\x06\x6b\xdb\x96\xd8\x88\xdf\x61\xa9\xd3\xad\x34\xa8\x0a\x9e\x23\x2c\x06\x3b\xc2\x6d\xa2\x2e\x40\xce\x35\xc2\x2d\xed\x25\x9d\x3e\xf1\x13\x6d\xa3\x4d\xaf\x0c\xd4\x0e\xf7\xb4\x9b\x4d\x93\x76\x57\x79\x37\xf2\xfb\xef\xa3\xc6\xed\xc3\xeb\x1d\xb8\x41\xc1\xe4\x47\x4d\x4b\x7f\x73\xa7\x92\x99\x07\x95\xa1\x14\x45\x0c\xf1\x62\xc2\xe8\xba\x97\xdc\x39\xed\x4d\x06\x52\x94\x9f\xc4\x1b\xec\x24\x54\x6a\xa6\xb6\x6c\x7c\xa2\x8e\xa2\xdc\xfb\x06\xfa\x0f\x76\xd1\x12\xd1\x02\x98\x14\x6e\x6b\xfc\xf9\x04\xa8\x77\xf8\x03\xa5\x71\xed\xdb\xd0\x56\x10\xa7\x67\x85\x85\x38\xf7\x4d\x0d\x4e\x0b\x6b\xd9\x7a\x0d\x63\x0f\x6b\x1f\xc3\xab\x20\x34\xf0\x99\x12\xdc\xa1\x6b\x5d\xea\x17\xeb\x35\x04\xf7\xaa\x10\xab\x27\x2f\x4b\x20\xea\x98\x1f\xfd\x1b\xb3\x5e\xc3\x3f\x72\x16\x57\x23\xdd\xe7\xa9\xb4\xcf\xe3\xfa\x85\x9c\x63\xc5\xdd\xbb\x77\x25\xef\x6e\xfd\x7e\xc1\xc8\xee\xd9\xbc\x5e\xe0\xfc\x05\x9d\x2d\xf2\x9e\x84\x03\x0e\xa6\xf1\xa4\x33\x49\xff\x90\x7d\xc6\x27\x76\xf9\xfc\x15\x00\x00\xff\xff\x5e\x75\x8c\xdd\x21\x08\x00\x00")

func _templateHandlersTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHandlersTmpl,
		"_template/handlers.tmpl",
	)
}

func _templateHandlersTmpl() (*asset, error) {
	bytes, err := _templateHandlersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/handlers.tmpl", size: 2081, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xc1\x6a\xc3\x30\x0c\x86\xef\x7a\x0a\x61\x76\x48\x61\x73\x9e\x60\x97\xac\x3b\xec\xd2\x0e\xd6\xfb\x70\x62\xd9\x15\x69\xe4\xe0\x28\x63\xc3\xe4\xdd\x47\xda\xd0\x5e\x04\xd2\x0f\x9f\xbe\xbf\x14\xf4\x14\x58\x08\xcd\x99\x9c\xa7\x6c\x70\x59\xa0\xae\xf1\x2d\x79\xc2\x48\x42\xd9\x29\x79\x6c\xff\x30\x26\xf5\x91\xe4\x19\xf7\x47\x3c\x1c\x4f\xf8\xbe\xff\x38\x59\x80\xd1\x75\xbd\x8b\x84\xa5\xe0\x93\xfd\xdc\x96\x65\x01\xe0\x61\x4c\x59\xb1\x02\xd3\x25\x51\xfa\x55\x03\x26\x0c\xeb\x9c\x34\xb3\xc4\xc9\x00\x98\xc8\x7a\x9e\x5b\xdb\xa5\xa1\x5e\xf9\xb5\xfa\xba\x65\x31\xb0\x83\x55\xe2\x90\x5e\xd2\x78\x13\x64\xe5\x24\x18\x52\xc6\x9e\x68\x64\x89\x78\xe3\x4f\x16\x7e\x5c\xc6\x6f\x7c\xc5\x96\xc5\x36\x73\x08\x94\xcb\x72\x3f\x6e\xbf\x6d\xe3\xba\x3e\xe6\x34\x8b\xaf\x76\xf7\x30\x0c\x6a\xbf\xae\x32\x94\x2b\xe1\xcb\x23\xd9\x14\x6d\x33\xf3\xc5\x5f\x81\x50\x0a\x92\xf8\xb5\xda\x7f\x00\x00\x00\xff\xff\xaa\xa0\x2f\x0c\x35\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 309, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5f\x73\xdb\x36\x12\x7f\xd7\xa7\xd8\x7a\xd2\x9c\xe8\x2a\x54\x9f\x9d\xfa\xe1\x6c\xa7\x17\xcf\xe4\x7a\x99\x38\xb9\x97\x4e\xc7\x03\x91\x4b\x19\x23\x0a\xd0\x01\x90\x64\x9f\xca\xef\x7e\x83\x7f\x24\x48\x82\x92\xec\x51\x73\x69\xfd\x24\x83\xc0\x62\xf7\xb7\xff\x01\xec\x76\x6f\x60\x7a\x3e\xe7\xea\x69\x85\x17\x30\xa7\xea\x61\x3d\x4b\x33\xbe\x9c\xce\xb9\xca\xa7\x2a\x9f\x52\xa6\x50\x30\x52\x4e\xe7\xc8\xd2\x8c\xb3\x82\xce\xcf\xa7\xf0\xa6\xaa\x46\xa3\xdd\x0e\x72\x2c\x28\x43\x38\x5b\x12\xca\xce\xa0\xaa\xf4\xd8\xab\xd5\x62\x0e\x17\x97\xf0\x2a\xfd\x48\xb2\x05\x99\xa3\x1b\x57\xb8\x5c\x95\x44\x21\x9c\x3d\x20\xc9\x51\x9c\xc1\x2b\x70\x64\x04\x61\x73\x84\x57\xd2\xac\xba\x53\x62\x9d\x29\xa9\xbf\x4d\xa7\xa0\x09\xca\xf4\x9a\x2f\x97\xc8\x94\xa5\xf4\x06\x68\xa1\x07\x6f\x78\x26\xfd\x88\xa3\x90\x6b\x0a\xcd\x17\xbb\x5e\x09\xba\x84\x57\xb9\x9f\x8a\x2c\xf6\xd3\x92\xfc\x40\xd9\xc2\xac\x04\x00\xd0\xc3\x0d\xd3\x2b\x41\x99\xba\x2f\xf5\x84\xb3\xd6\xd4\x28\xa1\x2f\x9f\x3e\x58\x06\x34\x0f\x77\x88\x4e\x0e\x3b\x0c\x05\x17\x20\xb0\x40\x81\x2c\xc3\x34\xa4\xa0\xf5\xe0\xe6\xfe\x42\x96\x1a\x3a\x90\x06\x0f\xd8\x85\x72\x16\x60\x05\xfd\x99\x62\x99\x87\x50\x15\x31\xa8\x0a\xcb\xec\x11\x62\x15\xfb\xc4\x22\x2c\x87\xb1\xd9\x81\xe5\x54\x51\xce\x48\x99\xc0\x98\x71\x05\xed\xc1\x2b\xce\xcb\xa4\x91\xfe\x8b\x44\xb8\x43\x65\xb9\xf3\x42\x69\x5a\xff\xe8\x0e\x3e\x60\xb9\x42\x21\x5b\x80\x58\x8e\xc3\x59\x2d\x53\xb2\xec\x6b\xd4\x34\xf7\x1d\xbe\x8d\x71\x19\xd6\x0d\x93\x32\xfd\x37\x66\x8a\x8b\x96\x65\x39\xaa\x9f\x9f\x56\x78\x7b\x03\x54\xc2\xe7\x0f\x60\x94\x40\x73\xe0\x45\x7b\x52\x3a\xca\x38\x93\x2a\xba\xf2\x12\x7e\x7c\xb4\xe3\xef\xf1\xf1\xf6\x06\xaa\xea\x6d\xc8\xca\x68\xb7\x6b\x98\x96\x4a\x50\x36\xbf\xcf\x51\xd0\x8d\xe6\xdb\xe0\xad\x59\x7a\xc7\x32\x9e\x23\xd0\xe5\xaa\x44\xad\x44\x09\x33\xca\x52\x3b\x2a\xd2\x51\xb1\x66\x19\x8c\xed\x2e\x9f\x30\x43\xba\x41\x2d\x0c\x9c\xb7\x18\x4a\x1c\x19\x37\xf1\x6a\x5d\xfc\x5d\xcc\xcd\x34\x4d\xec\x6a\x5d\x14\x28\x12\x40\x21\xb8\x80\x9d\xc1\x97\x7a\x39\x43\xa2\x97\x97\xc0\x68\xe9\x66\xe8\x3f\x81\x6a\x2d\x18\x14\x4b\x95\xbe\xd3\x8b\x8b\xf1\x59\x46\xd8\xdf\x14\xa0\xe5\xda\x91\x20\x5b\x8d\x88\xd1\xb1\xd4\x14\xce\x12\x43\xa1\x1a\x54\x45\x87\xcd\xf4\xe3\x5a\xdd\xde\x8c\x23\x18\x27\x5d\x9b\x1c\x74\x06\x6f\xe6\x7e\xbb\x9e\x79\x76\x26\xb5\x27\xf8\x8f\x31\x58\x52\xef\x64\xf5\x6c\xb3\xab\xfe\xf2\x9e\xc8\x71\xef\xeb\x2d\xcb\xf1\xd1\x28\x65\x57\x6f\xd8\xb2\x6c\xbf\x7f\x83\x87\xb7\xf8\x0e\x26\x76\xc2\x7b\x13\x3a\xc7\x25\xb2\xbe\x1d\xa4\x2d\x3f\x49\x2c\xee\x3a\xd4\xec\x76\x6e\x13\x67\x49\x50\x55\x34\xd7\xd6\x8a\xa5\xd4\x53\xef\xf5\x4f\xc3\xd4\x24\xe0\xe8\x86\xaf\x67\x25\xd6\x7c\x09\xbe\xdd\xed\xf4\x82\xaa\xda\xec\x76\xc8\xf2\xaa\xd2\xb8\x5b\x1d\x1c\xe0\x25\x10\x3e\x4a\xbb\xb6\xb1\x63\xe4\x16\x7c\xeb\x64\xf3\xf2\xdd\x4f\x60\xd3\xf0\x22\xf8\xf6\x10\xd8\x0d\x0e\xc1\xce\xfe\xe3\xad\xce\x78\x05\xc9\x30\xfc\xec\xec\x61\xd3\x77\x8b\x01\xd7\x58\x33\x32\x2b\x11\x14\x1f\x72\x8f\x0b\x28\x8c\xe5\x58\xa0\x3e\x91\xad\xc7\x0a\xad\xef\xc3\x96\xaa\x07\xa0\xc6\x7e\xbe\xcf\x75\x64\xd2\xce\x34\x01\x9a\x3f\x26\xad\xcd\xdb\x32\x18\xc5\x8c\x02\x96\x51\x08\x8d\xcd\x26\x8d\x47\x85\xe4\xad\x99\xf1\xdd\xff\x47\xac\x0b\xf8\x7e\x6b\x65\x9a\x68\x36\x1a\xc1\x1a\x8d\x39\x1b\xdd\x67\x22\x76\xaf\x9f\x75\x74\xac\xaa\xf1\x26\xd9\xaf\xfc\x21\xdb\xab\x62\xcb\xe2\x7c\x0c\x5a\xd2\x1e\x2b\xda\x13\x4d\x3c\x44\xc7\x84\xdc\x97\x2b\x80\xb6\xc3\x71\xdf\x60\x1a\x63\x39\xc0\xe8\x33\x4d\xe9\x94\x52\x38\x83\xa9\x6d\x65\x48\x3f\x07\x6c\xe4\x50\xec\x1c\xb2\xa0\xa8\x41\x45\x52\xc7\xe0\x8a\x7e\xf1\x19\x20\xc4\x68\xe9\x6b\x96\xc1\xd4\x56\xc7\xf2\xce\xae\xa6\xcc\xec\xd4\x53\x12\x95\x84\x0d\x29\xd7\xe8\x4b\x99\xe6\x5b\x16\x2c\x37\x50\x1f\x5f\x5e\x74\xf7\x19\xdb\x2d\x6a\xce\xac\x83\xdd\x95\xd4\x18\xff\xaf\xbf\xfd\xfa\x9b\x4f\x35\xf6\x7b\xf3\xa5\xce\x3b\x8e\x39\xa7\xfc\xc4\x15\xbb\x3d\x41\xc3\xd4\xad\xa3\xb1\xdd\xb7\x13\x1a\x8e\xcb\xd6\x77\xa8\xf6\x64\xeb\x83\x24\x6b\x97\x05\x25\xd6\x68\x75\x6e\x65\x7c\x19\x3b\x5f\x98\x3c\x15\x43\x05\x29\x25\x06\x35\x57\xdf\x31\x4e\x86\xd0\x61\x66\x8c\x8a\xf6\xd4\xe4\x51\xf5\x4e\xa7\xfd\xde\xc0\xba\xc8\xf1\xe6\xac\x3b\x0c\x4d\x68\xc6\x79\x89\x84\xc1\xf6\x81\x66\x0f\x3a\x06\x6a\x7d\xe9\xed\xed\xac\x2d\x91\xda\x4d\x8e\x37\xfe\x2e\x63\xe3\x04\x1a\xfb\xdf\xd3\x97\x4c\x80\x2f\x0c\x33\x49\x53\x74\x7f\x77\xf2\xf2\x32\x08\x26\x86\xa9\x49\xcb\x1a\x82\xaf\x07\x34\x37\xb1\x66\xed\x94\xd5\xf4\x30\xb1\x00\xa6\x51\xbe\xc1\x58\xe3\x62\x47\x9f\xd1\xb8\xd8\x05\x5f\xad\x71\xc9\x31\xde\xb8\x28\x7e\x54\xe3\x12\xcb\x99\x4d\xce\xb9\xe6\x4c\xae\x97\x38\xd0\xca\xbc\x24\x55\x0e\xb0\xdb\x4f\x89\x2f\x68\x93\x86\xe3\xec\x71\x7e\x7e\x3a\x4b\xde\x53\xf8\x45\x38\xed\x97\xe8\x7f\x88\x4f\x79\x7e\x3a\xdb\xed\xba\xa5\x77\x9c\xdf\x7e\xad\xa9\xff\xec\x29\xd8\x07\x64\x93\x21\x13\x6a\xb5\x3e\x49\x57\xd0\xc1\xb2\xfd\xe5\x86\x74\x5c\xcd\xe5\xff\xda\xe2\xe8\x46\x8c\xe6\x8f\x5a\x8e\x1f\xdf\x9a\x5f\x3f\x35\x22\x9a\x81\x1f\x7e\x80\xdd\xa8\x8d\xdf\xc1\xa2\xbc\x96\x97\xb1\x17\x63\x75\x0c\x5e\x5f\x0b\xb3\x3e\x6e\xfa\x6f\x43\x84\x69\x5b\x4d\x45\xd4\xd4\x41\xbd\x79\x06\x63\x8d\x84\xb5\x51\x07\x75\x33\xf0\x53\x8d\xd3\xdb\xfa\x97\x41\xbd\x0b\x7a\xc7\x54\xe1\xb8\x06\xd8\xb2\x6a\xd2\x8a\xd3\x82\x0d\xd8\x96\xe9\x7a\x59\xbb\xc8\x6e\xda\x83\x3f\x91\x52\xea\xf8\x33\x78\x5e\x10\xaa\xae\xce\xff\x7b\x54\x17\x74\xe2\x7a\x76\x1a\x4f\x75\xfb\xba\xf1\x6f\x03\x91\x83\x26\xd1\x75\xcc\x76\xe3\xf5\xa7\x33\x82\xbe\xa3\xc0\xb3\x02\x97\x61\x9f\x6f\xe1\x12\xc8\x6a\x85\x2c\x1f\x0b\xbe\x9d\x58\xc8\x8e\x89\x0c\x87\x33\xaf\x23\x7b\xb0\xa0\x13\x7c\xdb\xdf\x30\x96\x67\x4f\xbf\xf5\x80\xb4\x03\xf8\x56\xbd\xac\xfb\xcc\x73\xba\x53\x85\xa8\x6f\x2f\xc7\x1e\xdb\x6f\xf5\x00\xdc\x1b\xc6\x8e\x3f\xf7\x79\x59\xd0\xfa\xba\x38\x0d\x99\xf4\xcb\xa3\xd4\x5f\xc4\x0e\xfa\xd5\x69\xfc\x9c\xf3\xa8\x13\x2a\x77\xcd\xd9\xf2\xc1\xe9\x14\xcc\xfd\x98\xb9\xae\x0c\x5a\xc1\x7a\x90\x8b\xe6\x4a\x2d\x5c\x39\xdc\x20\x76\xfa\xc3\x9a\xd2\x38\x89\x90\x81\x9d\x67\xf3\x75\x9f\x92\x39\x39\x0b\x3a\xd6\x77\x4c\xae\x05\x65\x73\xa0\x9e\x82\x04\xca\x20\xe3\xcb\x15\x2d\xf1\x8d\xa2\x4b\xf4\x77\x27\xe1\x05\xa0\x4e\xf7\xe3\xd1\x7d\x78\x2f\x07\x97\x7e\x3f\x37\x6b\x57\xb9\x09\xae\xff\x8d\x4d\x88\x23\x78\x1f\x93\x2a\xbe\xda\x89\x92\x8c\x82\x4b\xe7\x7f\xa2\x7a\xe0\x79\xeb\x7a\xb3\x1e\x02\xca\x36\x7c\x81\x12\x96\x76\xa4\xd7\xf4\x5a\xe8\x34\x22\xb6\xc3\x36\x17\xbe\x4f\xe9\x81\xfb\x76\xf8\x56\x2e\xdc\x8d\xe7\xed\xa5\x64\xc4\xb2\xa4\x9a\xc9\x27\xbd\xbc\x6f\x28\x5c\x71\x75\x4d\xd8\x17\xe9\xfd\xe2\x9a\x30\x98\x21\xac\x25\xe6\x30\x7b\x82\x19\x57\x72\x60\xe5\x27\x94\xeb\x52\xc5\xc6\xee\x28\x9b\xaf\x4b\x62\xc2\xb7\xf5\x97\x0c\xce\xaf\x4b\x8a\x4c\x25\x5d\x6d\x8f\x5b\x87\x51\x02\xff\xb3\x46\xa9\xee\x57\x44\x90\xa5\x74\x17\xce\x89\xf1\xb7\xe6\x5c\xc3\x6e\x52\x17\x32\xe7\xde\x85\x1c\x3b\xcd\x6d\xa1\x6d\x52\xfc\x27\x17\x32\x83\x1b\x44\x83\xb3\x6f\x9e\x4d\x67\x63\x69\x74\x08\xfa\x03\xc4\x40\x4d\x24\x5b\xdc\x3b\x5e\xfd\xad\x78\x3b\x3f\x65\xa9\x58\x65\xe9\xad\xb1\xe4\x4f\x64\x3b\xce\xd4\xe3\x04\xdc\x8a\x09\xbc\xb6\x1b\x1d\x38\x5b\x61\xb4\x34\x3c\x76\xc2\x5e\x88\x74\xbb\x9a\x73\xeb\x2c\xf1\xf4\x5d\x89\x4b\x39\x31\x81\x30\x96\x6d\x7c\x00\xb2\xb3\x3b\xf3\xfc\x09\x68\xb8\xe8\x54\x9a\xd4\x8a\xc4\x00\xe0\xb3\x2b\xce\xcb\xeb\x92\x48\x79\x66\xb4\x13\xd7\xe5\x8c\xf3\xf2\x99\xaa\x73\x0a\xbf\xe2\x8f\x5f\x4d\x83\xfe\x00\x6e\x40\x3e\xa8\xaa\x8e\x6e\x03\x80\x7d\x72\x26\xa5\xc4\xe6\x5b\x2c\xf1\xed\xdf\x21\x62\x0a\x21\x2a\x57\x44\x62\x5d\xef\x0e\x19\xc7\xbd\x39\x04\xbe\xb8\x3c\x40\x20\x1d\x9f\xeb\xad\x3f\x0b\x5f\x34\xbb\x6d\xf9\x62\x9f\x3d\x05\x41\xf6\x94\xa6\x15\x1e\xb7\x6a\x8b\xe0\x0b\xf8\xd7\xe2\x0f\xd0\x3c\x5f\x1c\xf0\xdb\xb6\xcb\xb6\xea\x91\xa1\x24\x13\x1c\x5c\xd7\x87\xa0\xe6\x89\xd9\x6d\x93\xf3\xc3\xa7\x53\xcd\x5d\xc3\x4a\xa0\x34\xb5\x4b\x5d\x9f\xf9\x34\x39\x47\x86\x82\x66\xe6\x8d\x50\xaa\x53\x44\xd3\x90\xd4\x69\xa3\xce\x19\xc5\x40\xce\x70\xcb\x1c\x7b\xba\x1a\x79\x24\xba\x5e\xba\xd0\xbf\x61\x1e\xed\x5d\x7c\x6d\x3a\x5b\x17\x89\x99\xd6\x2d\x4b\xf5\x98\xfe\x5b\x11\x46\xb3\xb1\xa9\x20\xf5\x90\xa1\x0f\x72\x4b\x55\xf6\x60\x9f\x49\xcc\xd3\xb1\xe6\xde\xde\xb2\x79\x60\x32\x93\xc9\xcd\x41\xa8\x2f\xd6\xa4\x79\xe6\xa7\x57\x67\x44\xa2\x3d\xac\xcf\xd2\xba\x50\x75\xb0\x65\x01\x3a\x1e\x73\xbf\x2e\xc7\x82\xac\x4b\x75\xe1\x78\xda\x78\x8e\xea\x57\x6e\x0d\xe6\x75\x19\xe6\x34\x1f\x14\x58\xf5\xff\xae\x9e\x32\xff\x77\x4b\xc1\x9a\x92\xf9\xaa\x6b\xf1\x3b\xf3\xca\x0a\xc5\x28\xbc\xa2\x68\x61\xd9\xb9\xaf\x20\xe2\x09\x72\x7c\x23\x51\x50\x52\xd2\xff\x12\x45\x39\xab\x6b\xc0\xa6\x09\xb2\x7e\x15\x23\xa7\x75\xd3\xbe\xac\x18\x77\x3a\xe1\x56\x80\xa5\x79\xad\xe8\xd9\xba\x48\x3f\x22\x2e\x6e\x6f\x5c\xef\x31\xd4\x73\x0c\x27\x31\xa7\x61\x9a\x07\x8f\x5f\xf6\xe9\xd6\x21\x65\x54\xdb\xd2\xac\xbd\xa1\xb8\xa8\xb7\xf4\xd8\xe9\xd2\xb0\xab\xf0\xb4\x9e\xb5\xf1\x5d\x55\x16\xd4\xa9\x9d\x0e\xca\x3c\x43\x71\x3d\xa4\x36\xe3\xc3\x4f\x4f\x8c\x9c\x07\x1b\xab\x22\xdd\xd3\x3d\x55\x5d\xec\x5e\x6f\xa2\x61\x54\xff\xeb\xed\x35\x0a\xf7\xb3\xd9\xd0\x86\xf0\x0b\x6e\xbf\x30\x7c\x5c\x61\xa6\x30\xbf\xbd\x19\xd3\x3c\xf1\xb7\x34\xd6\x2c\xdb\x16\x34\xe3\x8f\x28\x41\x3d\x74\xbd\x63\x25\xf8\x86\x1a\x0d\x10\xf7\x4a\x32\x0d\x9d\xa8\xc9\xc9\xcd\x6b\x51\xa8\x1f\x4e\x06\xa9\xa5\xe3\x2a\x47\x5c\xde\x05\x0e\xd0\xec\xe2\x1b\xb6\x99\x0d\x0a\xe1\xa7\xfa\x12\xaf\xe7\x0b\x9d\x8b\xbb\xd9\x33\x9f\xbb\xb4\x80\x0e\x04\xee\x5c\xd6\x19\x5b\x3c\x1c\x40\x8f\xf0\xb1\xbd\x6c\x68\x45\xe5\xb6\xcb\x8e\x3f\x49\x99\xa5\x7d\xf0\x2f\x61\x13\x69\xa6\x0f\xbc\xfb\x7c\xbe\x02\xdc\xeb\x9c\xa3\x15\xf0\xfb\xef\x71\x6e\x5f\xfa\x8e\x27\x78\xe5\xdb\x7f\x72\xe4\x88\x44\x36\x4c\x1b\xbe\x93\x51\x37\x7d\xbb\x9f\xff\x0b\x00\x00\xff\xff\xa5\x53\x85\x10\xaf\x2e\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 11951, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateRegistryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6b\xe3\x30\x10\x85\xef\xfe\x15\x0f\x63\x96\x04\x76\xed\x65\xf7\x16\xc8\xa9\x3d\xb4\x90\xb4\x25\xe4\x56\x7a\x50\xec\xb1\xa3\x26\x96\x85\x24\xb7\x31\x42\xff\xbd\x4c\xed\x26\x31\xf5\xa1\x37\x7b\xde\xcc\xd3\x7c\x8f\xf1\x1e\x05\x95\x52\x11\x62\x43\x95\xb4\xce\x74\x31\x42\x88\xbc\x47\xa2\x0f\x15\x16\x4b\x24\xe9\x93\xc8\x0f\xa2\xa2\xa1\xee\xa8\xd6\x47\xe1\x08\xf1\x9e\x44\x41\x26\x46\xc2\x4a\xe4\xfd\x1f\xc8\x12\x49\xba\x12\x1d\x19\x2e\x65\x19\xfa\xef\x37\x32\x56\x36\x0a\x4d\x09\x9b\xef\xa9\x16\x69\x94\x37\xca\xba\x41\x5e\x82\x9f\xbb\xcc\xb1\x13\xa9\xe2\xd3\x35\xcb\xb0\xed\x34\x59\x18\x72\xad\x51\x16\xb5\xd0\x5a\xaa\x0a\xa5\x69\x6a\xb8\x4e\x13\x64\x61\xe1\x1a\x6c\x57\xfd\xaf\x12\x35\xd9\x34\x2a\x5b\x95\xf7\xa3\x6b\xa1\x67\x73\x9e\x7b\x6e\xa5\x72\xff\xff\xbd\x58\x67\xd8\xc1\x47\x18\x5c\x27\x45\xde\xc2\x08\x55\x11\x12\x3a\x52\xdd\x47\xb1\x19\x42\xe2\xdd\x00\xe0\xef\x89\x57\x67\x3d\xbd\xa3\xd3\xfd\x2d\x42\x58\x20\x3e\xd7\x36\xe2\x1d\x21\xc4\xbf\xaf\x91\x80\x10\x5d\x81\xdd\x70\x10\xa6\xcd\x5d\x63\xd6\x42\xf3\x26\x76\x84\x95\x5f\xf4\x11\xd5\x78\x6e\x0c\xc8\x5d\xb3\x39\x76\x52\xa5\x8f\xbb\x57\xca\x1d\x7c\xf4\x9d\x74\xaa\xeb\x07\xd0\x93\xc8\x13\x5e\x5f\xd9\xfe\x3a\xb7\x3f\x88\x9a\x8f\xc8\x07\x84\xa9\x44\xf8\xb8\x86\xca\x47\x00\x00\x00\xff\xff\x82\x8a\xe4\xa1\x97\x02\x00\x00")

func _templateRegistryTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateRegistryTmpl,
		"_template/registry.tmpl",
	)
}

func _templateRegistryTmpl() (*asset, error) {
	bytes, err := _templateRegistryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/registry.tmpl", size: 663, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateStringTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\x10\x86\x81\x58\x5b\xa7\xde\x0b\xe4\x92\xad\xc3\x76\xd9\x61\x03\xb6\xc3\x5a\x14\x4e\x44\x17\x02\x64\xaa\x90\x14\x77\x83\xa0\xff\x3e\x48\xb6\x13\x7f\x25\xed\x9a\x43\x00\x8b\x8f\x7c\xef\x91\x94\xbc\x17\x58\x49\x42\xc8\xac\x33\x92\x1e\x1f\x04\x1a\xd9\x60\x06\x21\x78\x0f\xb9\x85\x9b\x0d\xe4\x10\xc2\xea\xfa\x1a\x7e\x24\x04\xc8\xfa\x49\x61\x8d\xe4\x2c\x54\xb5\xe3\xed\x29\x1a\xbe\xaa\x0e\xb4\x87\x22\xa5\xf1\xef\xb8\x47\xd9\xa0\x81\x10\xe0\x5d\x7b\xf4\xad\xac\x11\x42\x60\x5d\x9d\x82\x41\x4b\x09\x7e\x05\x00\x20\x2b\x98\xa7\x6e\x36\x40\x52\x75\x88\xf8\x33\xe8\x0e\x86\x20\x8b\xd0\xbe\x62\x41\x52\xb1\x2c\x41\x42\xfa\x6f\x4a\x03\x76\xd7\x95\xb7\x7c\x7b\x90\x4a\xa0\x49\x21\xbb\xe3\xbf\x8c\x74\xd8\x69\x18\xd5\xc9\xd8\xca\xfb\x0f\x51\x48\x6e\xf9\x4f\xdc\x3b\x1d\x35\x8c\xd2\xb6\x7f\x1d\x16\xeb\xdf\x6b\x96\x4e\x2b\x6d\xe0\xe1\x0a\x30\x36\xc9\x94\xf4\x88\x73\x07\xfc\x56\x61\x6d\x07\x06\x26\x02\x52\x07\x9f\x8c\x24\x57\x20\x83\xf7\x90\x5d\xdd\x51\xc6\x06\x5e\xc6\xcc\xf7\xeb\x56\x23\x2a\x8b\x53\x6d\x47\x4b\xa9\x42\x44\xb5\x9a\xf2\x2a\x0d\xd1\xf2\xcf\x12\x95\xb0\x7d\x5a\x67\x95\xb4\x83\xbc\xe2\x1f\x35\x09\xe9\xa4\xa6\x52\x6d\xb5\x56\x13\xd0\x18\xd0\x07\x97\x26\xc6\xe3\xc9\x08\x9d\x58\x63\xe4\x4b\x69\x8b\x59\xf4\x2b\x09\xfc\x93\xb6\xc2\x1f\x09\x91\xc4\x9c\xff\x3f\xe6\x71\x4a\xfa\xa4\x0f\x3b\x85\xc7\x54\xa3\x9f\xbd\x8f\xad\x0b\xa1\xf1\x1e\x49\x84\x70\x69\x74\xad\xd8\x6e\x39\x06\xfa\x16\x6b\xcf\x06\x3c\x96\x36\x90\xd7\x9c\x38\x8d\x7e\x5e\xf6\x7d\x79\x53\x1a\xc6\x5e\x29\xe6\x9c\xac\xfb\x35\x5b\xa2\x3d\xb7\x72\x47\xe8\x85\xb5\xbb\x73\xa3\x7e\xdd\x40\x36\x15\x79\x4b\x7b\x2d\x70\x36\xc3\xb9\xbf\x17\x46\xc1\x5e\x25\xe8\x6d\xf5\x4e\xbd\x98\xfa\x3b\x5d\xcc\xb3\x3b\xba\x70\x47\xc2\xb9\x8c\xee\xf3\x05\xd2\xfe\x4d\x1a\x40\xba\x17\xd0\xee\x78\xff\x8e\xae\x46\x65\xfe\x05\x00\x00\xff\xff\x66\x7b\xb0\x31\xd2\x05\x00\x00")

func _templateStringTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateStringTmpl,
		"_template/string.tmpl",
	)
}

func _templateStringTmpl() (*asset, error) {
	bytes, err := _templateStringTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/string.tmpl", size: 1490, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateUtilsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xcf\x6a\xe3\x30\x10\xc6\xef\x7e\x8a\x0f\x63\x16\x76\xf1\xda\xf4\x6a\xc8\x29\xa1\xa7\x52\x02\x6d\x4f\x21\x04\xc7\x1e\x17\x11\x45\x76\x25\x85\x26\x08\xbd\x7b\x91\x6c\x27\x8a\x71\x68\x2e\xd1\xcc\x7c\xf3\xe7\x37\x1e\x63\x50\x53\xc3\x04\x21\x96\xf4\x75\x22\xa5\x77\x5d\x29\xcb\xa3\x8a\x61\x6d\xa5\xcf\xa8\x5a\xa1\xe9\xac\xb3\x65\xff\x6f\xcc\x7f\xb0\x06\xd9\x87\xe8\xca\xea\xb0\x76\x52\xd2\x24\x15\xac\x1d\x43\xcf\x8c\x78\xed\x1c\x69\xe4\x5c\xb2\x14\x9f\x84\xa4\x41\xb1\x08\x62\xc6\x80\xb7\xdf\x24\x91\x34\xd9\x6b\x79\x24\x58\x0b\x63\xa0\xe9\xd8\xf1\x52\x13\xe2\x4e\x32\xa1\x77\xfa\xd2\x51\xec\x92\xad\x4d\x5d\x31\x12\xb5\xb5\xd1\xf0\xc2\xf8\xe4\xca\xe5\xa7\x18\x08\xf0\xcf\x18\x8c\x55\xa7\xda\xfe\x19\x05\xdc\x0e\x64\x37\xa4\xc6\x01\xc7\x0c\x62\x04\xe0\xda\xa5\x58\xe0\x8f\x31\x48\xae\x9d\x7c\xd4\xfd\xa6\xd8\xc9\x8d\x3b\xd0\x04\xe8\x05\x66\xf6\x91\xde\xd5\x1b\x06\x77\x66\x48\xf2\x88\x29\xd8\xde\x40\xce\x1a\x24\xd9\xaa\x3d\xed\x39\xbd\x71\x56\xb9\x0e\x9b\xed\x66\xeb\x09\xde\x2f\x1d\xdd\x6d\xd3\x8b\x6f\xb2\x79\x91\xff\x8a\x13\xff\xef\x43\x71\x26\x0e\xfe\xba\xa2\x3c\x8f\xf2\x1c\x2f\xce\x2e\xc2\x53\x61\x29\x12\xa7\xf2\x17\xd3\x0b\xfd\xbe\xca\xba\x46\xc2\xf0\x04\x6b\xff\xfa\xfd\x79\xd1\xcc\x3d\x3c\x6a\x4d\x52\xb6\x32\xec\xbd\x6e\x95\x62\x7b\x4e\xe8\x23\x77\x53\x90\x94\xd3\x01\x9c\x2f\x5b\xb6\xf5\x78\xad\xde\x1e\xf0\x8b\xab\x63\x45\xaa\x92\xac\xd3\xac\x15\x8f\x87\xfb\x09\x00\x00\xff\xff\x20\xf7\xdd\x03\x78\x03\x00\x00")

func _templateUtilsTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateUtilsTmpl,
		"_template/utils.tmpl",
	)
}

func _templateUtilsTmpl() (*asset, error) {
	bytes, err := _templateUtilsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/utils.tmpl", size: 888, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/client.tmpl":   _templateClientTmpl,
	"_template/handlers.tmpl": _templateHandlersTmpl,
	"_template/header.tmpl":   _templateHeaderTmpl,
	"_template/main.tmpl":     _templateMainTmpl,
	"_template/registry.tmpl": _templateRegistryTmpl,
	"_template/string.tmpl":   _templateStringTmpl,
	"_template/utils.tmpl":    _templateUtilsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"client.tmpl":   &bintree{_templateClientTmpl, map[string]*bintree{}},
		"handlers.tmpl": &bintree{_templateHandlersTmpl, map[string]*bintree{}},
		"header.tmpl":   &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":     &bintree{_templateMainTmpl, map[string]*bintree{}},
		"registry.tmpl": &bintree{_templateRegistryTmpl, map[string]*bintree{}},
		"string.tmpl":   &bintree{_templateStringTmpl, map[string]*bintree{}},
		"utils.tmpl":    &bintree{_templateUtilsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
