// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/client.tmpl
// _template/header.tmpl
// _template/main.tmpl
// _template/registry.tmpl
// _template/utils.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\x41\x6b\x83\x40\x10\x85\xef\x82\xff\xe1\x21\xa1\x24\x25\x98\x7b\xa0\xa7\xb4\x87\x42\x5b\x42\xc9\x1f\xd8\xae\x63\xb2\x44\x67\x65\x1c\x93\x94\xc5\xff\x5e\x5c\xd7\x9e\x1c\xbe\x79\xbe\x7d\x6f\x42\x40\x45\xb5\x63\x42\x61\x1b\x47\xac\x05\xc6\x31\xcf\x42\xc0\xaa\xbb\x9e\xb1\x7f\xc1\xaa\x3c\x1a\x7b\x35\x67\x5a\x16\x4a\x6d\xd7\x18\x25\x14\x17\x32\x15\x49\x81\x55\x5c\xe5\xd9\x6e\x87\x77\xbe\xf9\x2b\x09\xac\x61\xb8\x38\x43\xcc\x1d\x9f\xa7\xa3\x78\xf5\x90\xce\xc2\x9a\xa6\xe9\xcb\x3c\xd3\xdf\x8e\xfe\xf5\x8e\x95\xa4\x36\x96\x10\xf2\x0c\x09\x7f\x9b\xfb\xda\xea\x03\xd6\xb3\xd2\x43\xcb\xc3\xfc\xdd\xc2\x71\x37\x28\x7e\x1c\x97\x6f\x6c\x7d\x45\xb2\x85\x1f\x74\x61\xaf\x14\xd9\x06\x24\xe2\x25\xcf\x96\x6c\x87\x58\x10\xae\xed\x1a\x6a\xa7\xa9\x25\xbd\xf8\xaa\x47\xed\x25\xa6\x72\x7c\x46\x3d\xb0\x55\xe7\xb9\x47\x2d\xbe\xc5\xe9\x03\xbd\xbd\x50\x6b\x70\x73\x66\x49\xbb\x84\x4f\x86\xbd\xca\x60\x75\x0e\x3e\x15\x4c\xaa\xf4\xf0\x64\x88\x2f\xba\xcf\xe2\xb5\x4b\x85\x93\x68\x83\xe7\xe4\x32\xff\x4e\x3a\x08\xe3\x69\x66\x11\x45\xcf\x7d\x3a\xa6\x6c\x27\x34\x26\xeb\x10\x40\x5c\xc5\xe3\xff\x05\x00\x00\xff\xff\x6e\x86\x44\xb6\xc8\x01\x00\x00")

func _templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateClientTmpl,
		"_template/client.tmpl",
	)
}

func _templateClientTmpl() (*asset, error) {
	bytes, err := _templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/client.tmpl", size: 456, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xc1\x4a\x03\x31\x10\x86\xef\x81\xbc\xc3\x4f\xf0\xd0\x82\x26\x4f\xe0\xa5\xd6\x83\x97\x56\xb0\x77\xc9\x6e\x26\x69\x58\x77\xb2\xc4\x59\x51\xc2\xbe\xbb\x6c\x5b\xe8\x69\x98\xf9\xe1\xfb\xe6\x6f\x0d\x81\x62\x66\x82\x39\x93\x0f\x54\x0d\x96\x45\x2b\xe7\xf0\x52\x02\x21\x11\x53\xf5\x42\x01\xdd\x1f\x52\x91\x90\x88\x1f\xb1\x3f\xe2\x70\x3c\xe1\x75\xff\x76\xb2\x5a\x69\x35\xf9\x7e\xf0\x89\xd0\x1a\x1e\xec\xfb\x6d\x59\x31\x5a\xe5\x71\x2a\x55\xb0\xd1\xca\xf4\x85\x85\x7e\xc5\x68\x65\xe2\xb8\x0e\xad\x4c\xca\x72\x9e\x3b\xdb\x97\xd1\xad\x74\x27\xc1\x75\x99\x8d\x56\xdb\x35\x76\x0e\x87\xf2\x54\xa6\xeb\x8b\x59\x72\x61\xc4\x52\x31\x10\x4d\x99\x13\xae\xf0\x6f\xab\xd5\x8f\xaf\xf8\xc4\x33\xba\xcc\x76\x37\xc7\x48\xb5\x2d\xf7\xeb\xcd\x6c\x77\xbe\x1f\x52\x2d\x33\x87\xcd\xf6\x9e\xc6\x51\xec\x87\xd4\xcc\x89\xea\x86\xf3\xd7\x45\xdd\x1a\x88\xc3\xa5\xc4\x7f\x00\x00\x00\xff\xff\x3b\x4a\xba\xaf\x23\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 291, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\xdd\x73\xdb\x36\x12\x7f\xd7\x5f\xb1\xd5\xb8\x3d\x32\x55\xe8\x3e\x3b\xf5\xc3\x39\x4e\x2f\x9e\xc9\xf5\x32\x76\x72\x2f\x9d\x8e\x07\x22\x97\x36\x46\x14\xa0\x03\xa8\x8f\x9c\xca\xff\xfd\x06\x5f\x24\x48\x82\x22\xed\x71\xd3\xf6\xf4\x44\xe1\x63\xb1\xfb\xdb\xc5\x7e\x00\x38\x1e\x21\xc3\x9c\x32\x84\xf9\x9a\x50\x36\x87\xaa\x9a\x1d\x8f\x70\xb6\x59\x3d\xc0\xc5\x25\x9c\x25\x1f\x49\xba\x22\x0f\x68\xdb\x4b\x5c\x6f\x0a\x52\x22\xcc\x1f\x91\x64\x28\xe6\x70\xa6\x7a\x54\x97\x20\xec\x01\xe1\x4c\xea\x59\x77\xa5\xd8\xa6\xa5\x54\x7d\xe7\xe7\xa0\x08\xca\xe4\x2d\x5f\xaf\x91\x95\x86\xd2\x6b\xa0\xb9\x6a\xbc\xe6\xa9\x74\x2d\x96\x42\xa6\x28\x34\x3d\x66\x7e\x29\xe8\x1a\xce\x32\x37\x14\x59\xe8\xd3\x90\xfc\x7c\xfb\xc1\xcc\x53\x53\xef\x10\xed\xf2\xa6\x19\x72\x2e\x40\x60\x8e\x02\x59\x8a\x89\x4f\xa1\xfc\xb2\x71\x63\x7f\x26\x6b\x25\x31\x48\x2d\x06\x1c\x7d\xf6\x72\x30\xfc\xfd\x44\xb1\xc8\x34\x87\x00\x00\x56\xca\x3c\x20\x25\x61\x19\x44\xba\x87\x65\xb4\xa4\x9c\x91\x22\x86\x88\xf1\x12\xda\x8d\x57\x9c\x17\x71\xc3\xf9\x67\x89\x70\x87\xa5\xa1\xea\x18\x52\xb4\xfe\xd1\x6d\x7c\xc4\x62\x83\x42\xb6\x84\x51\x3c\xb5\x47\xb5\xb4\xb7\x11\x94\x95\xf7\x4a\xe2\xb9\x92\xa8\x0d\xa5\xd6\xa7\x66\x5d\x33\x29\x93\x7f\x63\x5a\x72\xd1\x52\xa6\xa5\xfa\xe9\xcb\x06\x6f\xae\x81\x4a\xf8\xf4\x01\x34\x80\x34\x03\x9e\xb7\x07\x25\xb3\x94\x33\x59\x06\x67\x5e\xc2\x0f\x07\xd3\xfe\x1e\x0f\x37\xd7\x50\x55\x6f\x7c\x56\xd4\x82\xef\x58\xca\x33\x04\xba\xde\x14\xa8\xa0\x95\xb0\xa4\x2c\x31\xad\x22\x99\xe5\x5b\x96\x42\x64\x68\xdc\x62\x8a\x74\x87\x8a\x55\x78\xd5\x5a\x2e\xb6\x64\xec\xc0\xab\x6d\xfe\x77\xf1\xa0\x87\x29\x62\x57\xdb\x3c\x47\x11\x03\x0a\xc1\x05\x1c\x35\x7a\xd4\x49\xe1\x13\xbd\xbc\x04\x46\x0b\x3b\x42\xfd\x04\x96\x5b\xc1\x20\x5f\x97\xc9\x3b\x35\x39\x8f\xe6\x29\x61\x7f\x2b\x01\x0d\xd7\x96\x04\xd9\x2b\x79\xb5\x06\xa5\xa2\x30\x8f\x35\x85\x6a\x10\xe8\x0e\x9b\xc9\xc7\x6d\x79\x73\x1d\x05\x10\x8c\xbb\x9b\xe0\xa4\x99\xfa\xcb\xf5\x8c\xaf\x33\xa8\x3d\xc0\x75\x86\x60\x49\x9c\xe9\xd7\xa3\xf5\xaa\xaa\xe7\x3d\x91\x51\xaf\xf7\x86\x65\x78\xd0\x4a\x39\xd6\x0b\xb6\xec\xd6\xad\xdf\xe0\xe1\xec\xb9\x83\x89\x19\xf0\x5e\xfb\xa2\xa8\x40\xd6\xb7\x83\xa4\xb5\x0b\x62\x83\xbb\x72\x02\xc7\xa3\x5d\xc4\x5a\x12\x54\x15\xcd\x94\x2d\x62\x21\xd5\xd0\x7b\xf5\xa9\x99\x5a\x78\x1c\x5d\xf3\xed\xb2\xc0\x9a\x2f\xc1\xf7\xc7\xa3\x9a\x50\x55\xbb\xe3\x11\x59\x56\x55\x0a\x77\xa3\x83\x11\x5e\x3c\xe1\x83\xb4\x6b\x1b\x9b\x22\xb7\xe0\x7b\x2b\x9b\x93\xef\x7e\x01\xbb\x86\x17\xc1\xf7\x63\x60\x37\x38\x78\x2b\xbb\xce\x1b\x56\xa2\xc8\x49\x8a\x7e\xb7\xb5\x87\x5d\x7f\x5b\x0c\x6c\x8d\x2d\x23\xcb\x02\xa1\xe4\x43\xdb\xe3\x02\x72\x6d\x39\x06\xa8\x5b\xb2\x77\x58\xa1\xd9\xfb\xb0\xa7\xe5\x23\x50\x6d\x3f\xdf\x66\xca\xef\xa8\xcd\xb4\x00\x9a\x1d\xe2\xd6\xe2\x6d\x19\xb4\x62\x66\x1e\xcb\x28\x84\xc2\x66\x97\x84\xbd\x42\xfc\x46\x8f\xf8\xe6\x8f\x11\xeb\x02\xbe\xdd\x1b\x99\x16\x8a\x8d\x46\xb0\x46\x63\xd6\x46\x4f\x99\x88\x59\xeb\x27\xe5\x1d\xab\x2a\xda\xc5\xa7\x95\x3f\x64\x7b\x55\x68\x5a\x98\x8f\x41\x4b\x3a\x61\x45\x27\xbc\x89\x83\x68\x8a\xcb\x7d\xbe\x02\x68\xdb\x1d\xf7\x0d\xa6\x31\x96\x11\x46\x9f\x68\x4a\x2f\x29\x85\x35\x98\xda\x56\x86\xf4\x33\x62\x23\x63\xbe\x73\xc8\x82\x82\x06\x15\x08\x1d\x83\x33\xfa\xd9\x9c\x87\x10\xa3\x85\xcb\x48\x06\x43\x5b\xed\xcb\x3b\xab\xea\x04\xb0\x93\x2d\x49\x2c\x25\xec\x48\xb1\x45\x97\xa8\x34\x7d\xa9\x37\x5d\x43\x3d\x3d\xbd\xe8\xae\x13\x99\x25\x6a\xce\xcc\x06\xbb\x2b\xa8\x36\xfe\x5f\x7e\xfd\xe5\x57\x17\x6a\x4c\x7f\xd3\x53\xc7\x1d\xcb\x9c\x55\x7e\x6c\xd3\xd0\x9e\xa0\x7e\xe8\x56\xde\xd8\xac\xdb\x71\x0d\xd3\xa2\xf5\x1d\x96\x27\xa2\xb5\x51\xa2\x61\xfa\x79\xf4\x3f\x33\x39\x61\x85\x59\xd8\x72\x5f\x4c\x84\x51\x8f\x63\x30\x3c\x91\x12\x07\xf1\x3f\x3f\xef\xa7\xe6\xc6\x86\xa7\xdb\x9b\x4a\xf0\x15\xa1\x25\xe7\x05\x12\x06\xfb\x47\x9a\x3e\x2a\x27\x55\x8a\xad\xb6\x14\x33\x6a\x4f\xa4\xb2\xe3\xe9\xd6\xd9\x65\x2c\x8a\xa1\x31\xd0\x13\x65\xc1\x02\xf8\x4a\x33\x13\x37\x59\xf1\x37\x2f\x9e\xff\x79\xbb\x5d\x33\xb5\x80\x9c\x14\x12\x3d\xa7\x61\x7b\x47\x34\xb7\xd0\x30\x39\x65\xb9\x12\x22\xec\x61\x14\xca\xd7\x18\xaa\x2c\x4c\xeb\x13\x2a\x0b\x33\xe1\xab\x55\x16\x19\x86\x2b\x8b\x92\x4f\xaa\x2c\x42\x41\xad\x09\x0a\x6f\x39\x93\xdb\x35\x0e\xd4\x1a\xcf\x89\x65\x03\xec\xf6\x63\xd6\x33\xea\x98\x61\x47\x38\x6d\x9f\xbf\x9c\x25\x9f\xc8\xcc\x02\x9c\xf6\x73\xe8\xdf\x65\x4f\x39\x7e\x3a\xcb\x1d\xbb\xb9\x71\x98\xdf\x7e\x32\xa8\x7e\xe6\xdc\xe7\x03\xb2\xc5\x90\x09\xb5\x6a\x93\xb8\x2b\xe8\x60\x5e\xfd\x7c\x43\x9a\x96\x14\xb9\x5f\x5b\x1c\x55\x29\xd1\xec\xa0\xe4\xf8\xe1\x8d\xfe\xfa\xb1\x11\x51\x37\x7c\xff\x3d\x1c\x67\x6d\xfc\x46\xb3\xe6\x5a\x5e\xc6\x9e\x8d\xd5\x14\xbc\xbe\x16\x66\x7d\xdc\xd4\x6f\x47\x84\xae\x2b\x75\xca\xd2\x24\x2a\xbd\x71\x1a\x63\x85\x84\xb1\x51\x0b\x75\xd3\xf0\x63\x8d\xd3\x9b\xfa\x4b\xa3\xde\x05\xbd\x63\xaa\x30\xad\x42\x35\xac\xea\xb0\x62\xb5\x60\x1c\xb6\x61\xba\x9e\xd6\xce\x82\x9b\xfc\xfd\x2f\xa4\x94\xda\xff\x0c\x16\xf4\xbe\xea\xea\xf8\x7f\x42\x75\x5e\xa9\xac\x46\x27\xe1\x50\x77\xaa\x5c\xfe\x73\x20\x32\x6a\x12\xdd\x8d\xd9\xae\x8c\xfe\x72\x46\xd0\xdf\x28\xf0\x24\xc7\xa5\xd9\xe7\x7b\xb8\x04\xb2\xd9\x20\xcb\x22\xc1\xf7\x0b\x03\xd9\x14\xcf\x30\x1e\x79\x2d\xd9\xd1\x84\x4e\xf0\x7d\x7f\xc1\x50\x9c\x7d\xf9\xa5\x07\xa4\x1d\xc0\xb7\xea\x45\xdd\x27\x1e\xa4\xbd\x94\x8b\xfa\xf3\xc5\xd8\xa9\xf5\x56\x0f\xc0\x93\x6e\x6c\xfa\xc1\xcc\xf3\x9c\xd6\xd7\xc5\x69\xc8\xa4\x9f\xef\xa5\xfe\x4f\xec\xa0\x9f\x9d\x86\x0f\x22\x27\x1d\x21\xd9\x1b\xc2\xd6\x1e\x3c\x3f\x07\x7d\x3d\xa5\x6f\xfa\xbc\x52\xb0\x6e\xe4\xa2\xb9\xd1\xf2\x67\x0e\x17\x88\x9d\xfa\xb0\xa6\x14\xc5\x01\x32\x70\x74\x6c\x7e\xd7\xa7\xa4\x8f\xb6\x5a\x77\x61\x72\x2b\x28\x7b\x00\xea\x28\x48\xa0\x0c\x52\xbe\xde\xd0\x02\x5f\x97\x74\x8d\xee\x72\xc3\xbf\x7f\x53\xe1\x3e\x9a\xdd\xfb\x17\x67\x70\xe9\xd6\xb3\xa3\x8e\x95\x1d\x60\xeb\xdf\xd0\x80\x30\x82\xf7\x21\xa9\xc2\xb3\xad\x28\xf1\xcc\xbb\xaf\xfd\x27\x96\x8f\x3c\x6b\xdd\x2e\xd6\x4d\x40\xd9\x8e\xaf\x50\xc2\xda\xb4\xf4\x8a\x5e\x03\x9d\x42\xc4\x54\xd8\xfa\xbe\xf5\x4b\x32\x72\xc3\x0c\x7f\xd0\x15\x73\x43\xe1\x16\xe5\xb6\x28\x43\x6d\x77\x94\x3d\x6c\x0b\xa2\xfd\x9d\x31\xb0\x14\x5e\xbd\x2d\x28\xb2\x32\xee\xc2\x13\xb5\x4e\x6f\x04\xfe\x67\x8b\xb2\xbc\xdf\x10\x41\xd6\x72\x0e\x67\x52\x9b\x5f\x64\xb4\x66\x0f\x02\xcc\x22\x75\xe4\x7f\xe5\x6c\xce\xb2\xd3\xdc\x7f\x99\xac\xde\x75\x59\x1f\xe3\xdd\x89\x69\xbc\x5d\xb5\xa9\x4b\x01\x43\xa3\x43\xd0\x9d\xb8\x79\x87\x4c\x24\x5d\xdd\x5b\x5e\x2d\x93\x9d\x43\x89\x34\x11\x9b\x34\xb9\xd1\xaa\xbf\x25\xfb\x28\x2d\x0f\x0b\xb0\x33\x16\xf0\x9d\x59\x68\xe4\x30\x82\xd1\x42\xf3\xd8\xf1\x13\x3e\xd2\xed\xf4\xc7\xce\x33\xc4\x93\x77\x05\xae\xe5\x42\x7b\x8e\x90\x7b\x76\x3b\xd6\x8c\xee\x8c\x73\x47\x86\xfe\xa4\x97\xd2\xa4\x52\x24\x7a\x00\xcf\xaf\x38\x2f\xde\x16\x44\xca\xb9\xd6\x4e\x58\x97\x4b\xce\x8b\x27\xaa\xce\x2a\xfc\x8a\x1f\xbe\x9a\x06\xdd\x89\xd5\x80\x7c\x50\x55\x1d\xdd\x7a\x00\xbb\x68\x46\x0a\x89\x4d\x5f\x28\x52\x9c\x5e\x21\x60\x0a\x3e\x2a\x57\x44\x62\x9d\x20\x0e\x19\xc7\xbd\x3e\x35\xbd\xb8\x1c\x21\x90\x44\xaf\xd4\xd2\x9f\x84\xcb\x32\xed\xb2\x7c\x75\xca\x9e\x3c\xaf\xf4\x92\xa6\xe5\x9f\x4f\x2a\x8b\xe0\x2b\xf8\xd7\xea\x77\xd0\x3c\x5f\x8d\xec\xdb\xf6\x96\x6d\x05\xf0\x21\xaf\xec\x9d\xf4\xd6\xa7\x86\xfa\x15\xd2\x4d\x13\x24\x9b\xe8\xe2\x1f\xce\x6f\x04\x4a\x1d\xec\xeb\x84\xc6\xc5\x95\x07\x64\x28\x68\xaa\xdf\xb4\x24\xca\xd1\x37\x19\x7c\xed\xfc\x6b\xcf\x9f\x0f\x78\x7e\x3b\xcd\xb2\xa7\xc2\xf7\x81\xa8\x04\xe3\x42\x7d\xc3\x43\x30\xd9\x77\xc9\xdc\x72\x9b\xc7\x7a\x58\x37\x8f\x53\x6d\xea\xb7\x21\x8c\xa6\x91\x4e\xb9\x54\x93\xa6\x0f\x72\x4f\xcb\xf4\xd1\x5c\xfc\x3f\x24\x91\xe2\xde\xdc\x1b\x39\x60\x52\x1d\xfa\xf4\xc9\xa1\xcb\x6e\x24\xbc\x36\xdc\x41\x4a\x24\x9a\xd3\xed\x34\xa9\x33\x3b\x0b\x5b\xea\xa1\xe3\x30\x77\xf3\x32\xcc\xc9\xb6\x28\x2f\x2c\x4f\x3b\xc7\x51\xfd\xa2\xaa\xc1\xbc\xce\x5b\xac\xe6\xbd\x8c\xa4\xfe\x6f\x13\x10\xfd\xbf\x9b\x3b\xd5\x94\x66\xfe\x11\x7e\x0b\xba\xce\x79\x3e\x11\x5f\x20\xc3\xd7\x12\x05\x25\x05\xfd\x2f\x29\x29\x67\x75\x8e\xd4\x14\x09\x66\x1b\x85\xc8\x29\x55\xb4\x0f\xf3\xa3\x4e\xa5\xd8\xf2\xa7\x34\xab\xf5\xba\xdc\xe6\xc9\x47\xc4\xd5\xcd\xb5\xcd\xcd\x87\x72\xf2\xe1\x98\x65\x15\x4a\x33\xef\xf5\xc6\x29\x55\xda\xfd\xa8\x35\xd9\x52\xa4\x39\xc1\xbf\xa8\x97\x74\xd8\xa9\xd4\xa9\xab\xdf\xa4\x1e\xb5\x73\x55\x47\xea\xe5\x71\x9d\x0a\x43\xbf\xa3\xb0\x35\x96\xb2\xda\xf1\xb7\x13\x5a\xce\xd1\xc2\x23\x4f\x4e\x54\x17\x55\x17\xbb\xef\x76\x41\xaf\xa9\xfe\x3a\xf3\x0c\xc2\xfd\x64\x36\x94\x21\xfc\x8c\xfb\xcf\x0c\x0f\x1b\x4c\x4b\xcc\x6e\xae\x23\x9a\xc5\xee\x16\xc3\x98\x65\xdb\x82\x96\xfc\x80\x12\xca\xc7\xee\x66\xd8\x08\xbe\xa3\x5a\x03\xc4\x3e\xe2\x4b\xfc\x3d\xd3\x84\xe0\xe6\x21\x22\xd4\xef\xfa\xbc\x48\x72\x62\x67\x0c\x5c\x6e\x79\x1b\xa0\x59\xc5\x15\x34\x4b\xe3\x03\xfc\xae\xfa\x92\xab\xb7\x17\x3a\x17\x5b\xcb\x27\xbe\xd7\x68\x01\xed\x09\xdc\xb9\xcc\xd2\xb6\x38\xee\x2f\x27\xec\xb1\x93\x6c\x28\x45\x65\xa6\x0a\x0d\xbf\xa9\x58\x26\x7d\xf0\x2f\x61\x17\x28\x36\x47\x1e\x2e\x3e\x5d\x01\xf6\x79\xc9\x64\x05\xfc\xf6\x5b\x98\xdb\xe7\x3e\x44\xf1\x1e\xa1\xf6\xdf\xcc\x58\x22\x81\x05\x93\x86\xef\x78\xd6\x8d\xd6\xf6\xf3\x7f\x01\x00\x00\xff\xff\x7f\x67\xf9\xd9\x85\x2c\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 11397, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateRegistryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcf\x4a\x34\x31\x10\xc4\xef\x81\xbc\x43\x11\xe6\xf0\x7d\xa0\xb3\xa2\xb7\x05\x6f\x1e\x14\x14\x64\xd9\x9b\x78\x68\x76\x7a\x62\xd8\x4d\x36\x24\x19\xdc\xa1\xc9\xbb\xcb\xfc\x71\x4f\x1e\xbb\xaa\xab\xa8\x9f\x08\x3a\xee\x5d\x60\x98\xc4\xd6\xe5\x92\x46\x83\x5a\xb5\x12\x41\x13\x8f\x16\xdb\x47\x34\xed\x3b\x1d\x8e\x64\xf9\xd7\x28\xec\xe3\x89\x0a\xc3\x7c\x31\x75\x9c\x0c\x9a\xd9\xd2\x6a\xb3\xc1\x7e\x8c\x9c\x91\xb8\x0c\x29\x64\x78\x8a\xd1\x05\x8b\x3e\x9d\x3d\xca\x18\x19\xae\xcb\x28\x67\xec\x5f\x97\x33\x90\xe7\xdc\x6a\xd5\x0f\xe1\xb0\x64\xdf\x28\xfe\xfb\x3f\x05\x3f\x06\x17\xca\xc3\xfd\x67\x2e\x69\xaa\x10\xad\xb0\xf6\xfe\xed\x8a\xdc\x22\x51\xb0\x8c\x86\x4f\xec\x97\xe9\xbb\x95\x6a\x1e\x08\x00\x77\x97\x09\x6d\x7a\x68\x9f\xf9\xf2\xf2\x84\x5a\xb7\x30\x57\x6d\x47\xdf\xa8\xd5\xdc\x2c\x75\x1c\xba\x35\x58\xb5\x9a\x09\x45\xae\xe2\x4f\x00\x00\x00\xff\xff\xfa\x22\x40\xae\x3c\x01\x00\x00")

func _templateRegistryTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateRegistryTmpl,
		"_template/registry.tmpl",
	)
}

func _templateRegistryTmpl() (*asset, error) {
	bytes, err := _templateRegistryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/registry.tmpl", size: 316, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateUtilsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xcf\x4a\xc4\x30\x10\xc6\xef\x7d\x8a\x8f\x52\x3c\x48\xed\x03\x2c\xec\x49\xf1\x28\x82\x7a\x5a\x96\x12\xdb\xa9\x04\xd3\x34\xa6\x59\xdc\x65\xc8\xbb\x4b\xba\xe9\x6e\xb6\xd4\x5c\x32\x99\xf9\xe6\xcf\x6f\xc2\x8c\x96\x3a\xa9\x09\xb9\xa5\x9f\x03\x8d\xae\x36\xc2\x8a\x7e\xcc\xe1\x7d\xe3\x8e\x68\x06\xed\xe8\xe8\xaa\xc7\xf3\xcd\xfc\x00\xd9\xa1\xfa\xd0\x46\x34\xdf\xaf\x41\x4a\x8e\xec\x08\xef\xe7\xd0\xb3\x24\xd5\x06\x47\x99\x05\x97\x15\xfa\x8b\x50\x74\xd8\x6c\x93\x18\x33\xd4\xf0\x4b\x16\x45\x57\xbd\x88\x9e\xe0\x3d\x98\xe1\xa8\x37\x4a\x38\x42\x6e\xac\xd4\xae\x76\x27\x43\x79\x48\xf6\xbe\x0c\xc5\x48\xb7\xde\x67\xd1\xc2\x6c\xaa\x31\xe4\x97\x88\x04\xb8\x67\xc6\x5c\x75\xa9\x3d\x9b\x59\xc2\x1d\x40\xea\x98\x9a\x27\x1c\x2b\x88\x19\x80\x4b\x97\xcd\x16\x77\xcc\x28\x2e\x9d\xa6\x68\x38\x4b\xec\xe2\xca\x9d\x68\x12\xf4\x0d\x56\xf6\x51\xde\xd4\x8b\x83\x87\x67\x4a\xf2\x1f\x53\xb2\xbd\x48\x2e\x3b\x14\xd5\xd3\x70\xf8\x54\xf4\xa6\x64\x13\x3a\xec\xf6\xbb\xfd\x44\xf0\x7e\x32\x74\xb3\xcd\x49\x7c\x95\xad\x8b\xa6\x5f\x5c\xf8\x97\x43\xfd\x05\x00\x00\xff\xff\xe6\x20\xb4\x6e\x60\x02\x00\x00")

func _templateUtilsTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateUtilsTmpl,
		"_template/utils.tmpl",
	)
}

func _templateUtilsTmpl() (*asset, error) {
	bytes, err := _templateUtilsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/utils.tmpl", size: 608, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/client.tmpl":   _templateClientTmpl,
	"_template/header.tmpl":   _templateHeaderTmpl,
	"_template/main.tmpl":     _templateMainTmpl,
	"_template/registry.tmpl": _templateRegistryTmpl,
	"_template/utils.tmpl":    _templateUtilsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"client.tmpl":   &bintree{_templateClientTmpl, map[string]*bintree{}},
		"header.tmpl":   &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":     &bintree{_templateMainTmpl, map[string]*bintree{}},
		"registry.tmpl": &bintree{_templateRegistryTmpl, map[string]*bintree{}},
		"utils.tmpl":    &bintree{_templateUtilsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
