// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/client.tmpl
// _template/handlers.tmpl
// _template/header.tmpl
// _template/main.tmpl
// _template/registry.tmpl
// _template/string.tmpl
// _template/utils.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfe\x8a\xc1\x84\x92\x94\xe0\xdc\x03\x3d\xa5\x3d\x14\xda\x12\x4a\x7e\x40\x95\xd7\x89\x88\xbd\x12\xeb\x75\x92\x22\xf2\xef\x45\xb2\xd2\x93\x96\xa7\xd1\x68\x66\x63\x44\x4b\x9d\x63\x42\x6d\x7b\x47\xac\x35\xee\xf7\x2a\x46\x2c\xc2\xf9\x88\xed\x0b\x16\xcd\xde\xd8\xb3\x39\x52\xe1\x4a\x43\xe8\x8d\x12\xea\x13\x99\x96\xa4\xc6\x22\xdd\x54\x9b\x0d\xde\xf9\xe2\xcf\x24\xb0\x86\xe1\xf2\x0c\x31\x57\x7c\x1e\xf6\xe2\xd5\x43\x82\x85\x35\x7d\x3f\x36\x95\xfe\x06\xfa\x97\x3b\x56\x92\xce\x58\x42\xac\x50\xe8\xb7\xb9\x2e\xad\xde\x60\x3d\x2b\xdd\xb4\xd9\xcd\xe7\x1a\x8e\xc3\xa4\xf8\x71\xdc\xbc\xb1\xf5\x2d\xc9\x1a\x7e\xd2\x07\x7b\xa5\xcc\x56\x20\x11\x2f\xd5\x1c\x6b\x97\x7b\xc1\x0d\xa1\xa7\x21\x4d\x03\xe9\xc9\xb7\x23\x3a\x2f\x39\x90\xe3\x23\xba\x89\xad\x3a\xcf\x23\x3a\xf1\x03\x0e\x1f\x18\xed\x89\x06\x83\x8b\x33\x8f\xa4\x25\x77\xf1\x1b\x55\x26\xab\x39\x73\x6a\x56\x34\xe9\xcf\xe4\x85\x2f\xba\xce\xc2\xa5\x2b\x3d\x8b\x62\x85\xe7\xe2\x90\x9f\x92\x4e\xc2\x78\x9a\x51\x22\xd9\x6e\x5b\x16\x28\xeb\x0a\xb8\x27\xd3\x18\x41\xdc\xa6\x55\xff\x05\x00\x00\xff\xff\x88\xcc\x3e\xfd\xb3\x01\x00\x00")

func _templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateClientTmpl,
		"_template/client.tmpl",
	)
}

func _templateClientTmpl() (*asset, error) {
	bytes, err := _templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/client.tmpl", size: 435, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHandlersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x3b\x6f\xe3\x38\x10\xae\xc5\x5f\x31\x31\x5c\x48\x81\x4f\xee\x1d\xa8\x4a\x70\x88\x9b\x5c\x80\xbb\x54\x46\x70\xe0\xca\xa3\x98\xb0\x4c\x69\x49\x6a\xe3\xac\xc0\xff\xbe\x18\x92\x92\xf5\x88\x37\xc5\xba\xb1\x38\x8f\x6f\x5e\x1f\x87\x6d\x0b\x7b\x2c\x84\x44\x58\x1c\xb8\xdc\x97\xa8\xf4\x02\xac\x65\x6d\x0b\xcb\xfa\xf8\x06\x9b\x0c\x96\xe9\x33\xcf\x8f\xfc\x0d\x83\xdc\xe0\xa9\x2e\xb9\x21\x0f\xe4\x7b\x54\x0b\x58\x92\x86\x99\x8f\x1a\x21\x80\x40\x06\x45\x23\xf3\xf8\xa5\xde\x73\x83\xf7\x95\x34\x78\x36\x2b\x08\xc7\x92\x6b\x9d\x00\x2a\x55\xa9\xe0\xe6\x15\x0f\x42\xd7\xdc\xe4\x07\x54\xa0\x8d\x6a\x72\x03\x2d\x03\x80\x0e\x54\xc3\x89\xd7\x3b\x21\xcd\x6b\x10\x30\xcb\x18\x85\x81\x27\x7c\x9f\x22\xc4\xc9\x1c\xd4\xa3\x29\x34\x8d\x92\x33\xad\x57\x0e\xc3\x6d\xa6\xf1\x5a\xbb\x72\x46\x96\xd9\x51\xde\xa1\xbe\x71\xd2\xb9\x17\xa6\x41\xc9\x9c\xf0\x45\x0f\xcb\xb8\xa5\xa3\x93\xdf\x1f\xb8\x19\xc8\xe9\xe8\xe4\x42\x0a\x03\xdf\xaa\xaa\xec\x4b\x8d\x1b\xb8\x1d\x45\x4d\xa0\xe4\x3f\x3f\xb6\x52\x98\xbf\x55\x75\xf2\x2a\x1d\x37\xfe\xbf\xb3\xd5\x49\xc8\x4a\x14\xd0\xa4\x0e\xf5\x52\xaf\x6f\x48\xa8\xcc\xfd\x05\x93\x0c\x8c\x6a\x30\x48\x7c\xea\x19\x9c\xf8\x11\xe3\x51\x05\x2b\x28\x51\x76\x11\xbd\x5d\x92\xb0\xa8\xa8\x14\xfc\xbf\x82\x9c\xa6\x4d\x3c\x52\x5c\xbe\x21\x8c\xcc\xa0\x65\x51\xd4\x38\x88\xea\x48\x36\xce\x38\x8d\x1d\x6c\xc2\xa2\x48\x14\x70\x53\x1d\x9d\x59\x44\x0d\x15\xb2\x41\x16\x45\x96\xdc\x3c\xc4\x8e\xdc\xd3\xed\xc3\x2b\x64\x40\x9f\x2c\xea\x6b\xf0\x4d\x9d\x66\x4c\xd2\x71\xc6\xce\xee\xeb\x8c\x3d\x1c\xa5\x92\x3b\x88\x71\xc6\xa4\xfd\x32\x63\x07\xb1\x23\xf7\x90\x31\x7d\x52\xc6\x83\xe9\x4e\x79\x99\xc0\xa3\x63\x5f\x9c\x9b\xf3\x94\x54\x2b\x98\xcf\xd9\x5d\xab\x30\xdd\x86\x7c\x36\xd9\x98\xa6\x97\xc1\x07\xc1\xc6\x9f\x72\x73\xee\xe8\xdd\xb7\xc2\xc3\x7f\x32\xbd\x10\xf6\x82\xa5\xdf\x85\xc9\x0f\xc1\x20\x8d\xe9\x76\x10\xe7\xda\xf6\xaf\xe0\xba\xd4\x6e\x97\xfc\xeb\xee\x88\x06\x6b\xdb\x96\xd8\x88\xdf\x61\xa9\xd3\xad\x34\xa8\x0a\x9e\x23\x2c\x06\x3b\xc2\x6d\xa2\x2e\x40\xce\x35\xc2\x2d\xed\x25\x9d\x3e\xf1\x13\x6d\xa3\x4d\xaf\x0c\xd4\x0e\xf7\xb4\x9b\x4d\x93\x76\x57\x79\x37\xf2\xfb\xef\xa3\xc6\xed\xc3\xeb\x1d\xb8\x41\xc1\xe4\x47\x4d\x4b\x7f\x73\xa7\x92\x99\x07\x95\xa1\x14\x45\x0c\xf1\x62\xc2\xe8\xba\x97\xdc\x39\xed\x4d\x06\x52\x94\x9f\xc4\x1b\xec\x24\x54\x6a\xa6\xb6\x6c\x7c\xa2\x8e\xa2\xdc\xfb\x06\xfa\x0f\x76\xd1\x12\xd1\x02\x98\x14\x6e\x6b\xfc\xf9\x04\xa8\x77\xf8\x03\xa5\x71\xed\xdb\xd0\x56\x10\xa7\x67\x85\x85\x38\xf7\x4d\x0d\x4e\x0b\x6b\xd9\x7a\x0d\x63\x0f\x6b\x1f\xc3\xab\x20\x34\xf0\x99\x12\xdc\xa1\x6b\x5d\xea\x17\xeb\x35\x04\xf7\xaa\x10\xab\x27\x2f\x4b\x20\xea\x98\x1f\xfd\x1b\xb3\x5e\xc3\x3f\x72\x16\x57\x23\xdd\xe7\xa9\xb4\xcf\xe3\xfa\x85\x9c\x63\xc5\xdd\xbb\x77\x25\xef\x6e\xfd\x7e\xc1\xc8\xee\xd9\xbc\x5e\xe0\xfc\x05\x9d\x2d\xf2\x9e\x84\x03\x0e\xa6\xf1\xa4\x33\x49\xff\x90\x7d\xc6\x27\x76\xf9\xfc\x15\x00\x00\xff\xff\x5e\x75\x8c\xdd\x21\x08\x00\x00")

func _templateHandlersTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHandlersTmpl,
		"_template/handlers.tmpl",
	)
}

func _templateHandlersTmpl() (*asset, error) {
	bytes, err := _templateHandlersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/handlers.tmpl", size: 2081, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xc1\x6a\xc3\x30\x0c\x86\xef\x7a\x0a\x61\x76\x48\x61\x73\x9e\x60\x97\xac\x3b\xec\xd2\x0e\xd6\xfb\x70\x62\xd9\x15\x69\xe4\xe0\x28\x63\xc3\xe4\xdd\x47\xda\xd0\x5e\x04\xd2\x0f\x9f\xbe\xbf\x14\xf4\x14\x58\x08\xcd\x99\x9c\xa7\x6c\x70\x59\xa0\xae\xf1\x2d\x79\xc2\x48\x42\xd9\x29\x79\x6c\xff\x30\x26\xf5\x91\xe4\x19\xf7\x47\x3c\x1c\x4f\xf8\xbe\xff\x38\x59\x80\xd1\x75\xbd\x8b\x84\xa5\xe0\x93\xfd\xdc\x96\x65\x01\xe0\x61\x4c\x59\xb1\x02\xd3\x25\x51\xfa\x55\x03\x26\x0c\xeb\x9c\x34\xb3\xc4\xc9\x00\x98\xc8\x7a\x9e\x5b\xdb\xa5\xa1\x5e\xf9\xb5\xfa\xba\x65\x31\xb0\x83\x55\xe2\x90\x5e\xd2\x78\x13\x64\xe5\x24\x18\x52\xc6\x9e\x68\x64\x89\x78\xe3\x4f\x16\x7e\x5c\xc6\x6f\x7c\xc5\x96\xc5\x36\x73\x08\x94\xcb\x72\x3f\x6e\xbf\x6d\xe3\xba\x3e\xe6\x34\x8b\xaf\x76\xf7\x30\x0c\x6a\xbf\xae\x32\x94\x2b\xe1\xcb\x23\xd9\x14\x6d\x33\xf3\xc5\x5f\x81\x50\x0a\x92\xf8\xb5\xda\x7f\x00\x00\x00\xff\xff\xaa\xa0\x2f\x0c\x35\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 309, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\xdd\x73\xdb\x36\x12\x7f\xd7\x5f\xb1\xf5\xa4\x39\x32\x55\xe8\x3e\x3b\xf5\xc3\xd9\x4e\x2f\x9e\xc9\xf5\x32\x71\x7c\x2f\x9d\x8e\x07\x22\x97\x32\x46\x14\xa0\x03\xa8\x0f\x9f\xaa\xff\xfd\x06\x5f\x24\x48\x82\x22\xed\x51\x73\x69\xfd\x24\x83\xc0\x62\xf7\xb7\xdf\x00\xf6\x7b\xc8\x30\xa7\x0c\xe1\x6c\x49\x28\x3b\x83\xc3\x61\xb2\xdf\xc3\xab\xd5\x62\x0e\x17\x97\xf0\x2a\xf9\x44\xd2\x05\x99\xa3\x1d\x2f\x71\xb9\x2a\x48\x89\x70\xf6\x88\x24\x43\x71\x06\xaf\xd4\x17\xf5\x49\x10\x36\x47\x78\x25\xf5\xaa\xbb\x52\xac\xd3\x52\xaa\x6f\xe7\xe7\xa0\x08\xca\xe4\x9a\x2f\x97\xc8\x4a\x43\xe9\x2d\xd0\x5c\x0d\xde\xf0\x54\xba\x11\x4b\x21\x53\x14\xea\x2f\x66\x7d\x29\xe8\x12\x5e\x65\x6e\x2a\xb2\xd0\x4f\x43\xf2\x23\x65\x0b\xbd\x12\x00\x40\x0d\xd7\x4c\xaf\x04\x65\xe5\x43\xa1\x26\x9c\x35\xa6\x06\x09\xdd\x7f\xfe\x68\x18\x50\x3c\xdc\x21\x5a\x39\xcc\x30\xe4\x5c\x80\xc0\x1c\x05\xb2\x14\x13\x9f\x42\xf9\xb4\x72\x73\x7f\x21\x4b\x05\x1d\x48\x8d\x07\xec\x7d\x39\x73\x30\x82\xfe\x4c\xb1\xc8\x7c\xa8\xf2\x10\x54\xb9\x61\x76\x84\x58\xf9\x31\xb1\x08\xcb\x20\xd2\x3b\xb0\x8c\x96\x94\x33\x52\xc4\x10\x31\x5e\x42\x73\xf0\x8a\xf3\x22\xae\xa5\xbf\x97\x08\x77\x58\x1a\xee\x9c\x50\x8a\xd6\x3f\xda\x83\x8f\x58\xac\x50\xc8\x06\x20\x86\x63\x7f\x56\xc3\x94\x0c\xfb\x0a\x35\xc5\x7d\x8b\x6f\x6d\x5c\x9a\x75\xcd\xa4\x4c\xfe\x8d\x69\xc9\x45\xc3\xb2\x2c\xd5\x2f\x4f\x2b\xbc\xbd\x01\x2a\xe1\xcb\x47\xd0\x4a\xa0\x19\xf0\xbc\x39\x29\x99\xa4\x9c\xc9\x32\xb8\xf2\x12\x7e\xdc\x99\xf1\x0f\xb8\xbb\xbd\x81\xc3\xe1\x9d\xcf\xca\x64\xbf\xaf\x99\x96\xa5\xa0\x6c\xfe\x90\xa1\xa0\x1b\xc5\xb7\xc6\x5b\xb1\xf4\x9e\xa5\x3c\x43\xa0\xcb\x55\x81\x4a\x89\x12\x66\x94\x25\x66\x54\x24\x93\x7c\xcd\x52\x88\xcc\x2e\x9f\x31\x45\xba\x41\x25\x0c\xbc\x69\x30\x14\x5b\x32\x76\xe2\xd5\x3a\xff\xbb\x98\xeb\x69\x8a\xd8\xd5\x3a\xcf\x51\xc4\x80\x42\x70\x01\x7b\x8d\x2f\x75\x72\xfa\x44\x2f\x2f\x81\xd1\xc2\xce\x50\x7f\x02\xcb\xb5\x60\x90\x2f\xcb\xe4\xbd\x5a\x9c\x47\x67\x29\x61\x7f\x2b\x01\x0d\xd7\x96\x04\xd9\x2a\x44\xb4\x8e\xa5\xa2\x70\x16\x6b\x0a\x87\x5e\x55\xb4\xd8\x4c\x3e\xad\xcb\xdb\x9b\x28\x80\x71\xdc\xb6\xc9\x5e\x67\x70\x66\xee\xb6\xeb\x98\x67\x6b\x52\x73\x82\xfb\x18\x82\x25\x71\x4e\x56\xcd\xd6\xbb\xaa\x2f\x1f\x88\x8c\x3a\x5f\x6f\x59\x86\x3b\xad\x94\x7d\xb5\x61\xc3\xb2\xdd\xfe\x35\x1e\xce\xe2\x5b\x98\x98\x09\x1f\x74\xe8\x8c\x0a\x64\x5d\x3b\x48\x1a\x7e\x12\x1b\xdc\x55\xa8\xd9\xef\xed\x26\xd6\x92\xe0\x70\xa0\x99\xb2\x56\x2c\xa4\x9a\xfa\xa0\x7e\x6a\xa6\xa6\x1e\x47\x37\x7c\x3d\x2b\xb0\xe2\x4b\xf0\xed\x7e\xaf\x16\x1c\x0e\x9b\xfd\x1e\x59\x76\x38\x28\xdc\x8d\x0e\x06\x78\xf1\x84\x0f\xd2\xae\x6c\x6c\x8c\xdc\x82\x6f\xad\x6c\x4e\xbe\x87\x29\x6c\x6a\x5e\x04\xdf\x0e\x81\x5d\xe3\xe0\xed\xec\x3e\xde\xb2\x12\x45\x4e\x52\xf4\x3f\x5b\x7b\xd8\x74\xdd\xa2\xc7\x35\xd6\x8c\xcc\x0a\x84\x92\xf7\xb9\xc7\x05\xe4\xda\x72\x0c\x50\x9f\xc9\xd6\x61\x85\xc6\xf7\x61\x4b\xcb\x47\xa0\xda\x7e\xbe\xcf\x54\x64\x52\xce\x34\x05\x9a\xed\xe2\xc6\xe6\x4d\x19\xb4\x62\x26\x1e\xcb\x28\x84\xc2\x66\x93\x84\xa3\x42\xfc\x4e\xcf\xf8\xee\xff\x23\xd6\x05\x7c\xbf\x35\x32\x4d\x15\x1b\xb5\x60\xb5\xc6\xac\x8d\x1e\x33\x11\xb3\xd7\xcf\x2a\x3a\x1e\x0e\xd1\x26\x3e\xae\xfc\x3e\xdb\x3b\x84\x96\x85\xf9\xe8\xb5\xa4\x23\x56\x74\x24\x9a\x38\x88\xc6\x84\xdc\x97\x2b\x80\x36\xc3\x71\xd7\x60\x6a\x63\x19\x60\xf4\x99\xa6\x74\x4a\x29\xac\xc1\x54\xb6\xd2\xa7\x9f\x01\x1b\x19\x8a\x9d\x7d\x16\x14\x34\xa8\x40\xea\xe8\x5d\xd1\x2d\x3e\x3d\x84\x18\x2d\x5c\xcd\xd2\x9b\xda\xaa\x58\xde\xda\x55\x97\x99\xad\x7a\x4a\x62\x29\x61\x43\x8a\x35\xba\x52\xa6\xfe\x96\x7a\xcb\x35\xd4\xe3\xcb\x8b\xf6\x3e\x91\xd9\xa2\xe2\xcc\x38\xd8\x5d\x41\xb5\xf1\xff\xfa\xdb\xaf\xbf\xb9\x54\x63\xbe\xd7\x5f\xaa\xbc\x63\x99\xb3\xca\x8f\x6d\xb1\xdb\x11\xd4\x4f\xdd\x2a\x1a\x9b\x7d\x5b\xa1\x61\x5c\xb6\xbe\xc3\xf2\x48\xb6\x1e\x24\x59\xb9\x2c\x94\x62\x8d\x46\xe7\x46\xc6\x97\xb1\x73\xcf\xe4\xa9\x18\xca\x49\x21\xd1\xab\xb9\xba\x8e\x71\x32\x84\x86\x99\xd1\x2a\x3a\x52\x93\x07\xd5\x7b\x7e\xde\xed\x0d\x8c\x8b\x8c\x37\x67\xd5\x61\x28\x42\x33\xce\x0b\x24\x0c\xb6\x8f\x34\x7d\x54\x31\x50\xe9\x4b\x6d\x6f\x66\x6d\x89\x54\x6e\x32\xde\xf8\xdb\x8c\x45\x31\xd4\xf6\x7f\xa4\x2f\x99\x02\x5f\x68\x66\xe2\xba\xe8\xfe\xee\xe4\xe5\xa5\x17\x4c\x34\x53\xd3\x86\x35\x78\x5f\x07\x34\x37\x35\x66\x6d\x95\x55\xf7\x30\xa1\x00\xa6\x50\xbe\xc1\x50\xe3\x62\x46\x9f\xd1\xb8\x98\x05\x5f\xad\x71\xc9\x30\xdc\xb8\x94\x7c\x54\xe3\x12\xca\x99\x75\xce\xb9\xe6\x4c\xae\x97\xd8\xd3\xca\xbc\x24\x55\xf6\xb0\xdb\x4d\x89\x2f\x68\x93\xfa\xe3\xec\x38\x3f\x3f\x9d\x25\x1f\x29\xfc\x02\x9c\x76\x4b\xf4\x3f\xc4\xa7\x1c\x3f\xad\xed\xf6\xed\xd2\x3b\xcc\x6f\xb7\xd6\x54\x7f\xe6\x14\xec\x23\xb2\x69\x9f\x09\x35\x5a\x9f\xb8\x2d\x68\x6f\xd9\xfe\x72\x43\x1a\x57\x73\xb9\xbf\xa6\x38\xaa\x11\xa3\xd9\x4e\xc9\xf1\xe3\x3b\xfd\xeb\xa7\x5a\x44\x3d\xf0\xc3\x0f\xb0\x9f\x34\xf1\x1b\x2c\xca\x2b\x79\x19\x7b\x31\x56\x63\xf0\xfa\x5a\x98\x75\x71\x53\x7f\x1b\x22\x74\xdb\xaa\x2b\xa2\xba\x0e\xea\xcc\xd3\x18\x2b\x24\x8c\x8d\x5a\xa8\xeb\x81\x9f\x2a\x9c\xde\x55\xbf\x34\xea\x6d\xd0\x5b\xa6\x0a\xe3\x1a\x60\xc3\xaa\x4e\x2b\x56\x0b\x26\x60\x1b\xa6\xab\x65\xcd\x22\xbb\x6e\x0f\xfe\x44\x4a\xa9\xe2\x4f\xef\x79\x81\xaf\xba\x2a\xff\x1f\x51\x9d\xd7\x89\xab\xd9\x49\x38\xd5\x1d\xeb\xc6\xbf\x0d\x44\x06\x4d\xa2\xed\x98\xcd\xc6\xeb\x4f\x67\x04\x5d\x47\x81\x67\x05\x2e\xcd\x3e\xdf\xc2\x25\x90\xd5\x0a\x59\x16\x09\xbe\x9d\x1a\xc8\xc6\x44\x86\xe1\xcc\x6b\xc9\x0e\x16\x74\x82\x6f\xbb\x1b\x86\xf2\xec\xe9\xb7\xee\x91\xb6\x07\xdf\x43\x27\xeb\x3e\xf3\x9c\xee\x54\x21\xea\xdb\xcb\xb1\x63\xfb\xad\x0e\x80\x47\xc3\xd8\xf8\x73\x9f\x97\x05\xad\xaf\x8b\x53\x9f\x49\xbf\x3c\x4a\xfd\x45\xec\xa0\x5b\x9d\x86\xcf\x39\x47\x9d\x50\xd9\x6b\xce\x86\x0f\x9e\x9f\x83\xbe\x1f\xd3\xd7\x95\x5e\x2b\x58\x0d\x72\x51\x5f\xa9\xf9\x2b\xfb\x1b\xc4\x56\x7f\x58\x51\x8a\xe2\x00\x19\xd8\x3b\x36\x5f\x77\x29\xe9\x93\x33\xaf\x63\x7d\xcf\xe4\x5a\x50\x36\x07\xea\x28\x48\xa0\x0c\x52\xbe\x5c\xd1\x02\xdf\x96\x74\x89\xee\xee\xc4\xbf\x00\x54\xe9\x3e\x9a\x3c\xf8\xf7\x72\x70\xe9\xf6\xb3\xb3\xf6\x07\x3b\xc1\xf6\xbf\xa1\x09\x61\x04\x1f\x42\x52\x85\x57\x5b\x51\xe2\x89\x77\xe9\xfc\x4f\x2c\x1f\x79\xd6\xb8\xde\xac\x86\x80\xb2\x0d\x5f\xa0\x84\xa5\x19\xe9\x34\xbd\x06\x3a\x85\x88\xe9\xb0\xf5\x85\xef\x53\x32\x70\xdf\x0e\xdf\xca\x85\xbb\xf6\xbc\xa3\x94\xb4\x58\x86\x54\x3d\xf9\xa4\x97\xf7\x35\x85\x2b\x5e\x5e\x13\x76\x2f\x9d\x5f\x5c\x13\x06\x33\x84\xb5\xc4\x0c\x66\x4f\x30\xe3\xa5\xec\x59\xf9\x19\xe5\xba\x28\x43\x63\x77\x94\xcd\xd7\x05\xd1\xe1\xdb\xf8\x4b\x0a\x6f\xae\x0b\x8a\xac\x8c\xdb\xda\x8e\x1a\x87\x51\x02\xff\xb3\x46\x59\x3e\xac\x88\x20\x4b\x69\x2f\x9c\x63\xed\x6f\xf5\xb9\x86\xd9\xa4\x2a\x64\xde\x38\x17\xb2\xec\xd4\xb7\x85\xa6\x49\x71\x9f\x6c\xc8\xf4\x6e\x10\x35\xce\xae\x79\xd6\x9d\x8d\xa1\xd1\x22\xe8\x0e\x10\x3d\x35\x91\x74\xf1\x60\x79\x75\xb7\xe2\xcd\xfc\x94\x26\x62\x95\x26\xb7\xda\x92\x3f\x93\x6d\x94\x96\xbb\x29\xd8\x15\x53\x78\x6d\x36\x1a\x38\x5b\x61\xb4\xd0\x3c\xb6\xc2\x9e\x8f\x74\xb3\x9a\xb3\xeb\x0c\xf1\xe4\x7d\x81\x4b\x39\xd5\x81\x30\x94\x6d\x5c\x00\x32\xb3\x5b\xf3\xdc\x09\xa8\xbf\xe8\x54\x9a\x54\x8a\x44\x0f\xe0\xb3\x2b\xce\x8b\xeb\x82\x48\x79\xa6\xb5\x13\xd6\xe5\x8c\xf3\xe2\x99\xaa\xb3\x0a\xbf\xe2\xbb\xaf\xa6\x41\x77\x00\xd7\x23\x1f\x1c\x0e\x2d\xdd\x7a\x00\xbb\xe4\x4c\x0a\x89\xf5\xb7\x50\xe2\x3b\xbe\x43\xc0\x14\x7c\x54\xae\x88\xc4\xaa\xde\xed\x33\x8e\x07\x7d\x08\x7c\x71\x39\x40\x20\x89\xde\xa8\xad\xbf\x08\x57\x34\xdb\x6d\xf9\xe2\x98\x3d\x79\x41\xf6\x94\xa6\xe5\x1f\xb7\x2a\x8b\xe0\x0b\xf8\xd7\xe2\x0f\xd0\x3c\x5f\x0c\xf8\x6d\xd3\x65\x1b\xf5\x48\x5f\x92\xf1\x0e\xae\xab\x43\x50\xfd\xc4\xec\xb6\xce\xf9\xfe\xd3\xa9\xfa\xae\x61\x25\x50\xea\xda\xa5\xaa\xcf\x5c\x9a\x9c\x23\x43\x41\x53\xfd\x46\x28\x51\x29\xa2\x6e\x48\xaa\xb4\x51\xe5\x8c\xbc\x27\x67\xd8\x65\x96\x3d\x55\x8d\xec\x88\xaa\x97\x2e\xd4\x6f\x98\x07\x7b\x17\x57\x9b\xce\xd6\x79\xac\xa7\xb5\xcb\x52\x35\xa6\xfe\x56\x84\xd1\x34\xd2\x15\xa4\x1a\xd2\xf4\x41\x6e\x69\x99\x3e\x9a\x67\x12\xf3\x24\x52\xdc\x9b\x5b\x36\x07\x4c\xaa\x33\xb9\x3e\x08\x75\xc5\x9a\x84\xb7\x86\x3b\x48\x89\x44\x73\x58\x9f\x26\x55\xa1\x6a\x61\x4b\x3d\x74\x1c\xe6\x6e\x5d\x86\x39\x59\x17\xe5\x85\xe5\x69\xe3\x38\xaa\x5e\xb9\xd5\x98\x57\x65\x98\xd5\xbc\x57\x60\x55\xff\xdb\x7a\x4a\xff\xdf\x2e\x05\x2b\x4a\xfa\xab\xaa\xc5\xef\xf4\x2b\x2b\x14\x13\xff\x8a\xa2\x81\x65\xeb\xbe\x82\x88\x27\xc8\xf0\xad\x44\x41\x49\x41\xff\x4b\x4a\xca\x59\x55\x03\xd6\x4d\x90\xf1\xab\x10\x39\xa5\x9b\xe6\x65\x45\xd4\xea\x84\x1b\x01\x96\x66\x95\xa2\x67\xeb\x3c\xf9\x84\xb8\xb8\xbd\xb1\xbd\x47\x5f\xcf\xd1\x9f\xc4\xac\x86\x69\xe6\x3d\x7e\x39\xa6\x5b\x8b\x94\x56\x6d\x43\xb3\xe6\x86\xe2\xa2\xda\xd2\x61\xa7\x4a\xc3\xb6\xc2\x93\x6a\xd6\xc6\x75\x55\xa9\x57\xa7\xb6\x3a\x28\xfd\x0c\xc5\xf6\x90\xca\x8c\x87\x9f\x9e\x68\x39\x07\x1b\xab\x3c\x39\xd2\x3d\x1d\xda\xd8\xbd\xde\x04\xc3\xa8\xfa\xd7\xd9\x6b\x10\xee\x67\xb3\xa1\x0c\xe1\x17\xdc\xde\x33\xdc\xad\x30\x2d\x31\xbb\xbd\x89\x68\x16\xbb\x5b\x1a\x63\x96\x4d\x0b\x9a\xf1\x1d\x4a\x28\x1f\xdb\xde\xb1\x12\x7c\x43\xb5\x06\x88\x7d\x25\x99\xf8\x4e\x54\xe7\xe4\xfa\xb5\x28\x54\x0f\x27\xbd\xd4\xd2\x72\x95\x11\x97\x77\x9e\x03\xd4\xbb\xb8\x86\x6d\x66\x82\x82\xff\xa9\xba\xc4\xeb\xf8\x42\xeb\xe2\x6e\xf6\xcc\xe7\x2e\x0d\xa0\x3d\x81\x5b\x97\x75\xda\x16\x87\x03\xe8\x08\x1f\x3b\xca\x86\x52\x54\x66\xba\xec\xf0\x93\x94\x59\xd2\x05\xff\x12\x36\x81\x66\x7a\xe0\xdd\xe7\xf3\x15\x60\x5f\xe7\x8c\x56\xc0\xef\xbf\x87\xb9\x7d\xe9\x3b\x1e\xef\x95\x6f\xf7\xc9\x91\x25\x12\xd8\x30\xa9\xf9\x8e\x27\xed\xf4\x6d\x7f\xfe\x2f\x00\x00\xff\xff\x70\xd5\xdf\x41\x73\x2e\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 11891, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateRegistryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6b\xe3\x30\x10\x85\xef\xfe\x15\x0f\x63\x96\x04\x76\xed\x65\xf7\x16\xc8\xa9\x3d\xb4\x90\xb4\x25\xe4\x56\x7a\x50\xec\xb1\xa3\x26\x96\x85\x24\xb7\x31\x42\xff\xbd\x4c\xed\x26\x31\xf5\xa1\x37\x7b\xde\xcc\xd3\x7c\x8f\xf1\x1e\x05\x95\x52\x11\x62\x43\x95\xb4\xce\x74\x31\x42\x88\xbc\x47\xa2\x0f\x15\x16\x4b\x24\xe9\x93\xc8\x0f\xa2\xa2\xa1\xee\xa8\xd6\x47\xe1\x08\xf1\x9e\x44\x41\x26\x46\xc2\x4a\xe4\xfd\x1f\xc8\x12\x49\xba\x12\x1d\x19\x2e\x65\x19\xfa\xef\x37\x32\x56\x36\x0a\x4d\x09\x9b\xef\xa9\x16\x69\x94\x37\xca\xba\x41\x5e\x82\x9f\xbb\xcc\xb1\x13\xa9\xe2\xd3\x35\xcb\xb0\xed\x34\x59\x18\x72\xad\x51\x16\xb5\xd0\x5a\xaa\x0a\xa5\x69\x6a\xb8\x4e\x13\x64\x61\xe1\x1a\x6c\x57\xfd\xaf\x12\x35\xd9\x34\x2a\x5b\x95\xf7\xa3\x6b\xa1\x67\x73\x9e\x7b\x6e\xa5\x72\xff\xff\xbd\x58\x67\xd8\xc1\x47\x18\x5c\x27\x45\xde\xc2\x08\x55\x11\x12\x3a\x52\xdd\x47\xb1\x19\x42\xe2\xdd\x00\xe0\xef\x89\x57\x67\x3d\xbd\xa3\xd3\xfd\x2d\x42\x58\x20\x3e\xd7\x36\xe2\x1d\x21\xc4\xbf\xaf\x91\x80\x10\x5d\x81\xdd\x70\x10\xa6\xcd\x5d\x63\xd6\x42\xf3\x26\x76\x84\x95\x5f\xf4\x11\xd5\x78\x6e\x0c\xc8\x5d\xb3\x39\x76\x52\xa5\x8f\xbb\x57\xca\x1d\x7c\xf4\x9d\x74\xaa\xeb\x07\xd0\x93\xc8\x13\x5e\x5f\xd9\xfe\x3a\xb7\x3f\x88\x9a\x8f\xc8\x07\x84\xa9\x44\xf8\xb8\x86\xca\x47\x00\x00\x00\xff\xff\x82\x8a\xe4\xa1\x97\x02\x00\x00")

func _templateRegistryTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateRegistryTmpl,
		"_template/registry.tmpl",
	)
}

func _templateRegistryTmpl() (*asset, error) {
	bytes, err := _templateRegistryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/registry.tmpl", size: 663, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateStringTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x8b\xdb\x30\x10\xbd\xfb\x57\x0c\xc6\x10\xab\xdd\x6a\xef\x0b\xb9\xa4\xdd\xd2\x5e\x7a\x68\xa1\x3d\x74\x97\xc5\x89\xc6\x8b\x40\x96\x16\x49\xf1\xb6\x08\xfd\xf7\x22\x59\x76\xfc\x95\x64\x9b\x43\xc0\x9a\x37\x6f\xde\xbc\x19\xc9\x39\x86\x35\x97\x08\xb9\xb1\x9a\xcb\xe7\x27\x86\x9a\xb7\x98\x83\xf7\xce\x41\x61\xe0\x6e\x0b\x05\x78\x9f\xdd\xde\xc2\x8f\x88\x00\xde\xbc\x08\x6c\x50\x5a\x03\x75\x63\x69\x77\x8a\x9a\x66\xf5\x51\x1e\xa0\x8c\x69\xf4\x3b\x1e\x90\xb7\xa8\xc1\x7b\x78\xd7\x1d\x7d\xab\x1a\x04\xef\x49\xe2\x29\x09\x74\x25\xc1\x65\x00\x00\xbc\x86\x65\xea\x76\x0b\x92\x8b\x84\x08\x3f\x8d\xf6\xa8\x25\xe4\x01\xda\x33\x96\x92\x0b\x92\x47\x88\x8f\xff\x6d\xa5\xc1\xec\x13\xbd\xa1\xbb\x23\x17\x0c\x75\x0c\x99\x3d\xfd\xa5\xb9\xc5\xa4\x61\xc2\x93\x93\xcc\xb9\x0f\x41\x48\x61\xe8\x4f\x3c\x58\x15\x34\x4c\xd2\x76\x7f\x2d\x96\x9b\xdf\x1b\x12\x4f\x6b\xa5\xe1\xe9\x06\x30\x98\xa4\x2b\xf9\x8c\xcb\x0e\xe8\xbd\xc0\xc6\x8c\x1a\x98\x09\x88\x0e\xbe\x68\x2e\x6d\x89\x04\xde\x43\x7e\xf3\x20\x73\x32\xea\x65\x5a\xf9\x71\xd3\x69\x44\x61\x70\xae\x6d\x68\x29\x32\x04\x54\xa7\xa9\xa8\xe3\x10\x0d\xfd\xcc\x51\x30\xd3\xa7\xa5\x56\xa5\xb2\x50\xd4\xf4\xa3\x92\x8c\x5b\xae\x64\x25\x76\x4a\x89\x19\x68\x0a\xe8\x83\x6b\x13\xa3\xe1\x64\x82\x8e\x55\x43\xe4\x4b\x65\xca\x45\xf4\xab\x64\xf8\x27\x6e\x85\x1b\x0a\xa2\x64\xcb\xfa\xff\x31\x8f\x53\xd2\x27\x75\xdc\x0b\x1c\x52\xb5\x7a\x75\x2e\x58\xe7\x7d\xeb\x1c\x4a\xe6\xfd\xa5\xd1\x75\x62\xd3\x72\x8c\xf4\xad\x72\x2f\x06\x3c\x95\x36\x92\xd7\x9e\x6a\x6a\xf5\xba\xde\xf7\xe5\x4d\x69\x09\x79\xa3\x98\x73\xb2\x1e\x37\x64\xad\xec\xb9\x95\x1b\xa0\x17\xd6\xee\xc1\x4e\xfc\xba\x83\x7c\x2e\xf2\x5e\x1e\x14\xc3\xc5\x0c\x13\xc1\x15\xff\x69\xff\x6a\xbc\x49\xcd\xc8\xac\x2b\xbc\x64\xd5\x88\x79\x73\xa7\x5b\x79\x76\x41\x57\x2e\x88\x3f\x97\x91\x3e\xaf\x14\xed\x1f\xa4\x11\x24\x3d\x7f\x66\x3f\xd8\x91\x4d\x68\xfe\x05\x00\x00\xff\xff\xbd\x79\x4c\x5c\xcf\x05\x00\x00")

func _templateStringTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateStringTmpl,
		"_template/string.tmpl",
	)
}

func _templateStringTmpl() (*asset, error) {
	bytes, err := _templateStringTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/string.tmpl", size: 1487, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateUtilsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xcf\x6a\xe3\x30\x10\xc6\xef\x7e\x8a\x0f\x63\x16\x76\xf1\xda\xf4\x6a\xc8\x29\xa1\xa7\x52\x02\x6d\x4f\x21\x04\xc7\x1e\x17\x11\x45\x76\x25\x85\x26\x08\xbd\x7b\x91\x6c\x27\x8a\x71\x68\x2e\xd1\xcc\x7c\xf3\xe7\x37\x1e\x63\x50\x53\xc3\x04\x21\x96\xf4\x75\x22\xa5\x77\x5d\x29\xcb\xa3\x8a\x61\x6d\xa5\xcf\xa8\x5a\xa1\xe9\xac\xb3\x65\xff\x6f\xcc\x7f\xb0\x06\xd9\x87\xe8\xca\xea\xb0\x76\x52\xd2\x24\x15\xac\x1d\x43\xcf\x8c\x78\xed\x1c\x69\xe4\x5c\xb2\x14\x9f\x84\xa4\x41\xb1\x08\x62\xc6\x80\xb7\xdf\x24\x91\x34\xd9\x6b\x79\x24\x58\x0b\x63\xa0\xe9\xd8\xf1\x52\x13\xe2\x4e\x32\xa1\x77\xfa\xd2\x51\xec\x92\xad\x4d\x5d\x31\x12\xb5\xb5\xd1\xf0\xc2\xf8\xe4\xca\xe5\xa7\x18\x08\xf0\xcf\x18\x8c\x55\xa7\xda\xfe\x19\x05\xdc\x0e\x64\x37\xa4\xc6\x01\xc7\x0c\x62\x04\xe0\xda\xa5\x58\xe0\x8f\x31\x48\xae\x9d\x7c\xd4\xfd\xa6\xd8\xc9\x8d\x3b\xd0\x04\xe8\x05\x66\xf6\x91\xde\xd5\x1b\x06\x77\x66\x48\xf2\x88\x29\xd8\xde\x40\xce\x1a\x24\xd9\xaa\x3d\xed\x39\xbd\x71\x56\xb9\x0e\x9b\xed\x66\xeb\x09\xde\x2f\x1d\xdd\x6d\xd3\x8b\x6f\xb2\x79\x91\xff\x8a\x13\xff\xef\x43\x71\x26\x0e\xfe\xba\xa2\x3c\x8f\xf2\x1c\x2f\xce\x2e\xc2\x53\x61\x29\x12\xa7\xf2\x17\xd3\x0b\xfd\xbe\xca\xba\x46\xc2\xf0\x04\x6b\xff\xfa\xfd\x79\xd1\xcc\x3d\x3c\x6a\x4d\x52\xb6\x32\xec\xbd\x6e\x95\x62\x7b\x4e\xe8\x23\x77\x53\x90\x94\xd3\x01\x9c\x2f\x5b\xb6\xf5\x78\xad\xde\x1e\xf0\x8b\xab\x63\x45\xaa\x92\xac\xd3\xac\x15\x8f\x87\xfb\x09\x00\x00\xff\xff\x20\xf7\xdd\x03\x78\x03\x00\x00")

func _templateUtilsTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateUtilsTmpl,
		"_template/utils.tmpl",
	)
}

func _templateUtilsTmpl() (*asset, error) {
	bytes, err := _templateUtilsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/utils.tmpl", size: 888, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/client.tmpl":   _templateClientTmpl,
	"_template/handlers.tmpl": _templateHandlersTmpl,
	"_template/header.tmpl":   _templateHeaderTmpl,
	"_template/main.tmpl":     _templateMainTmpl,
	"_template/registry.tmpl": _templateRegistryTmpl,
	"_template/string.tmpl":   _templateStringTmpl,
	"_template/utils.tmpl":    _templateUtilsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"client.tmpl":   &bintree{_templateClientTmpl, map[string]*bintree{}},
		"handlers.tmpl": &bintree{_templateHandlersTmpl, map[string]*bintree{}},
		"header.tmpl":   &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":     &bintree{_templateMainTmpl, map[string]*bintree{}},
		"registry.tmpl": &bintree{_templateRegistryTmpl, map[string]*bintree{}},
		"string.tmpl":   &bintree{_templateStringTmpl, map[string]*bintree{}},
		"utils.tmpl":    &bintree{_templateUtilsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
