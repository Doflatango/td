// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/client.tmpl
// _template/errors.tmpl
// _template/handlers.tmpl
// _template/header.tmpl
// _template/main.tmpl
// _template/registry.tmpl
// _template/string.tmpl
// _template/utils.tmpl
// _template/zero.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfe\x8a\xc1\x84\x92\x94\xe0\xdc\x03\x3d\xa5\x3d\x14\xda\x12\x4a\x7e\x40\x95\xd7\x89\x88\xbd\x12\xeb\x75\x92\x22\xf2\xef\x45\xb2\xd2\x93\x96\xa7\xd1\x68\x66\x63\x44\x4b\x9d\x63\x42\x6d\x7b\x47\xac\x35\xee\xf7\x2a\x46\x2c\xc2\xf9\x88\xed\x0b\x16\xcd\xde\xd8\xb3\x39\x52\xe1\x4a\x43\xe8\x8d\x12\xea\x13\x99\x96\xa4\xc6\x22\xdd\x54\x9b\x0d\xde\xf9\xe2\xcf\x24\xb0\x86\xe1\xf2\x0c\x31\x57\x7c\x1e\xf6\xe2\xd5\x43\x82\x85\x35\x7d\x3f\x36\x95\xfe\x06\xfa\x97\x3b\x56\x92\xce\x58\x42\xac\x50\xe8\xb7\xb9\x2e\xad\xde\x60\x3d\x2b\xdd\xb4\xd9\xcd\xe7\x1a\x8e\xc3\xa4\xf8\x71\xdc\xbc\xb1\xf5\x2d\xc9\x1a\x7e\xd2\x07\x7b\xa5\xcc\x56\x20\x11\x2f\xd5\x1c\x6b\x97\x7b\xc1\x0d\xa1\xa7\x21\x4d\x03\xe9\xc9\xb7\x23\x3a\x2f\x39\x90\xe3\x23\xba\x89\xad\x3a\xcf\x23\x3a\xf1\x03\x0e\x1f\x18\xed\x89\x06\x83\x8b\x33\x8f\xa4\x25\x77\xf1\x1b\x55\x26\xab\x39\x73\x6a\x56\x34\xe9\xcf\xe4\x85\x2f\xba\xce\xc2\xa5\x2b\x3d\x8b\x62\x85\xe7\xe2\x90\x9f\x92\x4e\xc2\x78\x9a\x51\x22\xd9\x6e\x5b\x16\x28\xeb\x0a\xb8\x27\xd3\x18\x41\xdc\xa6\x55\xff\x05\x00\x00\xff\xff\x88\xcc\x3e\xfd\xb3\x01\x00\x00")

func _templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateClientTmpl,
		"_template/client.tmpl",
	)
}

func _templateClientTmpl() (*asset, error) {
	bytes, err := _templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/client.tmpl", size: 435, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateErrorsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x3d\x6f\xdb\x30\x10\xdd\xf9\x2b\x1e\x04\x0f\x52\x10\x93\xbb\x8b\x4c\x45\x06\x2f\x45\x87\xfe\x01\x86\x3a\x51\x82\x6d\x52\x38\x9e\xd1\x04\x02\xff\x7b\x41\x4a\x29\x10\xb9\xe8\x22\x48\xc7\xf7\xf8\x3e\x74\xcb\x72\x84\x79\xf2\x51\x3e\x66\x3a\xc1\x4f\x32\xde\xdf\xb4\x8b\x37\xe3\xa3\xf4\x46\x7a\x33\x05\x21\x0e\xf6\x6a\x3c\x05\xed\x62\x18\x26\xff\x64\x70\xcc\x59\xa9\x65\x41\x4f\xc3\x14\x08\x0d\x31\x47\x4e\x0d\x72\x2e\xd3\xc3\x7c\xf1\x38\xbd\xe0\xa0\x7f\x5a\x77\xb1\x9e\xb6\xb9\xd0\x6d\xbe\x5a\x21\x34\x23\xd9\x9e\xb8\xc1\xa1\x9c\xa8\x22\x8e\xf2\xe8\x5f\x99\xbf\x8f\xe4\x2e\xc4\x48\xc2\x77\x27\x58\x14\x20\xe5\x63\x0a\x5e\xed\xb1\xa8\xee\x06\xeb\xa8\xe2\xce\xe9\xd7\xc7\x4c\xed\x0a\xee\xf0\x16\xe3\xb5\x50\x86\x7b\x70\x68\x1f\x14\x3a\x9c\x53\x4b\xcc\xa8\xe6\x57\x78\xbd\x66\x1a\xf0\xfe\x8c\x78\x29\x11\x88\x59\xb7\x9f\xc4\xee\x5b\x99\x16\x08\xc0\x24\x77\x0e\x78\xd7\x9b\x28\x69\xe9\x14\x90\xd5\xdf\xa3\xc1\x5e\x13\xfd\x57\xff\xb5\x08\xb7\xdd\x96\xae\x5e\xbc\x71\x49\x8b\xaa\x0d\x1f\xc1\x36\x78\xc2\x21\xd5\x3e\x2b\x23\xd5\xd2\x8c\x29\xfc\xd2\x76\xd2\x3f\xec\xad\x74\x8c\x29\xad\x61\xaa\x14\x86\xc8\x68\x56\x40\xb1\x88\x9c\x1b\xad\x5c\x0c\x49\x1e\x99\x2f\x7b\x64\x15\x38\xa7\xaf\x28\xa6\x39\xb2\x24\xfc\x1e\x49\x46\xaa\xcd\x15\xcd\x2f\x4c\xbd\xe6\xdd\x51\xff\x59\xf4\x67\xd8\x1a\x4a\xaf\x7f\xe3\x79\x5f\xd3\x22\xa7\x07\xbb\xb9\x53\x75\xa1\x28\xf4\xd8\x36\x71\x7b\xfd\x13\x00\x00\xff\xff\x50\x13\xd7\x04\xd0\x02\x00\x00")

func _templateErrorsTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateErrorsTmpl,
		"_template/errors.tmpl",
	)
}

func _templateErrorsTmpl() (*asset, error) {
	bytes, err := _templateErrorsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/errors.tmpl", size: 720, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHandlersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x8e\xdb\x36\x10\x3e\x4b\x4f\x31\x31\x7c\x10\x03\x57\xbb\x67\x07\x3e\x65\x51\x64\x2f\x69\x80\x6d\x4e\x8b\x45\xc1\xca\xe3\x35\x61\x99\x72\x49\xaa\xf1\x56\xd0\xbb\x17\xc3\x1f\x89\x94\xec\xc4\x48\x4e\x12\xe7\x8f\x33\x1f\x3f\x0e\xa7\xeb\x60\x8b\x3b\x21\x11\x16\x7b\x2e\xb7\x35\x2a\xbd\x80\xbe\xcf\xbb\x0e\x96\xa7\xc3\x2b\xac\x37\xb0\x2c\xbf\xf0\xea\xc0\x5f\xd1\xcb\x0d\x1e\x4f\x35\x37\xe4\x81\x7c\x8b\x6a\x01\x4b\xd2\xe4\xe6\xed\x84\xe0\x83\xc0\x06\x76\xad\xac\x8a\xaf\xa7\x2d\x37\xf8\xb1\x91\x06\xcf\x66\x05\x7e\x59\x73\xad\x19\xa0\x52\x8d\xf2\x6e\x4e\xf1\x20\xf4\x89\x9b\x6a\x8f\x0a\xb4\x51\x6d\x65\xa0\xcb\x01\x20\x04\xd5\x70\xe4\xa7\x67\x21\xcd\x8b\x17\xe4\x7d\x9e\xd3\x36\xf0\x19\xbf\x4d\x23\x14\x6c\x1e\xd4\x45\x53\x68\x5a\x25\x67\x5a\xa7\x8c\xb7\x5b\x4f\xf7\xeb\xfa\x95\x35\xea\xf3\x3e\xc9\xdb\xd7\x97\x26\x5d\x39\x61\xe9\x95\xb9\x15\x3e\xed\x1b\x65\xe0\xef\xa6\xa9\xed\xf2\xab\x8e\xab\x7a\x4f\x4b\x2b\xff\xb8\xe7\x26\x92\xd3\x32\xc8\xa5\xc4\x3a\x55\x91\xc4\x6a\x85\x14\x3e\x76\xc0\xa5\x68\xe1\x7d\x92\x22\x83\x9a\xff\xf7\xf6\x28\x85\xf9\x5d\x35\x47\xa7\xd2\x45\xeb\xbe\xc1\x56\x33\x5f\x82\xd8\x41\x5b\xda\xa8\x23\x38\x0e\x3d\x0f\x83\xfd\x78\x93\x0d\x18\xd5\xa2\x97\xb8\xc2\x36\x70\xe4\x07\x2c\x92\xfa\x56\x50\xa3\x0c\x3b\x3a\x3b\xc6\xf2\x6c\xd7\x28\xf8\x6b\x05\x15\x51\x83\x48\xa7\xb8\x7c\x45\x48\xcc\xa0\xcb\xb3\xac\xb5\x21\x9a\x03\xd9\x58\xe3\xb2\xb0\x61\x59\x9e\x65\x62\x07\xef\x9a\x83\x35\xcb\x08\x7d\x21\x5b\xcc\xb3\xac\x27\x37\x17\xe2\x99\xdc\xcb\xc7\x87\x17\xd8\x00\xfd\xe6\xd9\x50\x83\x83\x7c\x9a\x31\x49\xd3\x8c\xad\x1d\x63\xa3\x97\x3b\x90\x0b\x8e\xa4\xb8\xec\xfb\x83\x6a\x5d\x2a\x23\xe4\xfa\x9b\x30\xd5\x1e\xaa\x3d\x37\x51\xd9\xc4\x3f\x16\x59\x55\x5c\x23\xd8\x84\xd7\x83\x2c\x2a\xed\x99\xdc\x7d\xe9\x55\xe0\x53\xe2\x47\xf9\x5e\x70\xb5\xf5\x5d\xf5\xee\x09\xc2\xef\xd0\x4d\x13\xe1\x8b\xca\x9c\xa7\xf7\xe1\x66\x8e\xcd\x29\x16\xb0\xf7\xb7\x6e\x03\x95\x39\x7b\x99\xbb\x5f\x37\x53\xf1\x9e\xdd\x70\xfa\xf7\xb7\x1f\xf6\x3d\x23\x2c\xee\xee\xe0\x93\x6d\x18\x20\x8e\xa7\x1a\x8f\x28\x8d\x9e\xb5\x9b\x72\x80\x6c\xaa\x61\xde\xfb\x12\x6a\x2b\x98\xdf\x55\xdb\x47\x3d\x7a\x2d\xf9\xac\x37\x69\x5f\x1a\x81\xf5\x82\xb5\x3f\x79\x73\x0e\xfd\x6c\xa0\xa4\x0b\x7f\xe1\x06\xfa\x6d\xc7\x58\xb4\x55\xf9\x9d\x6e\xc2\x06\x4b\xb1\xa3\x1c\x29\x66\x5b\x6e\x7d\x99\x05\xb9\x87\xed\xd8\x07\x6b\xf0\x6e\x03\x52\xd4\xd1\x16\x51\xb7\x46\xa5\x52\xce\x65\x5e\x21\x45\x9d\x60\xee\x18\xf0\x4b\xc0\x3f\x5d\xe3\xec\xca\xd1\x39\x60\x6f\xed\x6e\xc1\xbf\x1f\x74\xe5\x70\x1f\x58\xfc\x16\xcd\x70\xb1\x66\x1e\x74\x16\xdf\xaf\x79\xce\x89\x27\x4c\x1e\x5c\x7f\x9c\xf3\x77\xd7\xe7\xeb\x5b\x8b\x33\x1b\x7b\x4a\xd7\xfd\xe6\xcf\x7f\xa9\xed\x04\xf0\x64\x5f\x36\x0d\x7d\xdf\x75\xf6\x3c\xff\x81\xa5\x2e\x1f\xa5\x41\xb5\xe3\x15\xc2\x22\xda\xc1\xce\x0f\x63\x67\xa1\x49\x42\x97\x9f\xf9\x91\xe6\x87\x75\x4c\x0a\xff\xaa\x86\x76\xde\x96\xe1\xe1\x7d\x4e\x7c\xfe\x7c\x3b\xe1\xe3\xc3\xcb\x07\xb0\xbd\x3d\xe6\xc6\x48\x2c\xef\x79\x33\xab\xae\x30\x6b\xec\x38\xee\x8f\x70\x40\xb9\x75\x65\xbb\x9f\xf8\xe5\x4b\x29\xf8\xeb\xa0\x51\xd9\xf8\x2f\x4a\x63\x2b\x5f\x53\x1b\x13\xc7\x2f\x0a\x77\xe2\x3c\xe0\xe1\x9d\x16\x7d\x4f\x9c\x4f\x3d\xfa\xfe\x93\x1f\xbf\x84\x06\x3e\x53\x82\x5d\x04\xac\x4a\x37\xc1\x5c\x8b\x60\xc7\xb7\xeb\x8c\x4a\x8f\x75\x18\xe6\xee\xee\xe0\x0f\x39\xdb\x57\x23\xbd\x67\x53\xe9\x90\xc7\x75\x6e\xcf\x63\x15\x61\xc0\xbc\x92\x77\x78\x56\x7e\x40\xa6\x30\x9f\xfe\xc4\x95\x89\x0e\x3e\xb0\x2e\x22\x5d\x59\x4c\x90\x61\xc3\xc4\x78\x89\x4c\xf9\xf8\xfb\x7f\x00\x00\x00\xff\xff\xa6\xd8\xa0\x01\x8a\x0b\x00\x00")

func _templateHandlersTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHandlersTmpl,
		"_template/handlers.tmpl",
	)
}

func _templateHandlersTmpl() (*asset, error) {
	bytes, err := _templateHandlersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/handlers.tmpl", size: 2954, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\x6a\xc3\x30\x0c\x86\xef\x7a\x0a\x61\x76\x68\x61\x73\x9e\x60\x97\xac\x3b\xf4\xd2\x0e\xd6\xfb\x70\x62\xd9\x35\x69\xa4\xa0\x38\x63\xc3\xe4\xdd\x47\x96\xd0\xb1\xe3\xaf\x1f\xf4\x7f\x5f\x29\xe8\x29\x24\x26\x34\x57\x72\x9e\xd4\xe0\x3c\x43\x55\xe1\x8b\x78\xc2\x48\x4c\xea\x32\x79\x6c\xbe\x31\x4a\xf6\x91\xf8\x11\x0f\x67\x3c\x9d\x2f\xf8\x7a\x38\x5e\x2c\xc0\xe0\xda\xce\x45\xc2\x52\xf0\xc1\xbe\x6d\x61\x9e\x01\x52\x3f\x88\x66\xdc\x81\x69\x85\x33\x7d\x65\x03\x86\x54\x45\x47\x03\x26\xf4\x4b\x1c\xb3\x26\x8e\xa3\x01\x30\x31\xe5\xeb\xd4\xd8\x56\xfa\x6a\x19\xaa\xb2\xaf\x9a\xc4\x06\xf6\xb0\xd0\x9c\xe4\x49\x86\x95\x34\xe5\x24\x8c\x41\x14\x3b\xa2\x21\x71\xc4\x75\x68\xb4\xf0\xe9\x14\x3f\xf0\x19\x9b\xc4\xb6\x9e\x42\x20\x2d\xf3\xfd\xb8\x41\xd8\xda\xb5\x5d\x54\x99\xd8\xef\xf6\xf7\x32\xf4\xd9\xbe\xff\xc2\x90\xee\x38\xdd\xfe\x9a\x0d\xd1\xd6\x53\xba\xf9\x7f\x0f\x57\x17\x7b\x1c\x01\x4a\x41\x62\xbf\x58\xff\x04\x00\x00\xff\xff\xf3\xc5\x9f\x5b\x50\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 336, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5b\x5b\x73\xdb\xb8\xf5\x7f\xd7\xa7\x38\xeb\xbf\x37\x7f\xd2\x2b\x53\x3b\xed\x9b\xb3\x7e\xa8\xed\x6c\xe3\x99\xec\x36\x63\x27\x7d\x68\xa7\xe3\x81\xc8\x43\x09\x15\x05\xa8\x00\x24\x39\xd1\xf2\xbb\x77\x70\x23\xc1\x9b\x24\xbb\x4e\x9a\x6d\x9e\x2c\x10\x38\x38\xe7\x77\xee\x00\xb2\xdb\x9d\xc3\xe4\x6c\xc6\xd5\xa7\x15\x5e\xc0\x8c\xaa\xf9\x7a\x9a\xa4\x7c\x39\x99\x71\x95\x4d\x54\x36\xa1\x4c\xa1\x60\xa4\x98\xcc\x90\x25\x29\x67\x39\x9d\x9d\x4d\xe0\xbc\x2c\x47\xa3\xdd\x0e\x32\xcc\x29\x43\x38\x59\x12\xca\x4e\xa0\x2c\xf5\xd8\xe9\x6a\x31\x83\x8b\x4b\x38\x4d\xde\x93\x74\x41\x66\xe8\xc6\x15\x2e\x57\x05\x51\x08\x27\x73\x24\x19\x8a\x13\x38\x05\x47\x46\x10\x36\x43\x38\x95\x66\xd5\xbd\x12\xeb\x54\x49\xfd\x6d\x32\x01\x4d\x50\x26\xd7\x7c\xb9\x44\xa6\x2c\xa5\x73\xa0\xb9\x1e\xbc\xe1\xa9\xf4\x23\x8e\x42\xa6\x29\xd4\x5f\xec\x7a\x25\xe8\x12\x4e\x33\x3f\x15\x59\xdf\x9f\x96\xe4\x3b\xca\x16\x66\x25\x00\x80\x1e\xae\x99\x5e\x09\xca\xd4\x43\xa1\x27\x9c\x34\xa6\xf6\x12\xfa\x78\xf7\xce\x32\xa0\x79\xb8\x47\x74\x72\xd8\x61\xc8\xb9\x00\x81\x39\x0a\x64\x29\x26\x21\x05\xad\x07\x37\xf7\x57\xb2\xd4\xd0\x81\x34\x78\xc0\x2e\x94\x33\x07\x2b\xe8\xcf\x14\x8b\x2c\x84\x2a\xef\x83\x2a\xb7\xcc\x1e\x21\x56\xbe\x4f\x2c\xc2\x32\x88\xcc\x0e\x2c\xa3\x8a\x72\x46\x8a\x18\x22\xc6\x15\x34\x07\xaf\x38\x2f\xe2\x5a\xfa\x8f\x12\xe1\x1e\x95\xe5\xce\x0b\xa5\x69\xfd\xb9\x3d\x38\xc7\x62\x85\x42\x36\x00\xb1\x1c\x87\xb3\x1a\xa6\x64\xd9\xd7\xa8\x69\xee\x5b\x7c\x97\xa3\xda\x82\xdc\xea\x0f\x9f\x56\x78\x7b\x03\x54\xc2\x87\x77\x60\xc0\xa6\x19\xf0\xbc\x39\x29\x19\xa5\x9c\x49\xd5\xbb\xf2\x52\x8f\xd2\x1c\x8c\xd8\x32\xf9\x2b\xa6\x8a\x0b\x28\xcb\x1f\x1f\xed\xec\xb7\xf8\x78\x7b\x03\x65\x69\xd8\x28\x24\x6a\x57\x99\x52\x96\xe8\xe5\x76\x72\xcd\xe0\x6b\x6d\xfc\xb5\x2c\x9f\x51\xf0\x87\x0c\x05\xdd\x68\x61\x9c\x12\xea\xcf\x52\x09\xca\x66\xad\x09\x5a\x40\xc7\x99\x40\xb5\x16\x4c\xc2\x2f\x1f\xde\x0b\xae\x78\x25\x5d\x74\x7d\x77\x0d\x29\xcf\x30\x4e\xbc\x31\xce\x95\x5a\xc9\x8b\xc9\x24\xe5\x02\x13\x85\x05\xce\x04\x59\x26\x5c\xcc\x26\x4b\xb5\xd2\x8b\x27\x1f\xde\x9d\xab\xe2\xff\x04\x2e\x89\x58\xc8\x64\x94\xaf\x59\x0a\x91\x95\xf0\x0e\x53\xa4\x1b\xd4\x42\xc3\x59\x03\xa2\xd8\xb1\x12\xc5\xb0\xa6\x4c\xfd\xf1\x0f\xb0\x33\xfa\xb3\x9c\xf5\xc1\xe9\x54\xf4\x86\x69\xfe\x80\x2e\x57\x05\x6a\xe3\x95\xa0\x21\xb3\xa3\xe2\xf8\xdd\xed\x02\x37\xf1\x6a\x9d\xff\x49\xcc\xcc\x34\x4d\xec\x6a\x9d\xe7\x28\x62\x40\x21\xb8\x70\x7c\x51\xaf\xf7\x90\xe8\xe5\x25\x30\x5a\xb8\x19\x01\xf7\xf9\x52\x25\x6f\xf4\xe2\x3c\x3a\x49\x09\xfb\x7f\x05\x68\xb9\x76\x24\xc8\x56\x8b\x64\x6c\x5b\x6a\x0a\x27\xb1\xa1\x50\x79\x4f\xdb\x60\x2a\xcb\x0e\x58\x4d\xde\xaf\xd5\xed\x4d\xd4\x03\x54\xdc\xf6\xc7\xc1\x40\xe0\x5d\xdc\x3a\x7e\xe0\x96\xfe\x23\xcd\xe1\xbb\x2e\x98\x49\x68\x6a\x29\x5f\xae\x88\xc0\x07\x6d\x91\xda\xaf\x34\xb8\x35\x20\x7d\x6b\x5b\x7b\x19\x76\xf4\x97\x7b\x54\x51\xe7\xeb\x2d\xcb\xf0\x51\x6b\xcc\x21\xe4\x59\xee\x8f\xcc\xc7\x48\xda\x1f\x84\x8e\x85\xe3\x29\x02\xbd\x25\x72\x8f\x40\x0e\xa5\x4e\xfc\xf2\xfb\x1f\xd4\xbe\x9d\xf0\xd6\x24\xc8\xa8\x40\xd6\xab\xa8\x20\x1a\xc6\x16\x43\x9d\x50\x6c\x5c\x3a\xcd\xbd\xdf\x40\x59\xd2\x4c\x47\x25\x13\x86\xca\xf2\x41\xff\x69\x98\x1a\x07\x1c\xdd\xf0\xf5\xb4\xc0\x8a\x2f\xc1\xb7\xbb\x9d\x5e\x50\x96\x9b\xdd\x0e\x59\x56\x96\x1a\x77\xab\x83\x03\xbc\x04\xc2\xf7\xd2\x6e\x19\xd0\x7e\xb9\x05\xdf\x3a\xd9\xbc\x7c\x0f\x63\xd8\xd4\xbc\x08\xbe\x3d\x04\x76\x8d\x43\xb0\xb3\xff\x78\xab\xeb\x9a\x9c\xa4\x18\x7e\x76\xf6\xb0\xe9\x06\x81\x81\x40\xb0\x66\x64\x5a\x20\x28\x3e\x14\x0c\x2e\x20\x37\x96\x63\x81\xba\x23\x5b\x8f\x15\xda\x48\x07\x5b\xaa\xe6\x40\x8d\xfd\x7c\x9f\xe9\xbc\xa4\x43\xc7\x18\x68\xf6\x18\x37\x36\x6f\xca\x60\x14\x33\x0a\x58\x46\x21\x34\x36\x9b\xa4\x3f\x06\xc6\xaf\xcd\x8c\xef\xfe\x3b\x62\x5d\xc0\xf7\x5b\x2b\xd3\x58\xb3\x51\x0b\x16\xb8\xbe\xb5\xd1\x7d\x26\x62\xf7\xfa\x59\xe7\x82\xb2\x8c\x36\xf1\x7e\xe5\x0f\xd9\x5e\x27\xda\x0c\xf3\x31\x68\x49\x7b\xac\x68\x4f\x34\xf1\x10\x1d\x93\x60\x9e\xaf\x00\xda\x4c\x3e\x5d\x83\xa9\x8d\xe5\x00\xa3\x4f\x34\xa5\x97\x94\xc2\x19\x4c\x65\x2b\x43\xfa\x39\x60\x23\x87\x62\xe7\x90\x05\xf5\x1a\x54\x4f\xea\x18\x5c\xd1\x4d\x64\x01\x42\x8c\x16\x23\xd3\xf6\x0c\xa7\x36\x57\x62\xa2\x29\xb7\x35\x56\x31\x44\x27\xba\x8a\xb1\x33\x4e\x62\xd7\x52\xf5\x72\x66\x6a\xbc\x56\x65\x2d\x51\x49\xd8\x90\x62\x8d\xbe\xd8\xad\xbf\xa5\xc1\x72\xa3\x8e\xe3\x0b\xae\xf6\x3e\x91\xdd\x62\x7f\x85\x1e\xbb\x56\xa6\xc3\x7c\x98\xb2\x75\x14\xb6\xb4\xbe\x54\xd9\xb1\x8f\x64\xe5\xaa\xa0\xc4\x1a\xad\xae\xad\xe9\x3d\x8f\x9d\x8f\x4c\xbe\x14\x43\x39\x29\x24\x06\x95\x65\xd7\x21\x5e\x0c\xa1\xc3\xcc\x18\x15\x35\x3b\xae\xe0\x87\xb6\xc4\x4e\x8f\xe7\xbb\x94\x01\x63\x1c\x32\xea\xa0\xce\x8b\xfa\xbb\xcd\x8e\x19\xeb\x1e\x53\xb3\x30\xe5\xbc\x40\xc2\x60\x3b\xa7\xe9\x5c\xc7\x47\xad\x53\x4d\xcc\xce\xda\x12\xa9\xdd\x23\x09\xd1\xec\x71\x89\xb6\x5b\xdb\x89\xdd\x8f\xc7\xba\x4e\xc3\x47\x66\xa8\x14\x8a\x07\xbd\x36\xf4\x94\x4e\x41\xd5\x04\xa5\x6e\x44\x07\x20\xa9\xca\xfd\x17\x2f\x70\x83\x70\x66\x14\x39\x6e\xd8\x25\xb4\x7b\xbe\x41\x1b\x1a\xd7\x0e\xd6\x36\xe6\x03\x04\x9e\xce\xfa\x60\xb0\x3e\x7e\x53\xc7\x75\x9b\x92\x8b\xe6\xf6\x57\xcb\x01\x6e\xb0\xaf\xb5\xb5\xa3\x4f\x68\x6d\xed\x82\xaf\xd6\xda\x66\xd8\xdf\xda\x2a\x7e\x74\x6b\xdb\xae\x33\xea\x3c\x7d\xcd\x99\x5c\x2f\x71\xa0\xd1\x7d\x4e\x79\x31\xc0\x6e\xb7\x8c\xf8\x8f\x9b\xe8\x30\x47\x1d\x17\x23\xbf\x84\x01\x77\x8a\xe5\x1e\x4e\xbb\x6d\xcd\x17\x89\x02\x9e\x9f\xd6\x76\xbb\x76\xbb\xd2\xcf\x6f\xb7\x3e\xd7\xff\xec\xf9\xf0\x3b\x64\xe3\x21\x13\x6a\xb4\x8b\x71\x5b\xd0\xc1\x56\xe7\xf9\x86\x74\x5c\x9d\xea\xff\x35\xc5\xd1\xcd\x2b\xcd\x1e\xb5\x1c\x3f\xbe\x36\x7f\xfd\x54\x8b\x68\x06\x7e\xf8\x01\x76\xa3\x26\x7e\x07\x1b\x99\x4a\x5e\xc6\x9e\x8d\xd5\x31\x78\x7d\x2d\xcc\xba\xb8\xe9\x7f\x1b\x22\x4c\xab\xff\xf7\x7f\x58\x3a\x8e\x78\x67\x9e\xc1\x58\x23\x61\x6d\xd4\x41\x5d\x0f\xfc\x54\xe1\xf4\xba\xfa\xcb\xa0\xde\x06\xbd\x65\xaa\x70\xdc\xa1\x81\x65\xd5\x24\x42\xa7\x05\x1b\xb0\x2d\xd3\xd5\xb2\x66\x63\x52\xb7\x54\xbf\x23\xa5\x54\xf1\x67\xf0\x8c\x25\x54\x5d\xd5\x0f\xec\x51\x5d\x70\x7a\xa1\x67\x27\xfd\xa9\x6e\xdf\x09\xc6\xb7\x81\xc8\x41\x93\x68\x3b\x66\xb3\x59\xfd\xdd\x19\x41\xd7\x51\xe0\x49\x81\xcb\xb0\xcf\xb7\x70\x09\x64\xb5\x42\x96\x45\x82\x6f\xc7\x16\xb2\x63\x22\xc3\xe1\xcc\xeb\xc8\x1e\x2c\x41\x05\xdf\x76\x37\xec\xcb\xb3\x2f\xbf\xf5\x80\xb4\x03\xf8\x96\x9d\xac\xfb\xc4\xb3\xcd\x97\x0a\x51\xdf\x5e\x8e\x3d\xb6\x57\xed\x00\xb8\x37\x8c\x1d\x7f\x56\xf6\xbc\xa0\xf5\x75\x71\x1a\x32\xe9\xe7\x47\xa9\xff\x11\x3b\xe8\x56\xa7\xfd\x67\xc3\x47\x9d\xea\xb9\x07\x00\x0d\x1f\x9c\x4c\xc0\xdc\x28\x9b\x8b\xfc\xa0\x15\xac\x06\xb9\xa8\x2f\xa1\xc3\x95\xc3\x0d\x62\xab\x3f\xac\x28\x45\x71\x0f\x19\xd8\x79\x36\x5f\x75\x29\x99\x93\xc4\xa0\x63\x7d\xc3\xe4\x5a\x50\x36\x03\xea\x29\x48\xa0\x0c\x52\xbe\x5c\xd1\x02\xcf\x15\x5d\xa2\xbf\x6f\x0a\xaf\xcc\x75\xba\x8f\x46\x0f\xe1\xcd\x2d\x5c\xfa\xfd\xdc\xac\x5d\xe9\x26\xb8\xfe\xb7\x6f\x42\x3f\x82\x0f\x7d\x52\xf5\xaf\x76\xa2\xc4\xa3\xe0\x39\xc6\x2f\xa8\xe6\x3c\x6b\x3c\x29\xa9\x86\x80\xb2\x0d\x5f\xa0\x84\xa5\x1d\xe9\x34\xbd\x16\x3a\x8d\x88\xed\xb0\xcd\x53\x88\x4f\xc9\x81\x97\x28\xf0\xad\x3c\x45\x31\x9e\xb7\x97\x92\x11\xcb\x92\xaa\x27\xbf\xe8\xb3\x96\x9a\xc2\x15\x57\xd7\x84\x7d\x94\xde\x2f\xae\x09\x83\x29\xc2\x5a\x62\x06\xd3\x4f\x30\xe5\x4a\x0e\xac\xbc\x43\xb9\x2e\x54\xdf\xd8\x3d\x65\xb3\x75\x41\x44\x7d\xfe\x96\xc2\xd9\x75\x41\x91\xa9\xb8\xad\xed\xa8\x71\xf0\x26\xf0\x5f\x6b\x94\xea\x61\x45\x04\x59\x4a\xf7\xa8\x22\x36\xfe\x56\x9f\x6b\xd8\x4d\xaa\x42\xe6\xcc\xbb\x90\x63\xa7\xbe\x61\xb5\x4d\x8a\xff\xe4\x42\x66\x70\xeb\x6a\x70\xf6\xcd\xb3\xe9\x6c\x2c\x8d\x16\x41\x7f\xf8\x1a\xa8\x89\xa4\x8b\x07\xc7\xab\x7f\xf9\xd1\xcc\x4f\x69\x22\x56\x69\x72\x6b\x2c\xf9\x8e\x6c\xa3\x54\x3d\x8e\xc1\xad\x18\xc3\x2b\xbb\xd1\x81\xb3\x15\x46\x0b\xc3\x63\x2b\xec\x85\x48\x37\xab\x39\xb7\xce\x12\x4f\xde\x14\xb8\x94\x63\x13\x08\xfb\xb2\x8d\x0f\x40\x76\x76\x6b\x5e\xe3\xf4\xd8\x2d\x7a\x29\x4d\xda\x9b\x94\x1a\xe0\x93\x2b\xce\x8b\xeb\x82\x48\x79\x62\xb4\xd3\xaf\xcb\x29\xe7\xc5\x13\x55\xe7\x14\x7e\xc5\x1f\xbf\x9a\x06\xfd\x01\xdc\x80\x7c\x50\x96\x2d\xdd\x06\x00\xfb\xe4\x4c\x0a\x89\xf5\xb7\xbe\xc4\xb7\x7f\x87\x1e\x53\x08\x51\xb9\x22\x12\xab\x7a\x77\xc8\x38\x1e\xc6\xc0\x17\xe6\x72\x7f\x2f\x81\x24\x3a\xd3\x5b\x7f\x10\xbe\x68\x76\xdb\xf2\xc5\x3e\x7b\xea\x9c\xda\xbf\x8c\x69\x85\xc7\xad\xda\x22\xf8\x02\xfe\xb2\xf8\x02\x9a\xe7\x8b\x03\x7e\xdb\x74\xd9\x46\x3d\x32\x94\x64\xaa\x7c\x5f\x3f\xbe\xcc\xcd\xe3\xcb\xdb\x3a\xe7\x87\x8f\x0a\xeb\xdb\x9b\x95\x40\x69\x6a\x97\xaa\x3e\xf3\x69\x72\x86\x0c\x05\x4d\xcd\xbb\xb3\x44\xa7\x88\xba\x21\xa9\xd2\x46\x95\x33\xf2\x81\x9c\xe1\x96\x39\xf6\x74\x35\xf2\x48\x74\xbd\x74\xa1\xff\x86\x59\x6f\xef\xe2\x6b\xd3\xe9\x3a\x8f\xcd\xb4\x76\x59\xaa\xc7\xf4\xbf\x15\x61\x34\x8d\x4c\x05\xa9\x87\x0c\x7d\x90\x5b\xaa\xd2\xb9\x7d\x5a\x32\x4b\x22\x65\x6e\x5b\x77\x01\x30\xa9\xc9\xe4\xe6\x20\xd4\x17\x6b\xd2\x3c\x80\xd5\xab\x53\x22\xd1\x1e\xd6\xa7\x49\x55\xa8\x3a\xd8\xd2\x00\x1d\x8f\xb9\x5f\x97\x61\x4e\xd6\x85\xba\x70\x3c\x6d\x3c\x47\xd5\xfb\xcf\x1a\xf3\xaa\x0c\x73\x9a\x0f\x0a\xac\xea\xb7\xab\xa7\xcc\xef\x76\x29\x58\x5f\x5b\x84\xda\x36\x35\xb6\x15\xec\x7e\x4e\x04\x66\xee\xf0\xfb\xdc\x99\xa7\x57\xbd\xb9\xe0\x0a\xde\x94\x86\x59\xc1\x7e\x0c\xdf\x96\x1e\xaa\x55\x82\x15\x83\x17\xee\x07\xee\xc5\x34\x85\xa6\x0d\x3b\x76\x9f\xf0\x0c\xd2\xad\x78\xd6\x53\x48\xbd\xb6\xf5\xcc\xb1\xa2\xa7\x6c\xdd\x5c\x17\xf8\xba\xf3\xb1\xa3\x28\xec\x52\xfb\x2b\x8a\xc1\x3e\xe7\xf4\x4b\xff\x86\x82\x57\xac\xfb\x0b\xca\x74\x2d\x84\x86\x9d\x4f\xff\x89\xa9\x82\x39\x91\x40\xe0\xb3\x9e\x69\x4f\xca\xcc\x62\xbd\x32\x8a\xcd\x2d\xe7\x28\xbc\x72\x6a\xf8\x46\xeb\xfe\x89\x88\x4f\x90\xe1\xb9\x44\x41\x49\x41\x3f\x13\x45\x39\xab\x6a\xfa\xba\xa9\xb5\x71\xb2\x8f\x9c\xf6\xb5\xe6\xe5\x53\xd4\x3a\xd9\x68\x24\x4c\x9a\x55\x8e\x3b\x5d\xe7\xc9\x7b\xc4\x85\x86\x6f\xb4\xaf\x87\x1c\x2e\x4a\x9c\xc7\xd2\x2c\xb8\x1f\xdd\xe7\xab\xce\xb2\x8c\xab\x36\x3c\xd5\xaa\xf1\xa2\xda\xd2\x63\xa7\x95\xd8\x76\xe0\xa4\x9a\xb5\xf1\x5d\x72\x1a\xf4\x1d\xad\x8e\xd8\x3c\xc5\x72\x67\x02\x3a\x2c\x1d\x7e\x7e\x65\xe4\x3c\xd8\x28\xe7\xc9\x9e\x6e\xb8\x6c\x63\xf7\x6a\xd3\x9b\x16\xf5\x4f\x1f\x7f\x7a\xe1\x7e\x32\x1b\xda\x10\x7e\xc5\xed\x47\x86\x8f\x2b\x4c\x15\x66\xb7\x37\x11\xcd\x62\x7f\xeb\x56\xbf\xc3\xae\x2d\x68\xca\x1f\x51\x82\x9a\xb7\xa3\xdd\x4a\xf0\x0d\x35\x1a\x20\xee\x3d\x78\x12\x06\xc5\xba\xc6\xaa\xdf\xc5\x43\xf5\x44\x3c\x28\x15\x5a\xa1\xef\x88\xcb\xd8\xc0\x01\xea\x5d\x7c\x03\x3e\xb5\x41\x3e\xfc\x54\x5d\xca\x76\x7c\xa1\x75\x11\x3b\x7d\xe2\x93\xaf\x06\xd0\x81\xc0\xad\xcb\x57\x63\x8b\x87\x13\xe2\x11\x3e\xb6\x97\x0d\xad\xa8\xcc\x06\x9c\xfe\x67\x59\xd3\xa4\x0b\xfe\x25\x6c\x7a\x0e\x47\x0e\xbc\xf4\x7e\xba\x02\xdc\x0b\xb5\xa3\x15\xf0\xdb\x6f\xfd\xdc\x3e\xf7\x2d\x5b\xf0\xff\x19\xba\xcf\xee\x1c\x91\x9e\x0d\x93\x9a\xef\x78\xd4\x2e\xc7\xdc\x9f\xff\x0e\x00\x00\xff\xff\x92\xed\xe2\x56\x99\x33\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 13209, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateRegistryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6b\xe3\x30\x10\x85\xef\xfe\x15\x0f\x63\x96\x04\x76\xed\x65\xf7\x16\xc8\xa9\x3d\xb4\x90\xb4\x25\xe4\x56\x7a\x50\xec\xb1\xa3\x26\x96\x85\x24\xb7\x31\x42\xff\xbd\x4c\xed\x26\x31\xf5\xa1\x37\x7b\xde\xcc\xd3\x7c\x8f\xf1\x1e\x05\x95\x52\x11\x62\x43\x95\xb4\xce\x74\x31\x42\x88\xbc\x47\xa2\x0f\x15\x16\x4b\x24\xe9\x93\xc8\x0f\xa2\xa2\xa1\xee\xa8\xd6\x47\xe1\x08\xf1\x9e\x44\x41\x26\x46\xc2\x4a\xe4\xfd\x1f\xc8\x12\x49\xba\x12\x1d\x19\x2e\x65\x19\xfa\xef\x37\x32\x56\x36\x0a\x4d\x09\x9b\xef\xa9\x16\x69\x94\x37\xca\xba\x41\x5e\x82\x9f\xbb\xcc\xb1\x13\xa9\xe2\xd3\x35\xcb\xb0\xed\x34\x59\x18\x72\xad\x51\x16\xb5\xd0\x5a\xaa\x0a\xa5\x69\x6a\xb8\x4e\x13\x64\x61\xe1\x1a\x6c\x57\xfd\xaf\x12\x35\xd9\x34\x2a\x5b\x95\xf7\xa3\x6b\xa1\x67\x73\x9e\x7b\x6e\xa5\x72\xff\xff\xbd\x58\x67\xd8\xc1\x47\x18\x5c\x27\x45\xde\xc2\x08\x55\x11\x12\x3a\x52\xdd\x47\xb1\x19\x42\xe2\xdd\x00\xe0\xef\x89\x57\x67\x3d\xbd\xa3\xd3\xfd\x2d\x42\x58\x20\x3e\xd7\x36\xe2\x1d\x21\xc4\xbf\xaf\x91\x80\x10\x5d\x81\xdd\x70\x10\xa6\xcd\x5d\x63\xd6\x42\xf3\x26\x76\x84\x95\x5f\xf4\x11\xd5\x78\x6e\x0c\xc8\x5d\xb3\x39\x76\x52\xa5\x8f\xbb\x57\xca\x1d\x7c\xf4\x9d\x74\xaa\xeb\x07\xd0\x93\xc8\x13\x5e\x5f\xd9\xfe\x3a\xb7\x3f\x88\x9a\x8f\xc8\x07\x84\xa9\x44\xf8\xb8\x86\xca\x47\x00\x00\x00\xff\xff\x82\x8a\xe4\xa1\x97\x02\x00\x00")

func _templateRegistryTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateRegistryTmpl,
		"_template/registry.tmpl",
	)
}

func _templateRegistryTmpl() (*asset, error) {
	bytes, err := _templateRegistryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/registry.tmpl", size: 663, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateStringTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\x10\x86\x81\x58\x5b\xa7\xde\x0b\xe4\x92\xad\xc3\x76\xd9\x61\x03\xb6\xc3\x5a\x14\x4e\x44\x17\x02\x64\xaa\x90\x14\x77\x83\xa0\xff\x3e\x48\xb6\x13\x7f\x25\xed\x9a\x43\x00\x8b\x8f\x7c\xef\x91\x94\xbc\x17\x58\x49\x42\xc8\xac\x33\x92\x1e\x1f\x04\x1a\xd9\x60\x06\x21\x78\x0f\xb9\x85\x9b\x0d\xe4\x10\xc2\xea\xfa\x1a\x7e\x24\x04\xc8\xfa\x49\x61\x8d\xe4\x2c\x54\xb5\xe3\xed\x29\x1a\xbe\xaa\x0e\xb4\x87\x22\xa5\xf1\xef\xb8\x47\xd9\xa0\x81\x10\xe0\x5d\x7b\xf4\xad\xac\x11\x42\x60\x5d\x9d\x82\x41\x4b\x09\x7e\x05\x00\x20\x2b\x98\xa7\x6e\x36\x40\x52\x75\x88\xf8\x33\xe8\x0e\x86\x20\x8b\xd0\xbe\x62\x41\x52\xb1\x2c\x41\x42\xfa\x6f\x4a\x03\x76\xd7\x95\xb7\x7c\x7b\x90\x4a\xa0\x49\x21\xbb\xe3\xbf\x8c\x74\xd8\x69\x18\xd5\xc9\xd8\xca\xfb\x0f\x51\x48\x6e\xf9\x4f\xdc\x3b\x1d\x35\x8c\xd2\xb6\x7f\x1d\x16\xeb\xdf\x6b\x96\x4e\x2b\x6d\xe0\xe1\x0a\x30\x36\xc9\x94\xf4\x88\x73\x07\xfc\x56\x61\x6d\x07\x06\x26\x02\x52\x07\x9f\x8c\x24\x57\x20\x83\xf7\x90\x5d\xdd\x51\xc6\x06\x5e\xc6\xcc\xf7\xeb\x56\x23\x2a\x8b\x53\x6d\x47\x4b\xa9\x42\x44\xb5\x9a\xf2\x2a\x0d\xd1\xf2\xcf\x12\x95\xb0\x7d\x5a\x67\x95\xb4\x83\xbc\xe2\x1f\x35\x09\xe9\xa4\xa6\x52\x6d\xb5\x56\x13\xd0\x18\xd0\x07\x97\x26\xc6\xe3\xc9\x08\x9d\x58\x63\xe4\x4b\x69\x8b\x59\xf4\x2b\x09\xfc\x93\xb6\xc2\x1f\x09\x91\xc4\x9c\xff\x3f\xe6\x71\x4a\xfa\xa4\x0f\x3b\x85\xc7\x54\xa3\x9f\xbd\x8f\xad\x0b\xa1\xf1\x1e\x49\x84\x70\x69\x74\xad\xd8\x6e\x39\x06\xfa\x16\x6b\xcf\x06\x3c\x96\x36\x90\xd7\x9c\x38\x8d\x7e\x5e\xf6\x7d\x79\x53\x1a\xc6\x5e\x29\xe6\x9c\xac\xfb\x35\x5b\xa2\x3d\xb7\x72\x47\xe8\x85\xb5\xbb\x73\xa3\x7e\xdd\x40\x36\x15\x79\x4b\x7b\x2d\x70\x36\xc3\xb9\xbf\x17\x46\xc1\x5e\x25\xe8\x6d\xf5\x4e\xbd\x98\xfa\x3b\x5d\xcc\xb3\x3b\xba\x70\x47\xc2\xb9\x8c\xee\xf3\x05\xd2\xfe\x4d\x1a\x40\xba\x17\xd0\xee\x78\xff\x8e\xae\x46\x65\xfe\x05\x00\x00\xff\xff\x66\x7b\xb0\x31\xd2\x05\x00\x00")

func _templateStringTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateStringTmpl,
		"_template/string.tmpl",
	)
}

func _templateStringTmpl() (*asset, error) {
	bytes, err := _templateStringTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/string.tmpl", size: 1490, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateUtilsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xc1\x8a\xdb\x30\x10\xbd\xfb\x2b\x1e\xc1\x94\x24\x64\x2d\x7a\x35\xec\xa5\x1b\xda\x4b\x29\x0b\x6d\x4f\xcb\x12\x14\x6b\xec\x8a\x28\x92\x2b\xcb\xed\x2e\x42\xff\xbe\x48\x76\xb2\x76\x48\xd6\x17\x4b\x33\x4f\x9a\xf7\x46\x6f\xbc\x87\xa0\x5a\x6a\xc2\xc2\xd2\xdf\x9e\x3a\xb7\x6b\xb9\xe5\xc7\x6e\x81\x10\x2a\xf7\x82\xca\x68\x47\x2f\xae\x78\x18\xfe\xde\xdf\x41\xd6\x28\x7e\xeb\x96\x57\x87\xc7\x08\x25\x47\xb6\x43\x08\xa7\xd4\x57\x49\x4a\xc4\xc0\x26\x8b\x21\xcb\x75\x43\xc8\x6b\x94\xf7\x93\x9c\xf7\x50\xe6\x3f\x59\xe4\x75\xf1\x83\x1f\x09\x21\xc0\x7b\x38\x3a\xb6\x8a\x3b\xc2\xa2\xb5\x52\xbb\x9d\x7b\x6d\x69\x11\x0f\x87\xb0\x89\x97\x91\x16\x21\x64\xe3\x0a\xa7\xa5\xea\xe2\xf9\x0d\x46\x05\x58\x7b\x8f\xd3\xad\x97\xd8\x61\x99\x4d\x74\x47\x21\xbb\xf1\xe8\x62\xa2\xe3\x8a\xc4\x0c\xc0\xb9\x4a\x79\x8f\x4f\xde\x23\x3f\x57\x4a\xd9\xf8\x5d\xca\xce\xdf\x75\x4f\x30\x13\xe9\x25\xae\xf4\x63\x33\xbb\x6f\x24\x1e\xb7\x53\x25\xb7\x34\x4d\xba\x37\x2a\x97\x35\xf2\x62\x6b\xfa\xbd\xa2\x9f\x4a\x56\xb1\xc2\xd3\xf3\xd3\x73\x52\xf0\xeb\xb5\xa5\x59\x37\x13\xf8\x1d\x76\x1d\x94\x5e\xf1\x22\xfe\x11\xa9\x86\x9c\x23\xbb\xab\x7b\x5d\xcd\xa9\xb1\x75\x63\x62\xa0\x44\x23\xdd\x9f\x7e\x5f\x54\xe6\xc8\x1a\xe3\x04\x73\x82\x49\xed\xc8\x6a\xae\x58\x43\xba\xa8\x63\x1f\xb7\x54\xaf\x19\xee\x42\xc8\xbe\x91\xf3\x7e\x78\x80\x10\x96\x2b\x2c\xff\x71\xd5\xd3\x07\x46\x1a\x38\xcb\x1a\x5c\x0b\x2c\xf3\xe8\x6a\x21\x9d\x34\x9a\xab\x15\x96\xda\x38\xcc\x62\x5f\x8c\x51\xab\x64\x2d\x73\xc0\xde\x18\xe5\xfd\x28\x6c\x75\xd3\x4d\xa9\x9c\x92\xfa\x90\x46\x28\x63\x2c\x63\x0c\xdf\xe3\xbe\x9c\xce\x83\xdc\x20\x8f\xa8\x34\x16\x03\x30\x99\x82\x0b\x81\x5c\xe2\x73\xac\x91\x4c\x92\x40\x57\x4c\x7f\xab\x34\x59\x6b\xec\xb4\xf6\xa3\xe9\x3a\xb9\x57\x84\x21\x33\x63\x41\xd6\x5e\x12\x88\xb1\xe2\xc1\x88\xd3\x48\xa6\xfd\xf8\xc6\xe5\x39\xb0\xa5\xae\xb2\xb2\x8d\x6d\xba\x4d\xee\x2d\x00\x00\xff\xff\x83\xbe\x26\x9c\x5d\x04\x00\x00")

func _templateUtilsTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateUtilsTmpl,
		"_template/utils.tmpl",
	)
}

func _templateUtilsTmpl() (*asset, error) {
	bytes, err := _templateUtilsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/utils.tmpl", size: 1117, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateZeroTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xcd\x6a\xdc\x30\x10\xbe\xfb\x29\xa6\xc2\x07\x7b\xc1\x72\xbb\x90\x50\x02\x7b\x4a\x28\xf4\xd2\x96\xa6\xa7\x5e\x82\x6c\x8f\xbc\x2a\x5a\x69\x2b\x8d\x43\x53\xa1\x77\x2f\xb2\x37\xb1\x93\xdd\x26\xac\x4f\xd2\x68\xbe\xf1\xf7\x23\x85\x00\x1d\x4a\x65\x10\xd8\x5f\x74\xf6\xae\x43\xa7\xee\x91\x41\x8c\x21\x40\xee\xe1\x6a\x03\x1c\x62\xcc\x42\xa8\xa0\x5e\xf5\x96\x1e\xf6\x78\x05\xbd\xa2\xed\xd0\xf0\xd6\xee\xea\xde\x52\x57\x53\x57\x2b\x43\xe8\x8c\xd0\x75\x8f\x86\x7b\x72\x43\x4b\x37\x28\x57\x35\x54\x31\x66\x72\x30\x2d\x14\xe3\x44\xfe\x1d\x5b\x54\xf7\xe8\x20\x46\x58\x4d\xa5\x2f\x62\x87\x10\x63\x09\x3f\xd1\xd9\xa2\x84\xc6\x5a\x0d\x21\x03\x00\x50\x12\x8e\x61\x9b\x0d\x18\xf5\xd8\x91\x3e\x87\x34\x38\x03\xe4\x06\x1c\x6b\xe7\xf2\x95\x0a\x75\x37\xd3\x4d\x60\x27\x4c\x8f\x90\xcb\xe4\x40\xee\xf9\xa7\xd4\xe1\x47\x5b\xaa\x44\xca\x20\x14\xb9\x1c\x99\x97\xe3\xea\xda\x9a\x4e\x91\xb2\x46\xe8\xb1\xb7\x4c\xae\x1d\x14\xbc\x3b\x96\xce\x43\x20\xdc\xed\xb5\x20\x04\xd6\xda\xdd\x5e\x38\xbc\x4b\x09\x30\xc8\x65\xb2\xe2\x48\x9c\x14\xda\x2f\xd5\xa1\xe9\x0e\x74\xa6\x55\x96\xbd\x74\x62\xee\x4b\xa2\xb2\x45\xd4\xcf\x7f\x78\x76\xbc\x27\xec\x9a\x32\x7c\xdc\x29\x09\xd6\x41\xc1\x6f\xb5\x6a\x93\x3f\xfc\xc6\x0e\x8d\xc6\xc3\xb6\x7a\x8a\x70\x22\xa8\x3d\x26\x04\xfe\x86\x82\xff\x78\xd8\x27\x00\x6b\x94\xe1\x9f\x0d\x7d\x58\x7f\x64\x4f\x80\xb9\x16\xe2\x9b\xc8\xf5\xc5\xe5\x11\x72\x7d\x71\xf9\x02\x99\x58\x6e\x85\xff\xe6\x50\xaa\x3f\x8b\x21\xca\x10\x2b\xcb\xd3\x67\x52\x5b\x31\x9e\x4e\xb3\xdf\xff\x9f\x8a\x27\xa7\x4c\x3f\xd3\x60\xec\x15\xda\xd6\xea\xb9\x73\x0a\xfb\x55\x8d\x5f\x9b\x5f\xd8\x12\x2b\xe1\xb4\x9b\x5b\xe1\x6f\x07\xf9\x9c\xf9\xb5\x16\xde\x9f\x46\x54\x31\xf2\xe9\xf5\x2d\x2f\xcd\xe2\x76\xfd\x0b\x00\x00\xff\xff\x84\x08\x29\xb3\x29\x04\x00\x00")

func _templateZeroTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateZeroTmpl,
		"_template/zero.tmpl",
	)
}

func _templateZeroTmpl() (*asset, error) {
	bytes, err := _templateZeroTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/zero.tmpl", size: 1065, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/client.tmpl":   _templateClientTmpl,
	"_template/errors.tmpl":   _templateErrorsTmpl,
	"_template/handlers.tmpl": _templateHandlersTmpl,
	"_template/header.tmpl":   _templateHeaderTmpl,
	"_template/main.tmpl":     _templateMainTmpl,
	"_template/registry.tmpl": _templateRegistryTmpl,
	"_template/string.tmpl":   _templateStringTmpl,
	"_template/utils.tmpl":    _templateUtilsTmpl,
	"_template/zero.tmpl":     _templateZeroTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"client.tmpl":   &bintree{_templateClientTmpl, map[string]*bintree{}},
		"errors.tmpl":   &bintree{_templateErrorsTmpl, map[string]*bintree{}},
		"handlers.tmpl": &bintree{_templateHandlersTmpl, map[string]*bintree{}},
		"header.tmpl":   &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":     &bintree{_templateMainTmpl, map[string]*bintree{}},
		"registry.tmpl": &bintree{_templateRegistryTmpl, map[string]*bintree{}},
		"string.tmpl":   &bintree{_templateStringTmpl, map[string]*bintree{}},
		"utils.tmpl":    &bintree{_templateUtilsTmpl, map[string]*bintree{}},
		"zero.tmpl":     &bintree{_templateZeroTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
