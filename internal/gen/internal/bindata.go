// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/client.tmpl
// _template/header.tmpl
// _template/main.tmpl
// _template/registry.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfe\x8a\xc1\x84\x92\x94\xe0\xdc\x03\x3d\xa5\x3d\x14\xda\x12\x4a\x7e\x40\x95\xd7\x89\x88\xbd\x12\xeb\x75\x92\x22\xf2\xef\x45\xb2\xd2\x93\x96\xa7\xd1\x68\x66\x63\x44\x4b\x9d\x63\x42\x6d\x7b\x47\xac\x35\xee\xf7\x2a\x46\x2c\xc2\xf9\x88\xed\x0b\x16\xcd\xde\xd8\xb3\x39\x52\xe1\x4a\x43\xe8\x8d\x12\xea\x13\x99\x96\xa4\xc6\x22\xdd\x54\x9b\x0d\xde\xf9\xe2\xcf\x24\xb0\x86\xe1\xf2\x0c\x31\x57\x7c\x1e\xf6\xe2\xd5\x43\x82\x85\x35\x7d\x3f\x36\x95\xfe\x06\xfa\x97\x3b\x56\x92\xce\x58\x42\xac\x50\xe8\xb7\xb9\x2e\xad\xde\x60\x3d\x2b\xdd\xb4\xd9\xcd\xe7\x1a\x8e\xc3\xa4\xf8\x71\xdc\xbc\xb1\xf5\x2d\xc9\x1a\x7e\xd2\x07\x7b\xa5\xcc\x56\x20\x11\x2f\xd5\x1c\x6b\x97\x7b\xc1\x0d\xa1\xa7\x21\x4d\x03\xe9\xc9\xb7\x23\x3a\x2f\x39\x90\xe3\x23\xba\x89\xad\x3a\xcf\x23\x3a\xf1\x03\x0e\x1f\x18\xed\x89\x06\x83\x8b\x33\x8f\xa4\x25\x77\xf1\x1b\x55\x26\xab\x39\x73\x6a\x56\x34\xe9\xcf\xe4\x85\x2f\xba\xce\xc2\xa5\x2b\x3d\x8b\x62\x85\xe7\xe2\x90\x9f\x92\x4e\xc2\x78\x9a\x51\x22\xd9\x6e\x5b\x16\x28\xeb\x0a\xb8\x27\xd3\x18\x41\xdc\xa6\x55\xff\x05\x00\x00\xff\xff\x88\xcc\x3e\xfd\xb3\x01\x00\x00")

func _templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateClientTmpl,
		"_template/client.tmpl",
	)
}

func _templateClientTmpl() (*asset, error) {
	bytes, err := _templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/client.tmpl", size: 435, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x41\x6a\xc3\x30\x10\x45\xf7\x73\x8a\x8f\xe8\x22\x86\x56\x3e\x41\x37\x69\xba\xe8\x26\x29\x34\xfb\x22\x5b\x23\x45\xb8\x1e\x19\x75\x5c\x5a\x84\xee\x5e\x4c\x42\x96\x33\x1f\xde\x7b\xb5\xc2\x73\x48\xc2\x30\x17\x76\x9e\x8b\x41\x6b\xd4\xf7\x78\xc9\x9e\x11\x59\xb8\x38\x65\x8f\xe1\x0f\x31\xab\x8f\x2c\x8f\x38\x9c\x70\x3c\x9d\xf1\x7a\x78\x3b\x5b\xa2\xc5\x8d\x93\x8b\x8c\x5a\xf1\x60\xdf\x6f\x47\x6b\x44\x69\x5e\x72\x51\xec\xc8\x8c\x59\x94\x7f\xd5\x90\x09\xb3\x1a\x22\x13\x93\x5e\xd6\xc1\x8e\x79\xee\x37\x6a\xaf\xbe\x1f\x92\x18\xea\x68\x53\x1f\xf3\x53\x5e\xae\x59\x49\x53\x16\x84\x5c\x30\x31\x2f\x49\x22\xae\xd4\x6f\x4b\x3f\xae\xe0\x13\xcf\x18\x92\xd8\xfd\x1a\x02\x97\xda\xee\xcf\x9b\xd1\xee\xdd\x38\xc5\x92\x57\xf1\xbb\xee\x3e\x86\x59\xed\x87\x96\x24\x91\xcb\x4e\xd2\x57\x47\x54\x2b\x58\xfc\x96\xfd\x1f\x00\x00\xff\xff\xd8\x6f\x86\x9d\x11\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 273, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5b\x73\xdb\x36\x16\x7e\xd7\xaf\x38\xf5\xa4\x59\x32\x55\xe8\x3e\x3b\xf5\xc3\x3a\x4e\x37\x9a\xc9\x76\x33\x76\xb3\x2f\x9d\x4e\x86\x22\x0f\x65\x8c\x29\x40\x0b\x82\x92\xb2\xac\xfe\xfb\x0e\x6e\x24\x48\x82\x22\xa5\x51\xb3\x6d\xf5\x62\x1a\xc4\xe5\x9c\xef\x7c\x38\x17\x80\x55\x05\x29\x66\x84\x22\x5c\xad\x63\x42\xaf\xe0\x70\x98\x55\x15\xbc\xd8\x3c\xaf\xe0\xe6\x16\x5e\x44\x1f\xe3\xe4\x39\x5e\xa1\x69\x17\xb8\xde\xe4\xb1\x40\xb8\x7a\xc2\x38\x45\x7e\x05\x2f\xe4\x1b\xf9\x8a\xc7\x74\x85\xf0\xa2\x50\xa3\x1e\x05\x2f\x13\x51\xc8\x77\xd7\xd7\x20\x27\x2c\xa2\xb7\x6c\xbd\x46\x2a\xf4\x4c\xaf\x81\x64\xb2\xf1\xd3\xc3\x07\xdd\x49\xf6\x7b\x44\x34\x7d\x75\x33\x64\x8c\x03\xc7\x0c\x39\xd2\x04\x23\x35\x0c\x69\x2a\x07\x88\x2f\x1b\xdb\xf7\xa7\x78\x2d\xc5\x83\x42\xad\x09\x95\xea\x66\xa4\xc9\x94\x12\x45\xf4\x23\xc1\x3c\x55\xe2\x00\x00\x18\x91\x32\x8f\x48\x31\x4d\x21\x50\x6f\x68\x4a\x04\x61\x34\xce\x43\x08\x28\x13\xd0\x6e\xbc\x63\x2c\x0f\x1b\xc9\x3f\x15\x08\x8f\x28\xf4\xac\x56\x20\x39\xd7\x3f\xba\x8d\x4f\x98\x6f\x90\x17\x2d\x65\xa4\x4c\x16\x92\x2c\xba\x67\xe5\x32\xc7\xc7\x9c\x24\xd8\xbc\x74\xa7\xf8\xe5\xd7\x5f\x7e\xd5\x2d\x3f\x4b\x14\x9c\x09\x30\x2f\xd0\xcc\x72\x74\xfc\x91\xd1\xde\x11\x03\xfd\xb5\xf4\xce\xe3\x61\xd6\x98\xdb\x8c\x95\x83\x16\xf7\x40\x0a\xf8\xf9\x03\x28\xab\x91\x14\x58\xd6\xee\x14\xcd\x12\x46\x0b\xe1\x1d\x79\x0b\xdf\xef\x75\xfb\x7b\xdc\x2f\xee\xe1\x70\x78\xa3\x56\x79\x47\x13\x96\x22\x90\xf5\x26\x47\x69\xc4\x02\x96\x84\x46\xba\x95\x47\xb3\xac\xa4\x09\x04\x7a\xe0\x03\x26\x48\xb6\xc8\xa5\x2a\xaf\x5a\x6b\x84\x66\x1a\xd3\xf1\xae\xcc\xfe\xce\x57\xaa\x9b\x9c\xec\xae\xcc\x32\xe4\x21\x20\xe7\x8c\x43\xa5\x14\x27\x56\x74\x77\xd2\xdb\x5b\xa0\x24\x37\x3d\xe4\x8f\xa3\x28\x39\x85\x6c\x2d\xa2\x77\x72\x70\x16\x5c\x25\x31\xfd\x9b\x00\xd4\x52\x9b\x29\xe2\x9d\xc1\x14\xe2\x42\xce\x70\x15\xaa\x19\xf4\x16\x74\xc4\x89\x3e\x96\x62\x71\x1f\x78\xe0\x09\xc7\xd9\x6e\x98\xe5\xe7\x70\x9f\x7e\x4e\x07\xfb\xd2\xa7\x73\x64\x77\x50\xdd\x5b\xad\x2a\xdf\xbc\x8f\x8b\xa0\xf7\x76\x41\x53\xdc\x2b\xc4\xab\x2e\x81\xda\xeb\xff\x1b\x13\xc1\xb8\xcb\xc3\x0e\x10\xba\xc3\x7b\xe5\x7f\x82\x1c\x69\xdf\xc8\x51\x8b\xbd\xa1\x06\x55\xfa\x92\xaa\x32\x8b\x18\x9a\xc0\xe1\x40\x52\xc9\x2e\x43\xfd\xcf\xf2\x51\x09\x35\xef\x6d\xc8\x5a\x2e\xce\x76\x55\x25\x07\x1c\x0e\xdb\xaa\x42\x9a\x1e\x0e\x12\x77\x6d\x83\x11\x59\x1c\xe5\xbd\x73\xd7\x04\x9a\xa2\x37\x67\x3b\xa3\x9b\xd5\xef\xf3\x1c\xb6\x8d\x2c\x9c\xed\xc6\xc0\x6e\x70\x70\x56\xb6\x2f\x17\x54\x20\xcf\xe2\xc6\x8d\xd8\x1f\xc9\x60\xdb\xe7\xfc\x00\xef\x4b\x1a\x2f\x73\x04\xc1\x86\xb8\x7f\x03\x99\x62\x8e\x06\xea\x21\xde\x59\xac\x50\x6f\x6c\xd8\x11\xf1\x04\x44\xf1\xe7\xdb\x54\x7a\x12\xb9\x53\xe6\x40\xd2\x7d\xd8\x5a\xbc\xad\x83\x32\xcc\xcc\x11\x19\x39\x97\xd8\x6c\x23\xff\x96\x0f\xdf\xa8\x1e\xdf\xfc\x7f\xd4\xba\x81\x6f\x77\x5a\xa7\xb9\x14\xa3\x51\xcc\xef\x9e\x07\x28\xa2\xd7\xfa\x51\xba\xbe\xc3\x21\xd8\x86\xc7\x8d\x3f\xc4\xbd\x9e\x87\x1f\x96\x63\x90\x49\x47\x58\x74\xc4\x9b\x58\x88\xa6\xf8\xd3\xf3\x0d\x40\xda\xbe\xb6\x4f\x98\x86\x2c\x23\x82\x9e\x48\xa5\x4b\x6a\x61\x08\x53\x73\x65\x38\x8c\x1f\xe5\xc8\x98\xef\x1c\x62\x90\x97\x50\x9e\xd0\x31\x38\xa2\x9f\x3c\x38\x08\x51\x92\xcf\x54\x56\x79\x24\xb4\xd5\xbe\xbc\xb3\xaa\xca\x23\x3b\x49\x57\x81\xa2\x80\x6d\x9c\x97\x68\x53\x8f\xe6\x5d\xe2\x0c\x57\x50\x4f\xcf\x1d\xba\xeb\x04\x7a\x89\x5a\xb2\x76\x26\x67\xd2\x36\x4f\x8e\xa6\xdb\x15\x0a\xed\x54\x2b\x34\xd9\x6c\x4f\x51\x37\x74\x4b\x6f\xac\xd7\xed\xb8\x86\x69\xd1\xfa\x11\xc5\x91\x68\xad\x8d\xa8\x85\x3e\x6f\xfe\x4f\xb4\x98\xb0\xc2\xcc\xcf\xdc\x8b\xa9\x30\xea\x71\x34\x86\x9d\x64\x76\x34\x75\xba\xbe\xee\x67\xf8\x9a\xc3\xd3\xf9\x26\xeb\x04\x39\xd1\x92\xb1\x1c\x63\x0a\xbb\x27\x92\x3c\x49\x27\x25\x78\xa9\x98\xa2\x7b\xed\xe2\x42\xf2\x78\x3a\x3b\xbb\x82\x05\x21\x5c\x80\xa0\x2d\x7e\xce\x81\x3d\x2b\xb9\xc3\x26\x3b\xfe\xe6\xe2\xa9\xa2\xe3\x18\x94\xfc\x73\xc8\xe2\xbc\x40\xc7\xbf\x98\xb7\x23\x46\x9e\x2b\x44\xad\x5d\x8d\x95\x67\x7e\x67\x24\x0d\x72\x8f\xbe\x0a\x43\xb7\x9e\x50\x61\xe8\x01\x5f\xad\xc2\x48\xd1\x5f\x61\x08\xd6\x8b\x7a\xdd\x38\xd7\xc4\x89\xb7\x8c\x16\xe5\x1a\x07\x6a\x8e\x73\xc2\xdb\x80\x58\xfd\x30\x36\xb5\x9e\x19\x76\x88\xd3\xf6\xfb\xe5\x68\x7a\x24\x43\xf3\x48\xda\xcf\xa5\x7f\x97\x0d\x63\xe5\xe9\x2c\x57\x75\x73\x64\xbf\xbc\xfd\xa4\x50\xfe\xf4\x99\xcf\x07\xa4\xf3\x21\xde\xb4\x6a\x94\xb0\xab\xe8\x60\x7e\x7d\x3e\x7b\xa6\x25\x47\xf6\xd7\x56\x47\x56\x4c\x24\xdd\x4b\x3d\xbe\x7f\xa3\x9e\x7e\x68\x54\x54\x0d\xdf\x7d\x07\xd5\xac\x8d\xdf\x68\xf6\x5c\xeb\x4b\xe9\xd9\x58\x4d\xc1\xeb\x6b\x61\xd6\xc7\x4d\xfe\xb6\x31\x57\xf5\xa5\xef\x2c\xa9\x87\xb1\x44\x42\x73\xd4\x40\xdd\x34\xfc\x50\xe3\xf4\xa6\x7e\x52\xa8\x77\x41\xef\x50\x15\xa6\x55\xaa\x5a\x54\x15\x33\x8c\x15\xb4\x37\xd6\x42\xd7\xc3\xda\xd9\x70\x93\xc7\xff\x89\x8c\xd2\x39\xfe\xf3\x14\xf6\xae\xe9\xea\x3c\xe0\x88\xe9\x9c\x92\x59\xf6\x8e\xfc\x71\xec\x58\xd9\xfc\xc7\x40\x64\x94\x12\xdd\x8d\xd9\xae\x90\xfe\x74\x24\xe8\x6f\x14\x38\xc9\x71\x29\xf1\xd9\x0e\x6e\x21\xde\x6c\x90\xa6\x01\x67\xbb\xb9\x86\x6c\x8a\x67\x18\x8f\xbc\x66\xda\xd1\x6c\x8d\xb3\x5d\x7f\x41\x5f\x9c\xbd\xfc\xd2\x03\xda\x0e\xe0\x7b\xe8\x45\xdd\x13\x0f\xd4\x2e\xe5\xa2\xfe\x78\x31\x76\x6a\xdd\xd5\x03\xf0\xa8\x1b\x9b\x7e\x40\x73\x9e\xd3\xfa\xba\x38\x0d\x51\xfa\x7c\x2f\xf5\x17\xe1\x41\x3f\x3b\xf5\x1f\x48\x4e\x3a\x4a\x32\x17\x8e\xad\x3d\x78\x7d\x0d\xea\xe2\x49\x5d\x1c\x3a\x75\x5e\xdd\xc8\x78\x73\x57\xe5\x8e\x1c\xae\xfe\x3a\xc5\x5f\x3d\x53\x10\x7a\xa6\x81\xca\x8a\xf9\xb2\x3f\x93\x3a\xe2\x72\xca\xd1\x77\xb4\x28\x39\xa1\x2b\x20\x76\x86\x02\x08\x85\x84\xad\x37\x24\xc7\xd7\x82\xac\xd1\x5e\x72\xb8\x37\x6b\x32\xdc\x07\xb3\xcf\xee\xed\x18\xdc\xda\xf5\x4c\xaf\xea\x60\x3a\x98\xe2\xd6\xd7\xc1\x8f\xe0\x67\x9f\x56\xfe\xd1\x46\x95\x70\xe6\x5c\xff\xfe\x13\xc5\x13\x4b\x5b\xd7\xc4\x75\x13\x10\xba\x65\xcf\x58\xc0\x5a\xb7\xf4\x2a\x5a\x0d\x9d\x44\x44\x97\xcf\xea\xfa\xf6\x4b\x74\x81\xdb\xe5\x66\x86\x07\x2c\xca\x5c\xf8\xda\x1e\x09\x5d\x95\x79\xac\x7c\x93\x26\x43\x02\xaf\xde\xe6\x04\xa9\x08\xbb\xaa\x04\x89\xd8\x4b\x2a\x08\xdc\x0b\x59\xb8\xc9\xbf\x73\xe0\xf8\x9f\x12\x0b\xd1\x3b\x30\x08\x5e\x59\x32\x98\xb5\xe7\x5a\x41\x5b\xde\xa9\xdc\x5b\xbf\xeb\x74\xec\x54\xf5\x49\xc4\x37\x49\xb4\x50\x30\x3e\xc4\x3b\x29\x45\xbd\xea\x1c\x5e\xea\x39\x46\xaa\x79\x4a\x72\xb5\x7c\xff\xb4\xc5\x8c\x9f\x9b\x2d\xe6\x7a\xb1\x0b\xe3\x71\x16\x1c\xc6\x33\xde\xb1\xfd\x57\x45\x45\x0f\x8f\x5c\x49\xee\xe2\x02\xeb\xcc\xc2\x01\xcb\x71\x5b\xbf\x0b\x6e\xee\xa1\x92\x04\x89\x3d\xc3\xbf\x9e\x4f\x03\x83\x3d\x8f\x00\xe1\xc5\xc0\xaf\xa3\x7d\x74\x4e\xde\xea\x83\x1e\xf5\xd1\xc8\xa2\xf1\x6b\x8d\x43\x70\xcf\x55\x37\x1c\x0b\xe5\x9f\xeb\x18\x64\x5d\xc1\x0a\x29\x72\x92\xa8\x0f\x0c\x22\xb9\xdf\x9b\xa4\xab\xf6\x01\xb5\x03\xc8\x06\x1c\x80\x19\x66\xc4\x93\x1e\x77\x1f\xcb\x98\x70\x23\x9f\x61\xe5\xcd\xcf\x6c\xfc\x5d\x96\x59\xa8\xba\x75\x43\xaf\x6c\x93\xbf\x4d\x4c\x49\x12\xa8\x28\x29\x9b\xd4\xfc\x50\xec\x88\x48\x9e\xf4\x9d\xed\x2a\x0a\xa4\xf4\xfa\xc8\xdf\x02\x93\xa8\x13\x30\x75\xd8\x63\x03\x52\x01\xaf\xb5\x74\x90\xc4\x05\x6a\xa3\x27\x51\x1d\x8c\x0d\x6c\x89\x83\x8e\xc5\xdc\x8e\x4b\x31\x8b\xcb\x5c\xdc\x18\x99\xb6\x56\xa2\xfa\x9b\x9a\x06\xf3\x3a\xd4\x18\xcb\x3b\x41\xa4\xfe\xdf\xc4\x0c\xf5\x7f\x37\xdc\xd5\x33\xcd\xdc\x23\xd5\x16\x74\x9d\xf3\xd5\x98\x7f\x81\x14\x5f\x17\xc8\x49\x9c\x93\xff\xc6\x82\x30\x5a\x87\xb5\x26\xaf\xd3\x5b\xc5\x37\x9d\x34\x45\xfb\x70\x35\xe8\x24\xf7\x2d\xef\x41\xd2\xda\xae\xcb\x32\x8b\x3e\x22\x3e\x2f\xee\x4d\x3a\x35\x94\x46\x0d\x3b\x01\x63\x50\x92\x3a\x17\xef\xc7\x4c\x69\x5c\xb6\xb2\x64\xcb\x90\xfa\xa4\xf5\xa6\x5e\xd2\x62\x27\xa3\x5d\xd7\xbe\x51\xdd\x6b\x6b\x13\xc5\xc4\x09\xbd\x9d\xa4\x50\x5d\x81\x9b\xb4\x58\xb2\x76\xfc\xda\x5b\xe9\x39\x9a\x2b\x66\xd1\x91\x84\xf0\xd0\xc5\xee\xe5\x56\xbb\x42\x4f\x62\x67\xe9\xe9\x85\xfb\x64\x31\x24\x11\x7e\xc2\xdd\x27\x8a\xfb\x0d\x26\x02\xd3\xc5\x7d\x40\xd2\xd0\x9e\x36\x37\x5f\x2c\x35\x0c\x5a\xb2\x3d\x16\x20\x9e\xba\x9b\x61\xc3\xd9\x96\x28\x0b\xc4\xe6\x33\xae\xc8\xdd\x33\x4d\xc0\x69\x3e\x45\x83\xfa\x53\x2a\x27\x08\x1c\xd9\x19\x03\x97\x0d\xce\x06\x68\x56\xb1\x39\xe8\x52\xfb\x00\xf7\x55\x7d\xe9\xd0\xdb\x0b\x9d\x8b\x86\xe5\x89\x57\xed\x2d\xa0\x1d\x85\x3d\x97\x0b\xdb\x71\x7f\x39\x61\x8f\x1d\x15\x43\x1a\x2a\xd5\x85\x83\xff\x3a\x7c\x19\xf5\xc1\xbf\x85\xad\xa7\x3e\x18\xf9\xa0\xec\x74\x03\x98\x2f\x03\x26\x1b\xe0\xb7\xdf\xfc\xd2\x9e\xfb\x0d\x81\xf3\x19\x62\xff\x73\x07\x33\x89\x67\xc1\xa8\x91\x3b\x9c\x75\xa3\xb5\x79\xfc\x5f\x00\x00\x00\xff\xff\x97\x09\x4f\xc5\x34\x2a\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 10804, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateRegistryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x31\x4b\x04\x31\x14\x84\xfb\xfc\x8a\x21\x6c\xa1\xa0\x7b\xa2\xdd\x81\x9d\x85\x82\x82\x1c\xd7\x89\xc5\xe3\x76\x36\x86\xbb\xe4\x42\x92\xc5\x5b\x42\xfe\xbb\xc4\x5d\xac\x2c\xdf\x0c\xf3\xf1\xbe\x52\x30\x70\xb4\x9e\xd0\x91\xc6\xa6\x1c\x67\x8d\x5a\x55\x29\xe8\xc2\xd1\x60\xfb\x88\xae\x7f\x97\xc3\x51\x0c\xd7\x3c\xd3\x85\x93\x64\x42\x7f\x51\x06\x46\x8d\xae\x35\x6a\xb3\xc1\x7e\x0e\x4c\x88\xcc\x53\xf4\x09\x4e\x42\xb0\xde\x60\x8c\x67\x87\x3c\x07\xc2\x0e\x09\xf9\x8c\xfd\xeb\x72\x7a\x71\x4c\xbd\x1a\x27\x7f\x58\xa6\x6f\x12\xae\xae\xdb\xee\x63\xb2\x3e\x3f\xdc\x7f\xa6\x1c\x1b\xa1\x28\xac\xd4\x7f\xcb\x52\x6e\x11\xc5\x1b\xa2\xe3\x89\x6e\x79\x7a\xb7\xea\xb4\xdf\x00\xe0\xee\xd2\x9c\x5a\xdf\x3f\xf3\xf2\xf2\x84\x5a\xb7\xd0\x7f\xd9\x4e\xbe\x51\xab\xbe\xf9\x85\xd1\x0f\xcb\xac\xaa\xaa\x9a\xf3\x1a\xfc\x04\x00\x00\xff\xff\x97\x1b\x2c\x20\x2e\x01\x00\x00")

func _templateRegistryTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateRegistryTmpl,
		"_template/registry.tmpl",
	)
}

func _templateRegistryTmpl() (*asset, error) {
	bytes, err := _templateRegistryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/registry.tmpl", size: 302, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/client.tmpl":   _templateClientTmpl,
	"_template/header.tmpl":   _templateHeaderTmpl,
	"_template/main.tmpl":     _templateMainTmpl,
	"_template/registry.tmpl": _templateRegistryTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"client.tmpl":   &bintree{_templateClientTmpl, map[string]*bintree{}},
		"header.tmpl":   &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":     &bintree{_templateMainTmpl, map[string]*bintree{}},
		"registry.tmpl": &bintree{_templateRegistryTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
