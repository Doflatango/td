// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/client.tmpl
// _template/handlers.tmpl
// _template/header.tmpl
// _template/main.tmpl
// _template/registry.tmpl
// _template/utils.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfe\x8a\xc1\x84\x92\x94\xe0\xdc\x03\x3d\xa5\x3d\x14\xda\x12\x4a\x7e\x40\x95\xd7\x89\x88\xbd\x12\xeb\x75\x92\x22\xf2\xef\x45\xb2\xd2\x93\x96\xa7\xd1\x68\x66\x63\x44\x4b\x9d\x63\x42\x6d\x7b\x47\xac\x35\xee\xf7\x2a\x46\x2c\xc2\xf9\x88\xed\x0b\x16\xcd\xde\xd8\xb3\x39\x52\xe1\x4a\x43\xe8\x8d\x12\xea\x13\x99\x96\xa4\xc6\x22\xdd\x54\x9b\x0d\xde\xf9\xe2\xcf\x24\xb0\x86\xe1\xf2\x0c\x31\x57\x7c\x1e\xf6\xe2\xd5\x43\x82\x85\x35\x7d\x3f\x36\x95\xfe\x06\xfa\x97\x3b\x56\x92\xce\x58\x42\xac\x50\xe8\xb7\xb9\x2e\xad\xde\x60\x3d\x2b\xdd\xb4\xd9\xcd\xe7\x1a\x8e\xc3\xa4\xf8\x71\xdc\xbc\xb1\xf5\x2d\xc9\x1a\x7e\xd2\x07\x7b\xa5\xcc\x56\x20\x11\x2f\xd5\x1c\x6b\x97\x7b\xc1\x0d\xa1\xa7\x21\x4d\x03\xe9\xc9\xb7\x23\x3a\x2f\x39\x90\xe3\x23\xba\x89\xad\x3a\xcf\x23\x3a\xf1\x03\x0e\x1f\x18\xed\x89\x06\x83\x8b\x33\x8f\xa4\x25\x77\xf1\x1b\x55\x26\xab\x39\x73\x6a\x56\x34\xe9\xcf\xe4\x85\x2f\xba\xce\xc2\xa5\x2b\x3d\x8b\x62\x85\xe7\xe2\x90\x9f\x92\x4e\xc2\x78\x9a\x51\x22\xd9\x6e\x5b\x16\x28\xeb\x0a\xb8\x27\xd3\x18\x41\xdc\xa6\x55\xff\x05\x00\x00\xff\xff\x88\xcc\x3e\xfd\xb3\x01\x00\x00")

func _templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateClientTmpl,
		"_template/client.tmpl",
	)
}

func _templateClientTmpl() (*asset, error) {
	bytes, err := _templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/client.tmpl", size: 435, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHandlersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xcd\x6e\xe3\x38\x0c\x3e\x5b\x4f\xc1\x06\x39\xd8\x45\xd6\xb9\xa7\xf0\xa9\xc5\xa2\xb9\x74\x0b\xec\xf6\x14\x14\x0b\x8d\x43\x37\x42\x1c\xd9\x23\xc9\xd3\x74\x0c\xbd\xfb\x80\x92\xec\xf8\xa7\x99\x1e\x26\x97\x58\xfc\xf9\x48\x91\x9f\xc8\xb6\x85\x3d\x16\x42\x22\x2c\x0e\x5c\xee\x4b\x54\x7a\x01\xd6\xb2\xb6\x85\x65\x7d\x7c\x83\x4d\x06\xcb\xf4\x99\xe7\x47\xfe\x86\x41\x6e\xf0\x54\x97\xdc\x90\x07\xf2\x3d\xaa\x05\x2c\x49\xc3\xcc\x47\x8d\x10\x40\x20\x83\xa2\x91\x79\xfc\x52\xef\xb9\xc1\xfb\x4a\x1a\x3c\x9b\x15\x84\x63\xc9\xb5\x4e\x00\x95\xaa\x54\x70\xf3\x8a\x07\xa1\x6b\x6e\xf2\x03\x2a\xd0\x46\x35\xb9\x81\x96\x01\x40\x07\xaa\xe1\xc4\xeb\x9d\x90\xe6\x35\x08\x98\x65\x8c\xc2\xc0\x13\xbe\x4f\x11\xe2\x64\x0e\xea\xd1\x14\x9a\x46\xc9\x99\xd6\x2b\x87\xe1\x36\xd3\x78\xad\x5d\x39\x23\xcb\xec\x28\xef\x70\xbf\x71\xd2\xb9\x17\xa6\x41\xc9\x9c\xf0\x45\x0f\xaf\x71\x4b\x47\x27\xbf\x3f\x70\x33\x90\xd3\xd1\xc9\x85\x14\x06\xbe\x55\x55\xd9\x5f\x35\x6e\xe0\x76\x14\x35\x81\x92\xff\xfc\xd8\x4a\x61\xfe\x56\xd5\xc9\xab\x74\xdc\xf8\xff\xce\x56\x27\x21\x2b\x51\x40\x93\x3a\xd4\xcb\x7d\x7d\x41\xc2\xcd\xdc\x5f\x30\xc9\xc0\xa8\x06\x83\xc4\xa7\x9e\xc1\x89\x1f\x31\x1e\xdd\x60\x05\x25\xca\x2e\xa2\xb7\x4b\x12\x16\x15\x95\x82\xff\x57\x90\x53\xb7\x89\x47\x8a\xcb\x37\x84\x91\x19\xb4\x2c\x8a\x1a\x07\x51\x1d\xc9\xc6\x19\xa7\xb1\x83\x4d\x58\x14\x89\x02\x6e\xaa\xa3\x33\x8b\xa8\xa0\x42\x36\xc8\xa2\xc8\x92\x9b\x87\xd8\x91\x7b\xba\x7d\x78\x85\x0c\xe8\x93\x45\xfd\x1d\x7c\x51\xa7\x19\x93\x74\x9c\xb1\xb3\xfb\x3a\x63\x0f\x47\xa9\xe4\x0e\x62\x9c\x31\x69\xbf\xcc\xd8\x41\xec\xc8\x3d\x64\x4c\x9f\x94\xf1\xa0\xbb\x53\x5e\x26\xf0\xe8\xd8\x17\xe7\xe6\x3c\x25\xd5\x0a\xe6\x7d\x76\xcf\x2a\x74\xb7\x21\x9f\x4d\x36\xa6\xe9\xa5\xf1\x41\xb0\xf1\xa7\xdc\x9c\x3b\x7a\xf7\xa5\xf0\xf0\x9f\x74\x2f\x84\xbd\x60\x51\xa8\xf4\x37\x4c\x4c\x7a\x4b\xfd\x2e\x4c\x7e\x08\x50\x69\x4c\xef\x88\xd8\xd9\xb6\x7f\x85\x20\x4b\xed\xa6\xce\xbf\xee\x35\x69\xb0\xb6\x6d\x89\xb7\xf8\x1d\x96\x3a\xdd\x4a\x83\xaa\xe0\x39\xc2\x62\x30\x4d\xdc\xcc\xea\x02\xe4\x5c\x23\xdc\xd2\x04\xd3\xe9\x13\x3f\xd1\xdc\xda\xf4\xca\xf0\x08\xc2\x8b\xee\xba\xd8\xa4\xdd\xa3\xdf\x8d\xfc\xfe\xfb\xa8\x71\xfb\xf0\x7a\x07\xae\xa5\x30\xf9\x51\x52\x4a\x91\x7f\xf0\x8e\xa9\x0a\x5d\xd5\x92\x3b\xa7\xbd\xc9\x40\x8a\xf2\x13\xef\xc1\x2c\x42\xa5\x66\x6a\xcb\xc6\x27\xaa\x0f\xca\xbd\x2f\x87\xff\x60\x17\x2d\x11\x2c\x80\x49\xe1\xa6\xc5\x9f\xd7\x93\x2a\x81\x3f\x50\x1a\x57\x8c\x0d\x4d\x03\x71\x7a\x56\x58\x88\x73\x5f\xa2\xe0\xb4\xb0\x96\xad\xd7\x30\xf6\xb0\xf6\x31\x6c\x03\xa1\x81\xcf\x94\xe0\x0e\x5d\xe9\x52\x3f\x50\xaf\x21\xb8\x6d\x42\x6c\x9e\x6c\x94\x40\xd0\x71\xb7\xfb\xdd\xb2\x5e\xc3\x3f\x72\x16\x57\x23\xbd\xe3\xa9\xb4\xcf\xe3\xfa\x43\x9c\x63\xc5\xdd\xbe\xbb\x92\x77\x37\x76\xbf\xe0\x57\xb7\x2e\xaf\x5f\x70\xbe\x39\x67\x03\xbc\x27\xe1\x80\x83\x69\x3c\xa9\x4c\xd2\x2f\xb0\xcf\xf8\xc4\x2e\x9f\xbf\x02\x00\x00\xff\xff\xfc\x2a\x56\x2f\x19\x08\x00\x00")

func _templateHandlersTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHandlersTmpl,
		"_template/handlers.tmpl",
	)
}

func _templateHandlersTmpl() (*asset, error) {
	bytes, err := _templateHandlersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/handlers.tmpl", size: 2073, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x41\x6a\xc3\x30\x10\x45\xf7\x73\x8a\x8f\xe8\x22\x86\x56\x3e\x41\x37\x69\xba\xe8\x26\x29\x34\xfb\x22\x5b\x23\x45\xb8\x1e\x19\x75\x5c\x5a\x84\xee\x5e\x4c\x42\x96\x33\x1f\xde\x7b\xb5\xc2\x73\x48\xc2\x30\x17\x76\x9e\x8b\x41\x6b\xd4\xf7\x78\xc9\x9e\x11\x59\xb8\x38\x65\x8f\xe1\x0f\x31\xab\x8f\x2c\x8f\x38\x9c\x70\x3c\x9d\xf1\x7a\x78\x3b\x5b\xa2\xc5\x8d\x93\x8b\x8c\x5a\xf1\x60\xdf\x6f\x47\x6b\x44\x69\x5e\x72\x51\xec\xc8\x8c\x59\x94\x7f\xd5\x90\x09\xb3\x1a\x22\x13\x93\x5e\xd6\xc1\x8e\x79\xee\x37\x6a\xaf\xbe\x1f\x92\x18\xea\x68\x53\x1f\xf3\x53\x5e\xae\x59\x49\x53\x16\x84\x5c\x30\x31\x2f\x49\x22\xae\xd4\x6f\x4b\x3f\xae\xe0\x13\xcf\x18\x92\xd8\xfd\x1a\x02\x97\xda\xee\xcf\x9b\xd1\xee\xdd\x38\xc5\x92\x57\xf1\xbb\xee\x3e\x86\x59\xed\x87\x96\x24\x91\xcb\x4e\xd2\x57\x47\x54\x2b\x58\xfc\x96\xfd\x1f\x00\x00\xff\xff\xd8\x6f\x86\x9d\x11\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 273, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\xdd\x73\xdb\x36\x12\x7f\xd7\x5f\xb1\xd5\xb8\x3d\x32\x55\xe8\x3e\x3b\xf5\xc3\x39\x4e\x2f\x9e\xc9\xf5\x32\x76\x72\x2f\x9d\x8e\x07\x22\x97\x36\x46\x14\xa0\x03\xa8\x8f\x9c\xca\xff\xfd\x06\x5f\x24\x48\x82\x22\xed\x71\xd3\xf6\xf4\x44\xe1\x63\xb1\xfb\xdb\xc5\x7e\x00\x38\x1e\x21\xc3\x9c\x32\x84\xf9\x9a\x50\x36\x87\xaa\x9a\x1d\x8f\x70\xb6\x59\x3d\xc0\xc5\x25\x9c\x25\x1f\x49\xba\x22\x0f\x68\xdb\x4b\x5c\x6f\x0a\x52\x22\xcc\x1f\x91\x64\x28\xe6\x70\xa6\x7a\x54\x97\x20\xec\x01\xe1\x4c\xea\x59\x77\xa5\xd8\xa6\xa5\x54\x7d\xe7\xe7\xa0\x08\xca\xe4\x2d\x5f\xaf\x91\x95\x86\xd2\x6b\xa0\xb9\x6a\xbc\xe6\xa9\x74\x2d\x96\x42\xa6\x28\x34\x3d\x66\x7e\x29\xe8\x1a\xce\x32\x37\x14\x59\xe8\xd3\x90\xfc\x7c\xfb\xc1\xcc\x53\x53\xef\x10\xed\xf2\xa6\x19\x72\x2e\x40\x60\x8e\x02\x59\x8a\x89\x4f\xa1\xfc\xb2\x71\x63\x7f\x26\x6b\x25\x31\x48\x2d\x06\x1c\x7d\xf6\x72\x30\xfc\xfd\x44\xb1\xc8\x34\x87\x00\x00\x56\xca\x3c\x20\x25\x61\x19\x44\xba\x87\x65\xb4\xa4\x9c\x91\x22\x86\x88\xf1\x12\xda\x8d\x57\x9c\x17\x71\xc3\xf9\x67\x89\x70\x87\xa5\xa1\xea\x18\x52\xb4\xfe\xd1\x6d\x7c\xc4\x62\x83\x42\xb6\x84\x51\x3c\xb5\x47\xb5\xb4\xb7\x11\x94\x95\xf7\x4a\xe2\xb9\x92\xa8\x0d\xa5\xd6\xa7\x66\x5d\x33\x29\x93\x7f\x63\x5a\x72\xd1\x52\xa6\xa5\xfa\xe9\xcb\x06\x6f\xae\x81\x4a\xf8\xf4\x01\x34\x80\x34\x03\x9e\xb7\x07\x25\xb3\x94\x33\x59\x06\x67\x5e\xc2\x0f\x07\xd3\xfe\x1e\x0f\x37\xd7\x50\x55\x6f\x7c\x56\xd4\x82\xef\x58\xca\x33\x04\xba\xde\x14\xa8\xa0\x95\xb0\xa4\x2c\x31\xad\x22\x99\xe5\x5b\x96\x42\x64\x68\xdc\x62\x8a\x74\x87\x8a\x55\x78\xd5\x5a\x2e\xb6\x64\xec\xc0\xab\x6d\xfe\x77\xf1\xa0\x87\x29\x62\x57\xdb\x3c\x47\x11\x03\x0a\xc1\x05\x1c\x35\x7a\xd4\x49\xe1\x13\xbd\xbc\x04\x46\x0b\x3b\x42\xfd\x04\x96\x5b\xc1\x20\x5f\x97\xc9\x3b\x35\x39\x8f\xe6\x29\x61\x7f\x2b\x01\x0d\xd7\x96\x04\xd9\x2b\x79\xb5\x06\xa5\xa2\x30\x8f\x35\x85\x6a\x10\xe8\x0e\x9b\xc9\xc7\x6d\x79\x73\x1d\x05\x10\x8c\xbb\x9b\xe0\xa4\x99\xfa\xcb\xf5\x8c\xaf\x33\xa8\x3d\xc0\x75\x86\x60\x49\x9c\xe9\xd7\xa3\xf5\xaa\xaa\xe7\x3d\x91\x51\xaf\xf7\x86\x65\x78\xd0\x4a\x39\xd6\x0b\xb6\xec\xd6\xad\xdf\xe0\xe1\xec\xb9\x83\x89\x19\xf0\x5e\xfb\xa2\xa8\x40\xd6\xb7\x83\xa4\xb5\x0b\x62\x83\xbb\x72\x02\xc7\xa3\x5d\xc4\x5a\x12\x54\x15\xcd\x94\x2d\x62\x21\xd5\xd0\x7b\xf5\xa9\x99\x5a\x78\x1c\x5d\xf3\xed\xb2\xc0\x9a\x2f\xc1\xf7\xc7\xa3\x9a\x50\x55\xbb\xe3\x11\x59\x56\x55\x0a\x77\xa3\x83\x11\x5e\x3c\xe1\x83\xb4\x6b\x1b\x9b\x22\xb7\xe0\x7b\x2b\x9b\x93\xef\x7e\x01\xbb\x86\x17\xc1\xf7\x63\x60\x37\x38\x78\x2b\xbb\xce\x1b\x56\xa2\xc8\x49\x8a\x7e\xb7\xb5\x87\x5d\x7f\x5b\x0c\x6c\x8d\x2d\x23\xcb\x02\xa1\xe4\x43\xdb\xe3\x02\x72\x6d\x39\x06\xa8\x5b\xb2\x77\x58\xa1\xd9\xfb\xb0\xa7\xe5\x23\x50\x6d\x3f\xdf\x66\xca\xef\xa8\xcd\xb4\x00\x9a\x1d\xe2\xd6\xe2\x6d\x19\xb4\x62\x66\x1e\xcb\x28\x84\xc2\x66\x97\x84\xbd\x42\xfc\x46\x8f\xf8\xe6\x8f\x11\xeb\x02\xbe\xdd\x1b\x99\x16\x8a\x8d\x46\xb0\x46\x63\xd6\x46\x4f\x99\x88\x59\xeb\x27\xe5\x1d\xab\x2a\xda\xc5\xa7\x95\x3f\x64\x7b\x55\x68\x5a\x98\x8f\x41\x4b\x3a\x61\x45\x27\xbc\x89\x83\x68\x8a\xcb\x7d\xbe\x02\x68\xdb\x1d\xf7\x0d\xa6\x31\x96\x11\x46\x9f\x68\x4a\x2f\x29\x85\x35\x98\xda\x56\x86\xf4\x33\x62\x23\x63\xbe\x73\xc8\x82\x82\x06\x15\x08\x1d\x83\x33\xfa\xd9\x9c\x87\x10\xa3\x85\xcb\x48\x06\x43\x5b\xed\xcb\x3b\xab\xea\x04\xb0\x93\x2d\x49\x2c\x25\xec\x48\xb1\x45\x97\xa8\x34\x7d\xa9\x37\x5d\x43\x3d\x3d\xbd\xe8\xae\x13\x99\x25\x6a\xce\xcc\x06\xbb\x2b\xa8\x36\xfe\x5f\x7e\xfd\xe5\x57\x17\x6a\x4c\x7f\xd3\x53\xc7\x1d\xcb\x9c\x55\x7e\x6c\xd3\xd0\x9e\xa0\x7e\xe8\x56\xde\xd8\xac\xdb\x71\x0d\xd3\xa2\xf5\x1d\x96\x27\xa2\xb5\x51\xa2\x61\xfa\x79\xf4\x3f\x33\x39\x61\x85\x59\xd8\x72\x5f\x4c\x84\x51\x8f\x63\x30\x3c\x91\x12\x07\xf1\x3f\x3f\xef\xa7\xe6\xc6\x86\xa7\xdb\x9b\x4a\xf0\x15\xa1\x25\xe7\x05\x12\x06\xfb\x47\x9a\x3e\x2a\x27\x55\x8a\xad\xb6\x14\x33\x6a\x4f\xa4\xb2\xe3\xe9\xd6\xd9\x65\x2c\x8a\xa1\x31\xd0\x13\x65\xc1\x02\xf8\x4a\x33\x13\x37\x59\xf1\x37\x2f\x9e\xff\x79\xbb\x5d\x33\xb5\x80\x9c\x14\x12\x3d\xa7\x61\x7b\x47\x34\xb7\xd0\x30\x39\x65\xb9\x12\x22\xec\x61\x14\xca\xd7\x18\xaa\x2c\x4c\xeb\x13\x2a\x0b\x33\xe1\xab\x55\x16\x19\x86\x2b\x8b\x92\x4f\xaa\x2c\x42\x41\xad\x09\x0a\x6f\x39\x93\xdb\x35\x0e\xd4\x1a\xcf\x89\x65\x03\xec\xf6\x63\xd6\x33\xea\x98\x61\x47\x38\x6d\x9f\xbf\x9c\x25\x9f\xc8\xcc\x02\x9c\xf6\x73\xe8\xdf\x65\x4f\x39\x7e\x3a\xcb\x1d\xbb\xb9\x71\x98\xdf\x7e\x32\xa8\x7e\xe6\xdc\xe7\x03\xb2\xc5\x90\x09\xb5\x6a\x93\xb8\x2b\xe8\x60\x5e\xfd\x7c\x43\x9a\x96\x14\xb9\x5f\x5b\x1c\x55\x29\xd1\xec\xa0\xe4\xf8\xe1\x8d\xfe\xfa\xb1\x11\x51\x37\x7c\xff\x3d\x1c\x67\x6d\xfc\x46\xb3\xe6\x5a\x5e\xc6\x9e\x8d\xd5\x14\xbc\xbe\x16\x66\x7d\xdc\xd4\x6f\x47\x84\xae\x2b\x75\xca\xd2\x24\x2a\xbd\x71\x1a\x63\x85\x84\xb1\x51\x0b\x75\xd3\xf0\x63\x8d\xd3\x9b\xfa\x4b\xa3\xde\x05\xbd\x63\xaa\x30\xad\x42\x35\xac\xea\xb0\x62\xb5\x60\x1c\xb6\x61\xba\x9e\xd6\xce\x82\x9b\xfc\xfd\x2f\xa4\x94\xda\xff\x0c\x16\xf4\xbe\xea\xea\xf8\x7f\x42\x75\x5e\xa9\xac\x46\x27\xe1\x50\x77\xaa\x5c\xfe\x73\x20\x32\x6a\x12\xdd\x8d\xd9\xae\x8c\xfe\x72\x46\xd0\xdf\x28\xf0\x24\xc7\xa5\xd9\xe7\x7b\xb8\x04\xb2\xd9\x20\xcb\x22\xc1\xf7\x0b\x03\xd9\x14\xcf\x30\x1e\x79\x2d\xd9\xd1\x84\x4e\xf0\x7d\x7f\xc1\x50\x9c\x7d\xf9\xa5\x07\xa4\x1d\xc0\xb7\xea\x45\xdd\x27\x1e\xa4\xbd\x94\x8b\xfa\xf3\xc5\xd8\xa9\xf5\x56\x0f\xc0\x93\x6e\x6c\xfa\xc1\xcc\xf3\x9c\xd6\xd7\xc5\x69\xc8\xa4\x9f\xef\xa5\xfe\x4f\xec\xa0\x9f\x9d\x86\x0f\x22\x27\x1d\x21\xd9\x1b\xc2\xd6\x1e\x3c\x3f\x07\x7d\x3d\xa5\x6f\xfa\xbc\x52\xb0\x6e\xe4\xa2\xb9\xd1\xf2\x67\x0e\x17\x88\x9d\xfa\xb0\xa6\x14\xc5\x01\x32\x70\x74\x6c\x7e\xd7\xa7\xa4\x8f\xb6\x5a\x77\x61\x72\x2b\x28\x7b\x00\xea\x28\x48\xa0\x0c\x52\xbe\xde\xd0\x02\x5f\x97\x74\x8d\xee\x72\xc3\xbf\x7f\x53\xe1\x3e\x9a\xdd\xfb\x17\x67\x70\xe9\xd6\xb3\xa3\x8e\x95\x1d\x60\xeb\xdf\xd0\x80\x30\x82\xf7\x21\xa9\xc2\xb3\xad\x28\xf1\xcc\xbb\xaf\xfd\x27\x96\x8f\x3c\x6b\xdd\x2e\xd6\x4d\x40\xd9\x8e\xaf\x50\xc2\xda\xb4\xf4\x8a\x5e\x03\x9d\x42\xc4\x54\xd8\xfa\xbe\xf5\x4b\x32\x72\xc3\x0c\x7f\xd0\x15\x73\x43\xe1\x16\xe5\xb6\x28\x43\x6d\x77\x94\x3d\x6c\x0b\xa2\xfd\x9d\x31\xb0\x14\x5e\xbd\x2d\x28\xb2\x32\xee\xc2\x13\xb5\x4e\x6f\x04\xfe\x67\x8b\xb2\xbc\xdf\x10\x41\xd6\x72\x0e\x67\x52\x9b\x5f\x64\xb4\x66\x0f\x02\xcc\x22\x75\xe4\x7f\xe5\x6c\xce\xb2\xd3\xdc\x7f\x99\xac\xde\x75\x59\x1f\xe3\xdd\x89\x69\xbc\x5d\xb5\xa9\x4b\x01\x43\xa3\x43\xd0\x9d\xb8\x79\x87\x4c\x24\x5d\xdd\x5b\x5e\x2d\x93\x9d\x43\x89\x34\x11\x9b\x34\xb9\xd1\xaa\xbf\x25\xfb\x28\x2d\x0f\x0b\xb0\x33\x16\xf0\x9d\x59\x68\xe4\x30\x82\xd1\x42\xf3\xd8\xf1\x13\x3e\xd2\xed\xf4\xc7\xce\x33\xc4\x93\x77\x05\xae\xe5\x42\x7b\x8e\x90\x7b\x76\x3b\xd6\x8c\xee\x8c\x73\x47\x86\xfe\xa4\x97\xd2\xa4\x52\x24\x7a\x00\xcf\xaf\x38\x2f\xde\x16\x44\xca\xb9\xd6\x4e\x58\x97\x4b\xce\x8b\x27\xaa\xce\x2a\xfc\x8a\x1f\xbe\x9a\x06\xdd\x89\xd5\x80\x7c\x50\x55\x1d\xdd\x7a\x00\xbb\x68\x46\x0a\x89\x4d\x5f\x28\x52\x9c\x5e\x21\x60\x0a\x3e\x2a\x57\x44\x62\x9d\x20\x0e\x19\xc7\xbd\x3e\x35\xbd\xb8\x1c\x21\x90\x44\xaf\xd4\xd2\x9f\x84\xcb\x32\xed\xb2\x7c\x75\xca\x9e\x3c\xaf\xf4\x92\xa6\xe5\x9f\x4f\x2a\x8b\xe0\x2b\xf8\xd7\xea\x77\xd0\x3c\x5f\x8d\xec\xdb\xf6\x96\x6d\x05\xf0\x21\xaf\xec\x9d\xf4\xd6\xa7\x86\xfa\x15\xd2\x4d\x13\x24\x9b\xe8\xe2\x1f\xce\x6f\x04\x4a\x1d\xec\xeb\x84\xc6\xc5\x95\x07\x64\x28\x68\xaa\xdf\xb4\x24\xca\xd1\x37\x19\x7c\xed\xfc\x6b\xcf\x9f\x0f\x78\x7e\x3b\xcd\xb2\xa7\xc2\xf7\x81\xa8\x04\xe3\x42\x7d\xc3\x43\x30\xd9\x77\xc9\xdc\x72\x9b\xc7\x7a\x58\x37\x8f\x53\x6d\xea\xb7\x21\x8c\xa6\x91\x4e\xb9\x54\x93\xa6\x0f\x72\x4f\xcb\xf4\xd1\x5c\xfc\x3f\x24\x91\xe2\xde\xdc\x1b\x39\x60\x52\x1d\xfa\xf4\xc9\xa1\xcb\x6e\x24\xbc\x36\xdc\x41\x4a\x24\x9a\xd3\xed\x34\xa9\x33\x3b\x0b\x5b\xea\xa1\xe3\x30\x77\xf3\x32\xcc\xc9\xb6\x28\x2f\x2c\x4f\x3b\xc7\x51\xfd\xa2\xaa\xc1\xbc\xce\x5b\xac\xe6\xbd\x8c\xa4\xfe\x6f\x13\x10\xfd\xbf\x9b\x3b\xd5\x94\x66\xfe\x11\x7e\x0b\xba\xce\x79\x3e\x11\x5f\x20\xc3\xd7\x12\x05\x25\x05\xfd\x2f\x29\x29\x67\x75\x8e\xd4\x14\x09\x66\x1b\x85\xc8\x29\x55\xb4\x0f\xf3\xa3\x4e\xa5\xd8\xf2\xa7\x34\xab\xf5\xba\xdc\xe6\xc9\x47\xc4\xd5\xcd\xb5\xcd\xcd\x87\x72\xf2\xe1\x98\x65\x15\x4a\x33\xef\xf5\xc6\x29\x55\xda\xfd\xa8\x35\xd9\x52\xa4\x39\xc1\xbf\xa8\x97\x74\xd8\xa9\xd4\xa9\xab\xdf\xa4\x1e\xb5\x73\x55\x47\xea\xe5\x71\x9d\x0a\x43\xbf\xa3\xb0\x35\x96\xb2\xda\xf1\xb7\x13\x5a\xce\xd1\xc2\x23\x4f\x4e\x54\x17\x55\x17\xbb\xef\x76\x41\xaf\xa9\xfe\x3a\xf3\x0c\xc2\xfd\x64\x36\x94\x21\xfc\x8c\xfb\xcf\x0c\x0f\x1b\x4c\x4b\xcc\x6e\xae\x23\x9a\xc5\xee\x16\xc3\x98\x65\xdb\x82\x96\xfc\x80\x12\xca\xc7\xee\x66\xd8\x08\xbe\xa3\x5a\x03\xc4\x3e\xe2\x4b\xfc\x3d\xd3\x84\xe0\xe6\x21\x22\xd4\xef\xfa\xbc\x48\x72\x62\x67\x0c\x5c\x6e\x79\x1b\xa0\x59\xc5\x15\x34\x4b\xe3\x03\xfc\xae\xfa\x92\xab\xb7\x17\x3a\x17\x5b\xcb\x27\xbe\xd7\x68\x01\xed\x09\xdc\xb9\xcc\xd2\xb6\x38\xee\x2f\x27\xec\xb1\x93\x6c\x28\x45\x65\xa6\x0a\x0d\xbf\xa9\x58\x26\x7d\xf0\x2f\x61\x17\x28\x36\x47\x1e\x2e\x3e\x5d\x01\xf6\x79\xc9\x64\x05\xfc\xf6\x5b\x98\xdb\xe7\x3e\x44\xf1\x1e\xa1\xf6\xdf\xcc\x58\x22\x81\x05\x93\x86\xef\x78\xd6\x8d\xd6\xf6\xf3\x7f\x01\x00\x00\xff\xff\x7f\x67\xf9\xd9\x85\x2c\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 11397, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateRegistryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x31\x4b\x04\x31\x14\x84\xfb\xfc\x8a\x21\x6c\xa1\xa0\x7b\xa2\xdd\x81\x9d\x85\x82\x82\x1c\xd7\x89\xc5\xe3\x76\x36\x86\xbb\xe4\x42\x92\xc5\x5b\x42\xfe\xbb\xc4\x5d\xac\x2c\xdf\x0c\xf3\xf1\xbe\x52\x30\x70\xb4\x9e\xd0\x91\xc6\xa6\x1c\x67\x8d\x5a\x55\x29\xe8\xc2\xd1\x60\xfb\x88\xae\x7f\x97\xc3\x51\x0c\xd7\x3c\xd3\x85\x93\x64\x42\x7f\x51\x06\x46\x8d\xae\x35\x6a\xb3\xc1\x7e\x0e\x4c\x88\xcc\x53\xf4\x09\x4e\x42\xb0\xde\x60\x8c\x67\x87\x3c\x07\xc2\x0e\x09\xf9\x8c\xfd\xeb\x72\x7a\x71\x4c\xbd\x1a\x27\x7f\x58\xa6\x6f\x12\xae\xae\xdb\xee\x63\xb2\x3e\x3f\xdc\x7f\xa6\x1c\x1b\xa1\x28\xac\xd4\x7f\xcb\x52\x6e\x11\xc5\x1b\xa2\xe3\x89\x6e\x79\x7a\xb7\xea\xb4\xdf\x00\xe0\xee\xd2\x9c\x5a\xdf\x3f\xf3\xf2\xf2\x84\x5a\xb7\xd0\x7f\xd9\x4e\xbe\x51\xab\xbe\xf9\x85\xd1\x0f\xcb\xac\xaa\xaa\x9a\xf3\x1a\xfc\x04\x00\x00\xff\xff\x97\x1b\x2c\x20\x2e\x01\x00\x00")

func _templateRegistryTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateRegistryTmpl,
		"_template/registry.tmpl",
	)
}

func _templateRegistryTmpl() (*asset, error) {
	bytes, err := _templateRegistryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/registry.tmpl", size: 302, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateUtilsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xcf\x4a\xc4\x30\x10\xc6\xef\x7d\x8a\x8f\x52\x3c\x48\xed\x03\x2c\xec\x49\xf1\x28\x82\x7a\x5a\x96\x12\xdb\xa9\x04\xd3\x34\xa6\x59\xdc\x65\xc8\xbb\x4b\xba\xe9\x6e\xb6\xd4\x5c\x32\x99\xf9\xe6\xcf\x6f\xc2\x8c\x96\x3a\xa9\x09\xb9\xa5\x9f\x03\x8d\xae\x36\xc2\x8a\x7e\xcc\xe1\x7d\xe3\x8e\x68\x06\xed\xe8\xe8\xaa\xc7\xf3\xcd\xfc\x00\xd9\xa1\xfa\xd0\x46\x34\xdf\xaf\x41\x4a\x8e\xec\x08\xef\xe7\xd0\xb3\x24\xd5\x06\x47\x99\x05\x97\x15\xfa\x8b\x50\x74\xd8\x6c\x93\x18\x33\xd4\xf0\x4b\x16\x45\x57\xbd\x88\x9e\xe0\x3d\x98\xe1\xa8\x37\x4a\x38\x42\x6e\xac\xd4\xae\x76\x27\x43\x79\x48\xf6\xbe\x0c\xc5\x48\xb7\xde\x67\xd1\xc2\x6c\xaa\x31\xe4\x97\x88\x04\xb8\x67\xc6\x5c\x75\xa9\x3d\x9b\x59\xc2\x1d\x40\xea\x98\x9a\x27\x1c\x2b\x88\x19\x80\x4b\x97\xcd\x16\x77\xcc\x28\x2e\x9d\xa6\x68\x38\x4b\xec\xe2\xca\x9d\x68\x12\xf4\x0d\x56\xf6\x51\xde\xd4\x8b\x83\x87\x67\x4a\xf2\x1f\x53\xb2\xbd\x48\x2e\x3b\x14\xd5\xd3\x70\xf8\x54\xf4\xa6\x64\x13\x3a\xec\xf6\xbb\xfd\x44\xf0\x7e\x32\x74\xb3\xcd\x49\x7c\x95\xad\x8b\xa6\x5f\x5c\xf8\x97\x43\xfd\x05\x00\x00\xff\xff\xe6\x20\xb4\x6e\x60\x02\x00\x00")

func _templateUtilsTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateUtilsTmpl,
		"_template/utils.tmpl",
	)
}

func _templateUtilsTmpl() (*asset, error) {
	bytes, err := _templateUtilsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/utils.tmpl", size: 608, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/client.tmpl":   _templateClientTmpl,
	"_template/handlers.tmpl": _templateHandlersTmpl,
	"_template/header.tmpl":   _templateHeaderTmpl,
	"_template/main.tmpl":     _templateMainTmpl,
	"_template/registry.tmpl": _templateRegistryTmpl,
	"_template/utils.tmpl":    _templateUtilsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"client.tmpl":   &bintree{_templateClientTmpl, map[string]*bintree{}},
		"handlers.tmpl": &bintree{_templateHandlersTmpl, map[string]*bintree{}},
		"header.tmpl":   &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":     &bintree{_templateMainTmpl, map[string]*bintree{}},
		"registry.tmpl": &bintree{_templateRegistryTmpl, map[string]*bintree{}},
		"utils.tmpl":    &bintree{_templateUtilsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
