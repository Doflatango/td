// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/client.tmpl
// _template/handlers.tmpl
// _template/header.tmpl
// _template/main.tmpl
// _template/registry.tmpl
// _template/string.tmpl
// _template/utils.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfe\x8a\xc1\x84\x92\x94\xe0\xdc\x03\x3d\xa5\x3d\x14\xda\x12\x4a\x7e\x40\x95\xd7\x89\x88\xbd\x12\xeb\x75\x92\x22\xf2\xef\x45\xb2\xd2\x93\x96\xa7\xd1\x68\x66\x63\x44\x4b\x9d\x63\x42\x6d\x7b\x47\xac\x35\xee\xf7\x2a\x46\x2c\xc2\xf9\x88\xed\x0b\x16\xcd\xde\xd8\xb3\x39\x52\xe1\x4a\x43\xe8\x8d\x12\xea\x13\x99\x96\xa4\xc6\x22\xdd\x54\x9b\x0d\xde\xf9\xe2\xcf\x24\xb0\x86\xe1\xf2\x0c\x31\x57\x7c\x1e\xf6\xe2\xd5\x43\x82\x85\x35\x7d\x3f\x36\x95\xfe\x06\xfa\x97\x3b\x56\x92\xce\x58\x42\xac\x50\xe8\xb7\xb9\x2e\xad\xde\x60\x3d\x2b\xdd\xb4\xd9\xcd\xe7\x1a\x8e\xc3\xa4\xf8\x71\xdc\xbc\xb1\xf5\x2d\xc9\x1a\x7e\xd2\x07\x7b\xa5\xcc\x56\x20\x11\x2f\xd5\x1c\x6b\x97\x7b\xc1\x0d\xa1\xa7\x21\x4d\x03\xe9\xc9\xb7\x23\x3a\x2f\x39\x90\xe3\x23\xba\x89\xad\x3a\xcf\x23\x3a\xf1\x03\x0e\x1f\x18\xed\x89\x06\x83\x8b\x33\x8f\xa4\x25\x77\xf1\x1b\x55\x26\xab\x39\x73\x6a\x56\x34\xe9\xcf\xe4\x85\x2f\xba\xce\xc2\xa5\x2b\x3d\x8b\x62\x85\xe7\xe2\x90\x9f\x92\x4e\xc2\x78\x9a\x51\x22\xd9\x6e\x5b\x16\x28\xeb\x0a\xb8\x27\xd3\x18\x41\xdc\xa6\x55\xff\x05\x00\x00\xff\xff\x88\xcc\x3e\xfd\xb3\x01\x00\x00")

func _templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateClientTmpl,
		"_template/client.tmpl",
	)
}

func _templateClientTmpl() (*asset, error) {
	bytes, err := _templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/client.tmpl", size: 435, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHandlersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x3b\x6f\xe3\x38\x10\xae\xc5\x5f\x31\x31\x5c\x48\x81\x4f\xee\x1d\xa8\x4a\x70\x88\x9b\x5c\x80\xbb\x54\x46\x70\xe0\xca\xa3\x98\xb0\x4c\x69\x49\x6a\xe3\xac\xc0\xff\xbe\x18\x92\x92\xf5\x88\x37\xc5\xba\xb1\x38\x8f\x6f\x5e\x1f\x87\x6d\x0b\x7b\x2c\x84\x44\x58\x1c\xb8\xdc\x97\xa8\xf4\x02\xac\x65\x6d\x0b\xcb\xfa\xf8\x06\x9b\x0c\x96\xe9\x33\xcf\x8f\xfc\x0d\x83\xdc\xe0\xa9\x2e\xb9\x21\x0f\xe4\x7b\x54\x0b\x58\x92\x86\x99\x8f\x1a\x21\x80\x40\x06\x45\x23\xf3\xf8\xa5\xde\x73\x83\xf7\x95\x34\x78\x36\x2b\x08\xc7\x92\x6b\x9d\x00\x2a\x55\xa9\xe0\xe6\x15\x0f\x42\xd7\xdc\xe4\x07\x54\xa0\x8d\x6a\x72\x03\x2d\x03\x80\x0e\x54\xc3\x89\xd7\x3b\x21\xcd\x6b\x10\x30\xcb\x18\x85\x81\x27\x7c\x9f\x22\xc4\xc9\x1c\xd4\xa3\x29\x34\x8d\x92\x33\xad\x57\x0e\xc3\x6d\xa6\xf1\x5a\xbb\x72\x46\x96\xd9\x51\xde\xa1\xbe\x71\xd2\xb9\x17\xa6\x41\xc9\x9c\xf0\x45\x0f\xcb\xb8\xa5\xa3\x93\xdf\x1f\xb8\x19\xc8\xe9\xe8\xe4\x42\x0a\x03\xdf\xaa\xaa\xec\x4b\x8d\x1b\xb8\x1d\x45\x4d\xa0\xe4\x3f\x3f\xb6\x52\x98\xbf\x55\x75\xf2\x2a\x1d\x37\xfe\xbf\xb3\xd5\x49\xc8\x4a\x14\xd0\xa4\x0e\xf5\x52\xaf\x6f\x48\xa8\xcc\xfd\x05\x93\x0c\x8c\x6a\x30\x48\x7c\xea\x19\x9c\xf8\x11\xe3\x51\x05\x2b\x28\x51\x76\x11\xbd\x5d\x92\xb0\xa8\xa8\x14\xfc\xbf\x82\x9c\xa6\x4d\x3c\x52\x5c\xbe\x21\x8c\xcc\xa0\x65\x51\xd4\x38\x88\xea\x48\x36\xce\x38\x8d\x1d\x6c\xc2\xa2\x48\x14\x70\x53\x1d\x9d\x59\x44\x0d\x15\xb2\x41\x16\x45\x96\xdc\x3c\xc4\x8e\xdc\xd3\xed\xc3\x2b\x64\x40\x9f\x2c\xea\x6b\xf0\x4d\x9d\x66\x4c\xd2\x71\xc6\xce\xee\xeb\x8c\x3d\x1c\xa5\x92\x3b\x88\x71\xc6\xa4\xfd\x32\x63\x07\xb1\x23\xf7\x90\x31\x7d\x52\xc6\x83\xe9\x4e\x79\x99\xc0\xa3\x63\x5f\x9c\x9b\xf3\x94\x54\x2b\x98\xcf\xd9\x5d\xab\x30\xdd\x86\x7c\x36\xd9\x98\xa6\x97\xc1\x07\xc1\xc6\x9f\x72\x73\xee\xe8\xdd\xb7\xc2\xc3\x7f\x32\xbd\x10\xf6\x82\xa5\xdf\x85\xc9\x0f\xc1\x20\x8d\xe9\x76\x10\xe7\xda\xf6\xaf\xe0\xba\xd4\x6e\x97\xfc\xeb\xee\x88\x06\x6b\xdb\x96\xd8\x88\xdf\x61\xa9\xd3\xad\x34\xa8\x0a\x9e\x23\x2c\x06\x3b\xc2\x6d\xa2\x2e\x40\xce\x35\xc2\x2d\xed\x25\x9d\x3e\xf1\x13\x6d\xa3\x4d\xaf\x0c\xd4\x0e\xf7\xb4\x9b\x4d\x93\x76\x57\x79\x37\xf2\xfb\xef\xa3\xc6\xed\xc3\xeb\x1d\xb8\x41\xc1\xe4\x47\x4d\x4b\x7f\x73\xa7\x92\x99\x07\x95\xa1\x14\x45\x0c\xf1\x62\xc2\xe8\xba\x97\xdc\x39\xed\x4d\x06\x52\x94\x9f\xc4\x1b\xec\x24\x54\x6a\xa6\xb6\x6c\x7c\xa2\x8e\xa2\xdc\xfb\x06\xfa\x0f\x76\xd1\x12\xd1\x02\x98\x14\x6e\x6b\xfc\xf9\x04\xa8\x77\xf8\x03\xa5\x71\xed\xdb\xd0\x56\x10\xa7\x67\x85\x85\x38\xf7\x4d\x0d\x4e\x0b\x6b\xd9\x7a\x0d\x63\x0f\x6b\x1f\xc3\xab\x20\x34\xf0\x99\x12\xdc\xa1\x6b\x5d\xea\x17\xeb\x35\x04\xf7\xaa\x10\xab\x27\x2f\x4b\x20\xea\x98\x1f\xfd\x1b\xb3\x5e\xc3\x3f\x72\x16\x57\x23\xdd\xe7\xa9\xb4\xcf\xe3\xfa\x85\x9c\x63\xc5\xdd\xbb\x77\x25\xef\x6e\xfd\x7e\xc1\xc8\xee\xd9\xbc\x5e\xe0\xfc\x05\x9d\x2d\xf2\x9e\x84\x03\x0e\xa6\xf1\xa4\x33\x49\xff\x90\x7d\xc6\x27\x76\xf9\xfc\x15\x00\x00\xff\xff\x5e\x75\x8c\xdd\x21\x08\x00\x00")

func _templateHandlersTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHandlersTmpl,
		"_template/handlers.tmpl",
	)
}

func _templateHandlersTmpl() (*asset, error) {
	bytes, err := _templateHandlersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/handlers.tmpl", size: 2081, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xc1\x6a\xc3\x30\x0c\x86\xef\x7a\x0a\x61\x76\x48\x61\x73\x9e\x60\x97\xac\x3b\xec\xd2\x0e\xd6\xfb\x70\x62\xd9\x15\x69\xe4\xe0\x28\x63\xc3\xe4\xdd\x47\xda\xd0\x5e\x04\xd2\x0f\x9f\xbe\xbf\x14\xf4\x14\x58\x08\xcd\x99\x9c\xa7\x6c\x70\x59\xa0\xae\xf1\x2d\x79\xc2\x48\x42\xd9\x29\x79\x6c\xff\x30\x26\xf5\x91\xe4\x19\xf7\x47\x3c\x1c\x4f\xf8\xbe\xff\x38\x59\x80\xd1\x75\xbd\x8b\x84\xa5\xe0\x93\xfd\xdc\x96\x65\x01\xe0\x61\x4c\x59\xb1\x02\xd3\x25\x51\xfa\x55\x03\x26\x0c\xeb\x9c\x34\xb3\xc4\xc9\x00\x98\xc8\x7a\x9e\x5b\xdb\xa5\xa1\x5e\xf9\xb5\xfa\xba\x65\x31\xb0\x83\x55\xe2\x90\x5e\xd2\x78\x13\x64\xe5\x24\x18\x52\xc6\x9e\x68\x64\x89\x78\xe3\x4f\x16\x7e\x5c\xc6\x6f\x7c\xc5\x96\xc5\x36\x73\x08\x94\xcb\x72\x3f\x6e\xbf\x6d\xe3\xba\x3e\xe6\x34\x8b\xaf\x76\xf7\x30\x0c\x6a\xbf\xae\x32\x94\x2b\xe1\xcb\x23\xd9\x14\x6d\x33\xf3\xc5\x5f\x81\x50\x0a\x92\xf8\xb5\xda\x7f\x00\x00\x00\xff\xff\xaa\xa0\x2f\x0c\x35\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 309, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\xdd\x73\xdb\x36\x12\x7f\xd7\x5f\xb1\xf5\xa4\x39\x32\x55\xe8\x3e\x3b\xf5\xc3\x39\x4e\x2f\x9e\xc9\xf5\x32\x76\x72\x2f\x9d\x8e\x07\x22\x97\x32\x46\x14\xa0\x03\xa8\x8f\x9c\xca\xff\xfd\x06\x5f\x24\x48\x82\x22\xed\x71\x73\x4d\xf5\x44\xe1\x63\xb1\xfb\xdb\xc5\x7e\x00\x38\x1e\x21\xc3\x9c\x32\x84\xb3\x35\xa1\xec\x0c\xaa\x6a\x76\x3c\xc2\x8b\xcd\x6a\x09\x17\x97\xf0\x22\xf9\x48\xd2\x15\x59\xa2\x6d\x2f\x71\xbd\x29\x48\x89\x70\xf6\x80\x24\x43\x71\x06\x2f\x54\x8f\xea\x12\x84\x2d\x11\x5e\x48\x3d\xeb\xae\x14\xdb\xb4\x94\xaa\xef\xfc\x1c\x14\x41\x99\xbc\xe5\xeb\x35\xb2\xd2\x50\x7a\x0d\x34\x57\x8d\xd7\x3c\x95\xae\xc5\x52\xc8\x14\x85\xa6\xc7\xcc\x2f\x05\x5d\xc3\x8b\xcc\x0d\x45\x16\xfa\x34\x24\x3f\x50\xb6\xd2\x33\x01\x00\x54\x73\xc3\xf4\x46\x50\x56\xde\x17\x6a\xc0\x59\x6b\x68\x90\xd0\xe7\xdb\x0f\x86\x01\xc5\xc3\x1d\xa2\x95\xc3\x34\x43\xce\x05\x08\xcc\x51\x20\x4b\x31\xf1\x29\x94\x5f\x36\x6e\xec\x2f\x64\xad\xa0\x03\xa9\xf1\x80\xa3\x2f\x67\x0e\x46\xd0\x9f\x29\x16\x99\x0f\x55\x1e\x82\x2a\x37\xcc\x4e\x10\x2b\x3f\x25\x16\x61\x19\x44\x7a\x05\x96\xd1\x92\x72\x46\x8a\x18\x22\xc6\x4b\x68\x37\x5e\x71\x5e\xc4\x8d\xf4\x9f\x25\xc2\x1d\x96\x86\x3b\x27\x94\xa2\xf5\x8f\x6e\xe3\x03\x16\x1b\x14\xb2\x05\x88\xe1\xd8\x1f\xd5\x32\x25\xc3\xbe\x42\x4d\x71\xdf\xe1\x5b\x1b\x97\x66\x5d\x33\x29\x93\x7f\x63\x5a\x72\xd1\xb2\x2c\x4b\xf5\xd3\x97\x0d\xde\x5c\x03\x95\xf0\xe9\x03\x68\x25\xd0\x0c\x78\xde\x1e\x94\xcc\x52\xce\x64\x19\x9c\x79\x09\x3f\x1e\x4c\xfb\x7b\x3c\xdc\x5c\x43\x55\xbd\xf1\x59\x99\x1d\x8f\x0d\xd3\xb2\x14\x94\x2d\xef\x33\x14\x74\xa7\xf8\xd6\x78\x2b\x96\xde\xb1\x94\x67\x08\x74\xbd\x29\x50\x29\x51\xc2\x82\xb2\xc4\xb4\x8a\x64\x96\x6f\x59\x0a\x91\x59\xe5\x16\x53\xa4\x3b\x54\xc2\xc0\xab\x16\x43\xb1\x25\x63\x07\x5e\x6d\xf3\xbf\x8b\xa5\x1e\xa6\x88\x5d\x6d\xf3\x1c\x45\x0c\x28\x04\x17\x70\xd4\xf8\x52\x27\xa7\x4f\xf4\xf2\x12\x18\x2d\xec\x08\xf5\x13\x58\x6e\x05\x83\x7c\x5d\x26\xef\xd4\xe4\x3c\x3a\x4b\x09\xfb\x5b\x09\x68\xb8\xb6\x24\xc8\x5e\x21\xa2\x75\x2c\x15\x85\xb3\x58\x53\xa8\x06\x55\xd1\x61\x33\xf9\xb8\x2d\x6f\xae\xa3\x00\xc6\x71\xd7\x26\x07\x37\x83\x33\x73\xb7\x5c\xcf\x3c\x3b\x83\xda\x03\x5c\x67\x08\x96\xc4\x6d\xb2\x7a\xb4\x5e\x55\xf5\xbc\x27\x32\xea\xf5\xde\xb0\x0c\x0f\x5a\x29\xc7\x7a\xc1\x96\x65\xbb\xf5\x1b\x3c\x9c\xc5\x77\x30\x31\x03\xde\x6b\xd7\x19\x15\xc8\xfa\x76\x90\xb4\xf6\x49\x6c\x70\x57\xae\xe6\x78\xb4\x8b\x58\x4b\x82\xaa\xa2\x99\xb2\x56\x2c\xa4\x1a\x7a\xaf\x3e\x35\x53\x73\x8f\xa3\x6b\xbe\x5d\x14\x58\xf3\x25\xf8\xfe\x78\x54\x13\xaa\x6a\x77\x3c\x22\xcb\xaa\x4a\xe1\x6e\x74\x30\xc2\x8b\x27\x7c\x90\x76\x6d\x63\x53\xe4\x16\x7c\x6f\x65\x73\xf2\xdd\xcf\x61\xd7\xf0\x22\xf8\x7e\x0c\xec\x06\x07\x6f\x65\xd7\x79\xc3\x4a\x14\x39\x49\xd1\xef\xb6\xf6\xb0\xeb\x6f\x8b\x81\xad\xb1\x65\x64\x51\x20\x94\x7c\x68\x7b\x5c\x40\xae\x2d\xc7\x00\x75\x4b\xf6\x0e\x2b\x34\x7b\x1f\xf6\xb4\x7c\x00\xaa\xed\xe7\xfb\x4c\x79\x26\xb5\x99\xe6\x40\xb3\x43\xdc\x5a\xbc\x2d\x83\x56\xcc\xcc\x63\x19\x85\x50\xd8\xec\x92\xb0\x57\x88\xdf\xe8\x11\xdf\xfd\x7f\xc4\xba\x80\xef\xf7\x46\xa6\xb9\x62\xa3\x11\xac\xd1\x98\xb5\xd1\x53\x26\x62\xd6\xfa\x59\x79\xc7\xaa\x8a\x76\xf1\x69\xe5\x0f\xd9\x5e\x15\x9a\x16\xe6\x63\xd0\x92\x4e\x58\xd1\x09\x6f\xe2\x20\x9a\xe2\x72\x9f\xae\x00\xda\x76\xc7\x7d\x83\x69\x8c\x65\x84\xd1\x47\x9a\xd2\x73\x4a\x61\x0d\xa6\xb6\x95\x21\xfd\x8c\xd8\xc8\x98\xef\x1c\xb2\xa0\xa0\x41\x05\x42\xc7\xe0\x8c\x7e\xf2\xe9\x21\xc4\x68\xe1\x72\x96\xc1\xd0\x56\xfb\xf2\xce\xaa\x3a\xcd\xec\xe4\x53\x12\x4b\x09\x3b\x52\x6c\xd1\xa5\x32\x4d\x5f\xea\x4d\xd7\x50\x4f\x4f\x2f\xba\xeb\x44\x66\x89\x9a\x33\xb3\xc1\xee\x0a\xaa\x8d\xff\xd7\xdf\x7e\xfd\xcd\x85\x1a\xd3\xdf\xf4\xd4\x71\xc7\x32\x67\x95\x1f\xdb\x64\xb7\x27\xa8\x1f\xba\x95\x37\x36\xeb\x76\x5c\xc3\xb4\x68\x7d\x87\xe5\x89\x68\x3d\x4a\xb2\xde\xb2\x50\x8a\x2d\x1a\x9d\x1b\x19\x9f\xc6\xce\x67\x26\x9f\x8b\xa1\x9c\x14\x12\xbd\x9c\xab\xbf\x31\x9e\x0d\xa1\x71\x66\xb4\x8a\x4e\xe4\xe4\x41\xf5\x9e\x9f\xf7\x6b\x03\xb3\x45\xa6\x9b\xb3\xaa\x30\x14\xa1\x05\xe7\x05\x12\x06\xfb\x07\x9a\x3e\x28\x1f\xa8\xf4\xa5\x96\x37\xa3\xf6\x44\xaa\x6d\x32\xdd\xf8\xbb\x8c\x45\x31\x34\xf6\x7f\xa2\x2e\x99\x03\x5f\x69\x66\xe2\x26\xe9\xfe\xee\xd9\xd3\x4b\xcf\x99\x68\xa6\xe6\x2d\x6b\xf0\x7a\x47\x34\x37\x37\x66\x6d\x95\xd5\xd4\x30\x21\x07\xa6\x50\xbe\xc6\x50\xe1\x62\x5a\x1f\x51\xb8\x98\x09\x5f\xad\x70\xc9\x30\x5c\xb8\x94\x7c\x52\xe1\x12\x8a\x99\x4d\xcc\x79\xcb\x99\xdc\xae\x71\xa0\x94\x79\x4a\xa8\x1c\x60\xb7\x1f\x12\x9f\x50\x26\x0d\xfb\xd9\x69\xfb\xfc\xf9\x2c\xf9\x44\xe2\x17\xe0\xb4\x9f\xa2\xff\x21\x7b\xca\xf1\xd3\x59\xee\xd8\x4d\xbd\xc3\xfc\xf6\x73\x4d\xf5\x33\xa7\x60\x1f\x90\xcd\x87\x4c\xa8\x55\xfa\xc4\x5d\x41\x07\xd3\xf6\xa7\x1b\xd2\xb4\x9c\xcb\xfd\xda\xe2\xa8\x42\x8c\x66\x07\x25\xc7\x8f\x6f\xf4\xd7\x4f\x8d\x88\xba\xe1\x87\x1f\xe0\x38\x6b\xe3\x37\x9a\x94\xd7\xf2\x32\xf6\x64\xac\xa6\xe0\xf5\xb5\x30\xeb\xe3\xa6\x7e\x3b\x22\x74\xd9\xaa\x33\xa2\x26\x0f\xea\x8d\xd3\x18\x2b\x24\x8c\x8d\x5a\xa8\x9b\x86\x9f\x6a\x9c\xde\xd4\x5f\x1a\xf5\x2e\xe8\x1d\x53\x85\x69\x05\xb0\x61\x55\x87\x15\xab\x05\xe3\xb0\x0d\xd3\xf5\xb4\x76\x92\xdd\x94\x07\xdf\x90\x52\x6a\xff\x33\x78\x5e\xe0\xab\xae\x8e\xff\x27\x54\xe7\x55\xe2\x6a\x74\x12\x0e\x75\xa7\xaa\xf1\x3f\x07\x22\xa3\x26\xd1\xdd\x98\xed\xc2\xeb\x9b\x33\x82\xfe\x46\x81\x47\x39\x2e\xcd\x3e\xdf\xc3\x25\x90\xcd\x06\x59\x16\x09\xbe\x9f\x1b\xc8\xa6\x78\x86\xf1\xc8\x6b\xc9\x8e\x26\x74\x82\xef\xfb\x0b\x86\xe2\xec\xf3\x2f\x3d\x20\xed\x00\xbe\x55\x2f\xea\x3e\xf2\x9c\xee\xb9\x5c\xd4\x9f\x2f\xc6\x4e\xad\xb7\x7a\x00\x9e\x74\x63\xd3\xcf\x7d\x9e\xe6\xb4\xbe\x2e\x4e\x43\x26\xfd\x74\x2f\xf5\x17\xb1\x83\x7e\x76\x1a\x3e\xe7\x9c\x74\x42\x65\xaf\x39\x5b\x7b\xf0\xfc\x1c\xf4\xfd\x98\xbe\xae\xf4\x4a\xc1\xba\x91\x8b\xe6\x4a\xcd\x9f\x39\x5c\x20\x76\xea\xc3\x9a\x52\x14\x07\xc8\xc0\xd1\xb1\xf9\xb2\x4f\x49\x9f\x9c\x79\x15\xeb\x3b\x26\xb7\x82\xb2\x25\x50\x47\x41\x02\x65\x90\xf2\xf5\x86\x16\xf8\xba\xa4\x6b\x74\x77\x27\xfe\x05\xa0\x0a\xf7\xd1\xec\xde\xbf\x97\x83\x4b\xb7\x9e\x1d\x75\xac\xec\x00\x5b\xff\x86\x06\x84\x11\xbc\x0f\x49\x15\x9e\x6d\x45\x89\x67\xde\xa5\xf3\x3f\xb1\x7c\xe0\x59\xeb\x7a\xb3\x6e\x02\xca\x76\x7c\x85\x12\xd6\xa6\xa5\x57\xf4\x1a\xe8\x14\x22\xa6\xc2\xd6\x17\xbe\x5f\x92\x91\xfb\x76\xf8\xd6\x2f\xdc\x1b\x0a\xb7\x28\xb7\x45\x19\x6a\xbb\xa3\x6c\xb9\x2d\x88\x76\x9c\xc6\x52\x53\x78\xf5\xb6\xa0\xc8\xca\xb8\x8b\x73\xd4\x3a\x06\x12\xf8\x9f\x2d\xca\xf2\x7e\x43\x04\x59\x4b\x7b\xd5\x1b\x6b\x4b\x6f\x4e\x14\xcc\x22\x75\x0a\xf1\xca\x19\xaf\x65\xa7\xb9\xa7\x33\xe5\x81\xeb\xb2\xce\xca\xbb\xbb\xd3\x8a\x73\x65\xab\xae\x29\x0c\x8d\x0e\x41\x77\x74\xe7\x41\x4d\xd2\xd5\xbd\xe5\xd5\xdd\x47\xb7\x23\x43\x9a\x88\x4d\x9a\xdc\x68\x1b\xba\x25\xfb\x28\x2d\x0f\x73\xb0\x33\xe6\xf0\xd2\x2c\x34\x72\xaa\xc1\x68\xa1\x79\xec\x38\x1c\x1f\xe9\x76\x1e\x65\xe7\x19\xe2\xc9\xbb\x02\xd7\x72\xae\x5d\x50\xc8\xcf\xbb\xad\x6f\x46\x77\xc6\xb9\xb3\x47\x7f\xd2\x73\x69\x52\x29\x12\x3d\x80\xcf\xae\x38\x2f\xde\x16\x44\xca\x33\xad\x9d\xb0\x2e\x17\x9c\x17\x8f\x54\x9d\x55\xf8\x15\x3f\x7c\x35\x0d\xba\xa3\xaf\x01\xf9\xa0\xaa\x3a\xba\xf5\x00\x76\x61\x91\x14\x12\x9b\xbe\x50\xc8\x39\xbd\x42\xc0\x14\x7c\x54\xae\x88\xc4\x3a\xd3\x1c\x32\x8e\x7b\x7d\xfc\x7a\x71\x39\x42\x20\x89\x5e\xa9\xa5\x3f\x09\x97\xae\xda\x65\xf9\xea\x94\x3d\x79\xee\xed\x39\x4d\xcb\x3f\xe8\x54\x16\xc1\x57\xf0\xaf\xd5\x1f\xa0\x79\xbe\x1a\xd9\xb7\xed\x2d\xdb\xca\x04\x86\xdc\xbb\x77\x64\x5c\x1f\x3f\xea\xc7\x5d\x37\x4d\xb4\xf5\x1f\x2d\x35\xa7\xfc\x1b\x81\x52\x67\x0d\x75\x66\xe4\x02\xd4\x12\x19\x0a\x9a\xea\xd7\x39\x89\x72\xf4\x4d\x29\x50\x3b\xff\xda\xf3\xe7\x03\x9e\xdf\x4e\xb3\xec\xa9\x3c\xe0\x40\x54\xa6\x72\xa1\xbe\x61\x19\xac\x1a\x5c\x56\xb8\xd8\xe6\xb1\x1e\xd6\x4d\x08\x55\x9b\xfa\x6d\x08\xa3\x69\xa4\x73\x37\xd5\xa4\xe9\x83\xdc\xd3\x32\x7d\x30\x0f\x14\x96\x49\xa4\xb8\x37\xf7\x5b\x0e\x98\x54\xc7\x50\x7d\x04\xe9\xd2\x24\x09\xaf\x0d\x77\x90\x12\x89\xe6\x98\x3c\x4d\xea\x14\xd1\xc2\x96\x7a\xe8\x38\xcc\xdd\xbc\x0c\x73\xb2\x2d\xca\x0b\xcb\xd3\xce\x71\x54\xbf\x2f\x6b\x30\xaf\x13\x20\xab\x79\x2f\xb5\xa9\xff\xdb\x4c\x46\xff\xef\x26\x61\x35\x25\xdd\xab\xb2\xe0\x3b\xfd\xbe\x09\xc5\xcc\xbf\x1c\x68\x61\xd9\xb9\x29\x20\xe2\x0b\x64\xf8\x5a\xa2\xa0\xa4\xa0\xff\x25\x25\xe5\xac\xce\xbe\x9a\xf2\xc3\xec\xab\x10\x39\xa5\x9b\xf6\x35\x41\xd4\xa9\x41\x5b\x0e\x96\x66\xb5\xa2\x17\xdb\x3c\xf9\x88\xb8\xba\xb9\xb6\x59\xff\x50\xb6\x3f\x1c\xc4\xac\x86\x69\xe6\x3d\x3b\x39\xa5\x5b\x8b\x94\x56\x6d\x4b\xb3\xe6\x6e\xe0\xa2\x5e\xd2\x61\xa7\x92\xb2\xae\xc2\x93\x7a\xd4\xce\xd5\x33\xa9\x97\x21\x76\x6a\x17\xfd\x00\xc4\x56\x6f\xca\x8c\xc7\x1f\x7d\x68\x39\x47\x4b\x9a\x3c\x39\x51\xb7\x54\x5d\xec\x5e\xee\x82\x6e\x54\xfd\x75\xf6\x1a\x84\xfb\xd1\x6c\x28\x43\xf8\x05\xf7\x9f\x19\x1e\x36\x98\x96\x98\xdd\x5c\x47\x34\x8b\xdd\xfd\x88\x31\xcb\xb6\x05\x2d\xf8\x01\x25\x94\x0f\xdd\xdd\xb1\x11\x7c\x47\xb5\x06\x88\x7d\x9f\x98\xf8\x9b\xa8\x89\xc9\xcd\x3b\x4d\xa8\x9f\x2c\x7a\xa1\xa5\xb3\x55\x26\x5c\x9b\x79\x1b\xa0\x59\xc5\x95\x4a\x0b\xe3\x14\xfc\xae\xfa\xfa\xac\xb7\x17\x3a\x57\x66\x8b\x47\x3e\x34\x69\x01\xed\x09\xdc\xb9\x26\xd3\xb6\x38\xee\x40\x27\xec\xb1\x93\x6c\x28\x45\x65\xa6\xbe\x0d\x3f\x06\x59\x24\x7d\xf0\x2f\x61\x17\x28\x63\x47\x5e\x5c\x3e\x5e\x01\xf6\x5d\xcc\x64\x05\xfc\xfe\x7b\x98\xdb\xa7\xbe\xa0\xf1\xde\xd7\xf6\x1f\xfb\x58\x22\x81\x05\x93\x86\xef\x78\xd6\x0d\xdf\xf6\xf3\x7f\x01\x00\x00\xff\xff\x50\xe5\x8e\x5e\xed\x2d\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 11757, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateRegistryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6b\xe3\x30\x10\x85\xef\xfe\x15\x0f\x63\x96\x04\x76\xed\x65\xf7\x16\xc8\xa9\x3d\xb4\x90\xb4\x25\xe4\x56\x7a\x50\xec\xb1\xa3\x26\x96\x85\x24\xb7\x31\x42\xff\xbd\x4c\xed\x26\x31\xf5\xa1\x37\x7b\xde\xcc\xd3\x7c\x8f\xf1\x1e\x05\x95\x52\x11\x62\x43\x95\xb4\xce\x74\x31\x42\x88\xbc\x47\xa2\x0f\x15\x16\x4b\x24\xe9\x93\xc8\x0f\xa2\xa2\xa1\xee\xa8\xd6\x47\xe1\x08\xf1\x9e\x44\x41\x26\x46\xc2\x4a\xe4\xfd\x1f\xc8\x12\x49\xba\x12\x1d\x19\x2e\x65\x19\xfa\xef\x37\x32\x56\x36\x0a\x4d\x09\x9b\xef\xa9\x16\x69\x94\x37\xca\xba\x41\x5e\x82\x9f\xbb\xcc\xb1\x13\xa9\xe2\xd3\x35\xcb\xb0\xed\x34\x59\x18\x72\xad\x51\x16\xb5\xd0\x5a\xaa\x0a\xa5\x69\x6a\xb8\x4e\x13\x64\x61\xe1\x1a\x6c\x57\xfd\xaf\x12\x35\xd9\x34\x2a\x5b\x95\xf7\xa3\x6b\xa1\x67\x73\x9e\x7b\x6e\xa5\x72\xff\xff\xbd\x58\x67\xd8\xc1\x47\x18\x5c\x27\x45\xde\xc2\x08\x55\x11\x12\x3a\x52\xdd\x47\xb1\x19\x42\xe2\xdd\x00\xe0\xef\x89\x57\x67\x3d\xbd\xa3\xd3\xfd\x2d\x42\x58\x20\x3e\xd7\x36\xe2\x1d\x21\xc4\xbf\xaf\x91\x80\x10\x5d\x81\xdd\x70\x10\xa6\xcd\x5d\x63\xd6\x42\xf3\x26\x76\x84\x95\x5f\xf4\x11\xd5\x78\x6e\x0c\xc8\x5d\xb3\x39\x76\x52\xa5\x8f\xbb\x57\xca\x1d\x7c\xf4\x9d\x74\xaa\xeb\x07\xd0\x93\xc8\x13\x5e\x5f\xd9\xfe\x3a\xb7\x3f\x88\x9a\x8f\xc8\x07\x84\xa9\x44\xf8\xb8\x86\xca\x47\x00\x00\x00\xff\xff\x82\x8a\xe4\xa1\x97\x02\x00\x00")

func _templateRegistryTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateRegistryTmpl,
		"_template/registry.tmpl",
	)
}

func _templateRegistryTmpl() (*asset, error) {
	bytes, err := _templateRegistryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/registry.tmpl", size: 663, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateStringTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x8b\xdb\x30\x10\xbd\xfb\x57\x0c\xc6\x10\xab\xdd\x6a\xef\x0b\xb9\xa4\xdd\xd2\x5e\x7a\x68\xa1\x3d\x74\x97\xc5\x89\xc6\x8b\x40\x96\x16\x49\xf1\xb6\x08\xfd\xf7\x22\x59\x76\xfc\x95\x64\x9b\x43\xc0\x9a\x37\x6f\xde\xbc\x19\xc9\x39\x86\x35\x97\x08\xb9\xb1\x9a\xcb\xe7\x27\x86\x9a\xb7\x98\x83\xf7\xce\x41\x61\xe0\x6e\x0b\x05\x78\x9f\xdd\xde\xc2\x8f\x88\x00\xde\xbc\x08\x6c\x50\x5a\x03\x75\x63\x69\x77\x8a\x9a\x66\xf5\x51\x1e\xa0\x8c\x69\xf4\x3b\x1e\x90\xb7\xa8\xc1\x7b\x78\xd7\x1d\x7d\xab\x1a\x04\xef\x49\xe2\x29\x09\x74\x25\xc1\x65\x00\x00\xbc\x86\x65\xea\x76\x0b\x92\x8b\x84\x08\x3f\x8d\xf6\xa8\x25\xe4\x01\xda\x33\x96\x92\x0b\x92\x47\x88\x8f\xff\x6d\xa5\xc1\xec\x13\xbd\xa1\xbb\x23\x17\x0c\x75\x0c\x99\x3d\xfd\xa5\xb9\xc5\xa4\x61\xc2\x93\x93\xcc\xb9\x0f\x41\x48\x61\xe8\x4f\x3c\x58\x15\x34\x4c\xd2\x76\x7f\x2d\x96\x9b\xdf\x1b\x12\x4f\x6b\xa5\xe1\xe9\x06\x30\x98\xa4\x2b\xf9\x8c\xcb\x0e\xe8\xbd\xc0\xc6\x8c\x1a\x98\x09\x88\x0e\xbe\x68\x2e\x6d\x89\x04\xde\x43\x7e\xf3\x20\x73\x32\xea\x65\x5a\xf9\x71\xd3\x69\x44\x61\x70\xae\x6d\x68\x29\x32\x04\x54\xa7\xa9\xa8\xe3\x10\x0d\xfd\xcc\x51\x30\xd3\xa7\xa5\x56\xa5\xb2\x50\xd4\xf4\xa3\x92\x8c\x5b\xae\x64\x25\x76\x4a\x89\x19\x68\x0a\xe8\x83\x6b\x13\xa3\xe1\x64\x82\x8e\x55\x43\xe4\x4b\x65\xca\x45\xf4\xab\x64\xf8\x27\x6e\x85\x1b\x0a\xa2\x64\xcb\xfa\xff\x31\x8f\x53\xd2\x27\x75\xdc\x0b\x1c\x52\xb5\x7a\x75\x2e\x58\xe7\x7d\xeb\x1c\x4a\xe6\xfd\xa5\xd1\x75\x62\xd3\x72\x8c\xf4\xad\x72\x2f\x06\x3c\x95\x36\x92\xd7\x9e\x6a\x6a\xf5\xba\xde\xf7\xe5\x4d\x69\x09\x79\xa3\x98\x73\xb2\x1e\x37\x64\xad\xec\xb9\x95\x1b\xa0\x17\xd6\xee\xc1\x4e\xfc\xba\x83\x7c\x2e\xf2\x5e\x1e\x14\xc3\xc5\x0c\x13\xc1\x15\xff\x69\xff\x6a\xbc\x49\xcd\xc8\xac\x2b\xbc\x64\xd5\x88\x79\x73\xa7\x5b\x79\x76\x41\x57\x2e\x88\x3f\x97\x91\x3e\xaf\x14\xed\x1f\xa4\x11\x24\x3d\x7f\x66\x3f\xd8\x91\x4d\x68\xfe\x05\x00\x00\xff\xff\xbd\x79\x4c\x5c\xcf\x05\x00\x00")

func _templateStringTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateStringTmpl,
		"_template/string.tmpl",
	)
}

func _templateStringTmpl() (*asset, error) {
	bytes, err := _templateStringTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/string.tmpl", size: 1487, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateUtilsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x41\x6b\xf3\x30\x0c\x86\xef\xf9\x15\x2f\xc1\x7c\xf0\x8d\x2c\x61\xd7\x40\x4f\x1b\x3b\x8d\x31\xd8\x76\x2a\xa5\x78\x89\x32\x4c\x5d\x37\x73\x5c\xd6\x62\xfc\xdf\x87\xdc\xb4\x75\x4b\xc6\x72\x89\x2c\xbd\x92\xfc\xc8\xf2\x1e\x2d\x75\xca\x10\x72\x4b\x5f\x5b\x1a\xdc\xb2\x97\x56\xae\x87\x1c\x21\x34\x6e\x87\x66\x63\x1c\xed\x5c\x79\x7f\xf8\x7b\x7f\x0b\xd5\xa1\x7c\x37\xbd\x6c\x56\x2f\x2c\x25\x47\x76\x40\x08\xc7\xd0\xa3\x22\xdd\xb2\xa3\xc8\xd8\x65\xa5\xf9\x24\x88\x0e\xf5\x2c\x89\x79\x0f\xbd\xf9\x26\x0b\xd1\x95\xcf\x72\x4d\x08\x01\xde\xc3\xd1\xba\xd7\xd2\x11\xf2\xde\x2a\xe3\x96\x6e\xdf\x53\xce\xc9\x21\x14\x5c\x8c\x4c\x1b\x42\x36\x5a\x38\x9a\x7a\xe0\xfc\x02\x23\x01\x6e\xbc\xc7\xb1\xea\xb5\xf6\x60\x66\x09\x37\x83\x2c\xc7\xd4\x3c\xe1\x98\x40\xcc\x00\x9c\xba\xd4\x33\xfc\xf3\x1e\xe2\xd4\x29\x46\xf9\xbb\xc6\x16\x67\xee\x44\x93\xa0\xd7\x98\x98\x47\x71\x51\x6f\xbc\x38\x1f\x53\x92\xdf\x98\x92\xe9\x8d\xe4\xaa\x83\x28\x1f\x36\xdb\x0f\x4d\xaf\x5a\x35\xdc\x61\xbe\x98\x2f\x22\xc1\xdb\xbe\xa7\x8b\x69\x46\xf1\x59\x36\x2d\x8a\xaf\x78\xe5\xff\xfb\x52\x5a\x99\x55\xdc\xae\xac\xaa\xb2\xaa\xc2\x13\x9f\xeb\x74\x55\x54\x01\xc1\xaa\xb8\x31\x07\x61\x9c\x97\x6c\x5b\x08\x85\x3b\x84\xf0\x3f\xce\x2f\x8a\x26\xf6\x21\x9a\x3f\x01\x00\x00\xff\xff\x33\xe8\x16\x59\xda\x02\x00\x00")

func _templateUtilsTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateUtilsTmpl,
		"_template/utils.tmpl",
	)
}

func _templateUtilsTmpl() (*asset, error) {
	bytes, err := _templateUtilsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/utils.tmpl", size: 730, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/client.tmpl":   _templateClientTmpl,
	"_template/handlers.tmpl": _templateHandlersTmpl,
	"_template/header.tmpl":   _templateHeaderTmpl,
	"_template/main.tmpl":     _templateMainTmpl,
	"_template/registry.tmpl": _templateRegistryTmpl,
	"_template/string.tmpl":   _templateStringTmpl,
	"_template/utils.tmpl":    _templateUtilsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"client.tmpl":   &bintree{_templateClientTmpl, map[string]*bintree{}},
		"handlers.tmpl": &bintree{_templateHandlersTmpl, map[string]*bintree{}},
		"header.tmpl":   &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":     &bintree{_templateMainTmpl, map[string]*bintree{}},
		"registry.tmpl": &bintree{_templateRegistryTmpl, map[string]*bintree{}},
		"string.tmpl":   &bintree{_templateStringTmpl, map[string]*bintree{}},
		"utils.tmpl":    &bintree{_templateUtilsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
