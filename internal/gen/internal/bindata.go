// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/client.tmpl
// _template/errors.tmpl
// _template/handlers.tmpl
// _template/header.tmpl
// _template/main.tmpl
// _template/registry.tmpl
// _template/string.tmpl
// _template/utils.tmpl
// _template/zero.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfe\x8a\xc1\x84\x92\x94\xe0\xdc\x03\x3d\xa5\x3d\x14\xda\x12\x4a\x7e\x40\x95\xd7\x89\x88\xbd\x12\xeb\x75\x92\x22\xf2\xef\x45\xb2\xd2\x93\x96\xa7\xd1\x68\x66\x63\x44\x4b\x9d\x63\x42\x6d\x7b\x47\xac\x35\xee\xf7\x2a\x46\x2c\xc2\xf9\x88\xed\x0b\x16\xcd\xde\xd8\xb3\x39\x52\xe1\x4a\x43\xe8\x8d\x12\xea\x13\x99\x96\xa4\xc6\x22\xdd\x54\x9b\x0d\xde\xf9\xe2\xcf\x24\xb0\x86\xe1\xf2\x0c\x31\x57\x7c\x1e\xf6\xe2\xd5\x43\x82\x85\x35\x7d\x3f\x36\x95\xfe\x06\xfa\x97\x3b\x56\x92\xce\x58\x42\xac\x50\xe8\xb7\xb9\x2e\xad\xde\x60\x3d\x2b\xdd\xb4\xd9\xcd\xe7\x1a\x8e\xc3\xa4\xf8\x71\xdc\xbc\xb1\xf5\x2d\xc9\x1a\x7e\xd2\x07\x7b\xa5\xcc\x56\x20\x11\x2f\xd5\x1c\x6b\x97\x7b\xc1\x0d\xa1\xa7\x21\x4d\x03\xe9\xc9\xb7\x23\x3a\x2f\x39\x90\xe3\x23\xba\x89\xad\x3a\xcf\x23\x3a\xf1\x03\x0e\x1f\x18\xed\x89\x06\x83\x8b\x33\x8f\xa4\x25\x77\xf1\x1b\x55\x26\xab\x39\x73\x6a\x56\x34\xe9\xcf\xe4\x85\x2f\xba\xce\xc2\xa5\x2b\x3d\x8b\x62\x85\xe7\xe2\x90\x9f\x92\x4e\xc2\x78\x9a\x51\x22\xd9\x6e\x5b\x16\x28\xeb\x0a\xb8\x27\xd3\x18\x41\xdc\xa6\x55\xff\x05\x00\x00\xff\xff\x88\xcc\x3e\xfd\xb3\x01\x00\x00")

func _templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateClientTmpl,
		"_template/client.tmpl",
	)
}

func _templateClientTmpl() (*asset, error) {
	bytes, err := _templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/client.tmpl", size: 435, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateErrorsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\x4d\x6b\xdc\x30\x10\xbd\x1b\xfc\x1f\x1e\x66\x0f\x76\x48\xe4\xfb\x96\x9c\x4a\x0e\x7b\x29\x3d\xf4\x0f\x28\xf6\x58\x36\xbb\x2b\x99\xd1\x2c\x4d\x10\xfe\xef\x45\x1f\x5b\xc8\xba\xd0\x8b\x40\x9e\xf7\xe6\x7d\xc8\x21\xbc\xa0\x7f\x32\x4e\x3e\x57\x3a\xc2\x2c\x32\xdf\xde\xd5\xe0\xae\xbd\x71\x32\xf6\x32\xf6\x8b\x15\x62\xab\x2f\xbd\x21\xab\x06\x67\xa7\xc5\x3c\xf5\x78\xd9\xb6\xba\xaa\xab\x10\x30\xd2\xb4\x58\x42\x43\xcc\x8e\x7d\x83\x38\x08\x01\x87\xf5\x6c\x70\x7c\xc5\x41\xfd\xd4\xc3\x59\x1b\xba\x0f\x84\xae\xeb\x45\x0b\xa1\x99\x49\x8f\xc4\x0d\x0e\xc8\xcb\xa2\x05\xc4\x63\x7c\x63\xfe\x3e\xd3\x70\x26\x86\x17\xbe\x0d\x82\x50\x57\x80\xc4\xdb\x62\x4d\x5d\xed\xf1\x48\x3e\x27\x3d\x50\xc6\x9e\xfc\xaf\xcf\x95\xda\x4c\xe8\xf0\xee\xdc\xa5\xd0\xa6\x9b\x1d\xd0\xee\x94\x3a\x9c\x7c\x4b\xcc\x48\x41\x32\x23\xaf\x5a\x26\x7c\x3c\xc3\x9d\x63\x1c\x62\x56\xed\x9d\xd9\x7d\x8b\x5f\x13\x06\x60\x92\x1b\x5b\x7c\xa8\xa2\x4c\x4a\xba\x38\xd9\xe2\x51\x86\x93\xbe\x78\xfa\x9f\x8d\xb7\xa8\xdf\x76\x25\x6b\x5e\x5f\xf8\xa4\xa4\xb0\xe3\xb3\xb1\xb6\x86\x70\xf0\xa9\xe5\xc4\xf2\xa5\xc9\xbe\x8f\x5b\xe2\x2b\x78\xf5\x43\x5f\x63\xf7\x58\x7c\x4e\x96\x04\x31\x39\x46\x93\x01\xd1\x2d\xb6\xad\x51\x75\x35\x38\xeb\x65\x4f\x7d\x7d\x84\x16\x8d\x93\xff\x8a\x63\x5a\x1d\x8b\xc7\xef\x99\x64\xa6\xd4\x64\x94\xfd\xc2\x55\x25\xf9\x03\xf7\xdf\xcd\xdf\x63\xa7\x6c\x2a\xbf\xcf\xf3\x63\x63\x41\x8e\x3b\xcb\x5b\x97\x7a\x0a\x01\x64\x47\xfc\xfd\x57\xef\x97\x3f\x01\x00\x00\xff\xff\x38\xf7\x54\x64\xf5\x02\x00\x00")

func _templateErrorsTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateErrorsTmpl,
		"_template/errors.tmpl",
	)
}

func _templateErrorsTmpl() (*asset, error) {
	bytes, err := _templateErrorsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/errors.tmpl", size: 757, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHandlersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcd\x6e\xe3\x36\x10\x3e\xcb\x80\xdf\x61\xd6\xf0\x41\x5a\xb8\xf2\x9e\xbd\xd0\x69\x83\x62\x7d\xd9\x06\x48\x73\x32\x82\x82\x95\xa9\x98\xb0\x44\xa9\x24\xd5\x38\x15\xf4\xee\xc5\xf0\x47\xa2\x24\x2b\x71\xda\x3d\xd9\xe2\xfc\x7f\xf3\x91\x33\x4d\x03\x47\x9a\x31\x4e\x61\x75\x22\xfc\x98\x53\x21\x57\xd0\xb6\xcb\x45\xd3\xc0\xba\x3a\x3f\xc3\x2e\x81\x75\x7c\x4f\xd2\x33\x79\xa6\x4e\xa0\x68\x51\xe5\x44\xa1\x0d\x25\x47\x2a\x56\xb0\xd6\xa2\xe5\x42\xbd\x56\x14\xac\x23\x48\x20\xab\x79\x1a\x3e\x56\x47\xa2\xe8\xb7\x92\x2b\x7a\x51\x1b\xb0\x9f\x39\x91\x32\x02\x2a\x44\x29\x3a\x43\x23\xba\x63\xb2\x22\x2a\x3d\x51\x01\x52\x89\x3a\x55\xd0\x2c\x17\x00\xe0\xfc\x4a\x28\x48\x75\x60\x5c\x3d\xd9\x83\xe5\x42\xc7\xc6\x60\xf0\x83\xbe\x8c\xbd\x84\xd1\xd4\xb1\xf5\x28\xa8\xaa\x05\x9f\x88\xad\xd4\x8f\xb9\x1b\x07\x6d\xda\x8d\xd1\x6a\x6d\x78\xaf\x02\x5b\xeb\x28\xfd\xd4\x9c\xc6\x56\x8a\x36\x78\xfc\x70\x2a\x85\x82\x3f\xcb\x32\x37\xdf\x8f\xd2\x2f\xf1\x33\x7e\x1a\xc1\xb7\x13\x51\x9e\x00\x3f\x3b\x01\xe7\x34\x1f\xca\xf0\xc4\x88\x19\x67\xce\x7f\x8f\x53\x58\xc3\xe7\x41\xb2\x11\xe4\xe4\x9f\xd7\x3d\x67\xea\x57\x51\x16\x46\x24\xc3\xda\xfc\x3a\x5d\x19\xb9\x62\x58\x06\x75\xac\x3d\x7b\x60\x19\x38\x3b\x58\xcc\x1f\xab\x96\x80\x12\x35\x75\x47\xa6\xc8\x04\x0a\x72\xa6\xe1\xa0\xd6\x0d\xe4\x94\xbb\xb8\x46\x2f\x8a\x96\x8b\x20\x2b\x05\xfc\xb1\x81\x14\x79\x83\xa4\x14\x84\x3f\x53\x18\xe8\x61\x2a\x41\x50\x6b\x27\xe5\x19\x95\xb4\x76\x1c\x6a\xc7\xe8\x24\x60\x19\x7c\x2a\xcf\x46\x31\xc0\x86\x30\x8e\x49\x05\x41\xab\x4d\x8d\x9f\x03\xba\x88\xf7\x77\x4f\x90\x40\xad\xe1\x0f\xbc\x6a\x4c\x1b\xc6\xa9\xe3\xe9\x30\x75\xad\x87\xa9\x77\x66\xa6\x49\x57\x2c\x51\x30\x63\xfc\x4e\xdd\x26\x19\xaf\x05\xf2\x85\xa9\xf4\x04\xe9\x89\x28\x0f\x00\xe4\x66\xe4\xab\xa5\x44\x52\xd0\x49\xef\xfa\x43\xaf\xbe\x03\x3a\xb0\x10\xa4\x1d\xd1\x06\x96\x98\xf4\x35\x63\x5d\xe5\xbc\x7d\x6b\xd0\x7c\x93\x89\x12\xaf\x44\x98\xaa\xcb\xf8\xce\x7c\x88\x7e\x57\xc8\xd7\x35\xc3\x5e\xd0\x04\x52\x75\x71\x87\xe6\x22\xde\xce\xd3\x2f\xd1\x2d\x94\xf8\xf2\x01\x06\xa0\xae\x06\x66\xbb\x85\xef\xfa\x99\x01\x56\x54\x39\x2d\x28\x57\x72\xf2\x4a\xc5\x3d\x80\x63\x51\x64\xcd\xaf\x61\xb8\x81\xe9\xa5\xd6\xcf\xb0\x83\xb2\x46\xa3\x5d\x32\x7c\xcb\x3c\x98\xed\xc9\xce\xf2\x41\x5d\x36\xde\x8d\x77\x7c\x35\x31\xae\x5c\x54\x1b\xdb\xf3\x87\xf1\xe2\x37\x1e\x9f\xa8\x57\x65\x19\xa6\x8a\x5e\xeb\xf8\x68\xab\x0d\xd1\xde\x05\x8c\xbe\x6a\x85\x4f\x09\x70\x96\xfb\x41\xbc\xd7\x9e\x0a\x31\xa1\x63\x60\x65\x9c\xe5\xe3\x16\x18\x5a\xfc\xbf\x3e\x3c\xcc\x11\x7a\x63\xb8\xee\x5a\xa1\xf5\x6e\x6a\x47\xdb\x0b\xe3\xee\xba\x44\x83\xa9\x36\x81\x48\xeb\xd9\x0e\x44\xa3\x2b\x38\xcd\x7c\x60\x0c\xa3\x21\x6e\xdb\x3b\x9d\xe5\x2e\x6b\xfb\x0e\x19\x3d\xef\x01\x6a\x9a\x5f\x2c\x23\xd6\x52\xaf\x16\x0f\x7a\x46\x4a\x68\xdb\xa6\xd1\xfd\xfd\x0b\xd6\x32\xde\x73\x45\x45\x46\x52\x0a\x2b\x2f\x86\xd9\x4c\xfa\x57\x08\x77\x14\x19\xff\x20\x05\x6e\x26\xbb\x01\x4d\xec\x94\x76\x83\xa0\x8e\xdd\x20\x3f\x0c\x8c\x7e\x7f\xad\xe8\xfe\xee\xe9\x2b\x98\xa1\xe0\xb3\xa5\xe7\x9a\x35\xbd\x9d\x68\x73\x64\xf3\x1e\x26\xfb\x17\xe1\xa0\xfc\x68\xaa\x37\x7f\x46\xe3\x73\x42\xcc\x9f\x80\x20\x42\x40\xff\xa6\x5c\x69\x14\x76\xf8\xe4\xb1\xe2\x5e\xd0\x8c\x5d\x3a\x6c\xac\xd5\x0a\xf5\xb7\x5b\x18\x9a\xb4\xed\x77\xbb\xe3\x31\x09\x64\x22\x04\xfd\xe1\x70\x8b\xed\x6e\x34\xe7\x42\x2f\x89\xf3\x1c\x1b\x76\xd9\x5b\x19\xb7\x5b\xf8\x8d\x4f\x42\x4b\x8a\x03\x71\x7c\xda\xa7\x32\x4f\xf8\xa9\xb3\xd0\x6d\xb2\x33\xa9\x77\xe3\xe8\x1d\x7a\xb9\x4d\xf8\xbf\x5c\x24\x8f\x03\x8e\x87\x1e\x0d\xe3\x70\x04\x4f\xe4\x2f\xa5\x57\xd9\xa5\xdb\xef\x3e\xfe\x0d\x00\x00\xff\xff\x5a\x43\x36\xdd\xff\x0b\x00\x00")

func _templateHandlersTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHandlersTmpl,
		"_template/handlers.tmpl",
	)
}

func _templateHandlersTmpl() (*asset, error) {
	bytes, err := _templateHandlersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/handlers.tmpl", size: 3071, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xc1\x6a\xf3\x30\x10\x84\xef\x02\xbd\xc3\x22\xfe\x43\x02\x7f\xa5\x27\xe8\x25\x4d\x0f\xb9\x24\x85\xe6\x5e\x64\x6b\xa5\x08\xc7\x2b\xb3\x96\x4b\x8b\xf0\xbb\x17\xd9\x86\xb4\xb7\xdd\x19\x98\xf9\x76\x4b\x01\x87\x3e\x12\x82\xba\xa1\x75\xc8\x0a\xe6\x59\x0a\x63\xe0\x25\x39\x84\x80\x84\x6c\x33\x3a\x68\xbe\x21\xa4\xec\x02\xd2\x7f\x38\x5e\xe0\x7c\xb9\xc2\xeb\xf1\x74\xd5\x52\x48\x31\xd8\xb6\xb3\x01\xa1\x14\xf8\xa7\xdf\xb6\xa5\xc6\x48\x11\xfb\x21\x71\x86\x9d\x14\xaa\x4d\x94\xf1\x2b\x2b\x29\x14\x32\x27\x1e\xeb\xe4\xfb\x45\x18\x33\x47\x0a\x55\x91\x42\x85\x98\x6f\x53\xa3\xdb\xd4\x9b\x5a\x69\xb2\x33\x4d\x24\x25\xc5\xbe\xda\xc6\xc0\x39\x3d\xa5\x61\xe5\x8e\x39\x26\x02\x9f\x18\x3a\xc4\x21\x52\x80\xb5\x71\xd4\x52\x7c\x5a\x86\x0f\x78\x86\x26\x92\x3e\x4c\xde\x23\x97\xf9\xa1\x6e\x38\xfa\x60\xdb\x2e\x70\x9a\xc8\xed\xf6\x0f\xd7\xf7\x59\xbf\x2f\x50\xc8\x3b\x8a\xf7\x5f\xd6\xc6\xaa\x0f\x53\xbc\xbb\xbf\x99\xeb\x5d\xfa\x34\x56\xd0\x52\x00\xc9\x2d\x7f\xf8\x09\x00\x00\xff\xff\xf1\x5c\xc4\xb1\x66\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 358, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x3b\x5b\x73\xdb\xb8\xd5\xef\xfa\x15\x67\xfd\x79\xf3\x91\x5e\x99\xda\x69\xdf\x9c\xf5\x43\x6d\x67\x1b\xcf\x64\xb7\x19\x3b\xe9\x43\x3b\x1d\x0f\x44\x1e\x4a\xa8\x28\x40\x05\x20\xc9\x89\x96\xff\xbd\x83\x1b\x09\xde\x24\xd9\x75\xd2\x6c\xf3\x64\x81\x38\x07\xe7\x7e\x01\x4e\x76\xbb\x73\x98\x9c\xcd\xb8\xfa\xb4\xc2\x0b\x98\x51\x35\x5f\x4f\x93\x94\x2f\x27\x33\xae\xb2\x89\xca\x26\x94\x29\x14\x8c\x14\x93\x19\xb2\x24\xe5\x2c\xa7\xb3\xb3\x09\x9c\x97\xe5\x68\xb4\xdb\x41\x86\x39\x65\x08\x27\x4b\x42\xd9\x09\x94\xa5\x5e\x3b\x5d\x2d\x66\x70\x71\x09\xa7\xc9\x7b\x92\x2e\xc8\x0c\xdd\xba\xc2\xe5\xaa\x20\x0a\xe1\x64\x8e\x24\x43\x71\x02\xa7\xe0\xd0\x08\xc2\x66\x08\xa7\xd2\x40\xdd\x2b\xb1\x4e\x95\xd4\xdf\x26\x13\xd0\x08\x65\x72\xcd\x97\x4b\x64\xca\x62\x3a\x07\x9a\xeb\xc5\x1b\x9e\x4a\xbf\xe2\x30\x64\x1a\x43\xfd\xc5\xc2\x2b\x41\x97\x70\x9a\xf9\xad\xc8\xfa\xfe\xb4\x28\xdf\x51\xb6\x30\x90\x00\x00\x7a\xb9\x26\x7a\x25\x28\x53\x0f\x85\xde\x70\xd2\xd8\xda\x8b\xe8\xe3\xdd\x3b\x4b\x80\xa6\xe1\x1e\xd1\xf1\x61\x97\x21\xe7\x02\x04\xe6\x28\x90\xa5\x98\x84\x18\xb4\x1e\xdc\xde\x5f\xc9\x52\x8b\x0e\xa4\x91\x07\xec\x42\x3e\x73\xb0\x8c\xfe\x4c\xb1\xc8\x42\x51\xe5\x7d\xa2\xca\x2d\xb1\x47\xb0\x95\xef\x63\x8b\xb0\x0c\x22\x73\x02\xcb\xa8\xa2\x9c\x91\x22\x86\x88\x71\x05\xcd\xc5\x2b\xce\x8b\xb8\xe6\xfe\xa3\x44\xb8\x47\x65\xa9\xf3\x4c\x69\x5c\x7f\x6e\x2f\xce\xb1\x58\xa1\x90\x0d\x81\x58\x8a\xc3\x5d\x0d\x53\xb2\xe4\x6b\xa9\x69\xea\x5b\x74\x97\xa3\xda\x82\x1c\xf4\x87\x4f\x2b\xbc\xbd\x01\x2a\xe1\xc3\x3b\x30\xc2\xa6\x19\xf0\xbc\xb9\x29\x19\xa5\x9c\x49\xd5\x0b\x79\xa9\x57\x69\x0e\x86\x6d\x99\xfc\x15\x53\xc5\x05\x94\xe5\x8f\x8f\x76\xf7\x5b\x7c\xbc\xbd\x81\xb2\x34\x64\x14\x12\xb5\xab\x4c\x29\x4b\x34\xb8\xdd\x5c\x13\xf8\x5a\x1b\x7f\xcd\xcb\x67\x14\xfc\x21\x43\x41\x37\x9a\x19\xa7\x84\xfa\xb3\x54\x82\xb2\x59\x6b\x83\x66\xd0\x51\x26\x50\xad\x05\x93\xf0\xcb\x87\xf7\x82\x2b\x5e\x71\x17\x5d\xdf\x5d\x43\xca\x33\x8c\x13\x6f\x8c\x73\xa5\x56\xf2\x62\x32\x49\xb9\xc0\x44\x61\x81\x33\x41\x96\x09\x17\xb3\xc9\x52\xad\x34\xf0\xe4\xc3\xbb\x73\x55\xfc\x9f\xc0\x25\x11\x0b\x99\x8c\xf2\x35\x4b\x21\xb2\x1c\xde\x61\x8a\x74\x83\x9a\x69\x38\x6b\x88\x28\x76\xa4\x44\x31\xac\x29\x53\x7f\xfc\x03\xec\x8c\xfe\x2c\x65\x7d\xe2\x74\x2a\x7a\xc3\x34\x7d\x40\x97\xab\x02\xb5\xf1\x4a\xd0\x22\xb3\xab\xe2\xf8\xd3\x2d\x80\xdb\x78\xb5\xce\xff\x24\x66\x66\x9b\x46\x76\xb5\xce\x73\x14\x31\xa0\x10\x5c\x38\xba\xa8\xd7\x7b\x88\xf4\xf2\x12\x18\x2d\xdc\x8e\x80\xfa\x7c\xa9\x92\x37\x1a\x38\x8f\x4e\x52\xc2\xfe\x5f\x01\x5a\xaa\x1d\x0a\xb2\xd5\x2c\x19\xdb\x96\x1a\xc3\x49\x6c\x30\x54\xde\xd3\x36\x98\xca\xb2\x03\x52\x93\xf7\x6b\x75\x7b\x13\xf5\x08\x2a\x6e\xfb\xe3\x60\x20\xf0\x2e\x6e\x1d\x3f\x70\x4b\xff\x91\xe6\xf0\x5d\x57\x98\x49\x68\x6a\x29\x5f\xae\x88\xc0\x07\x6d\x91\xda\xaf\xb4\x70\x6b\x81\xf4\xc1\xb6\xce\x32\xe4\xe8\x2f\xf7\xa8\xa2\xce\xd7\x5b\x96\xe1\xa3\xd6\x98\x93\x90\x27\xb9\x3f\x32\x1f\xc3\x69\x7f\x10\x3a\x56\x1c\x4f\x61\xe8\x2d\x91\x7b\x18\x72\x52\xea\xc4\x2f\x7f\xfe\x41\xed\xdb\x0d\x6f\x4d\x82\x8c\x0a\x64\xbd\x8a\x0a\xa2\x61\x6c\x65\xa8\x13\x8a\x8d\x4b\xa7\xb9\xf7\x1b\x28\x4b\x9a\xe9\xa8\x64\xc2\x50\x59\x3e\xe8\x3f\x0d\x51\xe3\x80\xa2\x1b\xbe\x9e\x16\x58\xd1\x25\xf8\x76\xb7\xd3\x00\x65\xb9\xd9\xed\x90\x65\x65\xa9\xe5\x6e\x75\x70\x80\x96\x80\xf9\x5e\xdc\x2d\x03\xda\xcf\xb7\xe0\x5b\xc7\x9b\xe7\xef\x61\x0c\x9b\x9a\x16\xc1\xb7\x87\x84\x5d\xcb\x21\x38\xd9\x7f\xbc\xd5\x75\x4d\x4e\x52\x0c\x3f\x3b\x7b\xd8\x74\x83\xc0\x40\x20\x58\x33\x32\x2d\x10\x14\x1f\x0a\x06\x17\x90\x1b\xcb\xb1\x82\xba\x23\x5b\x2f\x2b\xb4\x91\x0e\xb6\x54\xcd\x81\x1a\xfb\xf9\x3e\xd3\x79\x49\x87\x8e\x31\xd0\xec\x31\x6e\x1c\xde\xe4\xc1\x28\x66\x14\x90\x8c\x42\x68\xd9\x6c\x92\xfe\x18\x18\xbf\x36\x3b\xbe\xfb\xef\xb0\x75\x01\xdf\x6f\x2d\x4f\x63\x4d\x46\xcd\x58\xe0\xfa\xd6\x46\xf7\x99\x88\x3d\xeb\x67\x9d\x0b\xca\x32\xda\xc4\xfb\x95\x3f\x64\x7b\x9d\x68\x33\x4c\xc7\xa0\x25\xed\xb1\xa2\x3d\xd1\xc4\x8b\xe8\x98\x04\xf3\x7c\x05\xd0\x66\xf2\xe9\x1a\x4c\x6d\x2c\x07\x08\x7d\xa2\x29\xbd\x24\x17\xce\x60\x2a\x5b\x19\xd2\xcf\x01\x1b\x39\x14\x3b\x87\x2c\xa8\xd7\xa0\x7a\x52\xc7\x20\x44\x37\x91\x05\x12\x62\xb4\x18\x99\xb6\x67\x38\xb5\xb9\x12\x13\x4d\xb9\xad\x65\x15\x43\x74\xa2\xab\x18\xbb\xe3\x24\x76\x2d\x55\x2f\x65\xa6\xc6\x6b\x55\xd6\x12\x95\x84\x0d\x29\xd6\xe8\x8b\xdd\xfa\x5b\x1a\x80\x1b\x75\x1c\x5f\x70\xb5\xcf\x89\xec\x11\xfb\x2b\xf4\xd8\xb5\x32\x1d\xe2\xc3\x94\xad\xa3\xb0\xc5\xf5\xa5\xca\x8e\x7d\x28\x2b\x57\x05\x25\xd6\x68\x75\x6d\x4d\xef\x79\xe4\x7c\x64\xf2\xa5\x08\xca\x49\x21\x31\xa8\x2c\xbb\x0e\xf1\x62\x12\x3a\x4c\x8c\x51\x51\xb3\xe3\x0a\x7e\x68\x4b\xec\xf4\x78\xbe\x4b\x19\x30\xc6\x21\xa3\x0e\xea\xbc\xa8\xbf\xdb\xec\x98\xb1\xee\x31\x35\x09\x53\xce\x0b\x24\x0c\xb6\x73\x9a\xce\x75\x7c\xd4\x3a\xd5\xc8\xec\xae\x2d\x91\xda\x3d\x92\x50\x9a\x3d\x2e\xd1\x76\x6b\xbb\xb1\xfb\xf1\x58\xd7\x69\xf8\xc8\x0c\x95\x42\xf1\xa0\x61\x43\x4f\xe9\x14\x54\x4d\xa1\xd4\x8d\xe8\x80\x48\xaa\x72\xff\xc5\x0b\xdc\x20\x9c\x19\x45\x8e\x1b\x76\x09\xed\x9e\x6f\xd0\x86\xc6\xb5\x83\xb5\x8d\xf9\x00\x82\xa7\x93\x3e\x18\xac\x8f\x3f\xd4\x51\xdd\xc6\xe4\xa2\xb9\xfd\xd5\x72\x80\x1b\xec\x6b\x6d\xed\xea\x13\x5a\x5b\x0b\xf0\xd5\x5a\xdb\x0c\xfb\x5b\x5b\xc5\x8f\x6e\x6d\xdb\x75\x46\x9d\xa7\xaf\x39\x93\xeb\x25\x0e\x34\xba\xcf\x29\x2f\x06\xc8\xed\x96\x11\xff\x71\x13\x1d\xe6\xa8\xe3\x62\xe4\x97\x30\xe0\x4e\xb1\xdc\x43\x69\xb7\xad\xf9\x22\x51\xc0\xd3\xd3\x3a\x6e\xd7\x6e\x57\xfa\xe9\xed\xd6\xe7\xfa\x9f\xbd\x1f\x7e\x87\x6c\x3c\x64\x42\x8d\x76\x31\x6e\x33\x3a\xd8\xea\x3c\xdf\x90\x8e\xab\x53\xfd\xbf\x26\x3b\xba\x79\xa5\xd9\xa3\xe6\xe3\xc7\xd7\xe6\xaf\x9f\x6a\x16\xcd\xc2\x0f\x3f\xc0\x6e\xd4\x94\xdf\xc1\x46\xa6\xe2\x97\xb1\x67\xcb\xea\x18\x79\x7d\x2d\x99\x75\xe5\xa6\xff\x6d\x88\x30\xad\xfe\xdf\xff\x61\xf1\x38\xe4\x9d\x7d\x46\xc6\x5a\x12\xd6\x46\x9d\xa8\xeb\x85\x9f\x2a\x39\xbd\xae\xfe\x32\x52\x6f\x0b\xbd\x65\xaa\x70\xdc\xa5\x81\x25\xd5\x24\x42\xa7\x05\x1b\xb0\x2d\xd1\x15\x58\xb3\x31\xa9\x5b\xaa\xdf\x91\x52\xaa\xf8\x33\x78\xc7\x12\xaa\xae\xea\x07\xf6\xa8\x2e\xb8\xbd\xd0\xbb\x93\xfe\x54\xb7\xef\x06\xe3\xdb\x90\xc8\x41\x93\x68\x3b\x66\xb3\x59\xfd\xdd\x19\x41\xd7\x51\xe0\x49\x81\xcb\x90\xcf\xb7\x70\x09\x64\xb5\x42\x96\x45\x82\x6f\xc7\x56\x64\xc7\x44\x86\xc3\x99\xd7\xa1\x3d\x58\x82\x0a\xbe\xed\x1e\xd8\x97\x67\x5f\xfe\xe8\x01\x6e\x07\xe4\x5b\x76\xb2\xee\x13\xef\x36\x5f\x2a\x44\x7d\x7b\x39\xf6\xd8\x5e\xb5\x23\xc0\xbd\x61\xec\xf8\xbb\xb2\xe7\x05\xad\xaf\x2b\xa7\x21\x93\x7e\x7e\x94\xfa\x1f\xb1\x83\x6e\x75\xda\x7f\x37\x7c\xd4\xad\x9e\x1b\x00\x68\xf8\xe0\x64\x02\xe6\x45\xd9\x3c\xe4\x07\xad\x60\xb5\xc8\x45\xfd\x08\x1d\x42\x0e\x37\x88\xad\xfe\xb0\xc2\x14\xc5\x3d\x68\x60\xe7\xc9\x7c\xd5\xc5\x64\x6e\x12\x83\x8e\xf5\x0d\x93\x6b\x41\xd9\x0c\xa8\xc7\x20\x81\x32\x48\xf9\x72\x45\x0b\x3c\x57\x74\x89\xfe\xbd\x29\x7c\x32\xd7\xe9\x3e\x1a\x3d\x84\x2f\xb7\x70\xe9\xcf\x73\xbb\x76\xa5\xdb\xe0\xfa\xdf\xbe\x0d\xfd\x12\x7c\xe8\xe3\xaa\x1f\xda\xb1\x12\x8f\x82\x71\x8c\x5f\x50\xcd\x79\xd6\x18\x29\xa9\x96\x80\xb2\x0d\x5f\xa0\x84\xa5\x5d\xe9\x34\xbd\x56\x74\x5a\x22\xb6\xc3\x36\xa3\x10\x9f\x92\x03\x93\x28\xf0\xad\x8c\xa2\x18\xcf\xdb\x8b\xc9\xb0\x65\x51\xd5\x9b\x5f\x74\xac\xa5\xc6\x70\xc5\xd5\x35\x61\x1f\xa5\xf7\x8b\x6b\xc2\x60\x8a\xb0\x96\x98\xc1\xf4\x13\x4c\xb9\x92\x03\x90\x77\x28\xd7\x85\xea\x5b\xbb\xa7\x6c\xb6\x2e\x88\xa8\xef\xdf\x52\x38\xbb\x2e\x28\x32\x15\xb7\xb5\x1d\x35\x2e\xde\x04\xfe\x6b\x8d\x52\x3d\xac\x88\x20\x4b\xe9\x86\x2a\x62\xe3\x6f\xf5\xbd\x86\x3d\xa4\x2a\x64\xce\xbc\x0b\x39\x72\xea\x17\x56\xdb\xa4\xf8\x4f\x2e\x64\x06\xaf\xae\x46\xce\xbe\x79\x36\x9d\x8d\xc5\xd1\x42\xe8\x2f\x5f\x03\x35\x91\x74\xf1\xe0\x68\xf5\x93\x1f\xcd\xfc\x94\x26\x62\x95\x26\xb7\xc6\x92\xef\xc8\x36\x4a\xd5\xe3\x18\x1c\xc4\x18\x5e\xd9\x83\x0e\xdc\xad\x30\x5a\x18\x1a\x5b\x61\x2f\x94\x74\xb3\x9a\x73\x70\x16\x79\xf2\xa6\xc0\xa5\x1c\x9b\x40\xd8\x97\x6d\x7c\x00\xb2\xbb\x5b\xfb\x1a\xb7\xc7\x0e\xe8\xa5\x34\x69\x5f\x52\x6a\x01\x9f\x5c\x71\x5e\x5c\x17\x44\xca\x13\xa3\x9d\x7e\x5d\x4e\x39\x2f\x9e\xa8\x3a\xa7\xf0\x2b\xfe\xf8\xd5\x34\xe8\x2f\xe0\x06\xf8\x83\xb2\x6c\xe9\x36\x10\xb0\x4f\xce\xa4\x90\x58\x7f\xeb\x4b\x7c\xfb\x4f\xe8\x31\x85\x50\x2a\x57\x44\x62\x55\xef\x0e\x19\xc7\xc3\x18\xf8\xc2\x3c\xee\xef\x45\x90\x44\x67\xfa\xe8\x0f\xc2\x17\xcd\xee\x58\xbe\xd8\x67\x4f\x9d\x5b\xfb\x97\x31\xad\xf0\xba\x55\x5b\x04\x5f\xc0\x5f\x16\x5f\x40\xf3\x7c\x71\xc0\x6f\x9b\x2e\xdb\xa8\x47\x86\x92\x4c\x95\xef\xeb\xe1\xcb\xdc\x0c\x5f\xde\xd6\x39\x3f\x1c\x2a\xac\x5f\x6f\x56\x02\xa5\xa9\x5d\xaa\xfa\xcc\xa7\xc9\x19\x32\x14\x34\x35\x73\x67\x89\x4e\x11\x75\x43\x52\xa5\x8d\x2a\x67\xe4\x03\x39\xc3\x81\x39\xf2\x74\x35\xf2\x48\x74\xbd\x74\xa1\xff\x86\x59\xa3\x4a\x0d\xe6\x4b\x93\xb0\x97\xf1\xb5\xea\x74\x9d\xc7\x06\xac\x5d\xa6\xea\x35\xfd\x6f\x45\x18\x4d\x23\x53\x51\xea\x25\x73\x1e\xc8\x2d\x55\xe9\xdc\x8e\x9a\xcc\x92\x48\x99\xd7\xd7\x5d\x20\xa8\xd4\x64\x76\x73\x31\xea\x8b\x37\x69\x06\x62\x35\x74\x4a\x24\xda\xcb\xfb\x90\x3a\xfd\x3b\x4d\xaa\x42\xd6\x89\x35\x0d\xa4\xe7\x75\xe2\xf1\x64\x98\x93\x75\xa1\x2e\x1c\x8d\x1b\x4f\x61\x35\x1f\x5a\xeb\xa4\x2a\xd3\x9c\x65\x04\x05\x58\xf5\xdb\xd5\x5b\xe6\x77\xbb\x54\xac\x9f\x35\x42\x6b\x30\x35\xb8\x65\xf4\x7e\x4e\x04\x66\xee\x72\xfc\xdc\x99\xaf\x37\x0d\xf3\x00\x16\xcc\x9c\x86\x59\xc3\x7e\x0c\x67\x4f\x0f\xd5\x32\x01\xc4\xe0\x83\xfc\x81\x77\x33\x8d\xa1\x69\xe3\x8e\xdc\x27\x8c\x49\x3a\x88\x67\x8d\x4a\x6a\xd8\xd6\x18\x64\x85\x4f\xd9\xba\xba\x6e\x00\x74\x67\x64\x57\x51\x58\x50\xfb\x2b\x8a\xc1\x8e\x7b\x7a\xd0\xbf\xa1\xe0\x15\xe9\xfe\x01\x33\x5d\x0b\xa1\xc5\xce\xa7\xff\xc4\x54\xc1\x9c\x48\x20\xf0\x59\xef\xb4\x37\x69\x06\x58\x43\x46\xb1\x79\x05\x1d\x85\x4f\x52\x0d\x5f\x69\xbd\x4f\x11\xf1\x09\x32\x3c\x97\x28\x28\x29\xe8\x67\xa2\x28\x67\x55\xcd\x5f\x37\xbd\x36\x8e\xf6\xa1\xd3\xbe\xd7\x7c\x9c\x8a\x5a\x37\x1f\x8d\x84\x4a\xb3\xca\xb1\xa7\xeb\x3c\x79\x8f\xb8\xd0\xe2\x1b\xed\xeb\x31\x87\x8b\x16\xe7\xc1\x34\x0b\xde\x4f\xf7\xf9\xae\xb3\x2c\xe3\xba\x0d\x4f\xb5\x6a\xbc\xa8\x8e\xf4\xb2\xd3\x4a\x6c\x3b\x70\x52\xed\xda\xf8\xf8\x94\x06\x7d\x49\xab\x63\x36\xa3\x5a\xee\xce\x40\x87\xa9\xc3\xe3\x59\x86\xcf\x83\x8d\x74\x9e\xec\xe9\x96\xcb\xb6\xec\x5e\x6d\x7a\xd3\xa6\xfe\xe9\xe3\x4f\xaf\xb8\x9f\x4c\x86\x36\x84\x5f\x71\xfb\x91\xe1\xe3\x0a\x53\x85\xd9\xed\x4d\x44\xb3\xd8\xbf\xca\xd5\x73\xda\xb5\x05\x4d\xf9\x23\x4a\x50\xf3\x76\xb4\x5b\x09\xbe\xa1\x46\x03\xc4\xcd\x8b\x27\x61\x50\xac\x6b\xb0\x7a\x6e\x1e\xaa\x11\xf2\xa0\x94\x68\x85\xbe\x23\x1e\x6b\x03\x07\xa8\x4f\xf1\x0d\xfa\xd4\x06\xfd\xf0\x53\xf5\x68\xdb\xf1\x85\xd6\x43\xed\xf4\x89\x23\x61\x0d\x41\x07\x0c\xb7\x1e\x67\x8d\x2d\xf6\x5e\xf6\x35\x12\xe4\x11\x3e\xb6\x97\x0c\xad\xa8\xcc\x06\x9c\xfe\xb1\xad\x69\xd2\x15\xfe\x25\x6c\x7a\x2e\x4f\x0e\x4c\x82\x3f\x5d\x01\x6e\x82\xed\x68\x05\xfc\xf6\x5b\x3f\xb5\xcf\x9d\x75\x0b\xfe\xbf\x43\x77\x2c\xcf\x21\xe9\x39\x30\xa9\xe9\x8e\x47\xed\x72\xcd\xfd\xf9\xef\x00\x00\x00\xff\xff\x15\x7c\x59\xa8\xb9\x33\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 13241, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateRegistryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6b\xe3\x30\x10\x85\xef\xfe\x15\x0f\x63\x96\x04\x76\xed\x65\xf7\x16\xc8\xa9\x3d\xb4\x90\xb4\x25\xe4\x56\x7a\x50\xec\xb1\xa3\x26\x96\x85\x24\xb7\x31\x42\xff\xbd\x4c\xed\x26\x31\xf5\xa1\x37\x7b\xde\xcc\xd3\x7c\x8f\xf1\x1e\x05\x95\x52\x11\x62\x43\x95\xb4\xce\x74\x31\x42\x88\xbc\x47\xa2\x0f\x15\x16\x4b\x24\xe9\x93\xc8\x0f\xa2\xa2\xa1\xee\xa8\xd6\x47\xe1\x08\xf1\x9e\x44\x41\x26\x46\xc2\x4a\xe4\xfd\x1f\xc8\x12\x49\xba\x12\x1d\x19\x2e\x65\x19\xfa\xef\x37\x32\x56\x36\x0a\x4d\x09\x9b\xef\xa9\x16\x69\x94\x37\xca\xba\x41\x5e\x82\x9f\xbb\xcc\xb1\x13\xa9\xe2\xd3\x35\xcb\xb0\xed\x34\x59\x18\x72\xad\x51\x16\xb5\xd0\x5a\xaa\x0a\xa5\x69\x6a\xb8\x4e\x13\x64\x61\xe1\x1a\x6c\x57\xfd\xaf\x12\x35\xd9\x34\x2a\x5b\x95\xf7\xa3\x6b\xa1\x67\x73\x9e\x7b\x6e\xa5\x72\xff\xff\xbd\x58\x67\xd8\xc1\x47\x18\x5c\x27\x45\xde\xc2\x08\x55\x11\x12\x3a\x52\xdd\x47\xb1\x19\x42\xe2\xdd\x00\xe0\xef\x89\x57\x67\x3d\xbd\xa3\xd3\xfd\x2d\x42\x58\x20\x3e\xd7\x36\xe2\x1d\x21\xc4\xbf\xaf\x91\x80\x10\x5d\x81\xdd\x70\x10\xa6\xcd\x5d\x63\xd6\x42\xf3\x26\x76\x84\x95\x5f\xf4\x11\xd5\x78\x6e\x0c\xc8\x5d\xb3\x39\x76\x52\xa5\x8f\xbb\x57\xca\x1d\x7c\xf4\x9d\x74\xaa\xeb\x07\xd0\x93\xc8\x13\x5e\x5f\xd9\xfe\x3a\xb7\x3f\x88\x9a\x8f\xc8\x07\x84\xa9\x44\xf8\xb8\x86\xca\x47\x00\x00\x00\xff\xff\x82\x8a\xe4\xa1\x97\x02\x00\x00")

func _templateRegistryTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateRegistryTmpl,
		"_template/registry.tmpl",
	)
}

func _templateRegistryTmpl() (*asset, error) {
	bytes, err := _templateRegistryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/registry.tmpl", size: 663, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateStringTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x41\x6a\xc3\x30\x10\x45\xf7\x3a\xc5\x47\xa4\x20\xa5\xad\xb3\x2f\x78\xd1\x0b\x74\xd1\x1e\xa0\x84\x78\x54\x06\xac\xc1\x48\x8a\xa1\x88\xb9\x7b\xb1\x94\x42\x82\xb5\xd0\x62\x78\xff\xfd\x5f\xeb\x44\x81\x85\x60\x73\x49\x2c\x3f\xdf\x13\x25\x5e\xc9\x42\xb5\x56\x1c\x32\xde\x46\x1c\xa0\x6a\x4e\x27\x7c\x35\x02\x1c\x97\x99\x22\x49\xc9\x08\xb1\x0c\xfd\x4a\x69\x30\xe1\x2a\x17\xb8\x16\x1b\x3e\xe9\x42\xbc\x52\x82\x2a\x8e\xfd\xf4\x71\x8e\x04\x55\x7f\xf3\x38\x8f\x5e\x89\x6a\x00\x80\x03\xf6\xd1\x71\x84\xf0\x7c\x23\xb6\x97\xa8\x5c\x93\xc0\x6e\xe8\xbf\xd1\x09\xcf\xde\x36\x44\xdb\x5f\x7e\x17\xc2\xfb\xcc\xe7\x8c\x87\x6a\x73\x67\x68\xd3\x97\xc4\x52\x82\xb3\x0f\xd4\xd3\xf3\x6a\x5f\x7a\xdc\x1d\x77\x93\xbc\x37\x6a\x6a\x7d\x05\xc9\xb4\x29\xff\x02\x00\x00\xff\xff\x8e\xb7\x67\x0a\x41\x01\x00\x00")

func _templateStringTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateStringTmpl,
		"_template/string.tmpl",
	)
}

func _templateStringTmpl() (*asset, error) {
	bytes, err := _templateStringTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/string.tmpl", size: 321, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateUtilsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x5d\x6b\xdb\x30\x14\x7d\x2f\xf4\x3f\x1c\x82\x19\x49\x48\x6d\xf6\x6a\xe8\xcb\x1a\xb6\x97\x31\x0a\xdb\x9e\x4a\x09\x8a\x75\xed\x89\x28\x92\x27\x2b\x5b\x8b\xd0\x7f\x2f\x57\x76\xd2\x38\xcd\x07\x04\x4b\xf7\x1e\xdd\x7b\xce\xd1\x55\x08\x90\x54\x2b\x43\x98\x38\xfa\xbb\xa3\xce\xaf\x5a\xe1\xc4\xb6\x9b\x20\xc6\xca\xbf\xa0\xb2\xc6\xd3\x8b\xcf\x1f\xfa\x6f\x08\x77\x50\x35\xf2\xdf\xa6\x15\xd5\xe6\x91\xa1\xe4\xc9\x75\x88\x71\x9f\xfa\xaa\x48\x4b\x0e\x2c\x6e\x6f\x38\xe6\x84\x69\x08\x59\x8d\xf2\xfe\x28\x19\x02\xb4\xfd\x4f\x0e\x59\x9d\xff\x10\x5b\x42\x8c\x08\x01\x9e\xb6\xad\x16\x9e\x30\x69\x9d\x32\x7e\xe5\x5f\x5b\x9a\xf0\xe1\x18\x17\x5c\x8c\x8c\x8c\xb1\xaf\x4b\x46\xe2\xb0\xd6\x1d\x57\x58\x60\x10\x81\x79\x08\xd8\xd7\xfd\x00\x1e\xd6\xbc\x3b\xa8\x67\x39\xab\xe1\xf4\xe4\x48\xcd\x19\xa1\xb7\x37\x00\x0e\x9d\xca\x7b\x7c\x0a\x01\xd9\xa1\x5b\x9f\xe6\xdf\xa9\xfa\xec\x5d\xfe\x31\xe8\xc8\x82\x12\x67\x7c\x59\x8c\x2b\xee\xe9\xf3\x7e\xa4\xe8\xb2\xb6\x23\x2b\xf7\x26\xa8\x1a\x59\xbe\xb4\xbb\xb5\xa6\x9f\x5a\x55\xdc\xe7\xe9\xf9\xe9\x39\x29\xf9\xf5\xda\xd2\xd8\xda\x84\x7e\xc7\x5d\x40\xa5\x5b\x3d\x4d\x5c\xa7\xd6\x90\xf7\xe4\x56\xf5\xce\x54\x27\x04\x8b\x79\x63\x39\x52\xa2\x51\xfe\xcf\x6e\x9d\x57\x76\x5b\x34\xd6\xcb\xc2\xcb\x42\x19\x4f\xce\x08\x5d\x34\x64\xf2\x9a\x4d\x5d\x52\x3d\x2f\x70\xc7\xa7\xbf\x91\x0f\xa1\xbf\x8f\x18\xa7\x33\x4c\xff\x09\xbd\xa3\x2b\xd3\xd5\x13\x57\x35\x84\x91\x98\x66\x3c\xeb\x52\x79\x65\x8d\xd0\x33\x4c\x8d\xf5\x18\xc5\xbe\x58\xab\x67\x69\xda\xec\x06\x6b\x6b\x75\x08\x83\xb8\xd9\xb5\x01\x4b\x1d\xb5\x32\x9b\xae\x17\x59\x14\xfc\xc7\x77\x8e\x94\xa3\xa7\xa2\x16\xc8\x18\x98\x5e\xcc\x80\x4d\x83\x22\xa4\x44\xa6\xf0\x99\x5b\xa5\xc1\x49\xa8\xb3\x0f\xe2\x32\x05\x72\xce\xba\x31\x87\x47\xdb\x75\x6a\xad\x09\x7d\x6e\xcc\x86\x9c\xfb\x40\x84\x83\xf9\x83\x95\xfb\x67\x9b\xf6\xc3\xbd\x97\x87\xc0\x92\xba\xca\xa9\x96\x5d\xbb\x4a\xf2\x2d\x00\x00\xff\xff\x95\x8e\x6e\x6d\x85\x04\x00\x00")

func _templateUtilsTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateUtilsTmpl,
		"_template/utils.tmpl",
	)
}

func _templateUtilsTmpl() (*asset, error) {
	bytes, err := _templateUtilsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/utils.tmpl", size: 1157, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateZeroTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xcd\x6a\xdc\x30\x10\xbe\xfb\x29\xa6\xc2\x07\x7b\xc1\x72\xbb\x90\x50\x02\x7b\x4a\x28\xf4\xd2\x96\xa6\xa7\x5e\x82\x6c\x8f\xbc\x2a\x5a\x69\x2b\x8d\x43\x53\xa1\x77\x2f\xb2\x37\xb1\x93\xdd\x26\xac\x4f\xd2\x68\xbe\xf1\xf7\x23\x85\x00\x1d\x4a\x65\x10\xd8\x5f\x74\xf6\xae\x43\xa7\xee\x91\x41\x8c\x21\x40\xee\xe1\x6a\x03\x1c\x62\xcc\x42\xa8\xa0\x5e\xf5\x96\x1e\xf6\x78\x05\xbd\xa2\xed\xd0\xf0\xd6\xee\xea\xde\x52\x57\x53\x57\x2b\x43\xe8\x8c\xd0\x75\x8f\x86\x7b\x72\x43\x4b\x37\x28\x57\x35\x54\x31\x66\x72\x30\x2d\x14\xe3\x44\xfe\x1d\x5b\x54\xf7\xe8\x20\x46\x58\x4d\xa5\x2f\x62\x87\x10\x63\x09\x3f\xd1\xd9\xa2\x84\xc6\x5a\x0d\x21\x03\x00\x50\x12\x8e\x61\x9b\x0d\x18\xf5\xd8\x91\x3e\x87\x34\x38\x03\xe4\x06\x1c\x6b\xe7\xf2\x95\x0a\x75\x37\xd3\x4d\x60\x27\x4c\x8f\x90\xcb\xe4\x40\xee\xf9\xa7\xd4\xe1\x47\x5b\xaa\x44\xca\x20\x14\xb9\x1c\x99\x97\xe3\xea\xda\x9a\x4e\x91\xb2\x46\xe8\xb1\xb7\x4c\xae\x1d\x14\xbc\x3b\x96\xce\x43\x20\xdc\xed\xb5\x20\x04\xd6\xda\xdd\x5e\x38\xbc\x4b\x09\x30\xc8\x65\xb2\xe2\x48\x9c\x14\xda\x2f\xd5\xa1\xe9\x0e\x74\xa6\x55\x96\xbd\x74\x62\xee\x4b\xa2\xb2\x45\xd4\xcf\x7f\x78\x76\xbc\x27\xec\x9a\x32\x7c\xdc\x29\x09\xd6\x41\xc1\x6f\xb5\x6a\x93\x3f\xfc\xc6\x0e\x8d\xc6\xc3\xb6\x7a\x8a\x70\x22\xa8\x3d\x26\x04\xfe\x86\x82\xff\x78\xd8\x27\x00\x6b\x94\xe1\x9f\x0d\x7d\x58\x7f\x64\x4f\x80\xb9\x16\xe2\x9b\xc8\xf5\xc5\xe5\x11\x72\x7d\x71\xf9\x02\x99\x58\x6e\x85\xff\xe6\x50\xaa\x3f\x8b\x21\xca\x10\x2b\xcb\xd3\x67\x52\x5b\x31\x9e\x4e\xb3\xdf\xff\x9f\x8a\x27\xa7\x4c\x3f\xd3\x60\xec\x15\xda\xd6\xea\xb9\x73\x0a\xfb\x55\x8d\x5f\x9b\x5f\xd8\x12\x2b\xe1\xb4\x9b\x5b\xe1\x6f\x07\xf9\x9c\xf9\xb5\x16\xde\x9f\x46\x54\x31\xf2\xe9\xf5\x2d\x2f\xcd\xe2\x76\xfd\x0b\x00\x00\xff\xff\x84\x08\x29\xb3\x29\x04\x00\x00")

func _templateZeroTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateZeroTmpl,
		"_template/zero.tmpl",
	)
}

func _templateZeroTmpl() (*asset, error) {
	bytes, err := _templateZeroTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/zero.tmpl", size: 1065, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/client.tmpl":   _templateClientTmpl,
	"_template/errors.tmpl":   _templateErrorsTmpl,
	"_template/handlers.tmpl": _templateHandlersTmpl,
	"_template/header.tmpl":   _templateHeaderTmpl,
	"_template/main.tmpl":     _templateMainTmpl,
	"_template/registry.tmpl": _templateRegistryTmpl,
	"_template/string.tmpl":   _templateStringTmpl,
	"_template/utils.tmpl":    _templateUtilsTmpl,
	"_template/zero.tmpl":     _templateZeroTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"client.tmpl":   &bintree{_templateClientTmpl, map[string]*bintree{}},
		"errors.tmpl":   &bintree{_templateErrorsTmpl, map[string]*bintree{}},
		"handlers.tmpl": &bintree{_templateHandlersTmpl, map[string]*bintree{}},
		"header.tmpl":   &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":     &bintree{_templateMainTmpl, map[string]*bintree{}},
		"registry.tmpl": &bintree{_templateRegistryTmpl, map[string]*bintree{}},
		"string.tmpl":   &bintree{_templateStringTmpl, map[string]*bintree{}},
		"utils.tmpl":    &bintree{_templateUtilsTmpl, map[string]*bintree{}},
		"zero.tmpl":     &bintree{_templateZeroTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
