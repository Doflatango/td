// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/client.tmpl
// _template/header.tmpl
// _template/main.tmpl
// _template/registry.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfe\x8a\xc1\x84\x92\x94\xe0\xdc\x03\x3d\xa5\x3d\x14\xda\x12\x4a\x7e\x40\x95\xd7\x89\x88\xbd\x12\xeb\x75\x92\x22\xf2\xef\x45\xb2\xd2\x93\x96\xa7\xd1\x68\x66\x63\x44\x4b\x9d\x63\x42\x6d\x7b\x47\xac\x35\xee\xf7\x2a\x46\x2c\xc2\xf9\x88\xed\x0b\x16\xcd\xde\xd8\xb3\x39\x52\xe1\x4a\x43\xe8\x8d\x12\xea\x13\x99\x96\xa4\xc6\x22\xdd\x54\x9b\x0d\xde\xf9\xe2\xcf\x24\xb0\x86\xe1\xf2\x0c\x31\x57\x7c\x1e\xf6\xe2\xd5\x43\x82\x85\x35\x7d\x3f\x36\x95\xfe\x06\xfa\x97\x3b\x56\x92\xce\x58\x42\xac\x50\xe8\xb7\xb9\x2e\xad\xde\x60\x3d\x2b\xdd\xb4\xd9\xcd\xe7\x1a\x8e\xc3\xa4\xf8\x71\xdc\xbc\xb1\xf5\x2d\xc9\x1a\x7e\xd2\x07\x7b\xa5\xcc\x56\x20\x11\x2f\xd5\x1c\x6b\x97\x7b\xc1\x0d\xa1\xa7\x21\x4d\x03\xe9\xc9\xb7\x23\x3a\x2f\x39\x90\xe3\x23\xba\x89\xad\x3a\xcf\x23\x3a\xf1\x03\x0e\x1f\x18\xed\x89\x06\x83\x8b\x33\x8f\xa4\x25\x77\xf1\x1b\x55\x26\xab\x39\x73\x6a\x56\x34\xe9\xcf\xe4\x85\x2f\xba\xce\xc2\xa5\x2b\x3d\x8b\x62\x85\xe7\xe2\x90\x9f\x92\x4e\xc2\x78\x9a\x51\x22\xd9\x6e\x5b\x16\x28\xeb\x0a\xb8\x27\xd3\x18\x41\xdc\xa6\x55\xff\x05\x00\x00\xff\xff\x88\xcc\x3e\xfd\xb3\x01\x00\x00")

func _templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateClientTmpl,
		"_template/client.tmpl",
	)
}

func _templateClientTmpl() (*asset, error) {
	bytes, err := _templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/client.tmpl", size: 435, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x41\x6a\xc3\x30\x10\x45\xf7\x73\x8a\x8f\xe8\x22\x86\x56\x3e\x41\x37\x69\xba\xe8\x26\x29\x34\xfb\x22\x5b\x23\x45\xb8\x1e\x19\x75\x5c\x5a\x84\xee\x5e\x4c\x42\x96\x33\x1f\xde\x7b\xb5\xc2\x73\x48\xc2\x30\x17\x76\x9e\x8b\x41\x6b\xd4\xf7\x78\xc9\x9e\x11\x59\xb8\x38\x65\x8f\xe1\x0f\x31\xab\x8f\x2c\x8f\x38\x9c\x70\x3c\x9d\xf1\x7a\x78\x3b\x5b\xa2\xc5\x8d\x93\x8b\x8c\x5a\xf1\x60\xdf\x6f\x47\x6b\x44\x69\x5e\x72\x51\xec\xc8\x8c\x59\x94\x7f\xd5\x90\x09\xb3\x1a\x22\x13\x93\x5e\xd6\xc1\x8e\x79\xee\x37\x6a\xaf\xbe\x1f\x92\x18\xea\x68\x53\x1f\xf3\x53\x5e\xae\x59\x49\x53\x16\x84\x5c\x30\x31\x2f\x49\x22\xae\xd4\x6f\x4b\x3f\xae\xe0\x13\xcf\x18\x92\xd8\xfd\x1a\x02\x97\xda\xee\xcf\x9b\xd1\xee\xdd\x38\xc5\x92\x57\xf1\xbb\xee\x3e\x86\x59\xed\x87\x96\x24\x91\xcb\x4e\xd2\x57\x47\x54\x2b\x58\xfc\x96\xfd\x1f\x00\x00\xff\xff\xd8\x6f\x86\x9d\x11\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 273, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\xdd\x73\xdb\x36\x12\x7f\xd7\x5f\xb1\xf5\xb8\x39\x32\x55\xe8\x3e\x3b\xf5\xc3\x39\x4e\x2f\x9a\xe9\xf5\x32\x71\x73\x2f\x9d\x4e\x86\x22\x97\x32\xc6\x14\xa8\x03\x40\x49\x39\x56\xff\xfb\x0d\xbe\x48\x90\x04\x3f\xac\x71\x73\x4d\xf5\x62\x1a\x04\x16\xbb\xbf\x5d\xec\x17\x58\x55\x90\x62\x46\x28\xc2\xc5\x36\x26\xf4\x02\x4e\xa7\x45\x55\xc1\xe5\xee\x71\x03\xd7\x37\x70\x19\xbd\x8f\x93\xc7\x78\x83\x66\x5c\xe0\x76\x97\xc7\x02\xe1\xe2\x01\xe3\x14\xd9\x05\x5c\xca\x37\xf2\x15\x8b\xe9\x06\xe1\x92\xab\x55\xf7\x82\x95\x89\xe0\xf2\xdd\xd5\x15\x48\x82\x3c\x7a\x53\x6c\xb7\x48\x85\x1c\x13\x9f\x77\x68\x46\x7f\x8e\xb7\x92\x38\x70\xb5\x02\xaa\x45\x55\xbd\xb2\xb4\x32\xc5\x02\x8f\x7e\x24\x98\xa7\x8a\x18\x00\x80\x21\x98\xb9\x04\xe5\x22\x92\x41\x4c\x53\x08\xd4\x1b\x9a\x12\x41\x0a\x1a\xe7\x21\x04\xb4\x10\xd0\x1e\xbc\x2d\x8a\x3c\xd4\xcc\x49\xfe\x3e\x72\x84\x7b\x14\x9a\xaa\x65\x48\xd2\xfa\x47\x77\xf0\x01\xf3\x1d\x32\x1e\xa9\x0d\x91\xa6\x96\x27\xb3\xff\x65\x16\xdd\x15\xe5\x3a\xc7\xfb\x9c\x24\xd8\xbc\x74\x49\xfc\xfa\xdb\xaf\xbf\xe9\x91\x5f\x24\x0a\x0e\x01\xcc\x39\x1a\x2a\xa3\xeb\x47\x56\x7b\x57\x0c\xcc\xd7\xdc\x3b\x8f\xa7\x45\xa3\x2c\xb3\x56\x2e\x5a\xdd\x01\xe1\xf0\xcb\x4f\xa0\xb4\x46\x52\x28\xb2\xf6\xa4\x68\x91\x14\x94\x0b\xef\xca\x1b\xf8\xfe\xa8\xc7\xdf\xe1\x71\x75\x07\xa7\xd3\x6b\xb5\xcb\x5b\x9a\x14\x29\x02\xd9\xee\x72\x94\x4a\xe4\xb0\x26\x34\xd2\xa3\x2c\x5a\x64\x25\x4d\x20\xd0\x0b\x3f\x60\x82\x64\x8f\x4c\x8a\xf2\xb2\xb5\x47\x68\xc8\x98\x89\xb7\x65\xf6\x77\xb6\x51\xd3\x24\xb1\xdb\x32\xcb\x90\x85\x80\x8c\x15\x0c\x2a\x25\x38\xb1\xac\xbb\x44\x6f\x6e\x80\x92\xdc\xcc\x90\x3f\x86\xa2\x64\x14\xb2\xad\x88\xde\xca\xc5\x59\x70\x91\xc4\xf4\x6f\x02\x50\x73\x6d\x48\xc4\x07\x83\x29\xc4\x5c\x52\xb8\x08\x15\x05\x7d\x80\x1c\x76\xa2\xf7\xa5\x58\xdd\x05\x1e\x78\xc2\x69\x6b\x37\x96\xe5\xb7\xe1\xbe\xf9\x39\x13\xec\x4b\x9f\xcc\x91\x3d\x41\xf5\x6c\xb5\xab\x7c\xf3\x2e\xe6\x41\xef\xed\x8a\xa6\x78\x54\x88\x57\x5d\x03\x6a\xef\xff\x6f\x4c\x44\xc1\x5c\x3b\xec\x00\xa1\x27\xbc\x53\xde\x23\xc8\x91\xf6\x95\x1c\xb5\xac\x37\xd4\xa0\x66\x52\x85\x95\xd9\xc4\x98\x09\x9c\x4e\x24\x95\xd6\x65\x4c\xff\x93\x7c\x54\x4c\x2d\x7b\x07\xb2\xe6\x8b\x15\x87\xaa\x92\x0b\x4e\xa7\x7d\x55\x21\x4d\x4f\x27\x89\xbb\xd6\xc1\x04\x2f\x8e\xf0\x5e\xda\xb5\x01\xcd\x91\x9b\x15\x07\x23\x9b\x95\xef\xd3\x12\xf6\x0d\x2f\xac\x38\x4c\x81\xdd\xe0\xe0\xec\x6c\x5f\xae\xa8\x40\x96\xc5\x8d\x1b\xb1\x3f\x92\xc1\xbe\x6f\xf3\x03\x76\x5f\xd2\x78\x9d\x23\x88\x62\xc8\xf6\xaf\x21\x53\x96\xa3\x81\xfa\x10\x1f\x2c\x56\xa8\x0f\x36\x1c\x88\x78\x00\xa2\xec\xe7\xdb\x54\x7a\x12\x79\x52\x96\x40\xd2\x63\xd8\xda\xbc\x2d\x83\x52\xcc\xc2\x61\x19\x19\x93\xd8\xec\x23\xff\x91\x0f\x5f\xab\x19\xdf\xfc\x7f\xc4\xba\x86\x6f\x0f\x5a\xa6\xa5\x64\xa3\x11\xcc\xef\x9e\x07\x4c\x44\xef\xf5\xa3\x74\x7d\xa7\x53\xb0\x0f\xc7\x95\x3f\x64\x7b\x3d\x0f\x3f\xcc\xc7\xa0\x25\x8d\x58\xd1\x88\x37\xb1\x10\xcd\xf1\xa7\xe7\x2b\x80\xb4\x7d\x6d\xdf\x60\x1a\x63\x99\x60\xf4\x89\xa6\xf4\x9c\x52\x18\x83\xa9\x6d\x65\x38\x8c\x8f\xda\xc8\x94\xef\x1c\xb2\x20\xaf\x41\x79\x42\xc7\xe0\x8a\x7e\xf2\xe0\x20\x44\x49\xbe\x50\x39\xe1\x48\x68\xab\x7d\x79\x67\xd7\xab\xab\x7e\x26\xc6\x51\x70\xd8\xc7\x79\x89\x36\xf5\x68\xde\x25\xce\x72\x05\xf5\xfc\xdc\xa1\xbb\x4f\xa0\xb7\xa8\x39\x6b\x67\x72\x26\x6d\xf3\xe4\x68\x7a\x5c\xa1\xd0\x4e\xb5\x42\x93\xcd\xf6\x04\x75\x43\xb7\xf4\xc6\x7a\xdf\x8e\x6b\x98\x17\xad\xef\x51\x8c\x44\x6b\xad\x44\xcd\xf4\x79\xf4\x3f\x52\x3e\x63\x87\x85\xdf\x72\x9f\x4d\x84\x49\x8f\xa3\x31\xec\x24\xb3\x93\xa9\xd3\xd5\x55\x3f\xc3\xd7\x36\x3c\xdf\xde\x64\x9d\x20\x09\xad\x8b\x22\xc7\x98\xc2\xe1\x81\x24\x0f\xd2\x49\x09\x56\x2a\x4b\xd1\xb3\x0e\x31\x97\x76\x3c\xdf\x3a\xbb\x8c\x05\x21\x3c\x83\x81\xb6\xec\x73\x09\xc5\xa3\xe2\x3b\x6c\xb2\xe3\x6f\x9e\x3d\x55\x74\x1c\x83\xe2\x7f\x09\x59\x9c\x73\x74\xfc\x8b\x79\x3b\xa1\xe4\xa5\x42\xd4\xea\xd5\x68\x79\xe1\x77\x46\x52\x21\x77\xe8\xab\x30\xf4\xe8\x13\x2a\x0c\xbd\xe0\x8b\x55\x18\x29\xfa\x2b\x0c\x51\xf4\xa2\x5e\x37\xce\x35\x71\xe2\x4d\x41\x79\xb9\xc5\x81\x9a\xe3\x9c\xf0\x36\xc0\x56\x3f\x8c\xcd\xad\x67\x86\x1d\xe2\xbc\xf3\xfe\x7c\x66\x3a\x92\xa1\x79\x38\xed\xe7\xd2\x7f\xc8\x81\xb1\xfc\x74\xb6\xab\xba\x39\xb2\x9f\xdf\x7e\x52\x28\x7f\xba\x63\xf3\x13\xd2\xe5\x90\xdd\xb4\x6a\x94\xb0\x2b\xe8\x60\x7e\x7d\xbe\xf5\xcc\x4b\x8e\xec\xaf\x2d\x8e\xac\x98\x48\x7a\x94\x72\x7c\xff\x5a\x3d\xfd\xd0\x88\xa8\x06\xbe\xfb\x0e\xaa\x45\x1b\xbf\xc9\xec\xb9\x96\x97\xd2\xb3\xb1\x9a\x83\xd7\x97\xc2\xac\x8f\x9b\xfc\xed\x63\xa6\xea\x4b\x5f\x2f\xa9\x87\xb1\x44\x42\xdb\xa8\x81\xba\x19\xf8\xa1\xc6\xe9\x75\xfd\xa4\x50\xef\x82\xde\x31\x55\x98\x57\xa9\x6a\x56\x55\xcc\x30\x5a\xd0\xde\x58\x33\x5d\x2f\x6b\x67\xc3\x4d\x1e\xff\x15\x29\xa5\xd3\xfe\xf3\x14\xf6\xae\xea\xea\x3c\x60\x44\x75\x4e\xc9\x2c\x67\x47\xfe\x38\x36\x56\x36\xff\x39\x10\x99\x34\x89\xee\xc1\x6c\x57\x48\x5f\x9d\x11\xf4\x0f\x0a\x3c\xc9\x71\x29\xf6\x8b\x03\xdc\x40\xbc\xdb\x21\x4d\x03\x56\x1c\x96\x1a\xb2\x39\x9e\x61\x3a\xf2\x1a\xb2\x93\xd9\x1a\x2b\x0e\xfd\x0d\x7d\x71\xf6\xf9\xb7\x1e\x90\x76\x00\xdf\x53\x2f\xea\x3e\xb1\xa1\xf6\x5c\x2e\xea\xcf\x17\x63\xe7\xd6\x5d\x3d\x00\x47\xdd\xd8\xfc\x06\xcd\x79\x4e\xeb\xcb\xe2\x34\x64\xd2\xe7\x7b\xa9\xbf\x88\x1d\xf4\xb3\x53\x7f\x43\x72\x56\x2b\x49\x59\x14\x6f\x9f\xc1\xab\x2b\x50\x17\x4f\xea\xe2\xd0\xa9\xf3\xea\xc1\x82\x35\x77\x55\xee\xca\xe1\xea\xaf\x53\xfc\xd5\x94\x82\xd0\x43\x06\x2a\xcb\xe6\x8b\x3e\x25\xd5\xe2\x72\xca\xd1\xb7\x94\x97\x8c\xd0\x0d\x10\x4b\x81\x03\xa1\x90\x14\xdb\x1d\xc9\xf1\x95\x20\x5b\xb4\x97\x1c\xee\xcd\x9a\x0c\xf7\xc1\xe2\x93\x7b\x3b\x06\x37\x76\x3f\x33\xab\x3a\x99\x09\xa6\xb8\xf5\x4d\xf0\x23\xf8\xc9\x27\x95\x7f\xb5\x11\x25\xac\xdb\x2a\x97\x3c\xfa\x27\x8a\x87\x22\x6d\x5d\xf2\xd6\x43\x40\xe8\xbe\x78\x44\x0e\x5b\x3d\xd2\xab\x68\x35\x74\x12\x11\x5d\x3e\xab\xeb\xdb\xcf\x91\x43\xfe\x03\xf2\x32\x77\xaf\x77\xeb\xb1\x7b\x42\x37\x65\x1e\x2b\xcf\xa2\x55\x99\xc0\xcb\x37\x39\x41\x2a\xc2\x2e\x23\x41\x22\x8e\x52\x91\x02\x8f\x42\x96\x5d\xf2\xef\x12\x18\xfe\xa7\x44\x2e\x7a\xe5\x7e\xf0\xd2\xaa\xd2\xec\xbd\xd4\xec\xd9\xe2\x4c\x65\xce\xfa\x5d\x67\x62\xa7\x26\x4f\x22\xb6\x4b\xa2\x95\x02\xe1\x43\x7c\x90\x5c\xd4\xbb\x2e\xe1\x85\xa6\x31\x51\x8b\x53\x92\xab\xed\xfb\xbd\x12\xb3\x7e\x69\x0e\x88\xeb\x83\x9e\x19\x8f\xb3\xe0\x30\x7e\xed\xb6\x38\x7e\x51\x54\xf4\xf2\xc8\xe5\xe4\x36\xe6\x58\xe7\x05\x0e\x58\x8e\xd3\xf9\x43\x70\x73\x5b\x42\x12\xa4\xe2\x11\xfe\xf5\xf8\x34\x30\x8a\xc7\x09\x20\xbc\x18\xf8\x65\xb4\x8f\x4e\xdf\xac\x6e\xd3\xa8\x0f\x36\x56\x8d\x57\x6a\x8e\xb3\xdb\x15\xdd\x31\xe4\xca\xbb\xd6\x11\xc4\x1e\xe4\x0d\x52\x64\x24\x51\x9f\x07\x44\xe6\x8b\x8a\xb7\xc7\x58\xfa\xe3\x6b\xf9\x0c\x1b\x6f\x6e\x64\x63\xdf\xba\xcc\x42\x35\xad\x1b\xf6\xe4\x98\xfc\xed\x62\x4a\x92\x40\x45\x28\x39\xa4\xb8\x03\x7e\x20\x22\x79\xd0\xf7\xa5\x9b\x28\x90\x7b\xeb\x76\xbb\x15\x2b\x51\xdd\x27\xd5\x68\xb1\xc1\x80\xc3\x2b\x2d\x1b\x24\x31\x47\xad\xb2\x24\xaa\x03\xa1\x11\x3a\x71\x64\xb3\x88\xd9\x75\x29\x66\x71\x99\x8b\x6b\xc3\xd3\xde\x72\x54\x7f\xcf\xd2\x20\x56\xbb\x79\xa3\x37\xc7\x81\xd7\xff\x1b\x7f\xad\xfe\xef\x86\x9a\x9a\xd2\xc2\x6d\x67\xb6\xa0\xeb\xf4\x36\x63\xf6\x19\x52\x7c\xc5\x91\x91\x38\x27\xff\x8d\x05\x29\x68\x1d\x52\x9a\x9c\x4a\x1b\xba\x8f\x9c\x54\x45\xbb\xb1\x19\x74\x12\xeb\xd6\xd9\x27\x69\xad\xd7\x75\x99\x45\xef\x11\x1f\x57\x77\x26\x95\x19\x4a\x61\x86\x8f\xb0\x51\x28\x49\x9d\x4b\xef\x31\x55\x1a\x87\xab\x34\xd9\x52\xa4\xee\x72\x5e\xd7\x5b\x5a\xec\x64\xa4\xe9\xea\x37\xaa\x67\xed\x6d\x92\x96\x38\x61\xaf\x93\x90\xa9\xeb\x67\x93\x92\x4a\xab\x9d\xbe\x72\x56\x72\x4e\xe6\x69\x59\x34\x92\x8c\x9d\xba\xd8\xbd\xd8\x6b\x47\xe6\x49\xaa\xac\x79\x7a\xe1\x7e\x32\x1b\xd2\x10\x7e\xc6\xc3\x47\x8a\xc7\x1d\x26\x02\xd3\xd5\x5d\x40\xd2\xd0\x76\x7a\x9b\xaf\x85\x1a\x0b\x5a\x17\x47\xe4\x20\x1e\xba\x87\x61\xc7\x8a\x3d\x51\x1a\x88\xcd\x27\x54\x91\x7b\x66\x9a\x70\xd1\x7c\x06\x06\xf5\x67\x4c\x8e\x0b\x1f\x39\x19\x03\x8d\x7e\xe7\x00\x34\xbb\xd8\xfc\x6f\xad\x7d\x80\xfb\xaa\x6e\xf8\xf7\xce\x42\xa7\xc9\xbf\x7e\xe2\x35\x77\x0b\x68\x47\x60\x4f\x63\x7f\x3f\xed\x2f\x67\x9c\xb1\x51\x36\xa4\xa2\x52\x9d\xb4\xfb\xaf\xa2\xd7\x51\x1f\xfc\x1b\xd8\x7b\x72\xf3\x89\x8f\xb9\x9e\xae\x00\x73\x2b\x3f\x5b\x01\xbf\xff\xee\xe7\xf6\xdc\xfb\x7b\xe7\x13\xc0\xfe\xa7\x06\x86\x88\x67\xc3\xa8\xe1\x3b\x5c\x74\x63\xad\x79\xfc\x5f\x00\x00\x00\xff\xff\x29\xfe\x95\xf9\x6e\x29\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 10606, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateRegistryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x31\x4b\x04\x31\x14\x84\xfb\xfc\x8a\x21\x6c\xa1\xa0\x7b\xa2\xdd\x81\x9d\x85\x82\x82\x1c\xd7\x89\xc5\xe3\x76\x36\x86\xbb\xe4\x42\x92\xc5\x5b\x42\xfe\xbb\xc4\x5d\xac\x2c\xdf\x0c\xf3\xf1\xbe\x52\x30\x70\xb4\x9e\xd0\x91\xc6\xa6\x1c\x67\x8d\x5a\x55\x29\xe8\xc2\xd1\x60\xfb\x88\xae\x7f\x97\xc3\x51\x0c\xd7\x3c\xd3\x85\x93\x64\x42\x7f\x51\x06\x46\x8d\xae\x35\x6a\xb3\xc1\x7e\x0e\x4c\x88\xcc\x53\xf4\x09\x4e\x42\xb0\xde\x60\x8c\x67\x87\x3c\x07\xc2\x0e\x09\xf9\x8c\xfd\xeb\x72\x7a\x71\x4c\xbd\x1a\x27\x7f\x58\xa6\x6f\x12\xae\xae\xdb\xee\x63\xb2\x3e\x3f\xdc\x7f\xa6\x1c\x1b\xa1\x28\xac\xd4\x7f\xcb\x52\x6e\x11\xc5\x1b\xa2\xe3\x89\x6e\x79\x7a\xb7\xea\xb4\xdf\x00\xe0\xee\xd2\x9c\x5a\xdf\x3f\xf3\xf2\xf2\x84\x5a\xb7\xd0\x7f\xd9\x4e\xbe\x51\xab\xbe\xf9\x85\xd1\x0f\xcb\xac\xaa\xaa\x9a\xf3\x1a\xfc\x04\x00\x00\xff\xff\x97\x1b\x2c\x20\x2e\x01\x00\x00")

func _templateRegistryTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateRegistryTmpl,
		"_template/registry.tmpl",
	)
}

func _templateRegistryTmpl() (*asset, error) {
	bytes, err := _templateRegistryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/registry.tmpl", size: 302, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/client.tmpl":   _templateClientTmpl,
	"_template/header.tmpl":   _templateHeaderTmpl,
	"_template/main.tmpl":     _templateMainTmpl,
	"_template/registry.tmpl": _templateRegistryTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"client.tmpl":   &bintree{_templateClientTmpl, map[string]*bintree{}},
		"header.tmpl":   &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":     &bintree{_templateMainTmpl, map[string]*bintree{}},
		"registry.tmpl": &bintree{_templateRegistryTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
