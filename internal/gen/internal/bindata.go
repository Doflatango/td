// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/client.tmpl
// _template/handlers.tmpl
// _template/header.tmpl
// _template/main.tmpl
// _template/registry.tmpl
// _template/utils.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\x41\x6b\x83\x40\x10\x85\xef\x82\xff\xe1\x21\xa1\x24\x25\x98\x7b\xa0\xa7\xb4\x87\x42\x5b\x42\xc9\x1f\xd8\xae\x63\xb2\x44\x67\x65\x1c\x93\x94\xc5\xff\x5e\x5c\xd7\x9e\x1c\xbe\x79\xbe\x7d\x6f\x42\x40\x45\xb5\x63\x42\x61\x1b\x47\xac\x05\xc6\x31\xcf\x42\xc0\xaa\xbb\x9e\xb1\x7f\xc1\xaa\x3c\x1a\x7b\x35\x67\x5a\x16\x4a\x6d\xd7\x18\x25\x14\x17\x32\x15\x49\x81\x55\x5c\xe5\xd9\x6e\x87\x77\xbe\xf9\x2b\x09\xac\x61\xb8\x38\x43\xcc\x1d\x9f\xa7\xa3\x78\xf5\x90\xce\xc2\x9a\xa6\xe9\xcb\x3c\xd3\xdf\x8e\xfe\xf5\x8e\x95\xa4\x36\x96\x10\xf2\x0c\x09\x7f\x9b\xfb\xda\xea\x03\xd6\xb3\xd2\x43\xcb\xc3\xfc\xdd\xc2\x71\x37\x28\x7e\x1c\x97\x6f\x6c\x7d\x45\xb2\x85\x1f\x74\x61\xaf\x14\xd9\x06\x24\xe2\x25\xcf\x96\x6c\x87\x58\x10\xae\xed\x1a\x6a\xa7\xa9\x25\xbd\xf8\xaa\x47\xed\x25\xa6\x72\x7c\x46\x3d\xb0\x55\xe7\xb9\x47\x2d\xbe\xc5\xe9\x03\xbd\xbd\x50\x6b\x70\x73\x66\x49\xbb\x84\x4f\x86\xbd\xca\x60\x75\x0e\x3e\x15\x4c\xaa\xf4\xf0\x64\x88\x2f\xba\xcf\xe2\xb5\x4b\x85\x93\x68\x83\xe7\xe4\x32\xff\x4e\x3a\x08\xe3\x69\x66\x11\x45\xcf\x7d\x3a\xa6\x6c\x27\x34\x26\xeb\x10\x40\x5c\xc5\xe3\xff\x05\x00\x00\xff\xff\x6e\x86\x44\xb6\xc8\x01\x00\x00")

func _templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateClientTmpl,
		"_template/client.tmpl",
	)
}

func _templateClientTmpl() (*asset, error) {
	bytes, err := _templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/client.tmpl", size: 456, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHandlersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4b\x6f\xda\x40\x10\x3e\x1b\x89\xff\x30\x41\x1c\xec\x88\x9a\x3b\x91\x4f\x89\xaa\x70\x49\x23\xb5\x39\xa1\xa8\xda\x9a\x71\x58\x61\xd6\xee\xee\xba\x21\xb5\xfc\xdf\xab\xd9\x07\xac\xed\xd0\xe6\x50\x2e\x78\xe7\xf1\xcd\x63\xbf\x9d\x69\x5b\xd8\x62\xc1\x05\xc2\x6c\xc7\xc4\xb6\x44\xa9\x66\xd0\x75\xd3\x49\xdb\xc2\xbc\xde\xbf\xc0\x2a\x83\x79\xfa\xc8\xf2\x3d\x7b\x41\xaf\xd0\x78\xa8\x4b\xa6\xc9\x07\xd9\x16\xe5\x0c\xe6\x46\x35\x9d\xe8\xb7\x1a\xc1\x01\x41\x06\x45\x23\xf2\xf8\xa9\xde\x32\x8d\xb7\x95\xd0\x78\xd4\x0b\x70\xc7\x92\x29\x95\x00\x4a\x59\xc9\x93\xa3\x55\xdd\x71\x55\x33\x9d\xef\x50\x82\xd2\xb2\xc9\x35\xb4\xd3\x09\x00\x78\x5c\x05\x07\x56\x6f\xb8\xd0\xcf\x4e\x30\x9d\x98\xd8\x14\x0c\x1e\xf0\x75\x88\x12\x27\x63\x60\x87\x28\x51\x37\x52\x8c\xd4\x4e\x1b\xc6\x5c\x0d\x83\xb6\xdd\xc2\x5a\x75\x2e\x7c\x50\x81\xab\x75\x90\x7e\x6e\xa5\xa9\xd3\x92\x0f\x89\x9f\x54\x58\xd2\x35\x1d\xad\xe2\x76\xc7\x74\xa0\xa0\xa3\x55\x70\xc1\x35\xfc\xa8\xaa\x32\x2c\x3c\x6e\xe0\xba\x17\x3d\x81\x92\xfd\x7e\x5b\x0b\xae\x3f\xcb\xea\x60\x55\x2a\x6e\xec\xbf\xb7\x55\x89\xcf\x8e\x17\xd0\xa4\x06\x39\xa8\xde\xf6\xe7\x54\xa7\xfd\x70\x66\x19\x68\xd9\xa0\x17\xd9\x2a\x32\x38\xb0\x3d\xc6\xbd\x62\x16\x50\xa2\xf0\x71\xad\x5d\x92\x4c\x27\x51\x51\x49\xf8\xbe\x80\x9c\x88\x40\x2c\x93\x4c\xbc\x20\xf4\xec\x28\x95\x28\x6a\x0c\x48\xb5\x27\x23\x63\x9d\xc6\x06\x98\x40\x22\x5e\xc0\x55\xb5\xb7\x86\x11\x75\x98\x0b\x4a\x2a\x8a\x3a\xe3\x6a\x71\x36\x04\x91\xae\xef\x9e\x21\x83\xc6\xf4\x37\x0a\xaa\xb1\x7d\x1e\xa6\x4e\xd2\x7e\xea\xc6\xee\x03\xa9\x5b\x3c\x93\x51\x6e\x40\xfa\xa9\x93\xfa\x43\xa9\x1b\x9c\x0d\x41\xb8\xd4\x73\xc3\x80\xa8\x1b\x5c\xfb\x90\xbd\x09\xdc\x1b\x8a\xc6\xb9\x3e\x0e\x49\xb7\x80\x31\x01\xcc\x1b\xf4\xb7\xde\x90\xd3\x2a\xeb\x13\x39\x60\x84\x93\xac\xec\x29\xd7\xc7\x45\xc0\x0e\xdf\x18\x1b\xe3\x9d\x4b\x75\xb1\x03\x3c\x8a\x97\xfe\x85\xa8\xc9\xd9\x54\xbd\x72\x9d\xef\x1c\x58\x1a\xd3\x7b\x33\xec\x6d\xdb\x4f\x2e\xce\x5c\x99\x69\xf5\xd5\x3c\x3b\x05\x5d\xd7\xb6\xc4\x6b\xfc\x09\x73\x95\xae\x85\x46\x59\xb0\x1c\x61\x16\x8c\x20\x3b\xec\x7c\x88\x9c\x29\x84\x6b\x1a\x7d\x2a\x7d\x60\x07\x1a\x78\xab\xb3\xd6\x3d\x13\x37\x00\xfc\xbd\x36\xa9\x9f\x11\x9b\x9e\xe3\xb7\xb7\x1a\xd7\x77\xcf\x37\x60\xef\x18\x06\x3f\xca\x4b\x4a\x02\x70\xee\x31\xb5\xc2\xf7\x2e\xb9\x31\xda\xab\x0c\x04\x2f\xdf\x73\x0f\xa6\x17\x4a\x39\xd6\x77\x7d\x51\x67\xdb\x84\x62\x6b\xbb\x62\x3f\xce\x36\x9d\xe5\x55\xe4\x20\x05\xf7\xb3\xe5\x3f\x34\x97\xba\x82\xbf\x50\x68\xd3\x98\x15\xcd\x0d\x7e\x78\x94\x58\xf0\xe3\xa9\x5d\xce\x6b\x46\xf6\xcb\x25\xf4\x5d\xba\xee\xde\x6d\x14\xae\x80\x8d\x94\x60\x0e\xbe\x8d\xa9\x9b\xc4\x97\x20\xcc\x4a\x22\x92\x0f\xd6\x92\xe3\x6c\xff\xf2\x83\x05\xb5\x5c\xc2\x17\x31\x0a\xad\x90\x9e\xfa\x50\x7a\x4e\xe5\xf2\x1b\x1d\x83\xc5\x7e\x6f\x5e\x48\xfd\x34\xaa\xff\xc1\x38\xbf\x77\x2f\x17\x39\x5e\xc1\xe3\xa1\x7f\xa2\x65\xc0\xca\x34\x1e\xb4\x27\x09\x57\xe0\xbb\x04\x33\xd7\xef\x0f\x7f\x02\x00\x00\xff\xff\x9d\x37\x15\x66\x6d\x08\x00\x00")

func _templateHandlersTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHandlersTmpl,
		"_template/handlers.tmpl",
	)
}

func _templateHandlersTmpl() (*asset, error) {
	bytes, err := _templateHandlersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/handlers.tmpl", size: 2157, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xc1\x4a\x03\x31\x10\x86\xef\x81\xbc\xc3\x4f\xf0\xd0\x82\x26\x4f\xe0\xa5\xd6\x83\x97\x56\xb0\x77\xc9\x6e\x26\x69\x58\x77\xb2\xc4\x59\x51\xc2\xbe\xbb\x6c\x5b\xe8\x69\x98\xf9\xe1\xfb\xe6\x6f\x0d\x81\x62\x66\x82\x39\x93\x0f\x54\x0d\x96\x45\x2b\xe7\xf0\x52\x02\x21\x11\x53\xf5\x42\x01\xdd\x1f\x52\x91\x90\x88\x1f\xb1\x3f\xe2\x70\x3c\xe1\x75\xff\x76\xb2\x5a\x69\x35\xf9\x7e\xf0\x89\xd0\x1a\x1e\xec\xfb\x6d\x59\x31\x5a\xe5\x71\x2a\x55\xb0\xd1\xca\xf4\x85\x85\x7e\xc5\x68\x65\xe2\xb8\x0e\xad\x4c\xca\x72\x9e\x3b\xdb\x97\xd1\xad\x74\x27\xc1\x75\x99\x8d\x56\xdb\x35\x76\x0e\x87\xf2\x54\xa6\xeb\x8b\x59\x72\x61\xc4\x52\x31\x10\x4d\x99\x13\xae\xf0\x6f\xab\xd5\x8f\xaf\xf8\xc4\x33\xba\xcc\x76\x37\xc7\x48\xb5\x2d\xf7\xeb\xcd\x6c\x77\xbe\x1f\x52\x2d\x33\x87\xcd\xf6\x9e\xc6\x51\xec\x87\xd4\xcc\x89\xea\x86\xf3\xd7\x45\xdd\x1a\x88\xc3\xa5\xc4\x7f\x00\x00\x00\xff\xff\x3b\x4a\xba\xaf\x23\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 291, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5b\x73\xdb\x36\x16\x7e\xcf\x4c\xfe\xc3\xa9\xc6\xcd\x92\xa9\x42\xf7\xd9\xa9\x1f\xd6\x71\xba\xf1\x4c\xb6\x9b\x89\x93\x7d\xe9\x74\x3c\x14\x79\x68\x63\x44\x01\x5a\x80\xba\x64\x55\xfd\xf7\x1d\x5c\x09\x42\x20\x29\x6b\xdd\xf4\xa2\x27\x1b\x97\x73\xfd\x70\x2e\x00\x77\x3b\x28\xb1\x22\x14\x61\xb2\xc8\x09\x9d\xc0\x7e\xff\xfc\xd9\x6e\x07\x67\xcb\xf9\x3d\x5c\x5c\xc2\x59\xf6\x21\x2f\xe6\xf9\x3d\xda\x89\x06\x17\xcb\x3a\x6f\x10\x26\x0f\x98\x97\xc8\x27\x70\xa6\xa6\xd4\x24\xcf\xe9\x3d\xc2\x99\x50\x1b\x6f\x1b\xbe\x2a\x1a\xa1\x66\xcf\xcf\x41\x12\x15\xd9\x1b\xb6\x58\x20\x6d\x0c\xb5\x57\x40\x2a\x39\x7a\xcd\x0a\xe1\x86\x0c\x91\x52\x12\xf1\xa6\x34\x89\x86\x93\x05\x9c\x95\x6e\x31\xd2\xf8\xdf\x9a\xee\xe7\x8f\xef\xcd\x5e\xb5\xff\x16\xd1\x88\xa1\x27\xa0\x62\x1c\x38\x56\xc8\x91\x16\x98\x75\xa9\x34\x5f\x96\x76\xf5\x4f\xf9\x42\xea\x0f\x42\x69\x04\xbb\x8e\x9c\x15\x68\x41\x7f\x24\x58\x97\x5a\x54\x00\x00\xa3\x71\x15\xd3\x38\xa7\x25\x24\x6a\x8a\x96\xa4\x21\x8c\xe6\x75\x0a\x09\x65\x0d\x74\x07\xaf\x18\xab\x53\x5f\x81\xcf\x02\xe1\x16\x1b\x4d\xd8\x4a\x25\xa9\xfd\x23\x1c\x7c\xc0\x7a\x89\x5c\x04\x3a\x49\xc1\xba\xeb\x3a\x1e\x5d\x72\x42\x9b\x3b\xa9\xf8\x44\xea\x15\xda\xd5\x78\x59\xa9\xa0\x84\x15\xd9\xbf\xb1\x68\x18\xef\xba\xd8\x90\xfe\xf4\x65\x89\x37\xd7\x40\x04\x7c\x7a\x0f\xca\x98\xa4\x04\x56\x75\x17\x65\xcf\x9f\x15\x8c\x8a\x26\xba\xf5\x12\xbe\xdf\xea\xf1\x77\xb8\xbd\xb9\x86\xfd\xfe\x75\x57\x20\xc5\xf4\x2d\x2d\x58\x89\x40\x16\xcb\x1a\xa5\xa1\x05\xcc\x08\xcd\xf4\x28\xcf\x9e\x3f\xab\x56\xb4\x80\x44\xd3\xf9\x88\x05\x92\x35\x4a\x81\xe1\x65\x87\x65\x6a\xe8\x98\x85\x57\xab\xea\xef\xfc\x5e\x2d\x93\xd4\xae\x56\x55\x85\x3c\x05\xe4\x9c\x71\xe9\x7f\x69\x48\x62\x75\xf1\xa9\x5e\x5e\x02\x25\xb5\x5d\x22\x7f\x1c\x9b\x15\xa7\x50\x2d\x9a\xec\xad\xdc\x5e\x25\x93\x22\xa7\x7f\x6b\x00\xb5\xe0\x86\x46\xbe\x91\x5a\x2b\x7f\x0a\x49\x62\x92\x6a\x12\xfb\x01\x93\x07\xb2\x66\x1f\x56\xcd\xcd\x75\x12\x31\x65\x7a\x78\x40\x86\xd1\xeb\xb3\x3c\x80\x64\xb8\xaa\xbb\xc2\xcd\xc6\xec\x93\xd9\x33\xe1\x96\x2b\xc6\x72\xe6\x5d\x2e\x92\x83\xd9\x1b\x5a\xe2\x56\xb9\x67\xd7\xb2\xec\xa2\xd9\x8a\xe0\xd9\xc5\xc2\x3c\xb0\x8d\x5e\xf1\x4e\x85\xad\xa4\x46\x7a\x08\x8a\xac\x73\x38\x52\xe3\x02\x19\x25\x76\x3b\xc3\xc6\x00\x0b\xf6\x7b\x52\x4a\x74\x62\x2d\xe4\xda\x3b\xf9\xa7\x92\x6b\xea\xc9\x74\xcd\x56\xb3\x1a\x9d\x64\x9c\x6d\x76\x3b\xb9\x61\xbf\x5f\xef\x76\x48\xcb\xfd\x5e\x9a\x5f\xbb\x62\x44\x18\xdf\x00\x51\xe2\x2d\xe2\x8e\x51\x9d\xb3\x8d\x55\xcf\xaa\x78\x37\x85\x75\x2b\x0e\x67\x9b\x71\x9b\xb7\xc6\xf0\xb9\xdb\xd9\x1b\xda\x20\xaf\xf2\x02\x3b\xf3\x06\x1a\xeb\xc8\x51\xe9\x39\x2e\x2b\x9a\xcf\x6a\x84\x86\xf5\x1d\x99\x0b\xa8\x14\x8a\xb4\xc1\x3e\xe6\x1b\x6b\x33\xd4\x21\x01\x36\xa4\x79\x00\xa2\xb0\xf4\x6d\x29\x43\x92\x3c\x60\x53\x20\xe5\x36\xed\x72\x0f\xf4\x50\x2e\x6a\x87\x48\x25\x23\x80\xb4\xd1\x3a\x8b\x87\x8b\xf4\xb5\x5a\xf1\xcd\xef\xa4\xda\x05\x7c\xbb\xd1\x7a\x4d\xa5\x1c\x9e\x72\x9e\xeb\x0c\x62\x07\xf1\xa2\xd9\xfd\x28\x43\xe7\x7e\x9f\xac\xd3\x31\x20\xf4\x62\x71\x1f\xdf\xd9\x27\x4e\x3f\xb4\x86\x60\x35\x10\x69\xac\xb9\x8e\x8a\xcb\xa7\x7b\x83\x84\x31\x3b\x82\xa0\x16\x3d\x23\xc2\x3e\x16\x5b\x4f\xa9\x89\x41\x50\x0b\x9e\x7e\x4f\x8d\x80\x66\x2c\xb8\xf6\x43\x2a\x0e\xb1\x58\x8a\x19\xd8\x14\x2b\x0c\x3d\x63\x51\x52\x7b\x05\x4d\x7f\x32\x74\x71\x3f\x64\xaf\xca\xc9\xa0\xe8\x12\xd8\x08\x58\xe7\xf5\x0a\x6d\xa1\xd3\xce\x15\xde\x7e\x65\xfa\x47\x94\x26\x21\xa3\x44\xf3\x70\xb2\xe9\xd3\x77\x5b\x13\x75\x26\x7e\xfe\xe5\xe7\x5f\x6c\x62\xd2\xf3\xed\x8c\xcb\x52\x46\x3a\x83\x86\xd4\xd6\xb4\x07\xba\x76\xf2\xbd\x0c\xdb\x9a\x73\x18\x3c\x8e\x4b\xf1\xb7\xd8\x0c\xa4\x78\xe3\x52\x2d\xf8\x89\x1c\x3e\x53\x71\x0c\x0f\x03\x8b\x43\x3c\x3f\x9d\x1e\xa3\x01\x49\x9b\x72\xa4\xc2\x8e\xfb\xe2\xfc\xfc\xb0\xe0\xd7\xb8\x3e\x1e\x7e\xb2\x6d\x50\x94\x66\x8c\xd5\x98\x53\xd8\x3c\x90\xe2\x41\x06\xb2\x86\xaf\x14\x70\xf4\xb2\x4d\x2e\x24\xae\x1f\x81\xd6\x50\xb4\x24\x85\x16\xb0\x03\xcd\xc6\x14\xd8\x5c\x49\x93\x7a\x15\xf6\x37\x4f\x5f\x42\x7a\x51\x40\x89\x35\x85\x2a\xaf\x05\x76\x22\x8a\x99\x1f\x71\xe2\x54\xd9\xca\x73\x5b\xdb\x98\xf4\x85\x20\x65\xf2\x6b\x8c\xb5\x2c\x7a\xf4\x31\x2d\x8b\xde\xf1\x15\x5b\x96\x12\xe3\x2d\x4b\xc3\x8e\x6d\x59\x62\x89\xb0\x4d\x22\x6f\x18\x15\xab\x05\xf6\x34\x31\x27\xe5\xbf\x1e\x91\x63\x79\xee\xa4\x16\x69\x20\x5c\x1e\x17\x06\x9e\x0e\xe0\x83\x25\x5e\x44\xd8\x48\x55\xfe\xdb\x9c\x36\x2b\x52\xc8\x30\x5c\xe2\xa5\x69\x18\xea\xed\xec\x4f\xdf\x40\xbd\x47\x3a\xed\x03\x54\xa7\xef\x49\x0f\xd4\xed\xaf\xd5\x4f\xc7\xd5\x91\x75\x95\xfd\x05\x2a\xc9\x46\x8c\x94\x5b\xa9\xcb\xf7\xaf\xd5\x5f\x3f\xb4\x6a\xaa\x81\xef\xbe\x93\xb2\x06\x86\x1c\x2f\xc4\x9d\xd6\x94\x9e\x6e\xb2\xa3\xcc\xf6\xd5\x4c\x17\x31\x9f\xfc\xad\x73\xae\xba\x57\x55\xed\xb4\x35\xce\xe1\x42\x65\x6b\x69\x0e\x0d\x5a\x63\xf2\x76\xe0\x07\x67\xac\xd7\xee\x2f\x6d\xfd\xd0\xf6\x21\x72\xe1\xc8\x3e\x58\x8b\xab\x72\x90\xf1\x86\x0e\xe9\x5a\x70\xb7\xaf\x5b\x52\xb7\x0d\xc1\x9f\xcc\x39\x2e\x32\xf5\x5f\x1e\xf8\x3e\x74\x35\xc3\x90\x0f\xbd\x96\x5c\x2e\xcf\xe2\x29\x71\xb0\x2d\xff\xa3\x98\x65\x1c\x1c\xe1\x51\xed\x36\x5c\x7f\x4a\x38\x44\x0e\x0e\x3c\x2e\xa0\x29\x15\xd8\x06\x2e\x21\x5f\x2e\x91\x96\x09\x67\x9b\xa9\x36\xdc\x71\xf1\x62\x3c\x45\x1b\xc2\xa3\xd5\x20\x67\x9b\x08\xcb\x68\x42\x7e\x7a\xe6\x7d\x1a\xf7\x99\x39\xbc\xea\xea\x2f\x19\xfa\xe3\xd7\x93\xc5\xae\x3f\x64\x2e\x3e\xba\x85\x3b\xb0\xe3\x70\x80\x3b\xfe\x22\xe8\xc4\x68\xf6\xb5\x8d\xd5\x8b\xf0\xff\x23\x7c\xfd\x85\x10\x11\x29\x6b\xfb\xee\x42\x8f\xbf\xb4\x32\x2f\x9c\xdd\xb3\x79\x7e\x0e\xea\x39\x4d\x3d\x53\x7a\xed\xa5\x1b\x64\xbc\x7d\x82\xf3\xb7\x0e\x34\x9d\x41\xcf\xe9\x48\x25\x69\x84\x0e\xec\xac\xac\x2f\x0e\x29\xe9\xeb\xb4\xe0\xf1\x4e\xac\x38\xa1\xf7\x40\x2c\x11\x01\x84\x42\xc1\x16\x4b\x52\xe3\xab\x86\x2c\xd0\x3e\xbf\x74\x1e\x0d\x65\x7d\x90\x3c\x7f\x76\xe7\xbf\xf5\xc1\xa5\x65\x6a\xd6\xed\xf6\x76\x85\x69\xad\xa3\x2b\x7a\x4c\x79\x17\xd3\xae\x67\xbf\x55\x29\xf5\xae\x6f\xce\x44\xf6\x4f\x6c\x1e\x58\xd9\x7d\x1c\x75\x63\x40\xe8\x9a\xcd\x51\xc0\x42\x8f\x1c\xf4\xd4\xda\x8e\xd2\x36\xba\x85\x57\xef\xc6\x5f\xb2\xd1\x67\x73\xf8\x9d\xdf\xcd\x5b\x2a\x1f\x51\xac\xea\xf0\xa9\x5f\x0f\xde\x12\x7a\xbf\xaa\x73\x1d\x1b\x35\xf2\x0a\x78\xf9\xa6\x26\x48\x9b\x34\x34\x55\xd2\xb9\x37\xe2\xf8\x9f\x15\x8a\xe6\x6e\x99\xf3\x7c\x21\x26\x70\x26\x14\x2e\x13\xed\x47\x73\xe3\xa0\xb9\xb8\xaa\xe1\xa5\x05\xa3\x11\xa8\x7d\xb7\xd3\x4d\x82\x9d\x32\xb1\xc8\x7b\xcb\x53\xb6\x77\xcd\xac\x6a\x2d\x34\x91\x80\xa2\xbb\xf4\xf3\x2e\xb8\xf2\x62\x7e\x67\xa4\x35\x62\x86\xf7\x1f\x45\xc6\x97\x45\x76\xa3\x90\xf0\x31\xdf\x24\x45\xb3\x9d\x82\xd9\x32\x85\x17\x9a\xd5\xd8\xbd\x07\x25\xb5\x92\xf3\x20\x9a\xf8\x06\x0f\x0a\x28\xb3\x55\x33\xc8\xde\xd6\xb8\x10\x53\x1d\x5e\xa2\xf1\xdc\x9e\x69\xbd\x3e\x5c\xd9\x5e\x5e\x76\x36\x3e\x95\x5b\xa5\x57\xd1\x33\xf6\xe4\x8a\xb1\xfa\x4d\x9d\x0b\x31\x51\xae\x8a\x3b\x76\xc6\x58\xfd\x58\x3f\x1a\xf7\x5f\xb1\xed\xd7\x74\xa7\xbd\x2b\xeb\xd1\x11\xf6\xfb\xc0\xd1\x9e\x95\x6d\x12\xcc\x6b\x81\xed\x5c\x3c\xb9\x0c\xf3\x88\xe1\xc2\xb7\xcd\x55\x2e\xd0\xd5\x9a\xfd\x48\xb9\x53\xb7\xb8\x17\x97\x23\x24\xb2\xe4\xa5\xe4\xfe\x89\xbb\x92\xd5\x70\x66\xf3\x11\x74\xf9\x71\xeb\x49\x91\xd6\xb9\x28\x95\x00\x61\x73\xf8\xd7\xfc\x37\x01\x02\x9b\x8f\x9d\xe9\xf0\x38\x07\x05\x40\x7f\x04\xef\x5c\x41\xbb\x1b\x4c\xf5\x3d\xd6\x4d\x9b\x62\xbd\x94\xe4\xbf\x20\x2c\x39\x0a\x55\x2f\xb8\xfa\xc8\x26\xa3\x7b\xa4\xc8\x49\xa1\xbe\xe3\xc9\x74\x5e\x68\xfb\x83\x36\x5b\xb8\x4c\x51\xf5\x65\x0a\xbb\xd3\x8a\x29\x6b\x80\x6d\x2e\x2b\x95\x0b\xf5\x0f\xdc\x47\xdb\x09\x5b\x24\xce\x56\x55\xaa\xd7\x1d\xd4\x87\x72\x50\xfe\x96\x39\x25\x45\xa2\x4b\x39\x39\xa6\x99\x80\xd8\x90\xa6\x78\xd0\x5f\x38\xdc\x67\x89\x54\xc4\xbc\x7a\x59\x2b\x15\x2a\x73\xaa\xdb\x4c\x5b\x2c\x09\x78\x65\x84\x84\x22\x17\xa8\x2f\xe0\x8b\xcc\x55\x8d\xc6\x86\x85\x67\x2a\xe7\x04\xb7\xb3\xc4\x2a\x5f\xd5\xcd\x85\x91\x6c\xdd\xca\xe5\x3e\x31\x6b\x9d\xe0\xea\x20\x0b\x0a\xaf\xc0\x69\x07\x4c\x3d\xa3\x07\xc2\x8a\xcc\x11\x33\xb5\xa2\x7b\x70\xe8\x98\x32\x78\x7d\xc8\xf9\x17\x28\xf1\x95\x40\x4e\xf2\x9a\xfc\x37\x6f\x08\xa3\xae\xf2\xaa\xbc\xca\x4b\x9d\xb5\x18\x3d\xe9\x9b\xee\xd3\x43\x12\x74\xa8\xdd\x18\x4c\x4a\xe7\xe9\xd9\xaa\xca\x3e\x20\xce\x6f\xae\x6d\x17\xd0\x5b\xfd\x0f\xe5\x3c\xe3\x62\x52\xfa\x1f\xae\x0c\x39\xd7\x1e\x5c\xe5\xdb\x8e\x6b\xf5\x8b\xc3\x45\xcb\xd7\x1a\x51\xd6\x63\xa1\xcb\xb3\x76\xd9\xda\xf6\x39\x85\x5f\x22\x06\x3d\x8d\xfa\x7e\xc4\xb4\x76\x12\xd0\x47\x7c\x33\xa2\xf4\x1d\x6d\x75\xaa\x6c\xa8\x9f\xd9\x1f\x58\xf1\xc5\xba\x27\xd8\xca\xff\x2d\x6c\xe3\xb6\x7f\xb4\x2c\x12\x18\x3f\xe1\xe6\x33\xc5\xed\x12\x8b\x06\xcb\x9b\xeb\x84\x94\x69\xfb\xfa\x62\xb1\xda\x45\xd5\x8c\x6d\x51\x40\xf3\x10\x9e\x93\x25\x67\x6b\xa2\xbc\x91\x9b\x6f\x1d\xb3\xce\x79\x6a\x53\xb9\xf7\xd5\x26\xb8\xcf\x1f\xbd\x54\x34\x7c\x66\x7a\x1e\xe9\xbc\xa3\xd1\x72\x72\x4d\xd4\x4c\x07\x0a\x7f\xce\x3d\xd6\x1d\x9c\x92\xf0\x81\x6e\xf6\xd8\x6f\x55\x3a\x46\xf7\xf4\x3e\x78\x94\x53\x00\x3d\x22\xbc\x1e\x73\x00\x07\x45\x91\x4e\x2b\x75\x2b\xdc\xf7\x3d\xc9\x2c\x3b\x74\xc4\x25\xac\x7b\xda\xdd\x91\xcf\x3c\x4f\xf0\x86\xf9\xc4\xe6\x78\x6f\xfc\xfa\x6b\x5c\xe6\x93\xbf\xc6\xf1\x3e\xe0\x8d\x7d\x3c\x64\xc8\x44\x78\x66\xad\xec\xa9\xa9\x06\xba\x59\xdf\xfe\xf3\xbf\x00\x00\x00\xff\xff\x3a\x64\xb7\x6a\xdc\x2d\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 11740, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateRegistryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcf\x4a\x34\x31\x10\xc4\xef\x81\xbc\x43\x11\xe6\xf0\x7d\xa0\xb3\xa2\xb7\x05\x6f\x1e\x14\x14\x64\xd9\x9b\x78\x68\x76\x7a\x62\xd8\x4d\x36\x24\x19\xdc\xa1\xc9\xbb\xcb\xfc\x71\x4f\x1e\xbb\xaa\xab\xa8\x9f\x08\x3a\xee\x5d\x60\x98\xc4\xd6\xe5\x92\x46\x83\x5a\xb5\x12\x41\x13\x8f\x16\xdb\x47\x34\xed\x3b\x1d\x8e\x64\xf9\xd7\x28\xec\xe3\x89\x0a\xc3\x7c\x31\x75\x9c\x0c\x9a\xd9\xd2\x6a\xb3\xc1\x7e\x8c\x9c\x91\xb8\x0c\x29\x64\x78\x8a\xd1\x05\x8b\x3e\x9d\x3d\xca\x18\x19\xae\xcb\x28\x67\xec\x5f\x97\x33\x90\xe7\xdc\x6a\xd5\x0f\xe1\xb0\x64\xdf\x28\xfe\xfb\x3f\x05\x3f\x06\x17\xca\xc3\xfd\x67\x2e\x69\xaa\x10\xad\xb0\xf6\xfe\xed\x8a\xdc\x22\x51\xb0\x8c\x86\x4f\xec\x97\xe9\xbb\x95\x6a\x1e\x08\x00\x77\x97\x09\x6d\x7a\x68\x9f\xf9\xf2\xf2\x84\x5a\xb7\x30\x57\x6d\x47\xdf\xa8\xd5\xdc\x2c\x75\x1c\xba\x35\x58\xb5\x9a\x09\x45\xae\xe2\x4f\x00\x00\x00\xff\xff\xfa\x22\x40\xae\x3c\x01\x00\x00")

func _templateRegistryTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateRegistryTmpl,
		"_template/registry.tmpl",
	)
}

func _templateRegistryTmpl() (*asset, error) {
	bytes, err := _templateRegistryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/registry.tmpl", size: 316, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateUtilsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xcd\x6a\xc3\x30\x10\x84\xef\x81\xbc\xc3\x60\x4c\x0f\xc5\xf5\x03\x18\x72\x6a\xe9\xb1\x14\xda\x9e\x42\x30\xaa\xbd\x2e\xa2\xb2\xac\xca\x0a\x4d\x58\xf4\xee\x41\xfe\x8b\x9d\x1f\x5f\x2c\x69\x47\xb3\xfb\x8d\x98\x51\x52\x25\x35\x21\xb2\xf4\xb7\xa7\xd6\xe5\x46\x58\x51\xb7\x11\xbc\x2f\xdc\x01\x45\xa3\x1d\x1d\x5c\xfa\xdc\xff\x99\x9f\x20\x2b\xa4\x5f\xda\x88\xe2\xf7\x3d\x48\xc9\x91\x6d\xe1\xfd\x58\x7a\x95\xa4\xca\x70\x90\xac\x57\xe1\xcc\x0a\xfd\x43\x88\x2b\x64\x9b\x59\x91\x19\xaa\xf9\x27\x8b\xb8\x4a\xdf\x44\x4d\xf0\x1e\xcc\x70\x54\x1b\x25\x1c\x21\x32\x56\x6a\x97\xbb\xa3\xa1\x28\x5c\xf6\x3e\x09\x66\xa4\x4b\xef\x7b\x5f\xd2\x25\xa6\xb5\x6a\x83\x43\x82\x01\x02\x8f\xcc\x18\x7d\xaf\xc4\xc3\x3a\xec\x26\xfa\x80\x93\x0f\xb7\xa3\x19\xcd\x0d\xd0\xf5\x0a\xc0\xd4\x29\xdb\xe0\x81\x19\xf1\xd4\xad\x2f\x87\xef\x92\x3e\x3e\xe3\xcf\x45\xb3\x08\x32\xdc\xc8\x25\x59\x3a\x8e\xe3\x87\xfd\x82\xe8\x3e\xdb\x2c\xca\x31\x04\x59\x21\x4e\x5f\x9a\xfd\xb7\xa2\x0f\x25\x8b\xd0\x67\xbb\xdb\xee\x3a\x92\xcf\xa3\xa1\x65\xb4\x9d\xfa\xac\xbb\xa3\xea\x5e\xf5\xb2\x70\x35\xda\x29\x00\x00\xff\xff\x5e\xa2\xcb\x89\x73\x02\x00\x00")

func _templateUtilsTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateUtilsTmpl,
		"_template/utils.tmpl",
	)
}

func _templateUtilsTmpl() (*asset, error) {
	bytes, err := _templateUtilsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/utils.tmpl", size: 627, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/client.tmpl":   _templateClientTmpl,
	"_template/handlers.tmpl": _templateHandlersTmpl,
	"_template/header.tmpl":   _templateHeaderTmpl,
	"_template/main.tmpl":     _templateMainTmpl,
	"_template/registry.tmpl": _templateRegistryTmpl,
	"_template/utils.tmpl":    _templateUtilsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"client.tmpl":   &bintree{_templateClientTmpl, map[string]*bintree{}},
		"handlers.tmpl": &bintree{_templateHandlersTmpl, map[string]*bintree{}},
		"header.tmpl":   &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":     &bintree{_templateMainTmpl, map[string]*bintree{}},
		"registry.tmpl": &bintree{_templateRegistryTmpl, map[string]*bintree{}},
		"utils.tmpl":    &bintree{_templateUtilsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
