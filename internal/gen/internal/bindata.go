// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/client.tmpl
// _template/header.tmpl
// _template/main.tmpl
// _template/registry.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\x41\x6b\x83\x40\x10\x85\xef\x82\xff\xe1\x21\xa1\x24\x25\x98\x7b\xa0\xa7\xb4\x87\x42\x5b\x42\xc9\x1f\xd8\xae\x63\xb2\x44\x67\x65\x1c\x93\x94\xc5\xff\x5e\x5c\xd7\x9e\x1c\xbe\x79\xbe\x7d\x6f\x42\x40\x45\xb5\x63\x42\x61\x1b\x47\xac\x05\xc6\x31\xcf\x42\xc0\xaa\xbb\x9e\xb1\x7f\xc1\xaa\x3c\x1a\x7b\x35\x67\x5a\x16\x4a\x6d\xd7\x18\x25\x14\x17\x32\x15\x49\x81\x55\x5c\xe5\xd9\x6e\x87\x77\xbe\xf9\x2b\x09\xac\x61\xb8\x38\x43\xcc\x1d\x9f\xa7\xa3\x78\xf5\x90\xce\xc2\x9a\xa6\xe9\xcb\x3c\xd3\xdf\x8e\xfe\xf5\x8e\x95\xa4\x36\x96\x10\xf2\x0c\x09\x7f\x9b\xfb\xda\xea\x03\xd6\xb3\xd2\x43\xcb\xc3\xfc\xdd\xc2\x71\x37\x28\x7e\x1c\x97\x6f\x6c\x7d\x45\xb2\x85\x1f\x74\x61\xaf\x14\xd9\x06\x24\xe2\x25\xcf\x96\x6c\x87\x58\x10\xae\xed\x1a\x6a\xa7\xa9\x25\xbd\xf8\xaa\x47\xed\x25\xa6\x72\x7c\x46\x3d\xb0\x55\xe7\xb9\x47\x2d\xbe\xc5\xe9\x03\xbd\xbd\x50\x6b\x70\x73\x66\x49\xbb\x84\x4f\x86\xbd\xca\x60\x75\x0e\x3e\x15\x4c\xaa\xf4\xf0\x64\x88\x2f\xba\xcf\xe2\xb5\x4b\x85\x93\x68\x83\xe7\xe4\x32\xff\x4e\x3a\x08\xe3\x69\x66\x11\x45\xcf\x7d\x3a\xa6\x6c\x27\x34\x26\xeb\x10\x40\x5c\xc5\xe3\xff\x05\x00\x00\xff\xff\x6e\x86\x44\xb6\xc8\x01\x00\x00")

func _templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateClientTmpl,
		"_template/client.tmpl",
	)
}

func _templateClientTmpl() (*asset, error) {
	bytes, err := _templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/client.tmpl", size: 456, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xc1\x4a\x03\x31\x10\x86\xef\x81\xbc\xc3\x4f\xf0\xd0\x82\x26\x4f\xe0\xa5\xd6\x83\x97\x56\xb0\x77\xc9\x6e\x26\x69\x58\x77\xb2\xc4\x59\x51\xc2\xbe\xbb\x6c\x5b\xe8\x69\x98\xf9\xe1\xfb\xe6\x6f\x0d\x81\x62\x66\x82\x39\x93\x0f\x54\x0d\x96\x45\x2b\xe7\xf0\x52\x02\x21\x11\x53\xf5\x42\x01\xdd\x1f\x52\x91\x90\x88\x1f\xb1\x3f\xe2\x70\x3c\xe1\x75\xff\x76\xb2\x5a\x69\x35\xf9\x7e\xf0\x89\xd0\x1a\x1e\xec\xfb\x6d\x59\x31\x5a\xe5\x71\x2a\x55\xb0\xd1\xca\xf4\x85\x85\x7e\xc5\x68\x65\xe2\xb8\x0e\xad\x4c\xca\x72\x9e\x3b\xdb\x97\xd1\xad\x74\x27\xc1\x75\x99\x8d\x56\xdb\x35\x76\x0e\x87\xf2\x54\xa6\xeb\x8b\x59\x72\x61\xc4\x52\x31\x10\x4d\x99\x13\xae\xf0\x6f\xab\xd5\x8f\xaf\xf8\xc4\x33\xba\xcc\x76\x37\xc7\x48\xb5\x2d\xf7\xeb\xcd\x6c\x77\xbe\x1f\x52\x2d\x33\x87\xcd\xf6\x9e\xc6\x51\xec\x87\xd4\xcc\x89\xea\x86\xf3\xd7\x45\xdd\x1a\x88\xc3\xa5\xc4\x7f\x00\x00\x00\xff\xff\x3b\x4a\xba\xaf\x23\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 291, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\xdd\x73\xdb\x36\x12\x7f\xd7\x5f\xb1\xf5\xa4\x39\x32\x55\xe8\x3e\x3b\xf5\xc3\x39\x4e\x2f\x9a\xc9\xf5\x32\x76\x73\x2f\x9d\x4e\x86\x22\x97\x32\xc6\x14\xa0\x03\x41\x49\x39\x55\xff\xfb\x0d\xbe\x48\x10\x04\x45\x5a\xe3\xa6\xed\xe9\xc5\x34\x3e\x16\xbb\xbf\x5d\xec\x07\x80\xc3\x01\x72\x2c\x08\x45\xb8\x58\xa7\x84\x5e\xc0\xf1\x38\x3b\x1c\xe0\xc5\xe6\x71\x05\x57\xd7\xf0\x22\xf9\x98\x66\x8f\xe9\x0a\x4d\xbb\xc0\xf5\xa6\x4c\x05\xc2\xc5\x03\xa6\x39\xf2\x0b\x78\x21\x7b\x64\x17\x4f\xe9\x0a\xe1\x45\xa5\x66\xdd\x0b\x5e\x67\xa2\x92\x7d\x97\x97\x20\x09\x56\xc9\x5b\xb6\x5e\x23\x15\x9a\xd2\x6b\x20\x85\x6c\xbc\x65\x59\x65\x5b\x0c\x85\x5c\x52\x68\x7b\xf4\x7c\xc1\xc9\x1a\x5e\xe4\x76\x28\xd2\xd0\xa7\x26\xf9\xe9\xee\x83\x9e\x27\xa7\xde\x23\x9a\xe5\x75\x33\x14\x8c\x03\xc7\x02\x39\xd2\x0c\x13\x97\x82\xf8\xb2\xb1\x63\x7f\x4a\xd7\x52\x62\xa8\x94\x18\x70\x70\xd9\x2b\x40\xf3\xf7\x23\xc1\x32\x57\x1c\x02\x00\x18\x29\x8b\x80\x94\x29\xcd\x21\x52\x3d\x34\x27\x82\x30\x9a\x96\x31\x44\x94\x09\xe8\x36\xde\x30\x56\xc6\x2d\xe7\x9f\x2a\x84\x7b\x14\x9a\xaa\x65\x48\xd2\xfa\x87\xdf\xf8\x80\xe5\x06\x79\xd5\x11\x46\xf2\x64\x21\x29\x92\x5b\x56\x2f\x4b\xbc\x2f\x49\x86\x6d\xa7\x4b\xe2\x97\x5f\x7f\xf9\x55\xb7\xfc\x2c\x51\x70\x08\x60\x59\xa1\xa1\x72\x72\xfe\x89\xd9\xc1\x19\x03\xe3\x7b\x7a\x55\xc6\xa5\xe4\x50\x88\x55\xc9\xbf\x31\x13\x8c\x77\x2c\xcb\xd0\x94\xc4\x16\xb7\x40\x2a\xf8\xf9\x03\x28\x6d\x92\x1c\x58\xd1\x1d\x94\xcc\x32\x46\x2b\x11\x9c\x79\x0d\xdf\xef\x75\xfb\x7b\xdc\x2f\x6e\xe1\x78\x7c\xe3\xb2\x22\x17\x7c\x47\x33\x96\x23\x90\xf5\xa6\x44\xa9\xe7\x0a\x96\x84\x26\xba\x95\x27\xb3\xa2\xa6\x19\x44\x9a\xc6\x1d\x66\x48\xb6\x28\x59\x85\x57\x9d\xe5\x62\x43\xc6\x0c\xbc\xa9\x8b\xbf\xf3\x95\x1a\x26\x89\xdd\xd4\x45\x81\x3c\x06\xe4\x9c\x71\x38\x28\x6c\x88\x95\xc2\x25\x7a\x7d\x0d\x94\x94\x66\x84\xfc\x71\x14\x35\xa7\x50\xac\x45\xf2\x4e\x4e\x2e\xa2\x8b\x2c\xa5\x7f\x13\x80\x9a\x6b\x43\x22\xdd\x19\xd8\x21\xad\x24\x85\x8b\x58\x51\x38\x0e\x02\xed\xb1\x99\x7c\xac\xc5\xe2\x36\x0a\x20\x18\xfb\x3b\xf2\xe4\x9e\x71\x97\xeb\xed\x84\xbe\x11\x3b\x03\x6c\x67\x08\x96\xc4\xee\xc3\x66\xb4\x5a\x55\xf6\xbc\x4f\xab\xa8\xd7\xbb\xa0\x39\xee\x95\x52\x0e\xbe\x19\x76\xd7\x6f\xf1\xb0\xd6\xec\x61\xa2\x07\xbc\x57\x8e\x31\x2a\x91\xf6\xed\x20\xe9\xec\x81\x58\xe3\x2e\x3d\xd2\xe1\x60\x16\x31\x96\x04\xc7\x23\xc9\xa5\x2d\x9a\x0d\xf4\x59\x7e\x2a\xa6\xe6\xbd\x6d\xdd\xf0\xc5\xd9\xee\x70\x90\x13\x8e\xc7\xed\xe1\x80\x34\x3f\x1e\x25\xee\x5a\x07\x23\xbc\x38\xc2\x07\x69\x37\x36\x36\x45\x6e\xce\x76\x46\x36\x2b\xdf\xe7\x39\x6c\x5b\x5e\x38\xdb\x8d\x81\xdd\xe2\xe0\xac\x6c\x3b\x17\x54\x20\x2f\xd2\xd6\x19\xd9\x1f\x29\x60\xdb\xdf\x16\x03\x5b\xa3\xa6\xe9\xb2\x44\x10\x6c\x68\x7b\x5c\x41\xa1\x2c\x47\x03\x75\x97\xee\x2c\x56\xa8\xf7\x3e\xec\x88\x78\x00\xa2\xec\xe7\xdb\x5c\xfa\x1d\xb9\x99\xe6\x40\xf2\x7d\xdc\x59\xbc\x2b\x83\x52\xcc\xcc\x61\x19\x39\x97\xd8\x6c\x93\xb0\x57\x88\xdf\xa8\x11\xdf\xfc\x31\x62\x5d\xc1\xb7\x3b\x2d\xd3\x5c\xb2\xd1\x0a\x16\x76\xf2\x03\x26\xa2\xd7\xfa\x51\x7a\xc7\xe3\x31\xda\xc6\xa7\x95\x3f\x64\x7b\xbd\x38\x31\xcc\xc7\xa0\x25\x9d\xb0\xa2\x13\xde\xc4\x42\x34\xc5\xe5\x9e\xaf\x00\xd2\x75\xc7\x7d\x83\x69\x8d\x65\x84\xd1\x27\x9a\xd2\x73\x4a\x61\x0c\xa6\xb1\x95\xe1\x64\xe0\xa4\x8d\x8c\xf9\xce\x21\x0b\x0a\x1a\x54\x20\x74\x0c\xce\xe8\xa7\x20\x0e\x42\x94\x94\x36\x23\x19\x0c\x6d\x8d\x2f\xf7\x56\x55\xd9\xa8\x97\xba\x55\x28\x2a\xd8\xa6\x65\x8d\x36\x51\x69\xfb\x32\x67\xba\x82\x7a\x7a\x7a\xe1\xaf\x13\xe9\x25\x1a\xce\xba\xf9\xa0\x49\xfe\x02\x99\x9e\x6e\x57\x28\x74\x13\xb6\xd8\xe4\xc4\x3d\x41\xdd\xd0\x2d\xbd\xb1\x5e\xd7\x73\x0d\xd3\xa2\xf5\x3d\x8a\x13\xd1\x5a\x2b\x51\x33\x7d\x1e\xfd\x4f\xb4\x9a\xb0\xc2\x2c\x6c\xb9\xcf\x26\xc2\xa8\xc7\xd1\x18\x9e\x48\x89\x83\xf8\x5f\x5e\xf6\xeb\x04\x6d\xc3\xd3\xed\x4d\x56\x1b\x92\xd0\x92\xb1\x12\x53\x0a\xbb\x07\x92\x3d\x48\x27\x25\x78\xad\x2c\x45\x8f\xda\xa5\x95\xb4\xe3\xe9\xd6\xe9\x33\x16\xc5\xf0\x0c\x06\xda\xb1\xcf\x39\xb0\x47\xc5\x77\xdc\x26\xd0\xdf\x3c\x7b\xaa\xe8\x38\x06\xc5\xff\x1c\x8a\xb4\xac\xd0\xf1\x2f\xa6\x77\x44\xc9\x73\x85\xa8\xd5\xab\xad\x36\xc2\xce\x48\x2a\xe4\x16\x43\x45\x88\x6e\x7d\x42\x11\xa2\x27\x7c\xb5\x22\x24\xc7\x70\x11\x22\xd8\xa4\x22\x24\x14\xff\xda\xf8\xf1\x96\xd1\xaa\x5e\xe3\x40\x59\x72\x4e\xd8\x1b\x60\xb7\x1f\xde\xce\x28\x79\x86\x7d\xe6\x34\x97\xf0\x7c\x96\x7c\x22\x89\x0b\x70\xda\x4f\xb7\x7f\x97\x3d\x65\xf9\xf1\x96\x3b\xf8\x69\x74\x98\xdf\x7e\xde\x28\x7f\xfa\xbc\xea\x03\xd2\xf9\x90\x09\x75\xca\x98\xd8\x17\x74\x30\x05\x3f\xdf\x90\xa6\xe5\x4f\xf6\xd7\x15\x47\x16\x55\x24\xdf\x4b\x39\xbe\x7f\xa3\xbe\x7e\x68\x45\x54\x0d\xdf\x7d\x07\x87\x59\x17\xbf\xd1\x04\xbb\x91\x97\xd2\xb3\xb1\x9a\x82\xd7\xd7\xc2\xac\x8f\x9b\xfc\x6d\x53\xae\x4a\xd0\xd0\xa1\x55\x0f\x63\x89\x84\xb6\x51\x03\x75\xdb\xf0\x43\x83\xd3\x9b\xe6\x4b\xa1\xee\x83\xee\x99\x2a\x4c\x2b\x66\x35\xab\x2a\xac\x18\x2d\x68\x87\xad\x99\x6e\xa6\x75\x13\xe6\x36\xd5\xff\x0b\x29\xc5\x3b\x67\x0c\xd4\xfe\xae\xea\x9a\x54\xe1\x84\xea\x9c\xaa\x5a\x8e\x4e\xc2\xa1\xee\x54\x65\xfd\xe7\x40\x64\xd4\x24\xfc\x8d\xd9\x2d\xa2\xfe\x72\x46\xd0\xdf\x28\xf0\x24\xc7\xa5\xd8\x67\x3b\xb8\x86\x74\xb3\x41\x9a\x47\x9c\xed\xe6\x1a\xb2\x29\x9e\x61\x3c\xf2\x1a\xb2\xa3\x09\x1d\x67\xbb\xfe\x82\xa1\x38\xfb\xfc\x4b\x0f\x48\x3b\x80\xef\xb1\x17\x75\x9f\x78\xe6\xf6\x5c\x2e\xea\xcf\x17\x63\xa7\x96\x66\x3d\x00\x4f\xba\xb1\xe9\x67\x38\xe7\x39\xad\xaf\x8b\xd3\x90\x49\x9f\xef\xa5\xfe\x4f\xec\xa0\x9f\x9d\x86\xcf\x2c\x27\x9d\x36\x99\x9b\xcd\xce\x1e\xbc\xbc\x04\x75\x93\xa5\x6e\x28\x9d\x52\xb0\x69\x64\xbc\xbd\xfc\x72\x67\x0e\x17\x88\x5e\x7d\xd8\x50\x8a\xe2\x00\x19\x38\x58\x36\x5f\xf6\x29\xa9\x53\xb0\xce\xb5\x59\x55\x73\x42\x57\x40\x2c\x85\x0a\x08\x85\x8c\xad\x37\xa4\xc4\xd7\x82\xac\xd1\xde\x83\xb8\x57\x75\x32\xdc\x47\xb3\xcf\xee\x1d\x1b\x5c\xdb\xf5\xcc\xa8\xc3\xd1\x0c\x30\xf5\x6f\x68\x40\x18\xc1\xcf\x21\xa9\xc2\xb3\x8d\x28\xf1\xcc\xb9\x67\xfe\x27\x8a\x07\x96\x77\x2e\x22\x9b\x26\x20\x74\xcb\x1e\xb1\x82\xb5\x6e\xe9\x15\xbd\x1a\x3a\x89\x88\xae\xb0\xd5\x3d\xf1\x97\x64\xe4\x66\x1c\xfe\xa0\xab\xf1\x96\xc2\x1d\x56\x75\x29\x42\x6d\xf7\x84\xae\xea\x32\x55\xfe\x4e\x1b\x58\x06\xaf\xde\x96\x04\xa9\x88\x7d\x78\xa2\x4c\xec\xa5\x79\x09\xdc\x0b\x59\x0c\xca\xbf\x73\xe0\xf8\x9f\x1a\x2b\xd1\x3b\xa7\x88\xb4\xfa\xcc\x89\x80\x5e\xad\x49\x01\x5e\x59\xe3\x33\x7c\xb5\x77\x66\x3a\xbd\xb7\x5d\xc6\xd9\x38\xf7\x68\x0a\x78\x5b\x76\xaa\x9a\x40\xd3\xf0\x08\x7a\x07\x0f\x59\xc2\x37\x59\xb2\x50\xea\xbd\x4b\x77\x52\x92\x86\xf3\x39\xbc\xd4\x34\x46\x0e\x1c\x28\x29\xd5\xf2\x9e\x2f\x70\xd1\xec\xa6\x38\x66\x9e\x26\x9e\xbc\x2b\x71\x5d\xcd\x95\x77\x08\xb9\x60\xbb\x2b\xf5\x68\x6f\x9c\x3d\x41\x74\x27\x3d\xbf\xb6\x5c\xfc\xa6\x01\x6d\xd4\x73\xc3\xf6\x5f\x07\xef\x2e\xa2\x2e\x27\x37\x69\x85\x4d\x2e\xa5\x3d\xb0\xbf\xad\x7e\x17\xdc\xdc\x93\x36\x09\x12\x7b\x84\x7f\x3d\x3e\x0d\x0c\xf6\x38\x02\x44\x10\x83\xb0\x8c\xf6\xd3\x39\x8e\x6c\x8e\xb6\xd4\x13\x9f\x45\xeb\xc9\x5b\x17\xe8\x1e\x36\x6f\x38\x56\x2a\x22\x35\x51\xd7\x3a\xbf\x15\x52\xe4\x24\x53\x6f\x34\x12\xe9\x8d\xda\x34\xb3\xf1\x50\x8d\x7b\x2a\x06\xdc\x93\x99\x66\xd8\x93\x31\x66\x9f\xca\x28\x78\x25\xbf\x61\x15\xcc\x48\x6d\xc6\xb1\xac\x8b\x58\x0d\xf3\x93\x0d\xd9\x26\x7f\x9b\x94\x92\x2c\x52\x79\x81\x6c\x52\xf4\xa1\xda\x11\x91\x3d\xe8\x8b\xec\x55\x12\x49\xee\xf5\x3d\x88\x05\x26\x53\xfe\x59\x1d\x6f\xd9\x10\x5c\xc1\x6b\xcd\x1d\x64\x69\x85\x5a\xe9\x59\xd2\xa4\x1f\x06\xb6\xcc\x41\xc7\x62\x6e\xe7\xe5\x58\xa4\x75\x29\xae\x0c\x4f\x5b\xcb\x51\xf3\x5c\xa9\xc5\xbc\x09\xae\x46\xf3\x4e\xd8\x6c\xfe\x37\x51\x52\xfd\xef\x07\xf8\x86\xd2\xcc\x3d\x67\xee\x40\xe7\x1d\x3a\xa7\xfc\x0b\xe4\xf8\xba\x42\x4e\xd2\x92\xfc\x37\x15\x84\xd1\x26\x90\xb7\x99\xac\xde\x2a\x21\x72\x52\x15\xdd\x13\xe7\xc8\x2b\x67\x3a\xde\x83\xe4\x8d\x5e\x97\x75\x91\x7c\x44\x7c\x5c\xdc\x9a\x04\x72\x28\x71\x1c\x76\x02\x46\xa1\x24\x77\x5e\x23\x9c\x52\xa5\x71\xb0\x4a\x93\x1d\x45\xea\x63\xe6\xab\x66\x49\x8b\x9d\x8c\xef\xbe\x7e\x93\x66\xd4\xd6\xa6\xc6\x99\x93\x6c\x78\x69\xb0\x7a\x17\x60\x0a\x01\x69\xb5\xe3\x6f\x01\x94\x9c\xa3\xd9\x71\x91\x9c\x48\x81\x8f\x3e\x76\x2f\xb7\xc1\x30\x22\xff\xb5\xe6\x19\x84\xfb\xc9\x6c\x48\x43\xf8\x09\x77\x9f\x28\xee\x37\x98\x09\xcc\x17\xb7\x11\xc9\x63\x7b\xd4\xae\xcd\xb2\x6b\x41\x4b\xb6\xc7\x0a\xc4\x83\xbf\x19\x36\x9c\x6d\x89\xd2\x40\x6a\x5e\xc8\x25\xee\x9e\x69\x03\x4e\xfb\xca\x0f\x9a\x57\x6a\x4e\x10\x38\xb1\x33\x06\x6e\x60\x9c\x0d\xd0\xae\x62\xb3\xee\xa5\xf6\x01\x6e\x57\x73\x13\xd3\xdb\x0b\xde\xed\xcb\xf2\x89\xef\x0f\x3a\x40\x3b\x02\x7b\x37\x2e\xca\x16\xc7\xfd\xe5\x84\x3d\x76\x92\x0d\xa9\xa8\x5c\x97\x4a\xe1\x37\x02\xcb\xa4\x0f\xfe\x35\x6c\x03\x15\xd1\xc8\x43\xbc\xa7\x2b\xc0\x3c\x97\x98\xac\x80\xdf\x7e\x0b\x73\x7b\xee\xc3\x0a\xe7\x85\x67\xff\x0d\x88\x21\x12\x58\x30\x69\xf9\x8e\x67\x7e\xb4\x36\x9f\xff\x0b\x00\x00\xff\xff\x9c\x5a\x4c\xa0\xe2\x2b\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 11234, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateRegistryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcf\x4a\x34\x31\x10\xc4\xef\x81\xbc\x43\x11\xe6\xf0\x7d\xa0\xb3\xa2\xb7\x05\x6f\x1e\x14\x14\x64\xd9\x9b\x78\x68\x76\x7a\x62\xd8\x4d\x36\x24\x19\xdc\xa1\xc9\xbb\xcb\xfc\x71\x4f\x1e\xbb\xaa\xab\xa8\x9f\x08\x3a\xee\x5d\x60\x98\xc4\xd6\xe5\x92\x46\x83\x5a\xb5\x12\x41\x13\x8f\x16\xdb\x47\x34\xed\x3b\x1d\x8e\x64\xf9\xd7\x28\xec\xe3\x89\x0a\xc3\x7c\x31\x75\x9c\x0c\x9a\xd9\xd2\x6a\xb3\xc1\x7e\x8c\x9c\x91\xb8\x0c\x29\x64\x78\x8a\xd1\x05\x8b\x3e\x9d\x3d\xca\x18\x19\xae\xcb\x28\x67\xec\x5f\x97\x33\x90\xe7\xdc\x6a\xd5\x0f\xe1\xb0\x64\xdf\x28\xfe\xfb\x3f\x05\x3f\x06\x17\xca\xc3\xfd\x67\x2e\x69\xaa\x10\xad\xb0\xf6\xfe\xed\x8a\xdc\x22\x51\xb0\x8c\x86\x4f\xec\x97\xe9\xbb\x95\x6a\x1e\x08\x00\x77\x97\x09\x6d\x7a\x68\x9f\xf9\xf2\xf2\x84\x5a\xb7\x30\x57\x6d\x47\xdf\xa8\xd5\xdc\x2c\x75\x1c\xba\x35\x58\xb5\x9a\x09\x45\xae\xe2\x4f\x00\x00\x00\xff\xff\xfa\x22\x40\xae\x3c\x01\x00\x00")

func _templateRegistryTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateRegistryTmpl,
		"_template/registry.tmpl",
	)
}

func _templateRegistryTmpl() (*asset, error) {
	bytes, err := _templateRegistryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/registry.tmpl", size: 316, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/client.tmpl":   _templateClientTmpl,
	"_template/header.tmpl":   _templateHeaderTmpl,
	"_template/main.tmpl":     _templateMainTmpl,
	"_template/registry.tmpl": _templateRegistryTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"client.tmpl":   &bintree{_templateClientTmpl, map[string]*bintree{}},
		"header.tmpl":   &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":     &bintree{_templateMainTmpl, map[string]*bintree{}},
		"registry.tmpl": &bintree{_templateRegistryTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
