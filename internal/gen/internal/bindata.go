// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/client.tmpl
// _template/header.tmpl
// _template/main.tmpl
// _template/registry.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfe\x8a\xc1\x84\x92\x94\xe0\xdc\x03\x3d\xa5\x3d\x14\xda\x12\x4a\x7e\x40\x95\xd7\x89\x88\xbd\x12\xeb\x75\x92\x22\xf2\xef\x45\xb2\xd2\x93\x96\xa7\xd1\x68\x66\x63\x44\x4b\x9d\x63\x42\x6d\x7b\x47\xac\x35\xee\xf7\x2a\x46\x2c\xc2\xf9\x88\xed\x0b\x16\xcd\xde\xd8\xb3\x39\x52\xe1\x4a\x43\xe8\x8d\x12\xea\x13\x99\x96\xa4\xc6\x22\xdd\x54\x9b\x0d\xde\xf9\xe2\xcf\x24\xb0\x86\xe1\xf2\x0c\x31\x57\x7c\x1e\xf6\xe2\xd5\x43\x82\x85\x35\x7d\x3f\x36\x95\xfe\x06\xfa\x97\x3b\x56\x92\xce\x58\x42\xac\x50\xe8\xb7\xb9\x2e\xad\xde\x60\x3d\x2b\xdd\xb4\xd9\xcd\xe7\x1a\x8e\xc3\xa4\xf8\x71\xdc\xbc\xb1\xf5\x2d\xc9\x1a\x7e\xd2\x07\x7b\xa5\xcc\x56\x20\x11\x2f\xd5\x1c\x6b\x97\x7b\xc1\x0d\xa1\xa7\x21\x4d\x03\xe9\xc9\xb7\x23\x3a\x2f\x39\x90\xe3\x23\xba\x89\xad\x3a\xcf\x23\x3a\xf1\x03\x0e\x1f\x18\xed\x89\x06\x83\x8b\x33\x8f\xa4\x25\x77\xf1\x1b\x55\x26\xab\x39\x73\x6a\x56\x34\xe9\xcf\xe4\x85\x2f\xba\xce\xc2\xa5\x2b\x3d\x8b\x62\x85\xe7\xe2\x90\x9f\x92\x4e\xc2\x78\x9a\x51\x22\xd9\x6e\x5b\x16\x28\xeb\x0a\xb8\x27\xd3\x18\x41\xdc\xa6\x55\xff\x05\x00\x00\xff\xff\x88\xcc\x3e\xfd\xb3\x01\x00\x00")

func _templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateClientTmpl,
		"_template/client.tmpl",
	)
}

func _templateClientTmpl() (*asset, error) {
	bytes, err := _templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/client.tmpl", size: 435, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x41\x6a\xc3\x30\x10\x45\xf7\x73\x8a\x8f\xe8\x22\x86\x56\x3e\x41\x37\x69\xba\xe8\x26\x29\x34\xfb\x22\x5b\x23\x45\xb8\x1e\x19\x75\x5c\x5a\x84\xee\x5e\x4c\x42\x96\x33\x1f\xde\x7b\xb5\xc2\x73\x48\xc2\x30\x17\x76\x9e\x8b\x41\x6b\xd4\xf7\x78\xc9\x9e\x11\x59\xb8\x38\x65\x8f\xe1\x0f\x31\xab\x8f\x2c\x8f\x38\x9c\x70\x3c\x9d\xf1\x7a\x78\x3b\x5b\xa2\xc5\x8d\x93\x8b\x8c\x5a\xf1\x60\xdf\x6f\x47\x6b\x44\x69\x5e\x72\x51\xec\xc8\x8c\x59\x94\x7f\xd5\x90\x09\xb3\x1a\x22\x13\x93\x5e\xd6\xc1\x8e\x79\xee\x37\x6a\xaf\xbe\x1f\x92\x18\xea\x68\x53\x1f\xf3\x53\x5e\xae\x59\x49\x53\x16\x84\x5c\x30\x31\x2f\x49\x22\xae\xd4\x6f\x4b\x3f\xae\xe0\x13\xcf\x18\x92\xd8\xfd\x1a\x02\x97\xda\xee\xcf\x9b\xd1\xee\xdd\x38\xc5\x92\x57\xf1\xbb\xee\x3e\x86\x59\xed\x87\x96\x24\x91\xcb\x4e\xd2\x57\x47\x54\x2b\x58\xfc\x96\xfd\x1f\x00\x00\xff\xff\xd8\x6f\x86\x9d\x11\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 273, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\xdd\x73\xdb\x36\x12\x7f\xd7\x5f\xb1\xf5\xb8\x39\x32\x55\xe8\x3e\x3b\xf5\xc3\x39\x4e\x2f\x9a\xc9\xf5\x32\x76\x73\x2f\x9d\x4e\x86\x22\x97\x32\xc6\x14\xa0\x03\x41\x49\x39\x56\xff\xfb\x0d\xbe\x48\x90\x04\x45\x5a\xa3\xba\xed\xe9\xc5\x34\x3e\x16\xbb\xbf\x5d\xec\x07\x80\xaa\x82\x14\x33\x42\x11\x2e\xd6\x31\xa1\x17\x70\x38\xcc\xaa\x0a\x2e\x37\x4f\x2b\xb8\xbe\x81\xcb\xe8\x53\x9c\x3c\xc5\x2b\x34\xed\x02\xd7\x9b\x3c\x16\x08\x17\x8f\x18\xa7\xc8\x2f\xe0\x52\xf6\xc8\x2e\x1e\xd3\x15\xc2\x65\xa1\x66\x3d\x08\x5e\x26\xa2\x90\x7d\x57\x57\x20\x09\x16\xd1\x3b\xb6\x5e\x23\x15\x9a\xd2\x1b\x20\x99\x6c\xbc\x63\x49\x61\x5b\x0c\x85\x54\x52\x68\x7a\xf4\x7c\xc1\xc9\x1a\x2e\x53\x3b\x14\xa9\xef\x53\x93\xfc\x7c\xff\x51\xcf\x93\x53\x1f\x10\xcd\xf2\xba\x19\x32\xc6\x81\x63\x86\x1c\x69\x82\x91\x4b\x41\x7c\xdd\xd8\xb1\x3f\xc5\x6b\x29\x31\x14\x4a\x0c\xa8\x5c\xf6\x32\xd0\xfc\xfd\x48\x30\x4f\x15\x87\x00\x00\x46\xca\xcc\x23\x65\x4c\x53\x08\x54\x0f\x4d\x89\x20\x8c\xc6\x79\x08\x01\x65\x02\xda\x8d\xb7\x8c\xe5\x61\xc3\xf9\xe7\x02\xe1\x01\x85\xa6\x6a\x19\x92\xb4\xfe\xd1\x6d\x7c\xc4\x7c\x83\xbc\x68\x09\x23\x79\xb2\x90\x64\xd1\x1d\x2b\x97\x39\x3e\xe4\x24\xc1\xa6\xd3\x25\xf1\xcb\xaf\xbf\xfc\xaa\x5b\x7e\x96\x28\x38\x04\x30\x2f\xd0\x50\x39\x3a\xff\xc8\x6c\xef\x8c\x81\xf1\x3d\xbd\x1e\x66\x8d\x05\x99\xb9\x72\xd2\xe2\x0e\x48\x01\x3f\x7f\x04\xa5\x35\x92\x02\xcb\xda\x83\xa2\x59\xc2\x68\x21\xbc\x33\x6f\xe0\xfb\xbd\x6e\xff\x80\xfb\xc5\x1d\x1c\x0e\x6f\xd5\x2a\xef\x69\xc2\x52\x04\xb2\xde\xe4\x28\x95\x58\xc0\x92\xd0\x48\xb7\xf2\x68\x96\x95\x34\x81\x40\x4f\xbc\xc7\x04\xc9\x16\xb9\x14\xe5\x75\x6b\x8d\xd0\x90\x31\x03\x6f\xcb\xec\xef\x7c\xa5\x86\x49\x62\xb7\x65\x96\x21\x0f\x01\x39\x67\x1c\x2a\x25\x38\xb1\xac\xbb\x44\x6f\x6e\x80\x92\xdc\x8c\x90\x3f\x8e\xa2\xe4\x14\xb2\xb5\x88\xde\xcb\xc9\x59\x70\x91\xc4\xf4\x6f\x02\x50\x73\x6d\x48\xc4\x3b\x83\x29\xc4\x85\xa4\x70\x11\x2a\x0a\x7a\x57\x3b\xec\x44\x9f\x4a\xb1\xb8\x0b\x3c\xf0\x84\xe3\xd6\x6e\x2c\xcb\x6f\xc3\x7d\xf3\x73\x06\xd8\x4e\x9f\xcc\x91\xdd\x41\xf5\x68\xb5\xaa\xec\xf9\x10\x17\x41\xaf\x77\x41\x53\xdc\x2b\xc4\xab\xae\x01\xb5\xd7\xff\x37\x26\x82\x71\xd7\x0e\x3b\x40\xe8\x01\x1f\x94\x4b\x0b\x72\xa4\x7d\x25\x47\x2d\xeb\x0d\x35\xa8\xd2\x97\x54\x95\x59\xc4\x98\x09\x1c\x0e\x24\x95\xd6\x65\x4c\xff\x8b\xfc\x54\x4c\xcd\x7b\x1b\xb2\xe6\x8b\xb3\x5d\x55\xc9\x09\x87\xc3\xb6\xaa\x90\xa6\x87\x83\xc4\x5d\xeb\x60\x84\x17\x47\x78\x2f\xed\xda\x80\xa6\xc8\xcd\xd9\xce\xc8\x66\xe5\xfb\x32\x87\x6d\xc3\x0b\x67\xbb\x31\xb0\x1b\x1c\x9c\x95\x6d\xe7\x82\x0a\xe4\x59\xdc\xb8\x11\xfb\x23\x19\x6c\xfb\x36\x3f\x60\xf7\x25\x8d\x97\x39\x82\x60\x43\xb6\x7f\x0d\x99\xb2\x1c\x0d\xd4\x7d\xbc\xb3\x58\xa1\xde\xd8\xb0\x23\xe2\x11\x88\xb2\x9f\x6f\x53\xe9\x49\xe4\x4e\x99\x03\x49\xf7\x61\x6b\xf1\xb6\x0c\x4a\x31\x33\x87\x65\xe4\x5c\x62\xb3\x8d\xfc\x5b\x3e\x7c\xab\x46\x7c\xf3\xc7\x88\x75\x0d\xdf\xee\xb4\x4c\x73\xc9\x46\x23\x98\xdf\x3d\x0f\x98\x88\x5e\xeb\x47\xe9\xfa\x0e\x87\x60\x1b\x1e\x57\xfe\x90\xed\xf5\x3c\xfc\x30\x1f\x83\x96\x74\xc4\x8a\x8e\x78\x13\x0b\xd1\x14\x7f\x7a\xba\x02\x48\xdb\xd7\xf6\x0d\xa6\x31\x96\x11\x46\x9f\x69\x4a\xe7\x94\xc2\x18\x4c\x6d\x2b\xc3\x61\xfc\xa8\x8d\x8c\xf9\xce\x21\x0b\xf2\x1a\x94\x27\x74\x0c\xce\xe8\x27\x0f\x0e\x42\x94\xe4\x33\x95\xa8\x1e\x09\x6d\xb5\x2f\xef\xac\xaa\xf2\xc8\x4e\xd2\x55\xa0\x28\x60\x1b\xe7\x25\xda\xd4\xa3\xe9\x4b\x9c\xe9\x0a\xea\xe9\xb9\x43\x77\x9d\x40\x2f\x51\x73\xd6\xce\xe4\x4c\xda\xe6\xc9\xd1\x74\xbb\x42\xa1\x9d\x6a\x85\x26\x9b\xed\x09\xea\x86\x6e\xe9\x8d\xf5\xba\x1d\xd7\x30\x2d\x5a\x3f\xa0\x38\x12\xad\xb5\x12\x35\xd3\xa7\xd1\xff\x4c\x8b\x09\x2b\xcc\xfc\x96\x7b\x36\x11\x46\x3d\x8e\xc6\xb0\x93\xcc\x8e\xa6\x4e\x57\x57\xfd\x0c\x5f\xdb\xf0\x74\x7b\x93\x75\x82\x24\xb4\x64\x2c\xc7\x98\xc2\xee\x91\x24\x8f\xd2\x49\x09\x5e\x2a\x4b\xd1\xa3\x76\x71\x21\xed\x78\xba\x75\x76\x19\x0b\x42\x38\x83\x81\xb6\xec\x73\x0e\xec\x49\xf1\x1d\x36\xd9\xf1\x37\x67\x4f\x15\x1d\xc7\xa0\xf8\x9f\x43\x16\xe7\x05\x3a\xfe\xc5\xf4\x8e\x28\x79\xae\x10\xb5\x7a\x35\x5a\x1e\xa8\x50\xa5\x42\xee\xd0\x57\x61\xe8\xd6\x67\x54\x18\x7a\xc2\x8b\x55\x18\x29\xfa\x2b\x0c\xc1\x7a\x51\xaf\x1b\xe7\x9a\x38\xf1\x8e\xd1\xa2\x5c\xe3\x40\xcd\x71\x4a\x78\x1b\x60\xab\x1f\xc6\xa6\xd6\x33\xc3\x0e\x71\xda\x7e\x3f\x9f\x99\x1e\xc9\xd0\x3c\x9c\xf6\x73\xe9\xdf\x65\xc3\x58\x7e\x3a\xcb\x55\xdd\x1c\xd9\xcf\x6f\x3f\x29\x94\x3f\x7d\x8c\xf4\x11\xe9\x7c\xc8\x6e\x5a\x35\x4a\xd8\x15\x74\x30\xbf\x3e\xdd\x7a\xa6\x25\x47\xf6\xd7\x16\x47\x56\x4c\x24\xdd\x4b\x39\xbe\x7f\xab\xbe\x7e\x68\x44\x54\x0d\xdf\x7d\x07\xd5\xac\x8d\xdf\x68\xf6\x5c\xcb\x4b\xe9\xc9\x58\x4d\xc1\xeb\xa5\x30\xeb\xe3\x26\x7f\xdb\x98\xab\xfa\xd2\x77\x96\xd4\xc3\x58\x22\xa1\x6d\xd4\x40\xdd\x34\xfc\x50\xe3\xf4\xb6\xfe\x52\xa8\x77\x41\xef\x98\x2a\x4c\xab\x54\x35\xab\x2a\x66\x18\x2d\x68\x6f\xac\x99\xae\xa7\xb5\xb3\xe1\x26\x8f\xff\x0b\x29\xa5\x73\xfc\xe7\x29\xec\x5d\xd5\xd5\x79\xc0\x11\xd5\x39\x25\xb3\x1c\x1d\xf9\xe3\xd8\xb1\xb2\xf9\xcf\x81\xc8\xa8\x49\x74\x37\x66\xbb\x42\xfa\xcb\x19\x41\x7f\xa3\xc0\xb3\x1c\x97\x62\x9f\xed\xe0\x06\xe2\xcd\x06\x69\x1a\x70\xb6\x9b\x6b\xc8\xa6\x78\x86\xf1\xc8\x6b\xc8\x8e\x66\x6b\x9c\xed\xfa\x0b\xfa\xe2\xec\xf9\x97\x1e\x90\x76\x00\xdf\x43\x2f\xea\x3e\xf3\x40\xed\x5c\x2e\xea\xcf\x17\x63\xa7\xd6\x5d\x3d\x00\x8f\xba\xb1\xe9\x07\x34\xa7\x39\xad\x97\xc5\x69\xc8\xa4\x4f\xf7\x52\xff\x27\x76\xd0\xcf\x4e\xfd\x07\x92\x93\x8e\x92\xcc\x85\x63\x6b\x0f\x5e\x5d\x81\xba\x78\x52\x17\x87\x4e\x9d\x57\x37\x32\xde\xdc\x55\xb9\x33\x87\xab\xbf\x4e\xf1\x57\x53\x0a\x42\x0f\x19\xa8\x2c\x9b\xaf\xfa\x94\xd4\x11\x97\x53\x8e\xbe\xa7\x45\xc9\x09\x5d\x01\xb1\x14\x0a\x20\x14\x12\xb6\xde\x90\x1c\xdf\x08\xb2\x46\x7b\xc9\xe1\xde\xac\xc9\x70\x1f\xcc\xbe\xb8\xb7\x63\x70\x63\xd7\x33\xa3\xaa\x83\x19\x60\x8a\x5b\xdf\x00\x3f\x82\x5f\x7c\x52\xf9\x67\x1b\x51\xc2\x99\x73\xfd\xfb\x4f\x14\x8f\x2c\x6d\xdd\x3c\xd7\x4d\x40\xe8\x96\x3d\x61\x01\x6b\xdd\xd2\xab\x68\x35\x74\x12\x11\x5d\x3e\xab\xeb\xdb\xaf\xd1\xc8\x85\x35\xfc\x41\x37\xd6\x0d\x85\x7b\x2c\xca\x5c\xf8\xda\x1e\x08\x5d\x95\x79\xac\xfc\x9d\x36\xb0\x04\x5e\xbf\xcb\x09\x52\x11\x76\xe1\x09\x12\xb1\x97\xe6\x25\x70\x2f\x64\x31\x28\xff\xce\x81\xe3\x7f\x4a\x2c\x44\xef\x10\x22\x78\x6d\x0d\xcc\xac\x3d\xd7\xa0\xd9\x92\x51\xe5\xf3\xba\xaf\x33\xb0\x73\x52\x90\x44\x7c\x93\x44\x0b\xa5\x9a\xfb\x78\x27\xb9\xa8\x57\x9d\xc3\x2b\x4d\x63\xe4\x84\x80\x92\x5c\x2d\xdf\x3f\xc1\x31\xf3\xe7\x66\xdb\xba\x9e\xf1\xcc\x78\x9c\x04\x87\xf1\xb6\xb7\x6c\xff\xa2\xa8\xe8\xe9\x91\xcb\xc9\x6d\x5c\x60\x9d\xad\x38\x60\x39\x86\xfb\xbb\xe0\xe6\x1e\x54\x49\x90\xd8\x13\xfc\xeb\xe9\x79\x60\xb0\xa7\x11\x20\xbc\x18\xf8\x65\xb4\x9f\xce\x69\x5e\x7d\x78\xa4\xde\xb6\x2c\x1a\x5f\xd9\x38\x19\xf7\xac\x76\xc3\xb1\x50\x3e\xbf\x8e\x6b\xd6\xbd\xac\x90\x22\x27\x89\x7a\xb4\x10\xc9\xfd\xde\x24\x72\xb5\x0f\xa8\x1d\x40\x36\xe0\x00\xcc\x34\xc3\x9e\xf4\xe2\xfb\x58\xc6\x99\x6b\xf9\x0d\x2b\x6f\xce\x67\x63\xfa\xb2\xcc\x42\x35\xac\x1b\xce\x65\x9b\xfc\x6d\x62\x4a\x92\x40\x45\x5e\xd9\xa4\xe8\x43\xb1\x23\x22\x79\xd4\xf7\xc0\xab\x28\x90\xdc\xeb\x6b\x04\x0b\x4c\xa2\x3c\xa0\x3a\x40\xb2\x41\xae\x80\x37\x9a\x3b\x48\xe2\x02\xb5\xd2\x93\xa8\x0e\xf0\x06\xb6\xc4\x41\xc7\x62\x6e\xe7\xa5\x98\xc5\x65\x2e\xae\x0d\x4f\x5b\xcb\x51\xfd\x4e\xa7\xc1\xbc\x0e\x5f\x46\xf3\x4e\x60\xaa\xff\x37\x71\x48\xfd\xdf\x0d\xa1\x35\xa5\x99\x7b\x4c\xdb\x82\xae\x73\x66\x1b\xf3\xaf\x90\xe2\x9b\x02\x39\x89\x73\xf2\xdf\x58\x10\x46\xeb\x50\xd9\xe4\x8a\x7a\xab\xf8\xc8\x49\x55\xb4\x0f\x6c\x83\x4e\xc1\xd0\xf2\x1e\x24\xad\xf5\xba\x2c\xb3\xe8\x13\xe2\xd3\xe2\xce\xa4\x68\x43\xa9\xd9\xb0\x13\x30\x0a\x25\xa9\x73\x99\x7f\x4c\x95\xc6\x65\x2b\x4d\xb6\x14\xa9\x4f\x6f\xaf\xeb\x25\x2d\x76\x32\x82\x76\xf5\x1b\xd5\xa3\xb6\x36\xf9\x4c\x9c\x70\xde\x49\x34\xd5\xb5\xba\x49\xb5\xa5\xd5\x8e\x5f\xa5\x2b\x39\x47\xf3\xcf\x2c\x3a\x92\x64\x1e\xba\xd8\xbd\xda\x6a\x57\xe8\x49\x16\xad\x79\x7a\xe1\x7e\x36\x1b\xd2\x10\x7e\xc2\xdd\x67\x8a\xfb\x0d\x26\x02\xd3\xc5\x5d\x40\xd2\xd0\x9e\x60\x37\xaf\xa0\x1a\x0b\x5a\xb2\x3d\x16\x20\x1e\xbb\x9b\x61\xc3\xd9\x96\x28\x0d\xc4\xe6\x69\x58\xe4\xee\x99\x26\xe0\x34\xcf\xdb\xa0\x7e\x9e\xe5\x04\x81\x23\x3b\x63\xe0\x02\xc3\xd9\x00\xcd\x2a\x36\xaf\x5d\x6a\x1f\xe0\x76\xd5\x17\x19\xbd\xbd\xd0\xb9\xbc\x58\x3e\xf3\xfa\xbe\x05\xb4\x23\xb0\xe7\xc2\x62\x3b\xee\x2f\x27\xec\xb1\xa3\x6c\x48\x45\xa5\xba\x18\xf1\x5f\xb1\x2f\xa3\x3e\xf8\x37\xb0\xf5\xd4\x1c\x23\x8f\xd4\x9e\xaf\x00\xf3\xda\x60\xb2\x02\x7e\xfb\xcd\xcf\xed\xa9\xef\x12\x9c\xa7\x8d\xfd\x27\x14\x86\x88\x67\xc1\xa8\xe1\x3b\x9c\x75\xa3\xb5\xf9\xfc\x5f\x00\x00\x00\xff\xff\x7b\xfd\xf1\xcb\xdb\x2a\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 10971, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateRegistryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x31\x4b\x04\x31\x14\x84\xfb\xfc\x8a\x21\x6c\xa1\xa0\x7b\xa2\xdd\x81\x9d\x85\x82\x82\x1c\xd7\x89\xc5\xe3\x76\x36\x86\xbb\xe4\x42\x92\xc5\x5b\x42\xfe\xbb\xc4\x5d\xac\x2c\xdf\x0c\xf3\xf1\xbe\x52\x30\x70\xb4\x9e\xd0\x91\xc6\xa6\x1c\x67\x8d\x5a\x55\x29\xe8\xc2\xd1\x60\xfb\x88\xae\x7f\x97\xc3\x51\x0c\xd7\x3c\xd3\x85\x93\x64\x42\x7f\x51\x06\x46\x8d\xae\x35\x6a\xb3\xc1\x7e\x0e\x4c\x88\xcc\x53\xf4\x09\x4e\x42\xb0\xde\x60\x8c\x67\x87\x3c\x07\xc2\x0e\x09\xf9\x8c\xfd\xeb\x72\x7a\x71\x4c\xbd\x1a\x27\x7f\x58\xa6\x6f\x12\xae\xae\xdb\xee\x63\xb2\x3e\x3f\xdc\x7f\xa6\x1c\x1b\xa1\x28\xac\xd4\x7f\xcb\x52\x6e\x11\xc5\x1b\xa2\xe3\x89\x6e\x79\x7a\xb7\xea\xb4\xdf\x00\xe0\xee\xd2\x9c\x5a\xdf\x3f\xf3\xf2\xf2\x84\x5a\xb7\xd0\x7f\xd9\x4e\xbe\x51\xab\xbe\xf9\x85\xd1\x0f\xcb\xac\xaa\xaa\x9a\xf3\x1a\xfc\x04\x00\x00\xff\xff\x97\x1b\x2c\x20\x2e\x01\x00\x00")

func _templateRegistryTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateRegistryTmpl,
		"_template/registry.tmpl",
	)
}

func _templateRegistryTmpl() (*asset, error) {
	bytes, err := _templateRegistryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/registry.tmpl", size: 302, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/client.tmpl":   _templateClientTmpl,
	"_template/header.tmpl":   _templateHeaderTmpl,
	"_template/main.tmpl":     _templateMainTmpl,
	"_template/registry.tmpl": _templateRegistryTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"client.tmpl":   &bintree{_templateClientTmpl, map[string]*bintree{}},
		"header.tmpl":   &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":     &bintree{_templateMainTmpl, map[string]*bintree{}},
		"registry.tmpl": &bintree{_templateRegistryTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
