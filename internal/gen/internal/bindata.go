// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/client.tmpl
// _template/header.tmpl
// _template/main.tmpl
// _template/registry.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\x41\x6b\x83\x40\x10\x85\xef\x82\xff\xe1\x21\xa1\x24\x25\x98\x7b\xa0\xa7\xb4\x87\x42\x5b\x42\xc9\x1f\xd8\xae\x63\xb2\x44\x67\x65\x1c\x93\x94\xc5\xff\x5e\x5c\xd7\x9e\x1c\xbe\x79\xbe\x7d\x6f\x42\x40\x45\xb5\x63\x42\x61\x1b\x47\xac\x05\xc6\x31\xcf\x42\xc0\xaa\xbb\x9e\xb1\x7f\xc1\xaa\x3c\x1a\x7b\x35\x67\x5a\x16\x4a\x6d\xd7\x18\x25\x14\x17\x32\x15\x49\x81\x55\x5c\xe5\xd9\x6e\x87\x77\xbe\xf9\x2b\x09\xac\x61\xb8\x38\x43\xcc\x1d\x9f\xa7\xa3\x78\xf5\x90\xce\xc2\x9a\xa6\xe9\xcb\x3c\xd3\xdf\x8e\xfe\xf5\x8e\x95\xa4\x36\x96\x10\xf2\x0c\x09\x7f\x9b\xfb\xda\xea\x03\xd6\xb3\xd2\x43\xcb\xc3\xfc\xdd\xc2\x71\x37\x28\x7e\x1c\x97\x6f\x6c\x7d\x45\xb2\x85\x1f\x74\x61\xaf\x14\xd9\x06\x24\xe2\x25\xcf\x96\x6c\x87\x58\x10\xae\xed\x1a\x6a\xa7\xa9\x25\xbd\xf8\xaa\x47\xed\x25\xa6\x72\x7c\x46\x3d\xb0\x55\xe7\xb9\x47\x2d\xbe\xc5\xe9\x03\xbd\xbd\x50\x6b\x70\x73\x66\x49\xbb\x84\x4f\x86\xbd\xca\x60\x75\x0e\x3e\x15\x4c\xaa\xf4\xf0\x64\x88\x2f\xba\xcf\xe2\xb5\x4b\x85\x93\x68\x83\xe7\xe4\x32\xff\x4e\x3a\x08\xe3\x69\x66\x11\x45\xcf\x7d\x3a\xa6\x6c\x27\x34\x26\xeb\x10\x40\x5c\xc5\xe3\xff\x05\x00\x00\xff\xff\x6e\x86\x44\xb6\xc8\x01\x00\x00")

func _templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateClientTmpl,
		"_template/client.tmpl",
	)
}

func _templateClientTmpl() (*asset, error) {
	bytes, err := _templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/client.tmpl", size: 456, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xc1\x4a\x03\x31\x10\x86\xef\x81\xbc\xc3\x4f\xf0\xd0\x82\x26\x4f\xe0\xa5\xd6\x83\x97\x56\xb0\x77\xc9\x6e\x26\x69\x58\x77\xb2\xc4\x59\x51\xc2\xbe\xbb\x6c\x5b\xe8\x69\x98\xf9\xe1\xfb\xe6\x6f\x0d\x81\x62\x66\x82\x39\x93\x0f\x54\x0d\x96\x45\x2b\xe7\xf0\x52\x02\x21\x11\x53\xf5\x42\x01\xdd\x1f\x52\x91\x90\x88\x1f\xb1\x3f\xe2\x70\x3c\xe1\x75\xff\x76\xb2\x5a\x69\x35\xf9\x7e\xf0\x89\xd0\x1a\x1e\xec\xfb\x6d\x59\x31\x5a\xe5\x71\x2a\x55\xb0\xd1\xca\xf4\x85\x85\x7e\xc5\x68\x65\xe2\xb8\x0e\xad\x4c\xca\x72\x9e\x3b\xdb\x97\xd1\xad\x74\x27\xc1\x75\x99\x8d\x56\xdb\x35\x76\x0e\x87\xf2\x54\xa6\xeb\x8b\x59\x72\x61\xc4\x52\x31\x10\x4d\x99\x13\xae\xf0\x6f\xab\xd5\x8f\xaf\xf8\xc4\x33\xba\xcc\x76\x37\xc7\x48\xb5\x2d\xf7\xeb\xcd\x6c\x77\xbe\x1f\x52\x2d\x33\x87\xcd\xf6\x9e\xc6\x51\xec\x87\xd4\xcc\x89\xea\x86\xf3\xd7\x45\xdd\x1a\x88\xc3\xa5\xc4\x7f\x00\x00\x00\xff\xff\x3b\x4a\xba\xaf\x23\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 291, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x4b\x73\xdc\x36\x12\xbe\xcf\xaf\xe8\xa8\x94\x2c\xe9\x8c\xa9\x9c\xe5\xe8\xb0\xb2\x9c\xb5\xaa\xbc\x59\x97\x64\xef\x25\x95\x52\x71\xc8\xa6\x84\x12\x07\x98\x05\x30\x0f\xef\x84\xff\x7d\x0b\x2f\x12\x24\xc1\x87\x54\x8a\x93\xec\x5c\x44\xe1\xd1\xe8\xfe\xba\xd1\x0f\x00\xc7\x23\xe4\x58\x10\x8a\x70\xb2\x4e\x09\x3d\x81\xaa\x5a\x1c\x8f\x70\xba\x79\xbc\x87\xf3\x0b\x38\x4d\x3e\xa6\xd9\x63\x7a\x8f\xb6\x5d\xe2\x7a\x53\xa6\x12\xe1\xe4\x01\xd3\x1c\xf9\x09\x9c\xaa\x1e\xd5\xc5\x53\x7a\x8f\x70\x2a\xf4\xac\x5b\xc9\xb7\x99\x14\xaa\xef\xec\x0c\x14\x41\x91\xbc\x65\xeb\x35\x52\x69\x28\xbd\x06\x52\xa8\xc6\x2b\x96\x09\xd7\x62\x29\xe4\x8a\x42\xd3\x63\xe6\x4b\x4e\xd6\x70\x9a\xbb\xa1\x48\x43\x9f\x86\xe4\xe7\x9b\x0f\x66\x9e\x9a\x7a\x8b\x68\x97\x37\xcd\x50\x30\x0e\x1c\x0b\xe4\x48\x33\x4c\x7c\x0a\xf2\xcb\xc6\x8d\xfd\x39\x5d\x2b\x89\x41\x68\x31\xe0\xe8\xb3\x57\x80\xe1\xef\x27\x82\x65\xae\x39\x04\x00\xb0\x52\x16\x01\x29\x53\x9a\x43\xa4\x7b\x68\x4e\x24\x61\x34\x2d\x63\x88\x28\x93\xd0\x6e\xbc\x64\xac\x8c\x1b\xce\x3f\x0b\x84\x5b\x94\x86\xaa\x63\x48\xd1\xfa\x47\xb7\xf1\x01\xcb\x0d\x72\xd1\x12\x46\xf1\xe4\x20\x29\x92\x2b\xb6\x5d\x95\x78\x5b\x92\x0c\x9b\x4e\x9f\xc4\x2f\xbf\xfe\xf2\xab\x69\xf9\xa4\x50\xf0\x08\x60\x29\xd0\x52\x19\x9d\x3f\x32\x3b\x38\x63\x60\x7c\x4f\xaf\xda\xb8\xb4\x1c\x1a\x31\x91\xfc\x1b\x33\xc9\x78\xcb\xb2\x2c\x4d\x45\xec\xfa\x0a\x88\x80\x4f\x1f\x40\x6b\x93\xe4\xc0\x8a\xf6\xa0\x64\x91\x31\x2a\x64\x70\xe6\x05\xfc\x70\x30\xed\xef\xf1\x70\x7d\x05\x55\xf5\xc6\x67\x45\x2d\xf8\x8e\x66\x2c\x47\x20\xeb\x4d\x89\x4a\xcf\x02\x56\x84\x26\xa6\x95\x27\x8b\x62\x4b\x33\x88\x0c\x8d\x1b\xcc\x90\xec\x50\xb1\x0a\xaf\x5a\xcb\xc5\x96\x8c\x1d\x78\xb9\x2d\xfe\xce\xef\xf5\x30\x45\xec\x72\x5b\x14\xc8\x63\x40\xce\x19\x87\xa3\xc6\x86\x38\x29\x7c\xa2\x17\x17\x40\x49\x69\x47\xa8\x1f\x47\xb9\xe5\x14\x8a\xb5\x4c\xde\xa9\xc9\x45\x74\x92\xa5\xf4\x6f\x12\xd0\x70\x6d\x49\xa4\x7b\x0b\x3b\xa4\x42\x51\x38\x89\x35\x85\x6a\x10\xe8\x0e\x9b\xc9\xc7\xad\xbc\xbe\x8a\x02\x08\xc6\xdd\x1d\x39\xba\x67\xfc\xe5\x7a\x3b\xa1\x6f\xc4\xde\x00\xd7\x19\x82\x25\x71\xfb\xb0\x1e\xad\x57\x55\x3d\xef\x53\x11\xf5\x7a\xaf\x69\x8e\x07\xad\x94\x63\xd7\x0c\xdb\xeb\x37\x78\x38\x6b\xee\x60\x62\x06\xbc\xd7\x8e\x31\x2a\x91\xf6\xed\x20\x69\xed\x81\xd8\xe0\xae\x3c\xd2\xf1\x68\x17\xb1\x96\x04\x55\x45\x72\x65\x8b\x76\x03\xdd\xa9\x4f\xcd\xd4\xb2\xb7\xad\x6b\xbe\x38\xdb\x1f\x8f\x6a\x42\x55\xed\x8e\x47\xa4\x79\x55\x29\xdc\x8d\x0e\x26\x78\xf1\x84\x0f\xd2\xae\x6d\x6c\x8e\xdc\x9c\xed\xad\x6c\x4e\xbe\xbb\x25\xec\x1a\x5e\x38\xdb\x4f\x81\xdd\xe0\xe0\xad\xec\x3a\xaf\xa9\x44\x5e\xa4\x8d\x33\x72\x3f\x52\xc0\xae\xbf\x2d\x06\xb6\xc6\x96\xa6\xab\x12\x41\xb2\xa1\xed\x71\x0e\x85\xb6\x1c\x03\xd4\x4d\xba\x77\x58\xa1\xd9\xfb\xb0\x27\xf2\x01\x88\xb6\x9f\x6f\x73\xe5\x77\xd4\x66\x5a\x02\xc9\x0f\x71\x6b\xf1\xb6\x0c\x5a\x31\x0b\x8f\x65\xe4\x5c\x61\xb3\x4b\xc2\x5e\x21\x7e\xa3\x47\x7c\xf3\xc7\x88\x75\x0e\xdf\xee\x8d\x4c\x4b\xc5\x46\x23\x58\xd8\xc9\x0f\x98\x88\x59\xeb\x27\xe5\x1d\xab\x2a\xda\xc5\xe3\xca\x1f\xb2\xbd\x5e\x9c\x18\xe6\x63\xd0\x92\x46\xac\x68\xc4\x9b\x38\x88\xe6\xb8\xdc\xe7\x2b\x80\xb4\xdd\x71\xdf\x60\x1a\x63\x99\x60\xf4\x89\xa6\xf4\x92\x52\x58\x83\xa9\x6d\x65\x38\x19\x18\xb5\x91\x29\xdf\x39\x64\x41\x41\x83\x0a\x84\x8e\xc1\x19\xfd\x14\xc4\x43\x88\x92\xd2\x65\x24\x83\xa1\xad\xf6\xe5\x9d\x55\x75\x36\xda\x49\xdd\x04\x4a\x01\xbb\xb4\xdc\xa2\x4b\x54\x9a\xbe\xcc\x9b\xae\xa1\x9e\x9f\x5e\x74\xd7\x89\xcc\x12\x35\x67\xed\x7c\xd0\x26\x7f\x81\x4c\xcf\xb4\x6b\x14\xda\x09\x5b\x6c\x73\xe2\x9e\xa0\x7e\xe8\x56\xde\xd8\xac\xdb\x71\x0d\xf3\xa2\xf5\x2d\xca\x91\x68\x6d\x94\x68\x98\x7e\x1e\xfd\xcf\x54\xcc\x58\x61\x11\xb6\xdc\x17\x13\x61\xd2\xe3\x18\x0c\x47\x52\xe2\x20\xfe\x67\x67\xfd\x3a\xc1\xd8\xf0\x7c\x7b\x53\xd5\x86\x22\xb4\x62\xac\xc4\x94\xc2\xfe\x81\x64\x0f\xca\x49\x49\xbe\xd5\x96\x62\x46\xed\x53\xa1\xec\x78\xbe\x75\x76\x19\x8b\x62\x78\x01\x03\x6d\xd9\xe7\x12\xd8\xa3\xe6\x3b\x6e\x12\xe8\x6f\x5e\x3c\x55\xf4\x1c\x83\xe6\x7f\x09\x45\x5a\x0a\xf4\xfc\x8b\xed\x9d\x50\xf2\x52\x23\xea\xf4\xea\xaa\x8d\xb0\x33\x52\x0a\xb9\xc2\x50\x11\x62\x5a\x9f\x50\x84\x98\x09\x5f\xad\x08\xc9\x31\x5c\x84\x48\x36\xab\x08\x09\xc5\xbf\x26\x7e\xbc\x65\x54\x6c\xd7\x38\x50\x96\x3c\x27\xec\x0d\xb0\xdb\x0f\x6f\xcf\x28\x79\x86\x7d\xe6\x3c\x97\xf0\x72\x96\x3c\x92\xc4\x05\x38\xed\xa7\xdb\xbf\xcb\x9e\x72\xfc\x74\x96\x3b\x76\xd3\xe8\x30\xbf\xfd\xbc\x51\xfd\xcc\x79\xd5\x07\xa4\xcb\x21\x13\x6a\x95\x31\x71\x57\xd0\xc1\x14\xfc\xf9\x86\x34\x2f\x7f\x72\xbf\xb6\x38\xaa\xa8\x22\xf9\x41\xc9\xf1\xc3\x1b\xfd\xf5\x63\x23\xa2\x6e\xf8\xfe\x7b\x38\x2e\xda\xf8\x4d\x26\xd8\xb5\xbc\x94\x3e\x1b\xab\x39\x78\x7d\x2d\xcc\xfa\xb8\xa9\xdf\x2e\xe5\xba\x04\x0d\x1d\x5a\xf5\x30\x56\x48\x18\x1b\xb5\x50\x37\x0d\x3f\xd6\x38\xbd\xa9\xbf\x34\xea\x5d\xd0\x3b\xa6\x0a\xf3\x8a\x59\xc3\xaa\x0e\x2b\x56\x0b\xc6\x61\x1b\xa6\xeb\x69\xed\x84\xb9\x49\xf5\xff\x42\x4a\xe9\x9c\x33\x06\x6a\x7f\x5f\x75\x75\xaa\x30\xa2\x3a\xaf\xaa\x56\xa3\x93\x70\xa8\x1b\xab\xac\xff\x1c\x88\x4c\x9a\x44\x77\x63\xb6\x8b\xa8\xbf\x9c\x11\xf4\x37\x0a\x3c\xc9\x71\x69\xf6\xd9\x1e\x2e\x20\xdd\x6c\x90\xe6\x11\x67\xfb\xa5\x81\x6c\x8e\x67\x98\x8e\xbc\x96\xec\x64\x42\xc7\xd9\xbe\xbf\x60\x28\xce\xbe\xfc\xd2\x03\xd2\x0e\xe0\x5b\xf5\xa2\xee\x13\xcf\xdc\x5e\xca\x45\xfd\xf9\x62\xec\xdc\xd2\xac\x07\xe0\xa8\x1b\x9b\x7f\x86\xf3\x3c\xa7\xf5\x75\x71\x1a\x32\xe9\xe7\x7b\xa9\xff\x13\x3b\xe8\x67\xa7\xe1\x33\xcb\x59\xa7\x4d\xf6\x66\xb3\xb5\x07\xcf\xce\x40\xdf\x64\xe9\x1b\x4a\xaf\x14\xac\x1b\x19\x6f\x2e\xbf\xfc\x99\xc3\x05\x62\xa7\x3e\xac\x29\x45\x71\x80\x0c\x1c\x1d\x9b\xdf\xf5\x29\xe9\x53\xb0\xd6\xb5\x99\xd8\x72\x42\xef\x81\x38\x0a\x02\x08\x85\x8c\xad\x37\xa4\xc4\xd7\x92\xac\xd1\xdd\x83\xf8\x57\x75\x2a\xdc\x47\x8b\x3b\xff\x8e\x0d\x2e\xdc\x7a\x76\xd4\xb1\xb2\x03\x6c\xfd\x1b\x1a\x10\x46\xf0\x2e\x24\x55\x78\xb6\x15\x25\x5e\x78\xf7\xcc\xff\x44\xf9\xc0\xf2\xd6\x45\x64\xdd\x04\x84\xee\xd8\x23\x0a\x58\x9b\x96\x5e\xd1\x6b\xa0\x53\x88\x98\x0a\x5b\xdf\x13\x7f\x49\x26\x6e\xc6\xe1\x0f\xba\x1a\x6f\x28\xdc\xa0\xd8\x96\x32\xd4\x76\x4b\xe8\xfd\xb6\x4c\xb5\xbf\x33\x06\x96\xc1\xab\xb7\x25\x41\x2a\xe3\x2e\x3c\x51\x26\x0f\xca\xbc\x24\x1e\xa4\x2a\x06\xd5\xdf\x25\x70\xfc\xcf\x16\x85\xec\x9d\x53\x44\x46\x7d\xf6\x44\xc0\xac\x56\xa7\x00\xaf\x9c\xf1\x59\xbe\x9a\x3b\x33\x93\xde\xbb\x2e\xeb\x6c\xbc\x7b\x34\x0d\xbc\x2b\x3b\x75\x4d\x60\x68\x74\x08\x76\x0e\x1e\xb2\x84\x6f\xb2\xe4\x5a\xab\xf7\x26\xdd\x2b\x49\x6a\xce\x97\xf0\x9d\xa1\x31\x71\xe0\x40\x49\xa9\x97\xef\xf8\x02\x1f\xcd\x76\x8a\x63\xe7\x19\xe2\xc9\xbb\x12\xd7\x62\xa9\xbd\x43\xc8\x05\xbb\x5d\x69\x46\x77\xc6\xb9\x13\x44\x7f\xd2\x8b\x6b\x4b\x29\x0b\x3d\x10\x4f\x2e\x19\x2b\xdf\x96\xa9\x10\x27\xe6\x9c\x2e\xa8\xaf\x15\x63\xe5\x13\xd5\x63\x95\x7a\xc9\x0e\x2f\xa1\x25\x77\xf2\x34\xc0\x3a\x54\x55\x47\x7f\x1e\x88\x2e\x2a\xa5\xa5\xc0\xa6\x2f\xe4\xf1\xc7\x57\x08\xa8\xdb\x17\xf8\x32\x15\x58\x27\x7a\x43\x06\x70\xa7\x4f\x3f\xcf\x2f\x26\x08\x24\xd1\x2b\xb5\xf4\x27\xee\xb2\x45\xbb\x2c\x7b\x1c\xb3\x19\xcf\xbb\xfc\x2e\xe6\xe3\x1f\x38\x2a\xad\xb3\x47\xf8\xd7\xe3\xd3\xb4\xcb\x1e\x27\xf6\x5f\x7b\xeb\xb5\x82\xed\x90\x07\xf5\x4e\x65\xeb\x13\x3e\xfd\xd2\xe9\xba\x09\x68\x4d\x24\xf0\xcf\xdc\x37\x1c\x85\x0e\xcc\x75\xf2\xe1\x62\xc0\x3d\x52\xe4\x24\xd3\x4f\x55\x12\xe5\x94\x9b\x6c\xbb\x76\xd4\xb5\x97\x2e\x06\xbc\xb4\x9d\x66\xd9\x53\xa1\xf6\x90\xaa\x64\xe0\x5c\x7d\xc3\x7d\x30\x31\x77\x89\xd7\x6a\x5b\xc4\x7a\x58\x37\xe7\x52\x6d\xea\xb7\x49\x29\xc9\x22\x9d\x1e\xa9\x26\x4d\x1f\xc4\x9e\xc8\xec\xc1\xdc\xe7\xdf\x27\x91\xe2\xde\x5c\x07\x39\x60\x32\x1d\xa6\xf4\x29\x9f\xcb\x44\x04\xbc\x36\xdc\x41\x96\x0a\x34\x4a\xcf\x92\x3a\x0b\xb3\xb0\x65\x1e\x3a\x0e\x73\x37\x2f\xc7\x22\xdd\x96\xf2\xdc\xf2\xb4\x73\x1c\xd5\xaf\xb6\x1a\xcc\xeb\x1c\xc3\x6a\xde\xcb\x1e\xea\xff\x6d\xb2\xa0\xff\xef\xe6\x39\x35\xa5\x85\x7f\xdc\xde\x82\xae\x73\xf6\x9e\xf2\x2f\x90\xe3\x6b\x81\x9c\xa4\x25\xf9\x6f\x2a\x09\xa3\x75\x3e\xd3\x24\xf4\x66\xab\x84\xc8\x29\x55\xb4\x0f\xde\xa3\x4e\x55\xd7\x72\x87\x24\xaf\xf5\xba\xda\x16\xc9\x47\xc4\xc7\xeb\x2b\x9b\x47\x0f\xe5\xcf\xc3\xb1\xc7\x2a\x94\xe4\xde\xa3\x8c\x31\x55\x5a\x37\xa3\x35\xd9\x52\xa4\x39\x6d\x3f\xaf\x97\x74\xd8\xa9\x34\xa7\xab\xdf\xa4\x1e\xb5\x73\x15\x42\xe6\xe5\x5c\x9d\x6a\x40\x3f\x8f\xb0\xf5\x90\xb2\xda\xe9\x27\x11\x5a\xce\xc9\x22\xa1\x48\x46\x2a\x81\xaa\x8b\xdd\x77\xbb\xa0\x67\x54\xff\x3a\xf3\x0c\xc2\xfd\x64\x36\x94\x21\xfc\x8c\xfb\xcf\x14\x0f\x1b\xcc\x24\xe6\xd7\x57\x11\xc9\x63\x77\xe3\x60\xcc\xb2\x6d\x41\x2b\x76\x40\x01\xf2\xa1\xbb\x19\x36\x9c\xed\x88\xd6\x40\x6a\x1f\x0a\x26\xfe\x9e\x69\x22\x68\xf3\xd8\x11\xea\xc7\x7a\x5e\xb4\x18\xd9\x19\x03\x17\x51\xde\x06\x68\x56\x71\xc5\xc7\xca\xf8\x00\xbf\xab\xbe\x90\xea\xed\x85\xce\x25\xd4\xea\x89\xcf\x30\x5a\x40\x7b\x02\x77\x2e\x9e\xb4\x2d\x4e\xfb\xcb\x19\x7b\x6c\x94\x0d\xa5\xa8\xdc\x54\x8c\xe1\xa7\x12\xab\xa4\x0f\xfe\x05\xec\x02\x85\xe1\xc4\x7b\xc4\xa7\x2b\xc0\xbe\x1a\x99\xad\x80\xdf\x7e\x0b\x73\xfb\xdc\xf7\x25\xde\x43\xd7\xfe\x53\x18\x4b\x24\xb0\x60\xd2\xf0\x1d\x2f\xba\xd1\xda\x7e\xfe\x2f\x00\x00\xff\xff\x03\x9d\x1e\x07\xe9\x2c\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 11497, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateRegistryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcf\x4a\x34\x31\x10\xc4\xef\x81\xbc\x43\x11\xe6\xf0\x7d\xa0\xb3\xa2\xb7\x05\x6f\x1e\x14\x14\x64\xd9\x9b\x78\x68\x76\x7a\x62\xd8\x4d\x36\x24\x19\xdc\xa1\xc9\xbb\xcb\xfc\x71\x4f\x1e\xbb\xaa\xab\xa8\x9f\x08\x3a\xee\x5d\x60\x98\xc4\xd6\xe5\x92\x46\x83\x5a\xb5\x12\x41\x13\x8f\x16\xdb\x47\x34\xed\x3b\x1d\x8e\x64\xf9\xd7\x28\xec\xe3\x89\x0a\xc3\x7c\x31\x75\x9c\x0c\x9a\xd9\xd2\x6a\xb3\xc1\x7e\x8c\x9c\x91\xb8\x0c\x29\x64\x78\x8a\xd1\x05\x8b\x3e\x9d\x3d\xca\x18\x19\xae\xcb\x28\x67\xec\x5f\x97\x33\x90\xe7\xdc\x6a\xd5\x0f\xe1\xb0\x64\xdf\x28\xfe\xfb\x3f\x05\x3f\x06\x17\xca\xc3\xfd\x67\x2e\x69\xaa\x10\xad\xb0\xf6\xfe\xed\x8a\xdc\x22\x51\xb0\x8c\x86\x4f\xec\x97\xe9\xbb\x95\x6a\x1e\x08\x00\x77\x97\x09\x6d\x7a\x68\x9f\xf9\xf2\xf2\x84\x5a\xb7\x30\x57\x6d\x47\xdf\xa8\xd5\xdc\x2c\x75\x1c\xba\x35\x58\xb5\x9a\x09\x45\xae\xe2\x4f\x00\x00\x00\xff\xff\xfa\x22\x40\xae\x3c\x01\x00\x00")

func _templateRegistryTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateRegistryTmpl,
		"_template/registry.tmpl",
	)
}

func _templateRegistryTmpl() (*asset, error) {
	bytes, err := _templateRegistryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/registry.tmpl", size: 316, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/client.tmpl":   _templateClientTmpl,
	"_template/header.tmpl":   _templateHeaderTmpl,
	"_template/main.tmpl":     _templateMainTmpl,
	"_template/registry.tmpl": _templateRegistryTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"client.tmpl":   &bintree{_templateClientTmpl, map[string]*bintree{}},
		"header.tmpl":   &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":     &bintree{_templateMainTmpl, map[string]*bintree{}},
		"registry.tmpl": &bintree{_templateRegistryTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
