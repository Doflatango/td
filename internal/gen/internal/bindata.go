// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/client.tmpl
// _template/header.tmpl
// _template/main.tmpl
// _template/registry.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\x41\x6b\x83\x40\x10\x85\xef\x82\xff\xe1\x21\xa1\x24\x25\x98\x7b\xa0\xa7\xb4\x87\x42\x5b\x42\xc9\x1f\xd8\xae\x63\xb2\x44\x67\x65\x1c\x93\x94\xc5\xff\x5e\x5c\xd7\x9e\x1c\xbe\x79\xbe\x7d\x6f\x42\x40\x45\xb5\x63\x42\x61\x1b\x47\xac\x05\xc6\x31\xcf\x42\xc0\xaa\xbb\x9e\xb1\x7f\xc1\xaa\x3c\x1a\x7b\x35\x67\x5a\x16\x4a\x6d\xd7\x18\x25\x14\x17\x32\x15\x49\x81\x55\x5c\xe5\xd9\x6e\x87\x77\xbe\xf9\x2b\x09\xac\x61\xb8\x38\x43\xcc\x1d\x9f\xa7\xa3\x78\xf5\x90\xce\xc2\x9a\xa6\xe9\xcb\x3c\xd3\xdf\x8e\xfe\xf5\x8e\x95\xa4\x36\x96\x10\xf2\x0c\x09\x7f\x9b\xfb\xda\xea\x03\xd6\xb3\xd2\x43\xcb\xc3\xfc\xdd\xc2\x71\x37\x28\x7e\x1c\x97\x6f\x6c\x7d\x45\xb2\x85\x1f\x74\x61\xaf\x14\xd9\x06\x24\xe2\x25\xcf\x96\x6c\x87\x58\x10\xae\xed\x1a\x6a\xa7\xa9\x25\xbd\xf8\xaa\x47\xed\x25\xa6\x72\x7c\x46\x3d\xb0\x55\xe7\xb9\x47\x2d\xbe\xc5\xe9\x03\xbd\xbd\x50\x6b\x70\x73\x66\x49\xbb\x84\x4f\x86\xbd\xca\x60\x75\x0e\x3e\x15\x4c\xaa\xf4\xf0\x64\x88\x2f\xba\xcf\xe2\xb5\x4b\x85\x93\x68\x83\xe7\xe4\x32\xff\x4e\x3a\x08\xe3\x69\x66\x11\x45\xcf\x7d\x3a\xa6\x6c\x27\x34\x26\xeb\x10\x40\x5c\xc5\xe3\xff\x05\x00\x00\xff\xff\x6e\x86\x44\xb6\xc8\x01\x00\x00")

func _templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateClientTmpl,
		"_template/client.tmpl",
	)
}

func _templateClientTmpl() (*asset, error) {
	bytes, err := _templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/client.tmpl", size: 456, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xc1\x4a\x03\x31\x10\x86\xef\x81\xbc\xc3\x4f\xf0\xd0\x82\x26\x4f\xe0\xa5\xd6\x83\x97\x56\xb0\x77\xc9\x6e\x26\x69\x58\x77\xb2\xc4\x59\x51\xc2\xbe\xbb\x6c\x5b\xe8\x69\x98\xf9\xe1\xfb\xe6\x6f\x0d\x81\x62\x66\x82\x39\x93\x0f\x54\x0d\x96\x45\x2b\xe7\xf0\x52\x02\x21\x11\x53\xf5\x42\x01\xdd\x1f\x52\x91\x90\x88\x1f\xb1\x3f\xe2\x70\x3c\xe1\x75\xff\x76\xb2\x5a\x69\x35\xf9\x7e\xf0\x89\xd0\x1a\x1e\xec\xfb\x6d\x59\x31\x5a\xe5\x71\x2a\x55\xb0\xd1\xca\xf4\x85\x85\x7e\xc5\x68\x65\xe2\xb8\x0e\xad\x4c\xca\x72\x9e\x3b\xdb\x97\xd1\xad\x74\x27\xc1\x75\x99\x8d\x56\xdb\x35\x76\x0e\x87\xf2\x54\xa6\xeb\x8b\x59\x72\x61\xc4\x52\x31\x10\x4d\x99\x13\xae\xf0\x6f\xab\xd5\x8f\xaf\xf8\xc4\x33\xba\xcc\x76\x37\xc7\x48\xb5\x2d\xf7\xeb\xcd\x6c\x77\xbe\x1f\x52\x2d\x33\x87\xcd\xf6\x9e\xc6\x51\xec\x87\xd4\xcc\x89\xea\x86\xf3\xd7\x45\xdd\x1a\x88\xc3\xa5\xc4\x7f\x00\x00\x00\xff\xff\x3b\x4a\xba\xaf\x23\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 291, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\xdd\x73\xdb\x36\x12\x7f\xd7\x5f\xb1\xf5\xb8\x39\x32\x55\xe8\x3e\x3b\xf5\xc3\x39\x4e\x2f\x9a\xc9\xf5\x32\x76\x73\x2f\x9d\x4e\x86\x22\x97\x32\xc6\x14\xa0\x03\x41\x49\x39\x55\xff\xfb\x0d\xbe\x48\x10\x04\x45\xda\xe3\xba\xed\xe9\xc5\x34\x3e\x16\xbb\xbf\x5d\xec\x07\x80\xc3\x01\x72\x2c\x08\x45\x38\x5b\xa7\x84\x9e\xc1\xf1\x38\x3b\x1c\xe0\x7c\xf3\xb0\x82\xcb\x2b\x38\x4f\x3e\xa5\xd9\x43\xba\x42\xd3\x2e\x70\xbd\x29\x53\x81\x70\x76\x8f\x69\x8e\xfc\x0c\xce\x65\x8f\xec\xe2\x29\x5d\x21\x9c\x57\x6a\xd6\x9d\xe0\x75\x26\x2a\xd9\x77\x71\x01\x92\x60\x95\xbc\x63\xeb\x35\x52\xa1\x29\xbd\x01\x52\xc8\xc6\x1b\x96\x55\xb6\xc5\x50\xc8\x25\x85\xb6\x47\xcf\x17\x9c\xac\xe1\x3c\xb7\x43\x91\x86\x3e\x35\xc9\xcf\xb7\x1f\xf5\x3c\x39\xf5\x0e\xd1\x2c\xaf\x9b\xa1\x60\x1c\x38\x16\xc8\x91\x66\x98\xb8\x14\xc4\xd7\x8d\x1d\xfb\x53\xba\x96\x12\x43\xa5\xc4\x80\x83\xcb\x5e\x01\x9a\xbf\x1f\x09\x96\xb9\xe2\x10\x00\xc0\x48\x59\x04\xa4\x4c\x69\x0e\x91\xea\xa1\x39\x11\x84\xd1\xb4\x8c\x21\xa2\x4c\x40\xb7\xf1\x9a\xb1\x32\x6e\x39\xff\x5c\x21\xdc\xa1\xd0\x54\x2d\x43\x92\xd6\x3f\xfc\xc6\x7b\x2c\x37\xc8\xab\x8e\x30\x92\x27\x0b\x49\x91\xdc\xb0\x7a\x59\xe2\x5d\x49\x32\x6c\x3b\x5d\x12\xbf\xfc\xfa\xcb\xaf\xba\xe5\x67\x89\x82\x43\x00\xcb\x0a\x0d\x95\x93\xf3\x4f\xcc\x0e\xce\x18\x18\xdf\xd3\xab\x32\x2e\x25\x87\x42\xac\x4a\xfe\x8d\x99\x60\xbc\x63\x59\x86\xa6\x24\xb6\xb8\x01\x52\xc1\xcf\x1f\x41\x69\x93\xe4\xc0\x8a\xee\xa0\x64\x96\x31\x5a\x89\xe0\xcc\x2b\xf8\x7e\xaf\xdb\x3f\xe0\x7e\x71\x03\xc7\xe3\x5b\x97\x15\xb9\xe0\x7b\x9a\xb1\x1c\x81\xac\x37\x25\x4a\x3d\x57\xb0\x24\x34\xd1\xad\x3c\x99\x15\x35\xcd\x20\xd2\x34\x6e\x31\x43\xb2\x45\xc9\x2a\xbc\xee\x2c\x17\x1b\x32\x66\xe0\x75\x5d\xfc\x9d\xaf\xd4\x30\x49\xec\xba\x2e\x0a\xe4\x31\x20\xe7\x8c\xc3\x41\x61\x43\xac\x14\x2e\xd1\xab\x2b\xa0\xa4\x34\x23\xe4\x8f\xa3\xa8\x39\x85\x62\x2d\x92\xf7\x72\x72\x11\x9d\x65\x29\xfd\x9b\x00\xd4\x5c\x1b\x12\xe9\xce\xc0\x0e\x69\x25\x29\x9c\xc5\x8a\xc2\x71\x10\x68\x8f\xcd\xe4\x53\x2d\x16\x37\x51\x00\xc1\xd8\xdf\x91\x27\xf7\x8c\xbb\x5c\x6f\x27\xf4\x8d\xd8\x19\x60\x3b\x43\xb0\x24\x76\x1f\x36\xa3\xd5\xaa\xb2\xe7\x43\x5a\x45\xbd\xde\x05\xcd\x71\xaf\x94\x72\xf0\xcd\xb0\xbb\x7e\x8b\x87\xb5\x66\x0f\x13\x3d\xe0\x83\x72\x8c\x51\x89\xb4\x6f\x07\x49\x67\x0f\xc4\x1a\x77\xe9\x91\x0e\x07\xb3\x88\xb1\x24\x38\x1e\x49\x2e\x6d\xd1\x6c\xa0\x2f\xf2\x53\x31\x35\xef\x6d\xeb\x86\x2f\xce\x76\x87\x83\x9c\x70\x3c\x6e\x0f\x07\xa4\xf9\xf1\x28\x71\xd7\x3a\x18\xe1\xc5\x11\x3e\x48\xbb\xb1\xb1\x29\x72\x73\xb6\x33\xb2\x59\xf9\xbe\xcc\x61\xdb\xf2\xc2\xd9\x6e\x0c\xec\x16\x07\x67\x65\xdb\xb9\xa0\x02\x79\x91\xb6\xce\xc8\xfe\x48\x01\xdb\xfe\xb6\x18\xd8\x1a\x35\x4d\x97\x25\x82\x60\x43\xdb\xe3\x12\x0a\x65\x39\x1a\xa8\xdb\x74\x67\xb1\x42\xbd\xf7\x61\x47\xc4\x3d\x10\x65\x3f\xdf\xe6\xd2\xef\xc8\xcd\x34\x07\x92\xef\xe3\xce\xe2\x5d\x19\x94\x62\x66\x0e\xcb\xc8\xb9\xc4\x66\x9b\x84\xbd\x42\xfc\x56\x8d\xf8\xe6\x8f\x11\xeb\x12\xbe\xdd\x69\x99\xe6\x92\x8d\x56\xb0\xb0\x93\x1f\x30\x11\xbd\xd6\x8f\xd2\x3b\x1e\x8f\xd1\x36\x3e\xad\xfc\x21\xdb\xeb\xc5\x89\x61\x3e\x06\x2d\xe9\x84\x15\x9d\xf0\x26\x16\xa2\x29\x2e\xf7\xe9\x0a\x20\x5d\x77\xdc\x37\x98\xd6\x58\x46\x18\x7d\xa4\x29\x3d\xa7\x14\xc6\x60\x1a\x5b\x19\x4e\x06\x4e\xda\xc8\x98\xef\x1c\xb2\xa0\xa0\x41\x05\x42\xc7\xe0\x8c\x7e\x0a\xe2\x20\x44\x49\x69\x33\x92\xc1\xd0\xd6\xf8\x72\x6f\x55\x95\x8d\x7a\xa9\x5b\x85\xa2\x82\x6d\x5a\xd6\x68\x13\x95\xb6\x2f\x73\xa6\x2b\xa8\xa7\xa7\x17\xfe\x3a\x91\x5e\xa2\xe1\xac\x9b\x0f\x9a\xe4\x2f\x90\xe9\xe9\x76\x85\x42\x37\x61\x8b\x4d\x4e\xdc\x13\xd4\x0d\xdd\xd2\x1b\xeb\x75\x3d\xd7\x30\x2d\x5a\xdf\xa1\x38\x11\xad\xb5\x12\x35\xd3\x4f\xa3\xff\x99\x56\x13\x56\x98\x85\x2d\xf7\xd9\x44\x18\xf5\x38\x1a\xc3\x13\x29\x71\x10\xff\x8b\x8b\x7e\x9d\xa0\x6d\x78\xba\xbd\xc9\x6a\x43\x12\x5a\x32\x56\x62\x4a\x61\x77\x4f\xb2\x7b\xe9\xa4\x04\xaf\x95\xa5\xe8\x51\xbb\xb4\x92\x76\x3c\xdd\x3a\x7d\xc6\xa2\x18\x9e\xc1\x40\x3b\xf6\x39\x07\xf6\xa0\xf8\x8e\xdb\x04\xfa\x9b\x67\x4f\x15\x1d\xc7\xa0\xf8\x9f\x43\x91\x96\x15\x3a\xfe\xc5\xf4\x8e\x28\x79\xae\x10\xb5\x7a\xb5\xd5\x46\xd8\x19\x49\x85\xdc\x60\xa8\x08\xd1\xad\x8f\x28\x42\xf4\x84\x17\x2b\x42\x72\x0c\x17\x21\x82\x4d\x2a\x42\x42\xf1\xaf\x8d\x1f\xef\x18\xad\xea\x35\x0e\x94\x25\x4f\x09\x7b\x03\xec\xf6\xc3\x5b\x63\x81\x93\x2b\x9e\x61\x97\x39\xcd\x23\x3c\x9f\x21\x9f\xc8\xe1\x02\x9c\xf6\xb3\xed\xdf\x65\x4b\x59\x7e\xbc\xe5\x0e\x7e\x16\x1d\xe6\xb7\x9f\x36\xca\x9f\x3e\xae\xfa\x88\x74\x3e\x64\x41\x9d\x2a\x26\xf6\x05\x1d\xcc\xc0\x9f\x6e\x47\xd3\xd2\x27\xfb\xeb\x8a\x23\x6b\x2a\x92\xef\xa5\x1c\xdf\xbf\x55\x5f\x3f\xb4\x22\xaa\x86\xef\xbe\x83\xc3\xac\x8b\xdf\x68\x7e\xdd\xc8\x4b\xe9\x93\xb1\x9a\x82\xd7\x4b\x61\xd6\xc7\x4d\xfe\xb6\x29\x57\x15\x68\xe8\xcc\xaa\x87\xb1\x44\x42\xdb\xa8\x81\xba\x6d\xf8\xa1\xc1\xe9\x6d\xf3\xa5\x50\xf7\x41\xf7\x4c\x15\xa6\xd5\xb2\x9a\x55\x15\x55\x8c\x16\xb4\xbf\xd6\x4c\x37\xd3\xba\xf9\x72\x9b\xe9\xff\x85\x94\xe2\x1d\x33\x06\x4a\x7f\x57\x75\x4d\xa6\x70\x42\x75\x4e\x51\x2d\x47\x27\xe1\x48\x77\xaa\xb0\xfe\x73\x20\x32\x6a\x12\xfe\xc6\xec\xd6\x50\x7f\x39\x23\xe8\x6f\x14\x78\x94\xe3\x52\xec\xb3\x1d\x5c\x41\xba\xd9\x20\xcd\x23\xce\x76\x73\x0d\xd9\x14\xcf\x30\x1e\x79\x0d\xd9\xd1\x7c\x8e\xb3\x5d\x7f\xc1\x50\x9c\x7d\xfe\xa5\x07\xa4\x1d\xc0\xf7\xd8\x8b\xba\x8f\x3c\x72\x7b\x2e\x17\xf5\xe7\x8b\xb1\x53\x2b\xb3\x1e\x80\x27\xdd\xd8\xf4\x23\x9c\xa7\x39\xad\x97\xc5\x69\xc8\xa4\x9f\xee\xa5\xfe\x4f\xec\xa0\x9f\x9d\x86\x8f\x2c\x27\x1d\x36\x99\x8b\xcd\xce\x1e\xbc\xb8\x00\x75\x91\xa5\x2e\x28\x9d\x4a\xb0\x69\x64\xbc\xbd\xfb\x72\x67\x0e\xd7\x87\x5e\x79\xd8\x50\x8a\xe2\x00\x19\x38\x58\x36\x5f\xf5\x29\xb9\x45\x91\xbe\x35\xab\x6a\x4e\xe8\x0a\x88\xa5\x50\x01\xa1\x90\xb1\xf5\x86\x94\xf8\x46\x90\x35\xda\x6b\x10\xf7\xa6\x4e\x86\xfb\x68\xf6\xc5\xbd\x62\x83\x2b\xbb\x9e\x19\x75\x38\x9a\x01\xa6\xfc\x0d\x0d\x08\x23\xf8\x25\x24\x55\x78\xb6\x11\x25\x9e\x39\xd7\xcc\xff\x44\x71\xcf\xf2\xce\x3d\x64\xd3\x04\x84\x6e\xd9\x03\x56\xb0\xd6\x2d\xbd\x9a\x57\x43\x27\x11\xd1\x05\xb6\xba\x26\xfe\x9a\x8c\x5c\x8c\xc3\x1f\x74\x33\xde\x52\xb8\xc5\xaa\x2e\x45\xa8\xed\x8e\xd0\x55\x5d\xa6\xca\xdf\x69\x03\xcb\xe0\xf5\xbb\x92\x20\x15\xb1\x0f\x4f\x94\x89\xbd\x34\x2f\x81\x7b\x21\x8b\x41\xf9\x77\x0e\x1c\xff\x53\x63\x25\x7a\xc7\x14\x91\x56\x9f\x39\x10\xd0\xab\x35\x29\xc0\x6b\x6b\x7c\x86\xaf\xf6\xca\x4c\xa7\xf7\xb6\xcb\x38\x1b\xe7\x1a\x4d\x01\x6f\xcb\x4e\x55\x13\x68\x1a\x1e\x41\xef\xdc\x21\x4b\xf8\x26\x4b\x16\x4a\xbd\xb7\xe9\x4e\x4a\xd2\x70\x3e\x87\x57\x9a\xc6\xc8\x79\x03\x25\xa5\x5a\xde\xf3\x05\x2e\x9a\xdd\x14\xc7\xcc\xd3\xc4\x93\xf7\x25\xae\xab\xb9\xf2\x0e\x21\x17\x6c\x77\xa5\x1e\xed\x8d\xb3\x07\x88\xee\xa4\xe7\xd7\x96\x8b\xdf\x34\xa0\x8d\x7a\xae\xd9\xfe\x65\xf0\xee\x22\xea\x72\x72\x9d\x56\xd8\xe4\x52\xda\x03\xfb\xdb\xea\x77\xc1\xcd\x3d\x68\x93\x20\xb1\x07\xf8\xd7\xc3\xe3\xc0\x60\x0f\x23\x40\x04\x31\x08\xcb\x68\x3f\x9d\xd3\xc8\xe6\x68\x4b\xbd\xf0\x59\xb4\x9e\xbc\x75\x81\xee\x59\xf3\x86\x63\xa5\x22\x52\x13\x75\xad\xf3\x5b\x21\x45\x4e\x32\xf5\x44\x23\x91\xde\xa8\x4d\x33\x1b\x0f\xd5\xb8\xa7\x62\xc0\x3d\x99\x69\x86\x3d\x19\x63\xf6\xa9\x8c\x82\x97\xf2\x1b\x56\xc1\x8c\xd4\x66\x1c\xcb\xba\x88\xd5\x30\x3f\xd9\x90\x6d\xf2\xb7\x49\x29\xc9\x22\x95\x17\xc8\x26\x45\x1f\xaa\x1d\x11\xd9\xbd\xbe\xc7\x5e\x25\x91\xe4\x5e\x5f\x83\x58\x60\x32\xe5\x9f\xd5\xf1\x96\x0d\xc1\x15\xbc\xd1\xdc\x41\x96\x56\xa8\x95\x9e\x25\x4d\xfa\x61\x60\xcb\x1c\x74\x2c\xe6\x76\x5e\x8e\x45\x5a\x97\xe2\xd2\xf0\xb4\xb5\x1c\x35\xaf\x95\x5a\xcc\x9b\xe0\x6a\x34\xef\x84\xcd\xe6\x7f\x13\x25\xd5\xff\x7e\x80\x6f\x28\xcd\xdc\x63\xe6\x0e\x74\xde\x99\x73\xca\xbf\x42\x8e\x6f\x2a\xe4\x24\x2d\xc9\x7f\x53\x41\x18\x6d\x02\x79\x9b\xc9\xea\xad\x12\x22\x27\x55\xd1\x3d\x70\x8e\xbc\x72\xa6\xe3\x3d\x48\xde\xe8\x75\x59\x17\xc9\x27\xc4\x87\xc5\x8d\x49\x20\x87\x12\xc7\x61\x27\x60\x14\x4a\x72\xe7\x31\xc2\x29\x55\x1a\x07\xab\x34\xd9\x51\xa4\x3e\x65\xbe\x6c\x96\xb4\xd8\xc9\xf8\xee\xeb\x37\x69\x46\x6d\x6d\x6a\x9c\x39\xc9\x86\x97\x06\xab\x67\x01\xa6\x10\x90\x56\x3b\xfe\x14\x40\xc9\x39\x9a\x1d\x17\xc9\x89\x14\xf8\xe8\x63\xf7\x6a\x1b\x0c\x23\xf2\x5f\x6b\x9e\x41\xb8\x1f\xcd\x86\x34\x84\x9f\x70\xf7\x99\xe2\x7e\x83\x99\xc0\x7c\x71\x13\x91\x3c\xb6\x27\xed\xda\x2c\xbb\x16\xb4\x64\x7b\xac\x40\xdc\xfb\x9b\x61\xc3\xd9\x96\x28\x0d\xa4\xe6\x81\x5c\xe2\xee\x99\x36\xe0\xb4\x8f\xfc\xa0\x79\xa4\xe6\x04\x81\x13\x3b\x63\xe0\x02\xc6\xd9\x00\xed\x2a\x36\xeb\x5e\x6a\x1f\xe0\x76\x35\x17\x31\xbd\xbd\xe0\x5d\xbe\x2c\x1f\xf9\xfc\xa0\x03\xb4\x23\xb0\x77\xe1\xa2\x6c\x71\xdc\x5f\x4e\xd8\x63\x27\xd9\x90\x8a\xca\x75\xa9\x14\x7e\x22\xb0\x4c\xfa\xe0\x5f\xc1\x36\x50\x11\x8d\xbc\xc3\x7b\xbc\x02\xcc\x6b\x89\xc9\x0a\xf8\xed\xb7\x30\xb7\x4f\x7d\x57\xe1\x3c\xf0\xec\x3f\x01\x31\x44\x02\x0b\x26\x2d\xdf\xf1\xcc\x8f\xd6\xe6\xf3\x7f\x01\x00\x00\xff\xff\xf4\x6a\x1f\x20\xe1\x2b\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 11233, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateRegistryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcf\x4a\x34\x31\x10\xc4\xef\x81\xbc\x43\x11\xe6\xf0\x7d\xa0\xb3\xa2\xb7\x05\x6f\x1e\x14\x14\x64\xd9\x9b\x78\x68\x76\x7a\x62\xd8\x4d\x36\x24\x19\xdc\xa1\xc9\xbb\xcb\xfc\x71\x4f\x1e\xbb\xaa\xab\xa8\x9f\x08\x3a\xee\x5d\x60\x98\xc4\xd6\xe5\x92\x46\x83\x5a\xb5\x12\x41\x13\x8f\x16\xdb\x47\x34\xed\x3b\x1d\x8e\x64\xf9\xd7\x28\xec\xe3\x89\x0a\xc3\x7c\x31\x75\x9c\x0c\x9a\xd9\xd2\x6a\xb3\xc1\x7e\x8c\x9c\x91\xb8\x0c\x29\x64\x78\x8a\xd1\x05\x8b\x3e\x9d\x3d\xca\x18\x19\xae\xcb\x28\x67\xec\x5f\x97\x33\x90\xe7\xdc\x6a\xd5\x0f\xe1\xb0\x64\xdf\x28\xfe\xfb\x3f\x05\x3f\x06\x17\xca\xc3\xfd\x67\x2e\x69\xaa\x10\xad\xb0\xf6\xfe\xed\x8a\xdc\x22\x51\xb0\x8c\x86\x4f\xec\x97\xe9\xbb\x95\x6a\x1e\x08\x00\x77\x97\x09\x6d\x7a\x68\x9f\xf9\xf2\xf2\x84\x5a\xb7\x30\x57\x6d\x47\xdf\xa8\xd5\xdc\x2c\x75\x1c\xba\x35\x58\xb5\x9a\x09\x45\xae\xe2\x4f\x00\x00\x00\xff\xff\xfa\x22\x40\xae\x3c\x01\x00\x00")

func _templateRegistryTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateRegistryTmpl,
		"_template/registry.tmpl",
	)
}

func _templateRegistryTmpl() (*asset, error) {
	bytes, err := _templateRegistryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/registry.tmpl", size: 316, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/client.tmpl":   _templateClientTmpl,
	"_template/header.tmpl":   _templateHeaderTmpl,
	"_template/main.tmpl":     _templateMainTmpl,
	"_template/registry.tmpl": _templateRegistryTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"client.tmpl":   &bintree{_templateClientTmpl, map[string]*bintree{}},
		"header.tmpl":   &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":     &bintree{_templateMainTmpl, map[string]*bintree{}},
		"registry.tmpl": &bintree{_templateRegistryTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
