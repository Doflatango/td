// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/client.tmpl
// _template/header.tmpl
// _template/main.tmpl
// _template/registry.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\x41\x6b\x83\x40\x10\x85\xef\x82\xff\xe1\x21\xa1\x24\x25\x98\x7b\xa0\xa7\xb4\x87\x42\x5b\x42\xc9\x1f\xd8\xae\x63\xb2\x44\x67\x65\x1c\x93\x94\xc5\xff\x5e\x5c\xd7\x9e\x1c\xbe\x79\xbe\x7d\x6f\x42\x40\x45\xb5\x63\x42\x61\x1b\x47\xac\x05\xc6\x31\xcf\x42\xc0\xaa\xbb\x9e\xb1\x7f\xc1\xaa\x3c\x1a\x7b\x35\x67\x5a\x16\x4a\x6d\xd7\x18\x25\x14\x17\x32\x15\x49\x81\x55\x5c\xe5\xd9\x6e\x87\x77\xbe\xf9\x2b\x09\xac\x61\xb8\x38\x43\xcc\x1d\x9f\xa7\xa3\x78\xf5\x90\xce\xc2\x9a\xa6\xe9\xcb\x3c\xd3\xdf\x8e\xfe\xf5\x8e\x95\xa4\x36\x96\x10\xf2\x0c\x09\x7f\x9b\xfb\xda\xea\x03\xd6\xb3\xd2\x43\xcb\xc3\xfc\xdd\xc2\x71\x37\x28\x7e\x1c\x97\x6f\x6c\x7d\x45\xb2\x85\x1f\x74\x61\xaf\x14\xd9\x06\x24\xe2\x25\xcf\x96\x6c\x87\x58\x10\xae\xed\x1a\x6a\xa7\xa9\x25\xbd\xf8\xaa\x47\xed\x25\xa6\x72\x7c\x46\x3d\xb0\x55\xe7\xb9\x47\x2d\xbe\xc5\xe9\x03\xbd\xbd\x50\x6b\x70\x73\x66\x49\xbb\x84\x4f\x86\xbd\xca\x60\x75\x0e\x3e\x15\x4c\xaa\xf4\xf0\x64\x88\x2f\xba\xcf\xe2\xb5\x4b\x85\x93\x68\x83\xe7\xe4\x32\xff\x4e\x3a\x08\xe3\x69\x66\x11\x45\xcf\x7d\x3a\xa6\x6c\x27\x34\x26\xeb\x10\x40\x5c\xc5\xe3\xff\x05\x00\x00\xff\xff\x6e\x86\x44\xb6\xc8\x01\x00\x00")

func _templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateClientTmpl,
		"_template/client.tmpl",
	)
}

func _templateClientTmpl() (*asset, error) {
	bytes, err := _templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/client.tmpl", size: 456, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xc1\x4a\x03\x31\x10\x86\xef\x81\xbc\xc3\x4f\xf0\xd0\x82\x26\x4f\xe0\xa5\xd6\x83\x97\x56\xb0\x77\xc9\x6e\x26\x69\x58\x77\xb2\xc4\x59\x51\xc2\xbe\xbb\x6c\x5b\xe8\x69\x98\xf9\xe1\xfb\xe6\x6f\x0d\x81\x62\x66\x82\x39\x93\x0f\x54\x0d\x96\x45\x2b\xe7\xf0\x52\x02\x21\x11\x53\xf5\x42\x01\xdd\x1f\x52\x91\x90\x88\x1f\xb1\x3f\xe2\x70\x3c\xe1\x75\xff\x76\xb2\x5a\x69\x35\xf9\x7e\xf0\x89\xd0\x1a\x1e\xec\xfb\x6d\x59\x31\x5a\xe5\x71\x2a\x55\xb0\xd1\xca\xf4\x85\x85\x7e\xc5\x68\x65\xe2\xb8\x0e\xad\x4c\xca\x72\x9e\x3b\xdb\x97\xd1\xad\x74\x27\xc1\x75\x99\x8d\x56\xdb\x35\x76\x0e\x87\xf2\x54\xa6\xeb\x8b\x59\x72\x61\xc4\x52\x31\x10\x4d\x99\x13\xae\xf0\x6f\xab\xd5\x8f\xaf\xf8\xc4\x33\xba\xcc\x76\x37\xc7\x48\xb5\x2d\xf7\xeb\xcd\x6c\x77\xbe\x1f\x52\x2d\x33\x87\xcd\xf6\x9e\xc6\x51\xec\x87\xd4\xcc\x89\xea\x86\xf3\xd7\x45\xdd\x1a\x88\xc3\xa5\xc4\x7f\x00\x00\x00\xff\xff\x3b\x4a\xba\xaf\x23\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 291, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\xdd\x73\xdb\x36\x12\x7f\xd7\x5f\xb1\xf5\xb8\x3d\x32\x55\xe8\x3e\x3b\xf5\xc3\x39\x6e\x2f\x9a\xc9\xf5\x32\x76\x73\x2f\x9d\x4e\x86\x22\x97\x32\xc6\x14\xa0\x03\x41\x49\x39\x56\xff\xfb\x0d\xbe\x48\x90\x04\x3f\xac\x71\xd3\xf6\xf4\x62\x1a\x04\x16\xbb\xbf\xfd\x06\x58\x55\x90\x62\x46\x28\xc2\xc5\x36\x26\xf4\x02\x4e\xa7\x45\x55\xc1\xe5\xee\x69\x03\xd7\x37\x70\x19\x7d\x88\x93\xa7\x78\x83\x66\x5c\xe0\x76\x97\xc7\x02\xe1\xe2\x11\xe3\x14\xf9\x05\x5c\xca\x37\xf2\x15\x8f\xe9\x06\xe1\xb2\x50\xab\x1e\x04\x2f\x13\x51\xc8\x77\x57\x57\x20\x09\x16\xd1\x5b\xb6\xdd\x22\x15\x9a\xd2\x6b\x20\x99\x1c\xbc\x63\x49\x61\x47\x0c\x85\x54\x52\x68\xde\xe8\xf5\x82\x93\x2d\x5c\xa6\x76\x2a\x52\xdf\xa3\x26\xf9\xf1\xfe\xbd\x5e\x27\x97\x3e\x20\x9a\xed\xf5\x30\x64\x8c\x03\xc7\x0c\x39\xd2\x04\x23\x97\x82\xf8\xbc\xb3\x73\x7f\x8a\xb7\x52\x62\x28\x94\x18\x50\xb9\xec\x65\xa0\xf9\xfb\x91\x60\x9e\x2a\x0e\x01\x00\x8c\x94\x99\x47\xca\x98\xa6\x10\xa8\x37\x34\x25\x82\x30\x1a\xe7\x21\x04\x94\x09\x68\x0f\xde\x32\x96\x87\x0d\xe7\x1f\x0b\x84\x07\x14\x9a\xaa\x65\x48\xd2\xfa\x47\x77\xf0\x11\xf3\x1d\xf2\xa2\x25\x8c\xe4\xc9\x42\x92\x45\x77\xac\x5c\xe7\xf8\x90\x93\x04\x9b\x97\x2e\x89\x5f\x7e\xfd\xe5\x57\x3d\xf2\xb3\x44\xc1\x21\x80\x79\x81\x86\xca\xe8\xfa\x91\xd5\xde\x15\x03\xf3\x7b\x7a\x55\xc6\xa5\xe4\x50\x88\x15\xd1\xbf\x31\x11\x8c\xb7\x2c\xcb\xd0\x94\xc4\x56\x77\x40\x0a\xf8\xf9\x3d\x28\x6d\x92\x14\x58\xd6\x9e\x14\x2d\x12\x46\x0b\xe1\x5d\x79\x03\xdf\x1d\xf5\xf8\x3b\x3c\xae\xee\xe0\x74\x7a\xe3\xb2\x22\x37\xfc\x81\x26\x2c\x45\x20\xdb\x5d\x8e\x52\xcf\x05\xac\x09\x8d\xf4\x28\x8f\x16\x59\x49\x13\x08\x34\x8d\x7b\x4c\x90\xec\x51\xb2\x0a\xaf\x5a\xdb\x85\x86\x8c\x99\x78\x5b\x66\x7f\xe7\x1b\x35\x4d\x12\xbb\x2d\xb3\x0c\x79\x08\xc8\x39\xe3\x50\x29\x6c\x88\x95\xc2\x25\x7a\x73\x03\x94\xe4\x66\x86\xfc\x71\x14\x25\xa7\x90\x6d\x45\xf4\x83\x5c\x9c\x05\x17\x49\x4c\xff\x26\x00\x35\xd7\x86\x44\x7c\x30\xb0\x43\x5c\x48\x0a\x17\xa1\xa2\x70\x1a\x04\xba\xc3\x66\xf4\xa1\x14\xab\xbb\xc0\x83\x60\xd8\xf5\xc8\x51\x9f\x71\xb7\xeb\x79\x42\xdf\x88\x9d\x09\xf6\xa5\x0f\x96\xc8\xfa\x61\x3d\x5b\xed\x2a\xdf\xbc\x8b\x8b\xa0\xf7\x76\x45\x53\x3c\x2a\xa5\x54\x5d\x33\x6c\xef\xdf\xe0\x61\xad\xb9\x83\x89\x9e\xf0\x4e\x05\xc6\x20\x47\xda\xb7\x83\xa8\xe5\x03\xa1\xc6\x5d\x46\xa4\xaa\x32\x9b\x18\x4b\x82\xd3\x89\xa4\xd2\x16\x8d\x03\x7d\x92\x8f\x8a\xa9\x65\xcf\xad\x6b\xbe\x38\x3b\x54\x95\x5c\x70\x3a\xed\xab\x0a\x69\x7a\x3a\x49\xdc\xb5\x0e\x26\x78\x71\x84\xf7\xd2\xae\x6d\x6c\x8e\xdc\x9c\x1d\x8c\x6c\x56\xbe\x4f\x4b\xd8\x37\xbc\x70\x76\x98\x02\xbb\xc1\xc1\xd9\xd9\xbe\x5c\x51\x81\x3c\x8b\x9b\x60\x64\x7f\x24\x83\x7d\xdf\x2d\x06\x5c\xa3\xa4\xf1\x3a\x47\x10\x6c\xc8\x3d\xae\x21\x53\x96\xa3\x81\xba\x8f\x0f\x16\x2b\xd4\xbe\x0f\x07\x22\x1e\x81\x28\xfb\xf9\x3a\x95\x71\x47\x3a\xd3\x12\x48\x7a\x0c\x5b\x9b\xb7\x65\x50\x8a\x59\x38\x2c\x23\xe7\x12\x9b\x7d\xe4\x8f\x0a\xe1\x1b\x35\xe3\xab\x3f\x46\xac\x6b\xf8\xfa\xa0\x65\x5a\x4a\x36\x1a\xc1\xfc\x41\x7e\xc0\x44\xf4\x5e\x3f\xca\xe8\x78\x3a\x05\xfb\x70\x5c\xf9\x43\xb6\xd7\xcb\x13\xc3\x7c\x0c\x5a\xd2\x88\x15\x8d\x44\x13\x0b\xd1\x9c\x90\x7b\xbe\x02\x48\x3b\x1c\xf7\x0d\xa6\x31\x96\x09\x46\x9f\x69\x4a\x2f\x29\x85\x31\x98\xda\x56\x86\x8b\x81\x51\x1b\x99\x8a\x9d\x43\x16\xe4\x35\x28\x4f\xea\x18\x5c\xd1\x2f\x41\x1c\x84\x28\xc9\x6d\x45\x32\x98\xda\xea\x58\xde\xd9\x55\x55\xa3\x9d\xd2\xad\x40\x51\xc0\x3e\xce\x4b\xb4\x85\x4a\xf3\x2e\x71\x96\x2b\xa8\xe7\x97\x17\xdd\x7d\x02\xbd\x45\xcd\x59\xbb\x1e\x34\xc5\x9f\xa7\xd2\xd3\xe3\x0a\x85\x76\xc1\x16\x9a\x9a\xb8\x27\xa8\x9b\xba\x65\x34\xd6\xfb\x76\x42\xc3\xbc\x6c\xfd\x80\x62\x24\x5b\x6b\x25\x6a\xa6\xcf\xa3\xff\x91\x16\x33\x76\x58\xf8\x2d\xf7\xc5\x44\x98\x8c\x38\x1a\xc3\x91\x92\xd8\x8b\xff\xd5\x55\xbf\x4f\xd0\x36\x3c\xdf\xde\x64\xb7\x21\x09\xad\x19\xcb\x31\xa6\x70\x78\x24\xc9\xa3\x0c\x52\x82\x97\xca\x52\xf4\xac\x43\x5c\x48\x3b\x9e\x6f\x9d\x5d\xc6\x82\x10\x5e\xc0\x40\x5b\xf6\xb9\x04\xf6\xa4\xf8\x0e\x9b\x02\xfa\xab\x17\x2f\x15\x9d\xc0\xa0\xf8\x5f\x42\x16\xe7\x05\x3a\xf1\xc5\xbc\x9d\x50\xf2\x52\x21\x6a\xf5\x6a\xbb\x0d\x7f\x30\x92\x0a\xb9\x43\x5f\x13\xa2\x47\x9f\xd1\x84\xe8\x05\x5f\xac\x09\x49\xd1\xdf\x84\x08\x36\xab\x09\xf1\xe5\xbf\x26\x7f\xbc\x65\xb4\x28\xb7\x38\xd0\x96\x9c\x93\xf6\x06\xd8\xed\xa7\xb7\xda\x02\x67\x77\x3c\xc3\x21\x73\x5e\x44\x78\x39\x43\x1e\xa9\xe1\x3c\x9c\xf6\xab\xed\xdf\xc5\xa5\x2c\x3f\x9d\xed\xaa\x6e\x15\xed\xe7\xb7\x5f\x36\xca\x9f\x3e\xae\x7a\x8f\x74\x39\x64\x41\xad\x2e\x26\xec\x0a\x3a\x58\x81\x9f\x6f\x47\xf3\xca\x27\xfb\x6b\x8b\x23\x7b\x2a\x92\x1e\xa5\x1c\xdf\xbd\x51\x4f\xdf\x37\x22\xaa\x81\x6f\xbf\x85\x6a\xd1\xc6\x6f\xb2\xbe\xae\xe5\xa5\xf4\x6c\xac\xe6\xe0\xf5\xa5\x30\xeb\xe3\x26\x7f\xfb\x98\xab\x0e\xd4\x77\x66\xd5\xc3\x58\x22\xa1\x6d\xd4\x40\xdd\x0c\x7c\x5f\xe3\xf4\xa6\x7e\x52\xa8\x77\x41\xef\x98\x2a\xcc\xeb\x65\x35\xab\x2a\xab\x18\x2d\xe8\x78\xad\x99\xae\x97\xb5\xeb\xe5\xa6\xd2\xff\x0b\x29\xa5\x73\xcc\xe8\x69\xfd\x5d\xd5\xd5\x95\xc2\x88\xea\x9c\xa6\x5a\xce\x8e\xfc\x99\x6e\xac\xb1\xfe\x73\x20\x32\x69\x12\x5d\xc7\x6c\xf7\x50\x7f\x39\x23\xe8\x3b\x0a\x3c\x2b\x70\x29\xf6\xd9\x01\x6e\x20\xde\xed\x90\xa6\x01\x67\x87\xa5\x86\x6c\x4e\x64\x98\xce\xbc\x86\xec\x64\x3d\xc7\xd9\xa1\xbf\xa1\x2f\xcf\xbe\xfc\xd6\x03\xd2\x0e\xe0\x7b\xea\x65\xdd\x67\x1e\xb9\xbd\x54\x88\xfa\xf3\xe5\xd8\xb9\x9d\x59\x0f\xc0\xd1\x30\x36\xff\x08\xe7\xbc\xa0\xf5\x65\x71\x1a\x32\xe9\xf3\xa3\xd4\xff\x89\x1d\xf4\xab\x53\xff\x91\xe5\xac\xc3\x26\x73\xb1\xd9\xf2\xc1\xab\x2b\x50\x17\x59\xea\x82\xd2\xe9\x04\xeb\x41\xc6\x9b\xbb\x2f\x77\xe5\x70\x7f\xd8\x69\x0f\x6b\x4a\x41\xe8\x21\x03\x95\x65\xf3\x9b\x3e\x25\xb7\x29\xd2\xb7\x66\x45\xc9\x09\xdd\x00\xb1\x14\x0a\x20\x14\x12\xb6\xdd\x91\x1c\x5f\x0b\xb2\x45\x7b\x0d\xe2\xde\xd4\xc9\x74\x1f\x2c\x3e\xb9\x57\x6c\x70\x63\xf7\x33\xb3\xaa\x93\x99\x60\xda\x5f\xdf\x04\x3f\x82\x9f\x7c\x52\xf9\x57\x1b\x51\xc2\x85\x73\xcd\xfc\x4f\x14\x8f\x2c\x6d\xdd\x43\xd6\x43\x40\xe8\x9e\x3d\x61\x01\x5b\x3d\xd2\xeb\x79\x35\x74\x12\x11\xdd\x60\xab\x6b\xe2\xcf\xd1\xc4\xc5\x38\xfc\x41\x37\xe3\x0d\x85\x7b\x2c\xca\x5c\xf8\xc6\x1e\x08\xdd\x94\x79\xac\xe2\x9d\x36\xb0\x04\x5e\xbd\xcd\x09\x52\x11\x76\xe1\x09\x12\x71\x94\xe6\x25\xf0\x28\x64\x33\x28\xff\x2e\x81\xe3\x7f\x4a\x2c\x44\xef\x98\x22\x78\x65\x0d\xcc\xec\xbd\xd4\xa0\xd9\x96\x51\xd5\xf3\xfa\x5d\x67\x62\xe7\xcc\x20\x89\xf8\x2e\x89\x56\x4a\x35\xf7\xf1\x41\x72\x51\xef\xba\x84\x6f\x34\x8d\x89\xb3\x02\x4a\x72\xb5\x7d\xff\x8c\xc7\xac\x5f\x1a\xb7\x75\x23\xe3\x0b\xe3\x71\x16\x1c\x26\xda\xde\xb2\xe3\x17\x45\x45\x2f\x8f\x5c\x4e\x6e\xe3\x02\xeb\x6a\xc5\x01\xcb\x31\xdc\xdf\x05\x37\xf7\x28\x4b\x82\xc4\x9e\xe0\x5f\x4f\xcf\x03\x83\x3d\x4d\x00\xe1\xc5\xc0\x2f\xa3\x7d\x74\xce\xfb\xea\xc3\x23\xf5\x0d\xcd\xaa\x89\x95\x4d\x90\x71\x4f\x73\x77\x1c\x0b\x15\xf3\xeb\xbc\x66\xc3\xcb\x06\x29\x72\x92\xa8\x8f\x20\x22\xe9\xef\x4d\x21\x57\xc7\x80\x3a\x00\x64\x03\x01\xc0\x2c\x33\xec\xc9\x28\x7e\x8c\x65\x9e\xb9\x96\xcf\xb0\xf1\xd6\x7c\x36\xa7\xaf\xcb\x2c\x54\xd3\xba\xe9\x5c\x8e\xc9\xdf\x2e\xa6\x24\x09\x54\xe6\x95\x43\x8a\x3e\x14\x07\x22\x92\x47\x7d\x53\xbc\x89\x02\xc9\xbd\xbe\x68\xb0\xc0\x24\x2a\x02\xaa\x03\x24\x9b\xe4\x0a\x78\xad\xb9\x83\x24\x2e\x50\x2b\x3d\x89\xea\x04\x6f\x60\x4b\x1c\x74\x2c\xe6\x76\x5d\x8a\x59\x5c\xe6\xe2\xda\xf0\xb4\xb7\x1c\xd5\xdf\x03\x35\x98\xd7\xe9\xcb\x68\xde\x49\x4c\xf5\xff\x26\x0f\xa9\xff\xbb\x29\xb4\xa6\xb4\x70\x0f\x72\x5b\xd0\x75\x4e\x75\x63\xfe\x19\x52\x7c\x5d\x20\x27\x71\x4e\xfe\x1b\x0b\xc2\x68\x9d\x2a\x9b\x5a\x51\xbb\x8a\x8f\x9c\x54\x45\xfb\x48\x37\xe8\x34\x0c\xad\xe8\x41\xd2\x5a\xaf\xeb\x32\x8b\x3e\x20\x3e\xad\xee\x4c\x89\x36\x54\x9a\x0d\x07\x01\xa3\x50\x92\x3a\xd7\xfd\x63\xaa\x34\x21\x5b\x69\xb2\xa5\x48\x7d\x8e\x7b\x5d\x6f\x69\xb1\x93\x19\xb4\xab\xdf\xa8\x9e\xb5\xb7\xc5\x67\xe2\xa4\xf3\x4e\xa1\xa9\x2e\xde\x4d\xa9\x2d\xad\x76\xfa\xb2\x5d\xc9\x39\x59\x7f\x66\xd1\x48\x91\x79\xea\x62\xf7\xcd\x5e\x87\x42\x4f\xb1\x68\xcd\xd3\x0b\xf7\xb3\xd9\x90\x86\xf0\x13\x1e\x3e\x52\x3c\xee\x30\x11\x98\xae\xee\x02\x92\x86\xf6\x2c\x5b\x9b\x65\xdb\x82\xd6\xec\x88\x05\x88\xc7\xae\x33\xec\x38\xdb\x13\xa5\x81\xd8\x7c\x82\x16\xb9\x3e\xd3\x24\x9c\xe6\x33\x3a\xa8\x3f\x03\x73\x92\xc0\x88\x67\x0c\x5c\x71\x38\x0e\xd0\xec\x62\xeb\xda\xb5\x8e\x01\xee\xab\xfa\xaa\xa3\xe7\x0b\x9d\xeb\x8d\xf5\x33\x2f\xf8\x5b\x40\x3b\x02\x77\xae\x34\x94\x2d\x4e\xc7\xcb\x19\x3e\x36\xca\x86\x54\x54\xaa\x9b\x11\xff\x25\xfc\x3a\xea\x83\x7f\x03\x7b\x4f\xcf\x31\xf1\xa5\xdb\xf3\x15\x60\xbe\x47\x98\xad\x80\xdf\x7e\xf3\x73\x7b\xee\x97\x0b\xce\x27\x94\xfd\x8f\x2c\x0c\x11\xcf\x86\x51\xc3\x77\xb8\xe8\x66\x6b\xf3\xf8\xbf\x00\x00\x00\xff\xff\xdf\x74\x3e\x78\x43\x2b\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 11075, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateRegistryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcf\x4a\x34\x31\x10\xc4\xef\x81\xbc\x43\x11\xe6\xf0\x7d\xa0\xb3\xa2\xb7\x05\x6f\x1e\x14\x14\x64\xd9\x9b\x78\x68\x76\x7a\x62\xd8\x4d\x36\x24\x19\xdc\xa1\xc9\xbb\xcb\xfc\x71\x4f\x1e\xbb\xaa\xab\xa8\x9f\x08\x3a\xee\x5d\x60\x98\xc4\xd6\xe5\x92\x46\x83\x5a\xb5\x12\x41\x13\x8f\x16\xdb\x47\x34\xed\x3b\x1d\x8e\x64\xf9\xd7\x28\xec\xe3\x89\x0a\xc3\x7c\x31\x75\x9c\x0c\x9a\xd9\xd2\x6a\xb3\xc1\x7e\x8c\x9c\x91\xb8\x0c\x29\x64\x78\x8a\xd1\x05\x8b\x3e\x9d\x3d\xca\x18\x19\xae\xcb\x28\x67\xec\x5f\x97\x33\x90\xe7\xdc\x6a\xd5\x0f\xe1\xb0\x64\xdf\x28\xfe\xfb\x3f\x05\x3f\x06\x17\xca\xc3\xfd\x67\x2e\x69\xaa\x10\xad\xb0\xf6\xfe\xed\x8a\xdc\x22\x51\xb0\x8c\x86\x4f\xec\x97\xe9\xbb\x95\x6a\x1e\x08\x00\x77\x97\x09\x6d\x7a\x68\x9f\xf9\xf2\xf2\x84\x5a\xb7\x30\x57\x6d\x47\xdf\xa8\xd5\xdc\x2c\x75\x1c\xba\x35\x58\xb5\x9a\x09\x45\xae\xe2\x4f\x00\x00\x00\xff\xff\xfa\x22\x40\xae\x3c\x01\x00\x00")

func _templateRegistryTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateRegistryTmpl,
		"_template/registry.tmpl",
	)
}

func _templateRegistryTmpl() (*asset, error) {
	bytes, err := _templateRegistryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/registry.tmpl", size: 316, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/client.tmpl":   _templateClientTmpl,
	"_template/header.tmpl":   _templateHeaderTmpl,
	"_template/main.tmpl":     _templateMainTmpl,
	"_template/registry.tmpl": _templateRegistryTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"client.tmpl":   &bintree{_templateClientTmpl, map[string]*bintree{}},
		"header.tmpl":   &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":     &bintree{_templateMainTmpl, map[string]*bintree{}},
		"registry.tmpl": &bintree{_templateRegistryTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
