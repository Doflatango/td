// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// _template/client.tmpl
// _template/handlers.tmpl
// _template/header.tmpl
// _template/main.tmpl
// _template/registry.tmpl
// _template/string.tmpl
// _template/utils.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfe\x8a\xc1\x84\x92\x94\xe0\xdc\x03\x3d\xa5\x3d\x14\xda\x12\x4a\x7e\x40\x95\xd7\x89\x88\xbd\x12\xeb\x75\x92\x22\xf2\xef\x45\xb2\xd2\x93\x96\xa7\xd1\x68\x66\x63\x44\x4b\x9d\x63\x42\x6d\x7b\x47\xac\x35\xee\xf7\x2a\x46\x2c\xc2\xf9\x88\xed\x0b\x16\xcd\xde\xd8\xb3\x39\x52\xe1\x4a\x43\xe8\x8d\x12\xea\x13\x99\x96\xa4\xc6\x22\xdd\x54\x9b\x0d\xde\xf9\xe2\xcf\x24\xb0\x86\xe1\xf2\x0c\x31\x57\x7c\x1e\xf6\xe2\xd5\x43\x82\x85\x35\x7d\x3f\x36\x95\xfe\x06\xfa\x97\x3b\x56\x92\xce\x58\x42\xac\x50\xe8\xb7\xb9\x2e\xad\xde\x60\x3d\x2b\xdd\xb4\xd9\xcd\xe7\x1a\x8e\xc3\xa4\xf8\x71\xdc\xbc\xb1\xf5\x2d\xc9\x1a\x7e\xd2\x07\x7b\xa5\xcc\x56\x20\x11\x2f\xd5\x1c\x6b\x97\x7b\xc1\x0d\xa1\xa7\x21\x4d\x03\xe9\xc9\xb7\x23\x3a\x2f\x39\x90\xe3\x23\xba\x89\xad\x3a\xcf\x23\x3a\xf1\x03\x0e\x1f\x18\xed\x89\x06\x83\x8b\x33\x8f\xa4\x25\x77\xf1\x1b\x55\x26\xab\x39\x73\x6a\x56\x34\xe9\xcf\xe4\x85\x2f\xba\xce\xc2\xa5\x2b\x3d\x8b\x62\x85\xe7\xe2\x90\x9f\x92\x4e\xc2\x78\x9a\x51\x22\xd9\x6e\x5b\x16\x28\xeb\x0a\xb8\x27\xd3\x18\x41\xdc\xa6\x55\xff\x05\x00\x00\xff\xff\x88\xcc\x3e\xfd\xb3\x01\x00\x00")

func _templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateClientTmpl,
		"_template/client.tmpl",
	)
}

func _templateClientTmpl() (*asset, error) {
	bytes, err := _templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/client.tmpl", size: 435, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHandlersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x3b\x6f\xe3\x38\x10\xae\xc5\x5f\x31\x31\x5c\x48\x81\x4f\xee\x1d\xa8\x4a\x70\x88\x9b\x5c\x80\xbb\x54\x46\x70\xe0\xca\xa3\x98\xb0\x4c\x69\x49\x6a\xe3\xac\xc0\xff\xbe\x18\x92\x92\xf5\x88\x37\xc5\xba\xb1\x38\x8f\x6f\x5e\x1f\x87\x6d\x0b\x7b\x2c\x84\x44\x58\x1c\xb8\xdc\x97\xa8\xf4\x02\xac\x65\x6d\x0b\xcb\xfa\xf8\x06\x9b\x0c\x96\xe9\x33\xcf\x8f\xfc\x0d\x83\xdc\xe0\xa9\x2e\xb9\x21\x0f\xe4\x7b\x54\x0b\x58\x92\x86\x99\x8f\x1a\x21\x80\x40\x06\x45\x23\xf3\xf8\xa5\xde\x73\x83\xf7\x95\x34\x78\x36\x2b\x08\xc7\x92\x6b\x9d\x00\x2a\x55\xa9\xe0\xe6\x15\x0f\x42\xd7\xdc\xe4\x07\x54\xa0\x8d\x6a\x72\x03\x2d\x03\x80\x0e\x54\xc3\x89\xd7\x3b\x21\xcd\x6b\x10\x30\xcb\x18\x85\x81\x27\x7c\x9f\x22\xc4\xc9\x1c\xd4\xa3\x29\x34\x8d\x92\x33\xad\x57\x0e\xc3\x6d\xa6\xf1\x5a\xbb\x72\x46\x96\xd9\x51\xde\xa1\xbe\x71\xd2\xb9\x17\xa6\x41\xc9\x9c\xf0\x45\x0f\xcb\xb8\xa5\xa3\x93\xdf\x1f\xb8\x19\xc8\xe9\xe8\xe4\x42\x0a\x03\xdf\xaa\xaa\xec\x4b\x8d\x1b\xb8\x1d\x45\x4d\xa0\xe4\x3f\x3f\xb6\x52\x98\xbf\x55\x75\xf2\x2a\x1d\x37\xfe\xbf\xb3\xd5\x49\xc8\x4a\x14\xd0\xa4\x0e\xf5\x52\xaf\x6f\x48\xa8\xcc\xfd\x05\x93\x0c\x8c\x6a\x30\x48\x7c\xea\x19\x9c\xf8\x11\xe3\x51\x05\x2b\x28\x51\x76\x11\xbd\x5d\x92\xb0\xa8\xa8\x14\xfc\xbf\x82\x9c\xa6\x4d\x3c\x52\x5c\xbe\x21\x8c\xcc\xa0\x65\x51\xd4\x38\x88\xea\x48\x36\xce\x38\x8d\x1d\x6c\xc2\xa2\x48\x14\x70\x53\x1d\x9d\x59\x44\x0d\x15\xb2\x41\x16\x45\x96\xdc\x3c\xc4\x8e\xdc\xd3\xed\xc3\x2b\x64\x40\x9f\x2c\xea\x6b\xf0\x4d\x9d\x66\x4c\xd2\x71\xc6\xce\xee\xeb\x8c\x3d\x1c\xa5\x92\x3b\x88\x71\xc6\xa4\xfd\x32\x63\x07\xb1\x23\xf7\x90\x31\x7d\x52\xc6\x83\xe9\x4e\x79\x99\xc0\xa3\x63\x5f\x9c\x9b\xf3\x94\x54\x2b\x98\xcf\xd9\x5d\xab\x30\xdd\x86\x7c\x36\xd9\x98\xa6\x97\xc1\x07\xc1\xc6\x9f\x72\x73\xee\xe8\xdd\xb7\xc2\xc3\x7f\x32\xbd\x10\xf6\x82\xa5\xdf\x85\xc9\x0f\xc1\x20\x8d\xe9\x76\x10\xe7\xda\xf6\xaf\xe0\xba\xd4\x6e\x97\xfc\xeb\xee\x88\x06\x6b\xdb\x96\xd8\x88\xdf\x61\xa9\xd3\xad\x34\xa8\x0a\x9e\x23\x2c\x06\x3b\xc2\x6d\xa2\x2e\x40\xce\x35\xc2\x2d\xed\x25\x9d\x3e\xf1\x13\x6d\xa3\x4d\xaf\x0c\xd4\x0e\xf7\xb4\x9b\x4d\x93\x76\x57\x79\x37\xf2\xfb\xef\xa3\xc6\xed\xc3\xeb\x1d\xb8\x41\xc1\xe4\x47\x4d\x4b\x7f\x73\xa7\x92\x99\x07\x95\xa1\x14\x45\x0c\xf1\x62\xc2\xe8\xba\x97\xdc\x39\xed\x4d\x06\x52\x94\x9f\xc4\x1b\xec\x24\x54\x6a\xa6\xb6\x6c\x7c\xa2\x8e\xa2\xdc\xfb\x06\xfa\x0f\x76\xd1\x12\xd1\x02\x98\x14\x6e\x6b\xfc\xf9\x04\xa8\x77\xf8\x03\xa5\x71\xed\xdb\xd0\x56\x10\xa7\x67\x85\x85\x38\xf7\x4d\x0d\x4e\x0b\x6b\xd9\x7a\x0d\x63\x0f\x6b\x1f\xc3\xab\x20\x34\xf0\x99\x12\xdc\xa1\x6b\x5d\xea\x17\xeb\x35\x04\xf7\xaa\x10\xab\x27\x2f\x4b\x20\xea\x98\x1f\xfd\x1b\xb3\x5e\xc3\x3f\x72\x16\x57\x23\xdd\xe7\xa9\xb4\xcf\xe3\xfa\x85\x9c\x63\xc5\xdd\xbb\x77\x25\xef\x6e\xfd\x7e\xc1\xc8\xee\xd9\xbc\x5e\xe0\xfc\x05\x9d\x2d\xf2\x9e\x84\x03\x0e\xa6\xf1\xa4\x33\x49\xff\x90\x7d\xc6\x27\x76\xf9\xfc\x15\x00\x00\xff\xff\x5e\x75\x8c\xdd\x21\x08\x00\x00")

func _templateHandlersTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHandlersTmpl,
		"_template/handlers.tmpl",
	)
}

func _templateHandlersTmpl() (*asset, error) {
	bytes, err := _templateHandlersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/handlers.tmpl", size: 2081, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xc1\x6a\xc3\x30\x0c\x86\xef\x7a\x0a\x61\x76\x48\x61\x73\x9e\x60\x97\xac\x3b\xec\xd2\x0e\xd6\xfb\x70\x62\xd9\x15\x69\xe4\xe0\x28\x63\xc3\xe4\xdd\x47\xda\xd0\x5e\x04\xd2\x0f\x9f\xbe\xbf\x14\xf4\x14\x58\x08\xcd\x99\x9c\xa7\x6c\x70\x59\xa0\xae\xf1\x2d\x79\xc2\x48\x42\xd9\x29\x79\x6c\xff\x30\x26\xf5\x91\xe4\x19\xf7\x47\x3c\x1c\x4f\xf8\xbe\xff\x38\x59\x80\xd1\x75\xbd\x8b\x84\xa5\xe0\x93\xfd\xdc\x96\x65\x01\xe0\x61\x4c\x59\xb1\x02\xd3\x25\x51\xfa\x55\x03\x26\x0c\xeb\x9c\x34\xb3\xc4\xc9\x00\x98\xc8\x7a\x9e\x5b\xdb\xa5\xa1\x5e\xf9\xb5\xfa\xba\x65\x31\xb0\x83\x55\xe2\x90\x5e\xd2\x78\x13\x64\xe5\x24\x18\x52\xc6\x9e\x68\x64\x89\x78\xe3\x4f\x16\x7e\x5c\xc6\x6f\x7c\xc5\x96\xc5\x36\x73\x08\x94\xcb\x72\x3f\x6e\xbf\x6d\xe3\xba\x3e\xe6\x34\x8b\xaf\x76\xf7\x30\x0c\x6a\xbf\xae\x32\x94\x2b\xe1\xcb\x23\xd9\x14\x6d\x33\xf3\xc5\x5f\x81\x50\x0a\x92\xf8\xb5\xda\x7f\x00\x00\x00\xff\xff\xaa\xa0\x2f\x0c\x35\x01\x00\x00")

func _templateHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateHeaderTmpl,
		"_template/header.tmpl",
	)
}

func _templateHeaderTmpl() (*asset, error) {
	bytes, err := _templateHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/header.tmpl", size: 309, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5f\x73\xdb\x36\x12\x7f\xd7\xa7\xd8\x7a\xd2\x1c\x99\x2a\x74\x9f\x9d\xfa\xe1\x1c\xa7\x17\xcf\xe4\x7a\x19\x3b\xb9\x97\x4e\xc7\x03\x91\x4b\x19\x23\x0a\xd0\x01\xd4\x9f\x9c\xca\xef\x7e\x83\x7f\x24\x48\x82\x22\xed\x71\x73\x4d\xfd\x24\x83\xc0\x62\xf7\xb7\x3f\x2c\x76\x01\x1c\x8f\x90\x61\x4e\x19\xc2\xd9\x9a\x50\x76\x06\x55\x35\x3b\x1e\xe1\xc5\x66\xb5\x84\x8b\x4b\x78\x91\x7c\x24\xe9\x8a\x2c\xd1\xb6\x97\xb8\xde\x14\xa4\x44\x38\x7b\x40\x92\xa1\x38\x83\x17\xea\x8b\xfa\x24\x08\x5b\x22\xbc\x90\x7a\xd4\x5d\x29\xb6\x69\x29\xd5\xb7\xf3\x73\x50\x02\x65\xf2\x96\xaf\xd7\xc8\x4a\x23\xe9\x35\xd0\x5c\x35\x5e\xf3\x54\xba\x16\x2b\x21\x53\x12\x9a\x2f\x66\x7c\x29\xe8\x1a\x5e\x64\xae\x2b\xb2\xd0\x4f\x23\xf2\x03\x65\x2b\x3d\x12\x00\x40\x35\x37\x4a\x6f\x04\x65\xe5\x7d\xa1\x3a\x9c\xb5\xba\x06\x05\x7d\xbe\xfd\x60\x14\x50\x3a\xdc\x21\x5a\x3b\x4c\x33\xe4\x5c\x80\xc0\x1c\x05\xb2\x14\x13\x5f\x42\xf9\x65\xe3\xfa\xfe\x42\xd6\x0a\x3a\x90\x1a\x0f\x38\xfa\x76\xe6\x60\x0c\xfd\x99\x62\x91\xf9\x50\xe5\x21\xa8\x72\xa3\xec\x04\xb3\xf2\x53\x66\x11\x96\x41\xa4\x67\x60\x19\x2d\x29\x67\xa4\x88\x21\x62\xbc\x84\x76\xe3\x15\xe7\x45\xdc\x58\xff\x59\x22\xdc\x61\x69\xb4\x73\x46\x29\x59\xff\xe8\x36\x3e\x60\xb1\x41\x21\x5b\x80\x18\x8d\xfd\x5e\x2d\x2a\x19\xf5\x15\x6a\x4a\xfb\x8e\xde\x9a\x5c\x5a\x75\xad\xa4\x4c\xfe\x8d\x69\xc9\x45\x8b\x59\x56\xea\xa7\x2f\x1b\xbc\xb9\x06\x2a\xe1\xd3\x07\xd0\x4e\xa0\x19\xf0\xbc\xdd\x29\x99\xa5\x9c\xc9\x32\x38\xf2\x12\x7e\x3c\x98\xf6\xf7\x78\xb8\xb9\x86\xaa\x7a\xe3\xab\x32\x3b\x1e\x1b\xa5\x65\x29\x28\x5b\xde\x67\x28\xe8\x4e\xe9\xad\xf1\x56\x2a\xbd\x63\x29\xcf\x10\xe8\x7a\x53\xa0\x72\xa2\x84\x05\x65\x89\x69\x15\xc9\x2c\xdf\xb2\x14\x22\x33\xcb\x2d\xa6\x48\x77\xa8\x8c\x81\x57\x2d\x85\x62\x2b\xc6\x76\xbc\xda\xe6\x7f\x17\x4b\xdd\x4d\x09\xbb\xda\xe6\x39\x8a\x18\x50\x08\x2e\xe0\xa8\xf1\xa5\xce\x4e\x5f\xe8\xe5\x25\x30\x5a\xd8\x1e\xea\x4f\x60\xb9\x15\x0c\xf2\x75\x99\xbc\x53\x83\xf3\xe8\x2c\x25\xec\x6f\x25\xa0\xd1\xda\x8a\x20\x7b\x85\x88\xf6\xb1\x54\x12\xce\x62\x2d\xa1\x1a\x74\x45\x47\xcd\xe4\xe3\xb6\xbc\xb9\x8e\x02\x18\xc7\x5d\x4e\x0e\x2e\x06\x47\x73\x37\x5d\x8f\x9e\x9d\x4e\xed\x0e\xee\x63\x08\x96\xc4\x2d\xb2\xba\xb7\x9e\x55\x7d\x79\x4f\x64\xd4\xfb\x7a\xc3\x32\x3c\x68\xa7\x1c\xeb\x09\x5b\xcc\x76\xf3\x37\x78\x38\xc6\x77\x30\x31\x1d\xde\xeb\xd0\x19\x15\xc8\xfa\x3c\x48\x5a\xeb\x24\x36\xb8\xab\x50\x73\x3c\xda\x49\x2c\x93\xa0\xaa\x68\xa6\xd8\x8a\x85\x54\x5d\xef\xd5\x4f\xad\xd4\xdc\xd3\xe8\x9a\x6f\x17\x05\xd6\x7a\x09\xbe\x3f\x1e\xd5\x80\xaa\xda\x1d\x8f\xc8\xb2\xaa\x52\xb8\x1b\x1f\x8c\xe8\xe2\x19\x1f\x94\x5d\x73\x6c\x8a\xdd\x82\xef\xad\x6d\xce\xbe\xfb\x39\xec\x1a\x5d\x04\xdf\x8f\x81\xdd\xe0\xe0\xcd\xec\x3e\xde\xb0\x12\x45\x4e\x52\xf4\x3f\x5b\x3e\xec\xfa\xcb\x62\x60\x69\x6c\x19\x59\x14\x08\x25\x1f\x5a\x1e\x17\x90\x6b\xe6\x18\xa0\x6e\xc9\xde\x61\x85\x66\xed\xc3\x9e\x96\x0f\x40\x35\x7f\xbe\xcf\x54\x64\x52\x8b\x69\x0e\x34\x3b\xc4\xad\xc9\xdb\x36\x68\xc7\xcc\x3c\x95\x51\x08\x85\xcd\x2e\x09\x47\x85\xf8\x8d\xee\xf1\xdd\xff\xc7\xac\x0b\xf8\x7e\x6f\x6c\x9a\x2b\x35\x1a\xc3\x1a\x8f\x59\x8e\x9e\xa2\x88\x99\xeb\x67\x15\x1d\xab\x2a\xda\xc5\xa7\x9d\x3f\xc4\xbd\x2a\x34\x2c\xac\xc7\x20\x93\x4e\xb0\xe8\x44\x34\x71\x10\x4d\x09\xb9\x4f\x77\x00\x6d\x87\xe3\x3e\x61\x1a\xb2\x8c\x28\xfa\x48\x2a\x3d\xa7\x15\x96\x30\x35\x57\x86\xfc\x33\xc2\x91\xb1\xd8\x39\xc4\xa0\x20\xa1\x02\x5b\xc7\xe0\x88\x7e\xf2\xe9\x21\xc4\x68\xe1\x72\x96\xc1\xad\xad\x8e\xe5\x9d\x59\x75\x9a\xd9\xc9\xa7\x24\x96\x12\x76\xa4\xd8\xa2\x4b\x65\x9a\x6f\xa9\x37\x5c\x43\x3d\x3d\xbd\xe8\xce\x13\x99\x29\x6a\xcd\xcc\x02\xbb\x2b\xa8\x26\xff\xaf\xbf\xfd\xfa\x9b\xdb\x6a\xcc\xf7\xe6\x4b\xbd\xef\x58\xe5\xac\xf3\x63\x9b\xec\xf6\x0c\xf5\xb7\x6e\x15\x8d\xcd\xbc\x9d\xd0\x30\x6d\xb7\xbe\xc3\xf2\xc4\x6e\x6d\x9c\x68\x94\x7e\x9a\xfc\xcf\x4c\x4e\x98\x61\x16\x66\xee\xb3\x99\x30\x1a\x71\x0c\x86\x27\x92\xe6\x20\xfe\xe7\xe7\xfd\xe4\xdd\x70\x78\x3a\xdf\x54\x09\xa0\x04\x2d\x38\x2f\x90\x30\xd8\x3f\xd0\xf4\x41\x05\xa9\x52\x6c\x35\x53\x4c\xaf\x3d\x91\x8a\xc7\xd3\xd9\xd9\x55\x2c\x8a\xa1\x21\xe8\x89\xc2\x61\x0e\x7c\xa5\x95\x89\x9b\xac\xf8\xbb\x67\xcf\xff\xbc\xd5\xae\x95\x9a\x43\x4e\x0a\x89\x5e\xd0\xb0\x5f\x47\x3c\x37\xd7\x30\x39\x67\x35\x45\x46\x28\xc2\x28\x94\xaf\x31\x54\x59\x98\xd6\x47\x54\x16\x66\xc0\x57\xab\x2c\x32\x0c\x57\x16\x25\x9f\x54\x59\x84\x36\xb5\x66\x53\x78\xcb\x99\xdc\xae\x71\xa0\xd6\x78\xca\x5e\x36\xa0\x6e\x7f\xcf\x7a\x42\x1d\x33\x1c\x08\xa7\xad\xf3\xe7\x63\xf2\x89\xcc\x2c\xa0\x69\x3f\x87\xfe\x43\xd6\x94\xd3\xa7\x33\xdd\xb1\x9b\x1b\x87\xf5\xed\x27\x83\xea\xcf\x1c\x53\x7d\x40\x36\x1f\xa2\x50\xab\x36\x89\xbb\x86\x0e\xe6\xd5\x4f\x27\xd2\xb4\xa4\xc8\xfd\xb5\xcd\x51\x95\x12\xcd\x0e\xca\x8e\x1f\xdf\xe8\x5f\x3f\x35\x26\xea\x86\x1f\x7e\x80\xe3\xac\x8d\xdf\x68\xd6\x5c\xdb\xcb\xd8\x93\xb1\x9a\x82\xd7\xd7\xc2\xac\x8f\x9b\xfa\xdb\x11\xa1\xeb\x4a\x9d\xb2\x34\x89\x4a\xaf\x9f\xc6\x58\x21\x61\x38\x6a\xa1\x6e\x1a\x7e\xaa\x71\x7a\x53\xff\xd2\xa8\x77\x41\xef\x50\x15\xa6\x55\xa8\x46\x55\xbd\xad\x58\x2f\x98\x80\x6d\x94\xae\x87\xb5\xb3\xe0\x26\x7f\xff\x86\x9c\x52\xc7\x9f\xc1\x82\xde\x77\x5d\xbd\xff\x9f\x70\x9d\x57\x2a\xab\xde\x49\x78\xab\x3b\x55\x2e\xff\x39\x10\x19\xa5\x44\x77\x61\xb6\x2b\xa3\x6f\x8e\x04\xfd\x85\x02\x8f\x0a\x5c\x5a\x7d\xbe\x87\x4b\x20\x9b\x0d\xb2\x2c\x12\x7c\x3f\x37\x90\x4d\x89\x0c\xe3\x3b\xaf\x15\x3b\x9a\xd0\x09\xbe\xef\x4f\x18\xda\x67\x9f\x7f\xea\x01\x6b\x07\xf0\xad\x7a\xbb\xee\x23\x0f\xd2\x9e\x2b\x44\xfd\xf9\xf6\xd8\xa9\xf5\x56\x0f\xc0\x93\x61\x6c\xfa\xc1\xcc\xd3\x82\xd6\xd7\xc5\x69\x88\xd2\x4f\x8f\x52\x7f\x11\x1e\xf4\xb3\xd3\xf0\x41\xe4\xa4\x23\x24\x7b\x0f\xd9\x5a\x83\xe7\xe7\xa0\x2f\xb0\xf4\x7d\xa2\x57\x0a\xd6\x8d\x5c\x34\x77\x5e\xfe\xc8\xe1\x02\xb1\x53\x1f\xd6\x92\xa2\x38\x20\x06\x8e\x4e\xcd\x97\x7d\x49\xfa\x68\xcb\xab\x58\xdf\x31\xb9\x15\x94\x2d\x81\x3a\x09\x12\x28\x83\x94\xaf\x37\xb4\xc0\xd7\x25\x5d\xa3\xbb\xdc\xf0\x6f\xe8\xd4\x76\x1f\xcd\xee\xfd\x8b\x33\xb8\x74\xf3\xd9\x5e\xc7\xca\x76\xb0\xf5\x6f\xa8\x43\x18\xc1\xfb\x90\x55\xe1\xd1\xd6\x94\x78\xe6\xdd\x0a\xff\x13\xcb\x07\x9e\xb5\xee\x1f\xeb\x26\xa0\x6c\xc7\x57\x28\x61\x6d\x5a\x7a\x45\xaf\x81\x4e\x21\x62\x2a\x6c\x7d\x23\xfb\x25\x19\xb9\x10\x87\x6f\xfd\x46\xbc\x91\x70\x8b\x72\x5b\x94\xa1\xb6\x3b\xca\x96\xdb\x82\xe8\xc0\x69\x98\x9a\xc2\xab\xb7\x05\x45\x56\xc6\x5d\x9c\xa3\xd6\x31\x90\xc0\xff\x6c\x51\x96\xf7\x1b\x22\xc8\x5a\xda\xbb\xd8\x58\x33\xbd\x39\x51\x30\x93\xd4\x29\xc4\x2b\x47\x5e\xab\x4e\x73\x91\x66\xca\x03\xf7\xc9\x06\x2b\xef\x72\x4d\x3b\xce\x95\xad\xba\xa6\x30\x32\x3a\x02\xdd\xd1\x9d\x07\x35\x49\x57\xf7\x56\x57\x77\x61\xdc\xde\x19\xd2\x44\x6c\xd2\xe4\x46\x73\xe8\x96\xec\xa3\xb4\x3c\xcc\xc1\x8e\x98\xc3\x4b\x33\xd1\xc8\xa9\x06\xa3\x85\xd6\xb1\x13\x70\x7c\xa4\xdb\x79\x94\x1d\x67\x84\x27\xef\x0a\x5c\xcb\xb9\x0e\x41\xa1\x38\xef\x96\xbe\xe9\xdd\xe9\xe7\xce\x1e\xfd\x41\xcf\xe5\x49\xe5\x48\xf4\x00\x3e\xbb\xe2\xbc\x78\x5b\x10\x29\xcf\xb4\x77\xc2\xbe\x5c\x70\x5e\x3c\xd2\x75\xd6\xe1\x57\xfc\xf0\xd5\x3c\xe8\x8e\xbe\x06\xec\x83\xaa\xea\xf8\xd6\x03\xd8\x6d\x8b\xa4\x90\xd8\x7c\x0b\x6d\x39\xa7\x67\x08\x50\xc1\x47\xe5\x8a\x48\xac\x33\xcd\x21\x72\xdc\xeb\xe3\xd7\x8b\xcb\x11\x01\x49\xf4\x4a\x4d\xfd\x49\xb8\x74\xd5\x4e\xcb\x57\xa7\xf8\xe4\x85\xb7\xe7\xa4\x96\x7f\xd0\xa9\x18\xc1\x57\xf0\xaf\xd5\x1f\xe0\x79\xbe\x1a\x59\xb7\xed\x25\xdb\xca\x04\x86\xc2\xbb\x77\x64\x5c\x1f\x3f\xea\xd7\x57\x37\xcd\x6e\xeb\xbf\x2a\x6a\x4e\xf9\x37\x02\xa5\xce\x1a\xea\xcc\xc8\x6d\x50\x4b\x64\x28\x68\xaa\x9f\xcf\x24\x2a\xd0\x37\xa5\x40\x1d\xfc\xeb\xc8\x9f\x0f\x44\x7e\x3b\xcc\xaa\xa7\xf2\x80\x03\x51\x99\xca\x85\xfa\x0d\xcb\x60\xd5\xe0\xb2\xc2\xc5\x36\x8f\x75\xb7\x6e\x42\xa8\xda\xd4\xdf\x86\x30\x9a\x46\x3a\x77\x53\x4d\x5a\x3e\xc8\x3d\x2d\xd3\x07\xf3\x82\x60\x99\x44\x4a\x7b\x73\x01\xe5\x80\x49\xf5\x1e\xaa\x8f\x20\x5d\x9a\x24\xe1\xb5\xd1\x0e\x52\x22\xd1\x1c\x93\xa7\x49\x9d\x22\x5a\xd8\x52\x0f\x1d\x87\xb9\x1b\x97\x61\x4e\xb6\x45\x79\x61\x75\xda\x39\x8d\xea\x07\x60\x0d\xe6\x75\x02\x64\x3d\xef\xa5\x36\xf5\xff\x36\x93\xd1\xff\x77\x93\xb0\x5a\x92\xfe\xaa\xb2\xe0\x3b\xfd\x00\x09\xc5\xcc\xbf\x1c\x68\x61\xd9\xb9\x29\x20\xe2\x0b\x64\xf8\x5a\xa2\xa0\xa4\xa0\xff\x25\x25\xe5\xac\xce\xbe\x9a\xf2\xc3\xac\xab\x90\x38\xe5\x9b\xf6\x35\x41\xd4\xa9\x41\x5b\x01\x96\x66\xb5\xa3\x17\xdb\x3c\xf9\x88\xb8\xba\xb9\xb6\x59\xff\x50\xb6\x3f\xbc\x89\x59\x0f\xd3\xcc\x7b\x17\x72\xca\xb7\x16\x29\xed\xda\x96\x67\xcd\xdd\xc0\x45\x3d\xa5\xc3\x4e\x25\x65\x5d\x87\x27\x75\xaf\x9d\xab\x67\x52\x2f\x43\xec\xd4\x2e\xfa\x85\x86\xad\xde\x14\x8d\xc7\x5f\x65\x68\x3b\x47\x4b\x9a\x3c\x39\x51\xb7\x54\x5d\xec\x5e\xee\x82\x61\x54\xfd\xeb\xf8\x1a\x84\xfb\xd1\x6a\x28\x22\xfc\x82\xfb\xcf\x0c\x0f\x1b\x4c\x4b\xcc\x6e\xae\x23\x9a\xc5\xee\x7e\xc4\xd0\xb2\xcd\xa0\x05\x3f\xa0\x84\xf2\xa1\xbb\x3a\x36\x82\xef\xa8\xf6\x00\xb1\x0f\x08\x13\x7f\x11\x35\x7b\x72\xf3\x90\x12\xea\x37\x85\xde\xd6\xd2\x59\x2a\x13\xae\xcd\xbc\x05\xd0\xcc\xe2\x4a\xa5\x85\x09\x0a\xfe\xa7\xfa\xfa\xac\xb7\x16\x3a\x57\x66\x8b\x47\xbe\x04\x69\x01\xed\x19\xdc\xb9\x26\xd3\x5c\x1c\x0f\xa0\x13\xd6\xd8\x49\x35\x94\xa3\x32\x53\xdf\x86\x5f\x6b\x2c\x92\x3e\xf8\x97\xb0\x0b\x94\xb1\x23\x4f\x22\x1f\xef\x00\xfb\x70\x65\xb2\x03\x7e\xff\x3d\xac\xed\x53\x9f\xb8\x78\x0f\x60\xfb\xaf\x71\xac\x90\xc0\x84\x49\xa3\x77\x3c\xeb\x6e\xdf\xf6\xe7\xff\x02\x00\x00\xff\xff\x17\xb0\x0b\x5d\x8e\x2d\x00\x00")

func _templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateMainTmpl,
		"_template/main.tmpl",
	)
}

func _templateMainTmpl() (*asset, error) {
	bytes, err := _templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/main.tmpl", size: 11662, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateRegistryTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x3f\x6b\xc3\x30\x14\xc4\x77\x7d\x8a\x43\x78\x68\xa1\xb5\x4b\xbb\x05\xb2\x75\x68\x21\x85\x12\xb2\x95\x0e\x0f\xfb\xd9\x11\x89\x64\x21\x29\x6d\x8c\xd0\x77\x2f\x2f\x76\xff\x0c\xdd\xa4\x3b\xee\xa7\xd3\xe5\x8c\x8e\x7b\xe3\x18\x3a\xf0\x60\x62\x0a\x93\x46\x29\x2a\x67\x54\xfe\x30\x60\xb5\x46\x55\xbf\x52\x7b\xa0\x81\x17\x3d\xb1\xf5\x47\x4a\x0c\xbd\x67\xea\x38\x68\x54\xe2\xa8\x9c\x6f\x61\x7a\x54\xf5\x86\x26\x0e\x22\x35\x0d\xe6\xf3\x07\x87\x68\x46\x87\xb1\x47\x6c\xf7\x6c\xa9\x56\xed\xe8\x62\x5a\xec\x35\xe4\xb9\xdf\x9c\x90\xd8\x75\x17\x6a\xd3\x60\x37\x79\x8e\x08\x9c\x4e\xc1\x45\x58\xf2\xde\xb8\x01\x7d\x18\x2d\xd2\xe4\x19\xa6\x8b\x48\x23\x76\x9b\xf9\xea\xc8\x72\xac\x55\x7f\x72\xed\x1c\x7d\x21\x7f\x75\x2d\xb9\xb7\x93\x71\xe9\xe1\xfe\x3d\xa6\x20\x84\xac\xb0\x50\xff\x35\xa5\x45\x20\x37\x30\x2a\x3e\xb2\x9d\xa7\xd8\x2e\x23\x49\x37\x00\xb8\x3b\x4b\x75\xf1\xeb\x27\x3e\x3f\x3f\xa2\x94\x15\xf4\x8f\xb6\xa5\x4f\x94\xa2\x6f\xfe\x7e\x09\x28\xea\x32\xd7\xb7\xf0\x15\x00\x00\xff\xff\x19\x30\xd6\x59\x84\x01\x00\x00")

func _templateRegistryTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateRegistryTmpl,
		"_template/registry.tmpl",
	)
}

func _templateRegistryTmpl() (*asset, error) {
	bytes, err := _templateRegistryTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/registry.tmpl", size: 388, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateStringTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x8b\xdb\x30\x10\xbd\xfb\x57\x0c\xc6\x10\xab\xdd\x6a\xef\x0b\xb9\xa4\xdd\xd2\x5e\x7a\x68\xa1\x3d\x74\x97\xc5\x89\xc6\x8b\x40\x96\x16\x49\xf1\xb6\x08\xfd\xf7\x22\x59\x76\xfc\x95\x64\x9b\x43\xc0\x9a\x37\x6f\xde\xbc\x19\xc9\x39\x86\x35\x97\x08\xb9\xb1\x9a\xcb\xe7\x27\x86\x9a\xb7\x98\x83\xf7\xce\x41\x61\xe0\x6e\x0b\x05\x78\x9f\xdd\xde\xc2\x8f\x88\x00\xde\xbc\x08\x6c\x50\x5a\x03\x75\x63\x69\x77\x8a\x9a\x66\xf5\x51\x1e\xa0\x8c\x69\xf4\x3b\x1e\x90\xb7\xa8\xc1\x7b\x78\xd7\x1d\x7d\xab\x1a\x04\xef\x49\xe2\x29\x09\x74\x25\xc1\x65\x00\x00\xbc\x86\x65\xea\x76\x0b\x92\x8b\x84\x08\x3f\x8d\xf6\xa8\x25\xe4\x01\xda\x33\x96\x92\x0b\x92\x47\x88\x8f\xff\x6d\xa5\xc1\xec\x13\xbd\xa1\xbb\x23\x17\x0c\x75\x0c\x99\x3d\xfd\xa5\xb9\xc5\xa4\x61\xc2\x93\x93\xcc\xb9\x0f\x41\x48\x61\xe8\x4f\x3c\x58\x15\x34\x4c\xd2\x76\x7f\x2d\x96\x9b\xdf\x1b\x12\x4f\x6b\xa5\xe1\xe9\x06\x30\x98\xa4\x2b\xf9\x8c\xcb\x0e\xe8\xbd\xc0\xc6\x8c\x1a\x98\x09\x88\x0e\xbe\x68\x2e\x6d\x89\x04\xde\x43\x7e\xf3\x20\x73\x32\xea\x65\x5a\xf9\x71\xd3\x69\x44\x61\x70\xae\x6d\x68\x29\x32\x04\x54\xa7\xa9\xa8\xe3\x10\x0d\xfd\xcc\x51\x30\xd3\xa7\xa5\x56\xa5\xb2\x50\xd4\xf4\xa3\x92\x8c\x5b\xae\x64\x25\x76\x4a\x89\x19\x68\x0a\xe8\x83\x6b\x13\xa3\xe1\x64\x82\x8e\x55\x43\xe4\x4b\x65\xca\x45\xf4\xab\x64\xf8\x27\x6e\x85\x1b\x0a\xa2\x64\xcb\xfa\xff\x31\x8f\x53\xd2\x27\x75\xdc\x0b\x1c\x52\xb5\x7a\x75\x2e\x58\xe7\x7d\xeb\x1c\x4a\xe6\xfd\xa5\xd1\x75\x62\xd3\x72\x8c\xf4\xad\x72\x2f\x06\x3c\x95\x36\x92\xd7\x9e\x6a\x6a\xf5\xba\xde\xf7\xe5\x4d\x69\x09\x79\xa3\x98\x73\xb2\x1e\x37\x64\xad\xec\xb9\x95\x1b\xa0\x17\xd6\xee\xc1\x4e\xfc\xba\x83\x7c\x2e\xf2\x5e\x1e\x14\xc3\xc5\x0c\x13\xc1\x15\xff\x69\xff\x6a\xbc\x49\xcd\xc8\xac\x2b\xbc\x64\xd5\x88\x79\x73\xa7\x5b\x79\x76\x41\x57\x2e\x88\x3f\x97\x91\x3e\xaf\x14\xed\x1f\xa4\x11\x24\x3d\x7f\x66\x3f\xd8\x91\x4d\x68\xfe\x05\x00\x00\xff\xff\xbd\x79\x4c\x5c\xcf\x05\x00\x00")

func _templateStringTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateStringTmpl,
		"_template/string.tmpl",
	)
}

func _templateStringTmpl() (*asset, error) {
	bytes, err := _templateStringTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/string.tmpl", size: 1487, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __templateUtilsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x41\x6b\xf3\x30\x0c\x86\xef\xf9\x15\x2f\xc1\x7c\xf0\x8d\x2c\x61\xd7\x40\x4f\x1b\x3b\x8d\x31\xd8\x76\x2a\xa5\x78\x89\x32\x4c\x5d\x37\x73\x5c\xd6\x62\xfc\xdf\x87\xdc\xb4\x75\x4b\xc6\x72\x89\x2c\xbd\x92\xfc\xc8\xf2\x1e\x2d\x75\xca\x10\x72\x4b\x5f\x5b\x1a\xdc\xb2\x97\x56\xae\x87\x1c\x21\x34\x6e\x87\x66\x63\x1c\xed\x5c\x79\x7f\xf8\x7b\x7f\x0b\xd5\xa1\x7c\x37\xbd\x6c\x56\x2f\x2c\x25\x47\x76\x40\x08\xc7\xd0\xa3\x22\xdd\xb2\xa3\xc8\xd8\x65\xa5\xf9\x24\x88\x0e\xf5\x2c\x89\x79\x0f\xbd\xf9\x26\x0b\xd1\x95\xcf\x72\x4d\x08\x01\xde\xc3\xd1\xba\xd7\xd2\x11\xf2\xde\x2a\xe3\x96\x6e\xdf\x53\xce\xc9\x21\x14\x5c\x8c\x4c\x1b\x42\x36\x5a\x38\x9a\x7a\xe0\xfc\x02\x23\x01\x6e\xbc\xc7\xb1\xea\xb5\xf6\x60\x66\x09\x37\x83\x2c\xc7\xd4\x3c\xe1\x98\x40\xcc\x00\x9c\xba\xd4\x33\xfc\xf3\x1e\xe2\xd4\x29\x46\xf9\xbb\xc6\x16\x67\xee\x44\x93\xa0\xd7\x98\x98\x47\x71\x51\x6f\xbc\x38\x1f\x53\x92\xdf\x98\x92\xe9\x8d\xe4\xaa\x83\x28\x1f\x36\xdb\x0f\x4d\xaf\x5a\x35\xdc\x61\xbe\x98\x2f\x22\xc1\xdb\xbe\xa7\x8b\x69\x46\xf1\x59\x36\x2d\x8a\xaf\x78\xe5\xff\xfb\x52\x5a\x99\x55\xdc\xae\xac\xaa\xb2\xaa\xc2\x13\x9f\xeb\x74\x55\x54\x01\xc1\xaa\xb8\x31\x07\x61\x9c\x97\x6c\x5b\x08\x85\x3b\x84\xf0\x3f\xce\x2f\x8a\x26\xf6\x21\x9a\x3f\x01\x00\x00\xff\xff\x33\xe8\x16\x59\xda\x02\x00\x00")

func _templateUtilsTmplBytes() ([]byte, error) {
	return bindataRead(
		__templateUtilsTmpl,
		"_template/utils.tmpl",
	)
}

func _templateUtilsTmpl() (*asset, error) {
	bytes, err := _templateUtilsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_template/utils.tmpl", size: 730, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_template/client.tmpl":   _templateClientTmpl,
	"_template/handlers.tmpl": _templateHandlersTmpl,
	"_template/header.tmpl":   _templateHeaderTmpl,
	"_template/main.tmpl":     _templateMainTmpl,
	"_template/registry.tmpl": _templateRegistryTmpl,
	"_template/string.tmpl":   _templateStringTmpl,
	"_template/utils.tmpl":    _templateUtilsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_template": &bintree{nil, map[string]*bintree{
		"client.tmpl":   &bintree{_templateClientTmpl, map[string]*bintree{}},
		"handlers.tmpl": &bintree{_templateHandlersTmpl, map[string]*bintree{}},
		"header.tmpl":   &bintree{_templateHeaderTmpl, map[string]*bintree{}},
		"main.tmpl":     &bintree{_templateMainTmpl, map[string]*bintree{}},
		"registry.tmpl": &bintree{_templateRegistryTmpl, map[string]*bintree{}},
		"string.tmpl":   &bintree{_templateStringTmpl, map[string]*bintree{}},
		"utils.tmpl":    &bintree{_templateUtilsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
