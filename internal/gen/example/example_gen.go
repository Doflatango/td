// Code generated by gotdgen, DO NOT EDIT.

package td

import (
	"context"
	"fmt"

	"github.com/ernado/td/internal/bin"
	"golang.org/x/xerrors"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}

// Int32 represents TL type int32#5cb934fa.
type Int32 struct {
}

// Int32TypeID is TL type id of Int32.
const Int32TypeID = 0x5cb934fa

// Encode implements bin.Encoder.
func (i Int32) Encode(b *bin.Buffer) {
	b.PutID(Int32TypeID)
}

// Decode implements bin.Decoder.
func (i *Int32) Decode(b *bin.Buffer) error {
	if err := b.ConsumeID(Int32TypeID); err != nil {
		return fmt.Errorf("unable to decode int32#5cb934fa: %w", err)
	}
	return nil
}

// Ensuring interfaces in compile-time for Int32.
var (
	_ bin.Encoder = Int32{}
	_ bin.Decoder = &Int32{}
)

// String represents TL type string#b5286e24.
type String struct {
}

// StringTypeID is TL type id of String.
const StringTypeID = 0xb5286e24

// Encode implements bin.Encoder.
func (s String) Encode(b *bin.Buffer) {
	b.PutID(StringTypeID)
}

// Decode implements bin.Decoder.
func (s *String) Decode(b *bin.Buffer) error {
	if err := b.ConsumeID(StringTypeID); err != nil {
		return fmt.Errorf("unable to decode string#b5286e24: %w", err)
	}
	return nil
}

// Ensuring interfaces in compile-time for String.
var (
	_ bin.Encoder = String{}
	_ bin.Decoder = &String{}
)

// BoolFalse represents TL type boolFalse#bc799737.
type BoolFalse struct {
}

// BoolFalseTypeID is TL type id of BoolFalse.
const BoolFalseTypeID = 0xbc799737

// Encode implements bin.Encoder.
func (b BoolFalse) Encode(buf *bin.Buffer) {
	buf.PutID(BoolFalseTypeID)
}

// Decode implements bin.Decoder.
func (b *BoolFalse) Decode(buf *bin.Buffer) error {
	if err := buf.ConsumeID(BoolFalseTypeID); err != nil {
		return fmt.Errorf("unable to decode boolFalse#bc799737: %w", err)
	}
	return nil
}

// construct implements constructor of Bool.
func (b BoolFalse) construct() Bool { return &b }

// Ensuring interfaces in compile-time for BoolFalse.
var (
	_ bin.Encoder = BoolFalse{}
	_ bin.Decoder = &BoolFalse{}

	_ Bool = &BoolFalse{}
)

// BoolTrue represents TL type boolTrue#997275b5.
type BoolTrue struct {
}

// BoolTrueTypeID is TL type id of BoolTrue.
const BoolTrueTypeID = 0x997275b5

// Encode implements bin.Encoder.
func (b BoolTrue) Encode(buf *bin.Buffer) {
	buf.PutID(BoolTrueTypeID)
}

// Decode implements bin.Decoder.
func (b *BoolTrue) Decode(buf *bin.Buffer) error {
	if err := buf.ConsumeID(BoolTrueTypeID); err != nil {
		return fmt.Errorf("unable to decode boolTrue#997275b5: %w", err)
	}
	return nil
}

// construct implements constructor of Bool.
func (b BoolTrue) construct() Bool { return &b }

// Ensuring interfaces in compile-time for BoolTrue.
var (
	_ bin.Encoder = BoolTrue{}
	_ bin.Decoder = &BoolTrue{}

	_ Bool = &BoolTrue{}
)

// An object of this type can be returned on every function call, in case of an error
type Error struct {
	// Error code; subject to future changes. If the error code is 406, the error message must not be processed in any way and must not be displayed to the user
	Code int32
	// Error message; subject to future changes
	Message string
	// Temporary field of Error.
	Temporary bool
}

// ErrorTypeID is TL type id of Error.
const ErrorTypeID = 0x14feebbc

// Encode implements bin.Encoder.
func (e Error) Encode(b *bin.Buffer) {
	b.PutID(ErrorTypeID)
	b.PutInt32(e.Code)
	b.PutString(e.Message)
	b.PutBool(e.Temporary)
}

// Decode implements bin.Decoder.
func (e *Error) Decode(b *bin.Buffer) error {
	if err := b.ConsumeID(ErrorTypeID); err != nil {
		return fmt.Errorf("unable to decode error#14feebbc: %w", err)
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode error#14feebbc: field code: %w", err)
		}
		e.Code = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode error#14feebbc: field message: %w", err)
		}
		e.Message = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode error#14feebbc: field temporary: %w", err)
		}
		e.Temporary = value
	}
	return nil
}

// Ensuring interfaces in compile-time for Error.
var (
	_ bin.Encoder = Error{}
	_ bin.Decoder = &Error{}
)

// can be returned by functions as result.
type Ok struct {
}

// OkTypeID is TL type id of Ok.
const OkTypeID = 0xd4edbe69

// Encode implements bin.Encoder.
func (o Ok) Encode(b *bin.Buffer) {
	b.PutID(OkTypeID)
}

// Decode implements bin.Decoder.
func (o *Ok) Decode(b *bin.Buffer) error {
	if err := b.ConsumeID(OkTypeID); err != nil {
		return fmt.Errorf("unable to decode ok#d4edbe69: %w", err)
	}
	return nil
}

// Ensuring interfaces in compile-time for Ok.
var (
	_ bin.Encoder = Ok{}
	_ bin.Decoder = &Ok{}
)

// Message represents TL type message#ec200d96.
type Message struct {
	// Err field of Message.
	Err Error
}

// MessageTypeID is TL type id of Message.
const MessageTypeID = 0xec200d96

// Encode implements bin.Encoder.
func (m Message) Encode(b *bin.Buffer) {
	b.PutID(MessageTypeID)
	m.Err.Encode(b)
}

// Decode implements bin.Decoder.
func (m *Message) Decode(b *bin.Buffer) error {
	if err := b.ConsumeID(MessageTypeID); err != nil {
		return fmt.Errorf("unable to decode message#ec200d96: %w", err)
	}
	{
		if err := m.Err.Decode(b); err != nil {
			return fmt.Errorf("unable to decode message#ec200d96: field err: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for Message.
var (
	_ bin.Encoder = Message{}
	_ bin.Decoder = &Message{}
)

// SMS represents TL type sms#ed8bebfe.
type SMS struct {
	// Text field of SMS.
	Text string
}

// SMSTypeID is TL type id of SMS.
const SMSTypeID = 0xed8bebfe

// Encode implements bin.Encoder.
func (s SMS) Encode(b *bin.Buffer) {
	b.PutID(SMSTypeID)
	b.PutString(s.Text)
}

// Decode implements bin.Decoder.
func (s *SMS) Decode(b *bin.Buffer) error {
	if err := b.ConsumeID(SMSTypeID); err != nil {
		return fmt.Errorf("unable to decode sms#ed8bebfe: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode sms#ed8bebfe: field text: %w", err)
		}
		s.Text = value
	}
	return nil
}

// Ensuring interfaces in compile-time for SMS.
var (
	_ bin.Encoder = SMS{}
	_ bin.Decoder = &SMS{}
)

// ResponseID represents TL type responseID#85d7fd8b.
type ResponseID struct {
	// ID field of ResponseID.
	ID int32
}

// ResponseIDTypeID is TL type id of ResponseID.
const ResponseIDTypeID = 0x85d7fd8b

// Encode implements bin.Encoder.
func (r ResponseID) Encode(b *bin.Buffer) {
	b.PutID(ResponseIDTypeID)
	b.PutInt32(r.ID)
}

// Decode implements bin.Decoder.
func (r *ResponseID) Decode(b *bin.Buffer) error {
	if err := b.ConsumeID(ResponseIDTypeID); err != nil {
		return fmt.Errorf("unable to decode responseID#85d7fd8b: %w", err)
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode responseID#85d7fd8b: field id: %w", err)
		}
		r.ID = value
	}
	return nil
}

// construct implements constructor of Response.
func (r ResponseID) construct() Response { return &r }

// Ensuring interfaces in compile-time for ResponseID.
var (
	_ bin.Encoder = ResponseID{}
	_ bin.Decoder = &ResponseID{}

	_ Response = &ResponseID{}
)

// ResponseText represents TL type responseText#cb0244f2.
type ResponseText struct {
	// Text field of ResponseText.
	Text string
}

// ResponseTextTypeID is TL type id of ResponseText.
const ResponseTextTypeID = 0xcb0244f2

// Encode implements bin.Encoder.
func (r ResponseText) Encode(b *bin.Buffer) {
	b.PutID(ResponseTextTypeID)
	b.PutString(r.Text)
}

// Decode implements bin.Decoder.
func (r *ResponseText) Decode(b *bin.Buffer) error {
	if err := b.ConsumeID(ResponseTextTypeID); err != nil {
		return fmt.Errorf("unable to decode responseText#cb0244f2: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode responseText#cb0244f2: field text: %w", err)
		}
		r.Text = value
	}
	return nil
}

// construct implements constructor of Response.
func (r ResponseText) construct() Response { return &r }

// Ensuring interfaces in compile-time for ResponseText.
var (
	_ bin.Encoder = ResponseText{}
	_ bin.Decoder = &ResponseText{}

	_ Response = &ResponseText{}
)

// Message
type BigMessage struct {
	// ID field of BigMessage.
	ID int32
	// Count field of BigMessage.
	Count int32
	// TargetId field of BigMessage.
	TargetId int32
	// Escape field of BigMessage.
	Escape bool
	// Summary field of BigMessage.
	Summary bool
}

// BigMessageTypeID is TL type id of BigMessage.
const BigMessageTypeID = 0x7490dcc5

// Encode implements bin.Encoder.
func (b BigMessage) Encode(buf *bin.Buffer) {
	buf.PutID(BigMessageTypeID)
	buf.PutInt32(b.ID)
	buf.PutInt32(b.Count)
	buf.PutInt32(b.TargetId)
	buf.PutBool(b.Escape)
	buf.PutBool(b.Summary)
}

// Decode implements bin.Decoder.
func (b *BigMessage) Decode(buf *bin.Buffer) error {
	if err := buf.ConsumeID(BigMessageTypeID); err != nil {
		return fmt.Errorf("unable to decode bigMessage#7490dcc5: %w", err)
	}
	{
		value, err := buf.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode bigMessage#7490dcc5: field id: %w", err)
		}
		b.ID = value
	}
	{
		value, err := buf.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode bigMessage#7490dcc5: field count: %w", err)
		}
		b.Count = value
	}
	{
		value, err := buf.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode bigMessage#7490dcc5: field targetId: %w", err)
		}
		b.TargetId = value
	}
	{
		value, err := buf.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode bigMessage#7490dcc5: field escape: %w", err)
		}
		b.Escape = value
	}
	{
		value, err := buf.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode bigMessage#7490dcc5: field summary: %w", err)
		}
		b.Summary = value
	}
	return nil
}

// construct implements constructor of AbstractMessage.
func (b BigMessage) construct() AbstractMessage { return &b }

// Ensuring interfaces in compile-time for BigMessage.
var (
	_ bin.Encoder = BigMessage{}
	_ bin.Decoder = &BigMessage{}

	_ AbstractMessage = &BigMessage{}
)

// NoMessage represents TL type noMessage#ee6324c4.
type NoMessage struct {
}

// NoMessageTypeID is TL type id of NoMessage.
const NoMessageTypeID = 0xee6324c4

// Encode implements bin.Encoder.
func (n NoMessage) Encode(b *bin.Buffer) {
	b.PutID(NoMessageTypeID)
}

// Decode implements bin.Decoder.
func (n *NoMessage) Decode(b *bin.Buffer) error {
	if err := b.ConsumeID(NoMessageTypeID); err != nil {
		return fmt.Errorf("unable to decode noMessage#ee6324c4: %w", err)
	}
	return nil
}

// construct implements constructor of AbstractMessage.
func (n NoMessage) construct() AbstractMessage { return &n }

// Ensuring interfaces in compile-time for NoMessage.
var (
	_ bin.Encoder = NoMessage{}
	_ bin.Decoder = &NoMessage{}

	_ AbstractMessage = &NoMessage{}
)

// TargetsMessage represents TL type targetsMessage#cc6136f1.
type TargetsMessage struct {
	// Targets field of TargetsMessage.
	Targets []int32
}

// TargetsMessageTypeID is TL type id of TargetsMessage.
const TargetsMessageTypeID = 0xcc6136f1

// Encode implements bin.Encoder.
func (t TargetsMessage) Encode(b *bin.Buffer) {
	b.PutID(TargetsMessageTypeID)
	b.PutVectorHeader(len(t.Targets))
	for _, v := range t.Targets {
		b.PutInt32(v)
	}
}

// Decode implements bin.Decoder.
func (t *TargetsMessage) Decode(b *bin.Buffer) error {
	if err := b.ConsumeID(TargetsMessageTypeID); err != nil {
		return fmt.Errorf("unable to decode targetsMessage#cc6136f1: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode targetsMessage#cc6136f1: field targets: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode targetsMessage#cc6136f1: field targets: %w", err)
			}
			t.Targets = append(t.Targets, value)
		}
	}
	return nil
}

// construct implements constructor of AbstractMessage.
func (t TargetsMessage) construct() AbstractMessage { return &t }

// Ensuring interfaces in compile-time for TargetsMessage.
var (
	_ bin.Encoder = TargetsMessage{}
	_ bin.Decoder = &TargetsMessage{}

	_ AbstractMessage = &TargetsMessage{}
)

// Bool represents Bool generic type.
//
// Example:
//  g, err := DecodeBool(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *BoolFalse: // boolFalse#bc799737
//  case *BoolTrue: // boolTrue#997275b5
//  default: panic(v)
//  }
type Bool interface {
	bin.Encoder
	bin.Decoder
	construct() Bool
}

// DecodeBool implements binary de-serialization for Bool.
func DecodeBool(buf *bin.Buffer) (Bool, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case BoolFalseTypeID:
		// Decoding boolFalse#bc799737.
		v := BoolFalse{}
		if err := v.Decode(buf); err != nil {
			return nil, xerrors.Errorf("unable to decode Bool: %w", err)
		}
		return &v, nil
	case BoolTrueTypeID:
		// Decoding boolTrue#997275b5.
		v := BoolTrue{}
		if err := v.Decode(buf); err != nil {
			return nil, xerrors.Errorf("unable to decode Bool: %w", err)
		}
		return &v, nil
	default:
		return nil, xerrors.Errorf("unable to decode Bool: %w", bin.NewUnexpectedID(id))
	}
}

// Response represents Response generic type.
//
// Example:
//  g, err := DecodeResponse(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *ResponseID: // responseID#85d7fd8b
//  case *ResponseText: // responseText#cb0244f2
//  default: panic(v)
//  }
type Response interface {
	bin.Encoder
	bin.Decoder
	construct() Response
}

// DecodeResponse implements binary de-serialization for Response.
func DecodeResponse(buf *bin.Buffer) (Response, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case ResponseIDTypeID:
		// Decoding responseID#85d7fd8b.
		v := ResponseID{}
		if err := v.Decode(buf); err != nil {
			return nil, xerrors.Errorf("unable to decode Response: %w", err)
		}
		return &v, nil
	case ResponseTextTypeID:
		// Decoding responseText#cb0244f2.
		v := ResponseText{}
		if err := v.Decode(buf); err != nil {
			return nil, xerrors.Errorf("unable to decode Response: %w", err)
		}
		return &v, nil
	default:
		return nil, xerrors.Errorf("unable to decode Response: %w", bin.NewUnexpectedID(id))
	}
}

// AbstractMessage represents AbstractMessage generic type.
//
// Example:
//  g, err := DecodeAbstractMessage(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *BigMessage: // bigMessage#7490dcc5
//  case *NoMessage: // noMessage#ee6324c4
//  case *TargetsMessage: // targetsMessage#cc6136f1
//  default: panic(v)
//  }
type AbstractMessage interface {
	bin.Encoder
	bin.Decoder
	construct() AbstractMessage
}

// DecodeAbstractMessage implements binary de-serialization for AbstractMessage.
func DecodeAbstractMessage(buf *bin.Buffer) (AbstractMessage, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case BigMessageTypeID:
		// Decoding bigMessage#7490dcc5.
		v := BigMessage{}
		if err := v.Decode(buf); err != nil {
			return nil, xerrors.Errorf("unable to decode AbstractMessage: %w", err)
		}
		return &v, nil
	case NoMessageTypeID:
		// Decoding noMessage#ee6324c4.
		v := NoMessage{}
		if err := v.Decode(buf); err != nil {
			return nil, xerrors.Errorf("unable to decode AbstractMessage: %w", err)
		}
		return &v, nil
	case TargetsMessageTypeID:
		// Decoding targetsMessage#cc6136f1.
		v := TargetsMessage{}
		if err := v.Decode(buf); err != nil {
			return nil, xerrors.Errorf("unable to decode AbstractMessage: %w", err)
		}
		return &v, nil
	default:
		return nil, xerrors.Errorf("unable to decode AbstractMessage: %w", bin.NewUnexpectedID(id))
	}
}

// Client describes RPC methods of TL schema.
type Client interface {
	Ping(ctx context.Context, id int32) error
	Send(ctx context.Context, msg SMS) (SMS, error)
}
