// Code generated by gotdgen, DO NOT EDIT.

package td

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// TextEntities represents TL type `textEntities#cf89c258`.
//
// See https://localhost:80/doc/constructor/textEntities for reference.
type TextEntities struct {
	// List of text entities
	Entities []TextEntity `tl:"entities"`
}

// TextEntitiesTypeID is TL type id of TextEntities.
const TextEntitiesTypeID = 0xcf89c258

func (t *TextEntities) Zero() bool {
	if t == nil {
		return true
	}
	if !(t.Entities == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (t *TextEntities) String() string {
	if t == nil {
		return "TextEntities(nil)"
	}
	type Alias TextEntities
	return fmt.Sprintf("TextEntities%+v", Alias(*t))
}

// FillFrom fills TextEntities from given interface.
func (t *TextEntities) FillFrom(from interface {
	GetEntities() (value []TextEntity)
}) {
	t.Entities = from.GetEntities()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (t *TextEntities) TypeID() uint32 {
	return TextEntitiesTypeID
}

// TypeName returns name of type in TL schema.
func (t *TextEntities) TypeName() string {
	return "textEntities"
}

// Encode implements bin.Encoder.
func (t *TextEntities) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntities#cf89c258 as nil")
	}
	b.PutID(TextEntitiesTypeID)
	b.PutVectorHeader(len(t.Entities))
	for idx, v := range t.Entities {
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode textEntities#cf89c258: field entities element with index %d: %w", idx, err)
		}
	}
	return nil
}

// GetEntities returns value of Entities field.
func (t *TextEntities) GetEntities() (value []TextEntity) {
	return t.Entities
}

// Decode implements bin.Decoder.
func (t *TextEntities) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntities#cf89c258 to nil")
	}
	if err := b.ConsumeID(TextEntitiesTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntities#cf89c258: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode textEntities#cf89c258: field entities: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value TextEntity
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode textEntities#cf89c258: field entities: %w", err)
			}
			t.Entities = append(t.Entities, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for TextEntities.
var (
	_ bin.Encoder = &TextEntities{}
	_ bin.Decoder = &TextEntities{}
)
