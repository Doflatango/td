// Code generated by gotdgen, DO NOT EDIT.

package td

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// Error represents TL type `error#14feebbc`.
//
// See https://localhost:80/doc/constructor/error for reference.
type Error struct {
	// Error code; subject to future changes. If the error code is 406, the error message must not be processed in any way and must not be displayed to the user
	Code int32
	// Error message; subject to future changes
	Message string
	// Temporary field of Error.
	Temporary bool
}

// ErrorTypeID is TL type id of Error.
const ErrorTypeID = 0x14feebbc

func (e *Error) Zero() bool {
	if e == nil {
		return true
	}
	if !(e.Code == 0) {
		return false
	}
	if !(e.Message == "") {
		return false
	}
	if !(e.Temporary == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (e *Error) String() string {
	if e == nil {
		return "Error(nil)"
	}
	var sb strings.Builder
	sb.WriteString("Error")
	sb.WriteString("{\n")
	sb.WriteString("\tCode: ")
	sb.WriteString(fmt.Sprint(e.Code))
	sb.WriteString(",\n")
	sb.WriteString("\tMessage: ")
	sb.WriteString(fmt.Sprint(e.Message))
	sb.WriteString(",\n")
	sb.WriteString("\tTemporary: ")
	sb.WriteString(fmt.Sprint(e.Temporary))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (e *Error) TypeID() uint32 {
	return ErrorTypeID
}

// Encode implements bin.Encoder.
func (e *Error) Encode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode error#14feebbc as nil")
	}
	b.PutID(ErrorTypeID)
	b.PutInt32(e.Code)
	b.PutString(e.Message)
	b.PutBool(e.Temporary)
	return nil
}

// GetCode returns value of Code field.
func (e *Error) GetCode() (value int32) {
	return e.Code
}

// GetMessage returns value of Message field.
func (e *Error) GetMessage() (value string) {
	return e.Message
}

// GetTemporary returns value of Temporary field.
func (e *Error) GetTemporary() (value bool) {
	return e.Temporary
}

// Decode implements bin.Decoder.
func (e *Error) Decode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode error#14feebbc to nil")
	}
	if err := b.ConsumeID(ErrorTypeID); err != nil {
		return fmt.Errorf("unable to decode error#14feebbc: %w", err)
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode error#14feebbc: field code: %w", err)
		}
		e.Code = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode error#14feebbc: field message: %w", err)
		}
		e.Message = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode error#14feebbc: field temporary: %w", err)
		}
		e.Temporary = value
	}
	return nil
}

// Ensuring interfaces in compile-time for Error.
var (
	_ bin.Encoder = &Error{}
	_ bin.Decoder = &Error{}
)
