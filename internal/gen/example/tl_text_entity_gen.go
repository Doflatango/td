// Code generated by gotdgen, DO NOT EDIT.

package td

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// TextEntity represents TL type `textEntity#8bab99a8`.
//
// See https://localhost:80/doc/constructor/textEntity for reference.
type TextEntity struct {
	// Offset of the entity, in UTF-16 code units
	Offset int32
	// Length of the entity, in UTF-16 code units
	Length int32
	// Type of the entity
	Type TextEntityTypeClass
}

// TextEntityTypeID is TL type id of TextEntity.
const TextEntityTypeID = 0x8bab99a8

func (t *TextEntity) Zero() bool {
	if t == nil {
		return true
	}
	if !(t.Offset == 0) {
		return false
	}
	if !(t.Length == 0) {
		return false
	}
	if !(t.Type == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (t *TextEntity) String() string {
	if t == nil {
		return "TextEntity(nil)"
	}
	var sb strings.Builder
	sb.WriteString("TextEntity")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(t.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(t.Length))
	sb.WriteString(",\n")
	sb.WriteString("\tType: ")
	sb.WriteString(fmt.Sprint(t.Type))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (t *TextEntity) TypeID() uint32 {
	return TextEntityTypeID
}

// Encode implements bin.Encoder.
func (t *TextEntity) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntity#8bab99a8 as nil")
	}
	b.PutID(TextEntityTypeID)
	b.PutInt32(t.Offset)
	b.PutInt32(t.Length)
	if t.Type == nil {
		return fmt.Errorf("unable to encode textEntity#8bab99a8: field type is nil")
	}
	if err := t.Type.Encode(b); err != nil {
		return fmt.Errorf("unable to encode textEntity#8bab99a8: field type: %w", err)
	}
	return nil
}

// GetOffset returns value of Offset field.
func (t *TextEntity) GetOffset() (value int32) {
	return t.Offset
}

// GetLength returns value of Length field.
func (t *TextEntity) GetLength() (value int32) {
	return t.Length
}

// GetType returns value of Type field.
func (t *TextEntity) GetType() (value TextEntityTypeClass) {
	return t.Type
}

// Decode implements bin.Decoder.
func (t *TextEntity) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntity#8bab99a8 to nil")
	}
	if err := b.ConsumeID(TextEntityTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntity#8bab99a8: %w", err)
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode textEntity#8bab99a8: field offset: %w", err)
		}
		t.Offset = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode textEntity#8bab99a8: field length: %w", err)
		}
		t.Length = value
	}
	{
		value, err := DecodeTextEntityType(b)
		if err != nil {
			return fmt.Errorf("unable to decode textEntity#8bab99a8: field type: %w", err)
		}
		t.Type = value
	}
	return nil
}

// Ensuring interfaces in compile-time for TextEntity.
var (
	_ bin.Encoder = &TextEntity{}
	_ bin.Decoder = &TextEntity{}
)
