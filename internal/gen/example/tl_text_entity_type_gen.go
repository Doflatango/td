// Code generated by gotdgen, DO NOT EDIT.

package td

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// TextEntityTypeMention represents TL type `textEntityTypeMention#37b3df65`.
//
// See https://localhost:80/doc/constructor/textEntityTypeMention for reference.
type TextEntityTypeMention struct {
}

// TextEntityTypeMentionTypeID is TL type id of TextEntityTypeMention.
const TextEntityTypeMentionTypeID = 0x37b3df65

// String implements fmt.Stringer.
func (t *TextEntityTypeMention) String() string {
	if t == nil {
		return "TextEntityTypeMention(nil)"
	}
	var sb strings.Builder
	sb.WriteString("TextEntityTypeMention")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (t *TextEntityTypeMention) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntityTypeMention#37b3df65 as nil")
	}
	b.PutID(TextEntityTypeMentionTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (t *TextEntityTypeMention) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntityTypeMention#37b3df65 to nil")
	}
	if err := b.ConsumeID(TextEntityTypeMentionTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntityTypeMention#37b3df65: %w", err)
	}
	return nil
}

// construct implements constructor of TextEntityTypeClass.
func (t TextEntityTypeMention) construct() TextEntityTypeClass { return &t }

// Ensuring interfaces in compile-time for TextEntityTypeMention.
var (
	_ bin.Encoder = &TextEntityTypeMention{}
	_ bin.Decoder = &TextEntityTypeMention{}

	_ TextEntityTypeClass = &TextEntityTypeMention{}
)

// TextEntityTypeHashtag represents TL type `textEntityTypeHashtag#c2f7a2dd`.
//
// See https://localhost:80/doc/constructor/textEntityTypeHashtag for reference.
type TextEntityTypeHashtag struct {
}

// TextEntityTypeHashtagTypeID is TL type id of TextEntityTypeHashtag.
const TextEntityTypeHashtagTypeID = 0xc2f7a2dd

// String implements fmt.Stringer.
func (t *TextEntityTypeHashtag) String() string {
	if t == nil {
		return "TextEntityTypeHashtag(nil)"
	}
	var sb strings.Builder
	sb.WriteString("TextEntityTypeHashtag")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (t *TextEntityTypeHashtag) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntityTypeHashtag#c2f7a2dd as nil")
	}
	b.PutID(TextEntityTypeHashtagTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (t *TextEntityTypeHashtag) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntityTypeHashtag#c2f7a2dd to nil")
	}
	if err := b.ConsumeID(TextEntityTypeHashtagTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntityTypeHashtag#c2f7a2dd: %w", err)
	}
	return nil
}

// construct implements constructor of TextEntityTypeClass.
func (t TextEntityTypeHashtag) construct() TextEntityTypeClass { return &t }

// Ensuring interfaces in compile-time for TextEntityTypeHashtag.
var (
	_ bin.Encoder = &TextEntityTypeHashtag{}
	_ bin.Decoder = &TextEntityTypeHashtag{}

	_ TextEntityTypeClass = &TextEntityTypeHashtag{}
)

// TextEntityTypeCashtag represents TL type `textEntityTypeCashtag#48e4374b`.
//
// See https://localhost:80/doc/constructor/textEntityTypeCashtag for reference.
type TextEntityTypeCashtag struct {
}

// TextEntityTypeCashtagTypeID is TL type id of TextEntityTypeCashtag.
const TextEntityTypeCashtagTypeID = 0x48e4374b

// String implements fmt.Stringer.
func (t *TextEntityTypeCashtag) String() string {
	if t == nil {
		return "TextEntityTypeCashtag(nil)"
	}
	var sb strings.Builder
	sb.WriteString("TextEntityTypeCashtag")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (t *TextEntityTypeCashtag) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntityTypeCashtag#48e4374b as nil")
	}
	b.PutID(TextEntityTypeCashtagTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (t *TextEntityTypeCashtag) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntityTypeCashtag#48e4374b to nil")
	}
	if err := b.ConsumeID(TextEntityTypeCashtagTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntityTypeCashtag#48e4374b: %w", err)
	}
	return nil
}

// construct implements constructor of TextEntityTypeClass.
func (t TextEntityTypeCashtag) construct() TextEntityTypeClass { return &t }

// Ensuring interfaces in compile-time for TextEntityTypeCashtag.
var (
	_ bin.Encoder = &TextEntityTypeCashtag{}
	_ bin.Decoder = &TextEntityTypeCashtag{}

	_ TextEntityTypeClass = &TextEntityTypeCashtag{}
)

// TextEntityTypeBotCommand represents TL type `textEntityTypeBotCommand#bb652bb3`.
//
// See https://localhost:80/doc/constructor/textEntityTypeBotCommand for reference.
type TextEntityTypeBotCommand struct {
}

// TextEntityTypeBotCommandTypeID is TL type id of TextEntityTypeBotCommand.
const TextEntityTypeBotCommandTypeID = 0xbb652bb3

// String implements fmt.Stringer.
func (t *TextEntityTypeBotCommand) String() string {
	if t == nil {
		return "TextEntityTypeBotCommand(nil)"
	}
	var sb strings.Builder
	sb.WriteString("TextEntityTypeBotCommand")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (t *TextEntityTypeBotCommand) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntityTypeBotCommand#bb652bb3 as nil")
	}
	b.PutID(TextEntityTypeBotCommandTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (t *TextEntityTypeBotCommand) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntityTypeBotCommand#bb652bb3 to nil")
	}
	if err := b.ConsumeID(TextEntityTypeBotCommandTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntityTypeBotCommand#bb652bb3: %w", err)
	}
	return nil
}

// construct implements constructor of TextEntityTypeClass.
func (t TextEntityTypeBotCommand) construct() TextEntityTypeClass { return &t }

// Ensuring interfaces in compile-time for TextEntityTypeBotCommand.
var (
	_ bin.Encoder = &TextEntityTypeBotCommand{}
	_ bin.Decoder = &TextEntityTypeBotCommand{}

	_ TextEntityTypeClass = &TextEntityTypeBotCommand{}
)

// TextEntityTypeUrl represents TL type `textEntityTypeUrl#b1c0d47c`.
//
// See https://localhost:80/doc/constructor/textEntityTypeUrl for reference.
type TextEntityTypeUrl struct {
}

// TextEntityTypeUrlTypeID is TL type id of TextEntityTypeUrl.
const TextEntityTypeUrlTypeID = 0xb1c0d47c

// String implements fmt.Stringer.
func (t *TextEntityTypeUrl) String() string {
	if t == nil {
		return "TextEntityTypeUrl(nil)"
	}
	var sb strings.Builder
	sb.WriteString("TextEntityTypeUrl")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (t *TextEntityTypeUrl) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntityTypeUrl#b1c0d47c as nil")
	}
	b.PutID(TextEntityTypeUrlTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (t *TextEntityTypeUrl) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntityTypeUrl#b1c0d47c to nil")
	}
	if err := b.ConsumeID(TextEntityTypeUrlTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntityTypeUrl#b1c0d47c: %w", err)
	}
	return nil
}

// construct implements constructor of TextEntityTypeClass.
func (t TextEntityTypeUrl) construct() TextEntityTypeClass { return &t }

// Ensuring interfaces in compile-time for TextEntityTypeUrl.
var (
	_ bin.Encoder = &TextEntityTypeUrl{}
	_ bin.Decoder = &TextEntityTypeUrl{}

	_ TextEntityTypeClass = &TextEntityTypeUrl{}
)

// TextEntityTypeEmailAddress represents TL type `textEntityTypeEmailAddress#54f81821`.
//
// See https://localhost:80/doc/constructor/textEntityTypeEmailAddress for reference.
type TextEntityTypeEmailAddress struct {
}

// TextEntityTypeEmailAddressTypeID is TL type id of TextEntityTypeEmailAddress.
const TextEntityTypeEmailAddressTypeID = 0x54f81821

// String implements fmt.Stringer.
func (t *TextEntityTypeEmailAddress) String() string {
	if t == nil {
		return "TextEntityTypeEmailAddress(nil)"
	}
	var sb strings.Builder
	sb.WriteString("TextEntityTypeEmailAddress")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (t *TextEntityTypeEmailAddress) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntityTypeEmailAddress#54f81821 as nil")
	}
	b.PutID(TextEntityTypeEmailAddressTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (t *TextEntityTypeEmailAddress) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntityTypeEmailAddress#54f81821 to nil")
	}
	if err := b.ConsumeID(TextEntityTypeEmailAddressTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntityTypeEmailAddress#54f81821: %w", err)
	}
	return nil
}

// construct implements constructor of TextEntityTypeClass.
func (t TextEntityTypeEmailAddress) construct() TextEntityTypeClass { return &t }

// Ensuring interfaces in compile-time for TextEntityTypeEmailAddress.
var (
	_ bin.Encoder = &TextEntityTypeEmailAddress{}
	_ bin.Decoder = &TextEntityTypeEmailAddress{}

	_ TextEntityTypeClass = &TextEntityTypeEmailAddress{}
)

// TextEntityTypePhoneNumber represents TL type `textEntityTypePhoneNumber#bad9aa2a`.
//
// See https://localhost:80/doc/constructor/textEntityTypePhoneNumber for reference.
type TextEntityTypePhoneNumber struct {
}

// TextEntityTypePhoneNumberTypeID is TL type id of TextEntityTypePhoneNumber.
const TextEntityTypePhoneNumberTypeID = 0xbad9aa2a

// String implements fmt.Stringer.
func (t *TextEntityTypePhoneNumber) String() string {
	if t == nil {
		return "TextEntityTypePhoneNumber(nil)"
	}
	var sb strings.Builder
	sb.WriteString("TextEntityTypePhoneNumber")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (t *TextEntityTypePhoneNumber) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntityTypePhoneNumber#bad9aa2a as nil")
	}
	b.PutID(TextEntityTypePhoneNumberTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (t *TextEntityTypePhoneNumber) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntityTypePhoneNumber#bad9aa2a to nil")
	}
	if err := b.ConsumeID(TextEntityTypePhoneNumberTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntityTypePhoneNumber#bad9aa2a: %w", err)
	}
	return nil
}

// construct implements constructor of TextEntityTypeClass.
func (t TextEntityTypePhoneNumber) construct() TextEntityTypeClass { return &t }

// Ensuring interfaces in compile-time for TextEntityTypePhoneNumber.
var (
	_ bin.Encoder = &TextEntityTypePhoneNumber{}
	_ bin.Decoder = &TextEntityTypePhoneNumber{}

	_ TextEntityTypeClass = &TextEntityTypePhoneNumber{}
)

// TextEntityTypeBankCardNumber represents TL type `textEntityTypeBankCardNumber#6513910`.
//
// See https://localhost:80/doc/constructor/textEntityTypeBankCardNumber for reference.
type TextEntityTypeBankCardNumber struct {
}

// TextEntityTypeBankCardNumberTypeID is TL type id of TextEntityTypeBankCardNumber.
const TextEntityTypeBankCardNumberTypeID = 0x6513910

// String implements fmt.Stringer.
func (t *TextEntityTypeBankCardNumber) String() string {
	if t == nil {
		return "TextEntityTypeBankCardNumber(nil)"
	}
	var sb strings.Builder
	sb.WriteString("TextEntityTypeBankCardNumber")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (t *TextEntityTypeBankCardNumber) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntityTypeBankCardNumber#6513910 as nil")
	}
	b.PutID(TextEntityTypeBankCardNumberTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (t *TextEntityTypeBankCardNumber) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntityTypeBankCardNumber#6513910 to nil")
	}
	if err := b.ConsumeID(TextEntityTypeBankCardNumberTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntityTypeBankCardNumber#6513910: %w", err)
	}
	return nil
}

// construct implements constructor of TextEntityTypeClass.
func (t TextEntityTypeBankCardNumber) construct() TextEntityTypeClass { return &t }

// Ensuring interfaces in compile-time for TextEntityTypeBankCardNumber.
var (
	_ bin.Encoder = &TextEntityTypeBankCardNumber{}
	_ bin.Decoder = &TextEntityTypeBankCardNumber{}

	_ TextEntityTypeClass = &TextEntityTypeBankCardNumber{}
)

// TextEntityTypeBold represents TL type `textEntityTypeBold#bcc0e1b0`.
//
// See https://localhost:80/doc/constructor/textEntityTypeBold for reference.
type TextEntityTypeBold struct {
}

// TextEntityTypeBoldTypeID is TL type id of TextEntityTypeBold.
const TextEntityTypeBoldTypeID = 0xbcc0e1b0

// String implements fmt.Stringer.
func (t *TextEntityTypeBold) String() string {
	if t == nil {
		return "TextEntityTypeBold(nil)"
	}
	var sb strings.Builder
	sb.WriteString("TextEntityTypeBold")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (t *TextEntityTypeBold) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntityTypeBold#bcc0e1b0 as nil")
	}
	b.PutID(TextEntityTypeBoldTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (t *TextEntityTypeBold) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntityTypeBold#bcc0e1b0 to nil")
	}
	if err := b.ConsumeID(TextEntityTypeBoldTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntityTypeBold#bcc0e1b0: %w", err)
	}
	return nil
}

// construct implements constructor of TextEntityTypeClass.
func (t TextEntityTypeBold) construct() TextEntityTypeClass { return &t }

// Ensuring interfaces in compile-time for TextEntityTypeBold.
var (
	_ bin.Encoder = &TextEntityTypeBold{}
	_ bin.Decoder = &TextEntityTypeBold{}

	_ TextEntityTypeClass = &TextEntityTypeBold{}
)

// TextEntityTypeItalic represents TL type `textEntityTypeItalic#f8f3965d`.
//
// See https://localhost:80/doc/constructor/textEntityTypeItalic for reference.
type TextEntityTypeItalic struct {
}

// TextEntityTypeItalicTypeID is TL type id of TextEntityTypeItalic.
const TextEntityTypeItalicTypeID = 0xf8f3965d

// String implements fmt.Stringer.
func (t *TextEntityTypeItalic) String() string {
	if t == nil {
		return "TextEntityTypeItalic(nil)"
	}
	var sb strings.Builder
	sb.WriteString("TextEntityTypeItalic")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (t *TextEntityTypeItalic) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntityTypeItalic#f8f3965d as nil")
	}
	b.PutID(TextEntityTypeItalicTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (t *TextEntityTypeItalic) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntityTypeItalic#f8f3965d to nil")
	}
	if err := b.ConsumeID(TextEntityTypeItalicTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntityTypeItalic#f8f3965d: %w", err)
	}
	return nil
}

// construct implements constructor of TextEntityTypeClass.
func (t TextEntityTypeItalic) construct() TextEntityTypeClass { return &t }

// Ensuring interfaces in compile-time for TextEntityTypeItalic.
var (
	_ bin.Encoder = &TextEntityTypeItalic{}
	_ bin.Decoder = &TextEntityTypeItalic{}

	_ TextEntityTypeClass = &TextEntityTypeItalic{}
)

// TextEntityTypeUnderline represents TL type `textEntityTypeUnderline#2f39cf92`.
//
// See https://localhost:80/doc/constructor/textEntityTypeUnderline for reference.
type TextEntityTypeUnderline struct {
}

// TextEntityTypeUnderlineTypeID is TL type id of TextEntityTypeUnderline.
const TextEntityTypeUnderlineTypeID = 0x2f39cf92

// String implements fmt.Stringer.
func (t *TextEntityTypeUnderline) String() string {
	if t == nil {
		return "TextEntityTypeUnderline(nil)"
	}
	var sb strings.Builder
	sb.WriteString("TextEntityTypeUnderline")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (t *TextEntityTypeUnderline) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntityTypeUnderline#2f39cf92 as nil")
	}
	b.PutID(TextEntityTypeUnderlineTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (t *TextEntityTypeUnderline) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntityTypeUnderline#2f39cf92 to nil")
	}
	if err := b.ConsumeID(TextEntityTypeUnderlineTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntityTypeUnderline#2f39cf92: %w", err)
	}
	return nil
}

// construct implements constructor of TextEntityTypeClass.
func (t TextEntityTypeUnderline) construct() TextEntityTypeClass { return &t }

// Ensuring interfaces in compile-time for TextEntityTypeUnderline.
var (
	_ bin.Encoder = &TextEntityTypeUnderline{}
	_ bin.Decoder = &TextEntityTypeUnderline{}

	_ TextEntityTypeClass = &TextEntityTypeUnderline{}
)

// TextEntityTypeStrikethrough represents TL type `textEntityTypeStrikethrough#394fc4fa`.
//
// See https://localhost:80/doc/constructor/textEntityTypeStrikethrough for reference.
type TextEntityTypeStrikethrough struct {
}

// TextEntityTypeStrikethroughTypeID is TL type id of TextEntityTypeStrikethrough.
const TextEntityTypeStrikethroughTypeID = 0x394fc4fa

// String implements fmt.Stringer.
func (t *TextEntityTypeStrikethrough) String() string {
	if t == nil {
		return "TextEntityTypeStrikethrough(nil)"
	}
	var sb strings.Builder
	sb.WriteString("TextEntityTypeStrikethrough")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (t *TextEntityTypeStrikethrough) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntityTypeStrikethrough#394fc4fa as nil")
	}
	b.PutID(TextEntityTypeStrikethroughTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (t *TextEntityTypeStrikethrough) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntityTypeStrikethrough#394fc4fa to nil")
	}
	if err := b.ConsumeID(TextEntityTypeStrikethroughTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntityTypeStrikethrough#394fc4fa: %w", err)
	}
	return nil
}

// construct implements constructor of TextEntityTypeClass.
func (t TextEntityTypeStrikethrough) construct() TextEntityTypeClass { return &t }

// Ensuring interfaces in compile-time for TextEntityTypeStrikethrough.
var (
	_ bin.Encoder = &TextEntityTypeStrikethrough{}
	_ bin.Decoder = &TextEntityTypeStrikethrough{}

	_ TextEntityTypeClass = &TextEntityTypeStrikethrough{}
)

// TextEntityTypeCode represents TL type `textEntityTypeCode#c5e9c94a`.
//
// See https://localhost:80/doc/constructor/textEntityTypeCode for reference.
type TextEntityTypeCode struct {
}

// TextEntityTypeCodeTypeID is TL type id of TextEntityTypeCode.
const TextEntityTypeCodeTypeID = 0xc5e9c94a

// String implements fmt.Stringer.
func (t *TextEntityTypeCode) String() string {
	if t == nil {
		return "TextEntityTypeCode(nil)"
	}
	var sb strings.Builder
	sb.WriteString("TextEntityTypeCode")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (t *TextEntityTypeCode) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntityTypeCode#c5e9c94a as nil")
	}
	b.PutID(TextEntityTypeCodeTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (t *TextEntityTypeCode) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntityTypeCode#c5e9c94a to nil")
	}
	if err := b.ConsumeID(TextEntityTypeCodeTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntityTypeCode#c5e9c94a: %w", err)
	}
	return nil
}

// construct implements constructor of TextEntityTypeClass.
func (t TextEntityTypeCode) construct() TextEntityTypeClass { return &t }

// Ensuring interfaces in compile-time for TextEntityTypeCode.
var (
	_ bin.Encoder = &TextEntityTypeCode{}
	_ bin.Decoder = &TextEntityTypeCode{}

	_ TextEntityTypeClass = &TextEntityTypeCode{}
)

// TextEntityTypePre represents TL type `textEntityTypePre#62491c8e`.
//
// See https://localhost:80/doc/constructor/textEntityTypePre for reference.
type TextEntityTypePre struct {
}

// TextEntityTypePreTypeID is TL type id of TextEntityTypePre.
const TextEntityTypePreTypeID = 0x62491c8e

// String implements fmt.Stringer.
func (t *TextEntityTypePre) String() string {
	if t == nil {
		return "TextEntityTypePre(nil)"
	}
	var sb strings.Builder
	sb.WriteString("TextEntityTypePre")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (t *TextEntityTypePre) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntityTypePre#62491c8e as nil")
	}
	b.PutID(TextEntityTypePreTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (t *TextEntityTypePre) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntityTypePre#62491c8e to nil")
	}
	if err := b.ConsumeID(TextEntityTypePreTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntityTypePre#62491c8e: %w", err)
	}
	return nil
}

// construct implements constructor of TextEntityTypeClass.
func (t TextEntityTypePre) construct() TextEntityTypeClass { return &t }

// Ensuring interfaces in compile-time for TextEntityTypePre.
var (
	_ bin.Encoder = &TextEntityTypePre{}
	_ bin.Decoder = &TextEntityTypePre{}

	_ TextEntityTypeClass = &TextEntityTypePre{}
)

// TextEntityTypePreCode represents TL type `textEntityTypePreCode#c7a77aab`.
//
// See https://localhost:80/doc/constructor/textEntityTypePreCode for reference.
type TextEntityTypePreCode struct {
	// Programming language of the code; as defined by the sender
	Language string
}

// TextEntityTypePreCodeTypeID is TL type id of TextEntityTypePreCode.
const TextEntityTypePreCodeTypeID = 0xc7a77aab

// String implements fmt.Stringer.
func (t *TextEntityTypePreCode) String() string {
	if t == nil {
		return "TextEntityTypePreCode(nil)"
	}
	var sb strings.Builder
	sb.WriteString("TextEntityTypePreCode")
	sb.WriteString("{\n")
	sb.WriteString("\tLanguage: ")
	sb.WriteString(fmt.Sprint(t.Language))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (t *TextEntityTypePreCode) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntityTypePreCode#c7a77aab as nil")
	}
	b.PutID(TextEntityTypePreCodeTypeID)
	b.PutString(t.Language)
	return nil
}

// Decode implements bin.Decoder.
func (t *TextEntityTypePreCode) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntityTypePreCode#c7a77aab to nil")
	}
	if err := b.ConsumeID(TextEntityTypePreCodeTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntityTypePreCode#c7a77aab: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode textEntityTypePreCode#c7a77aab: field language: %w", err)
		}
		t.Language = value
	}
	return nil
}

// construct implements constructor of TextEntityTypeClass.
func (t TextEntityTypePreCode) construct() TextEntityTypeClass { return &t }

// Ensuring interfaces in compile-time for TextEntityTypePreCode.
var (
	_ bin.Encoder = &TextEntityTypePreCode{}
	_ bin.Decoder = &TextEntityTypePreCode{}

	_ TextEntityTypeClass = &TextEntityTypePreCode{}
)

// TextEntityTypeTextUrl represents TL type `textEntityTypeTextUrl#1a912463`.
//
// See https://localhost:80/doc/constructor/textEntityTypeTextUrl for reference.
type TextEntityTypeTextUrl struct {
	// HTTP or tg:// URL to be opened when the link is clicked
	URL string
}

// TextEntityTypeTextUrlTypeID is TL type id of TextEntityTypeTextUrl.
const TextEntityTypeTextUrlTypeID = 0x1a912463

// String implements fmt.Stringer.
func (t *TextEntityTypeTextUrl) String() string {
	if t == nil {
		return "TextEntityTypeTextUrl(nil)"
	}
	var sb strings.Builder
	sb.WriteString("TextEntityTypeTextUrl")
	sb.WriteString("{\n")
	sb.WriteString("\tURL: ")
	sb.WriteString(fmt.Sprint(t.URL))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (t *TextEntityTypeTextUrl) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntityTypeTextUrl#1a912463 as nil")
	}
	b.PutID(TextEntityTypeTextUrlTypeID)
	b.PutString(t.URL)
	return nil
}

// Decode implements bin.Decoder.
func (t *TextEntityTypeTextUrl) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntityTypeTextUrl#1a912463 to nil")
	}
	if err := b.ConsumeID(TextEntityTypeTextUrlTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntityTypeTextUrl#1a912463: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode textEntityTypeTextUrl#1a912463: field url: %w", err)
		}
		t.URL = value
	}
	return nil
}

// construct implements constructor of TextEntityTypeClass.
func (t TextEntityTypeTextUrl) construct() TextEntityTypeClass { return &t }

// Ensuring interfaces in compile-time for TextEntityTypeTextUrl.
var (
	_ bin.Encoder = &TextEntityTypeTextUrl{}
	_ bin.Decoder = &TextEntityTypeTextUrl{}

	_ TextEntityTypeClass = &TextEntityTypeTextUrl{}
)

// TextEntityTypeMentionName represents TL type `textEntityTypeMentionName#d0d2685d`.
//
// See https://localhost:80/doc/constructor/textEntityTypeMentionName for reference.
type TextEntityTypeMentionName struct {
	// Identifier of the mentioned user
	UserID int32
}

// TextEntityTypeMentionNameTypeID is TL type id of TextEntityTypeMentionName.
const TextEntityTypeMentionNameTypeID = 0xd0d2685d

// String implements fmt.Stringer.
func (t *TextEntityTypeMentionName) String() string {
	if t == nil {
		return "TextEntityTypeMentionName(nil)"
	}
	var sb strings.Builder
	sb.WriteString("TextEntityTypeMentionName")
	sb.WriteString("{\n")
	sb.WriteString("\tUserID: ")
	sb.WriteString(fmt.Sprint(t.UserID))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (t *TextEntityTypeMentionName) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode textEntityTypeMentionName#d0d2685d as nil")
	}
	b.PutID(TextEntityTypeMentionNameTypeID)
	b.PutInt32(t.UserID)
	return nil
}

// Decode implements bin.Decoder.
func (t *TextEntityTypeMentionName) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode textEntityTypeMentionName#d0d2685d to nil")
	}
	if err := b.ConsumeID(TextEntityTypeMentionNameTypeID); err != nil {
		return fmt.Errorf("unable to decode textEntityTypeMentionName#d0d2685d: %w", err)
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode textEntityTypeMentionName#d0d2685d: field user_id: %w", err)
		}
		t.UserID = value
	}
	return nil
}

// construct implements constructor of TextEntityTypeClass.
func (t TextEntityTypeMentionName) construct() TextEntityTypeClass { return &t }

// Ensuring interfaces in compile-time for TextEntityTypeMentionName.
var (
	_ bin.Encoder = &TextEntityTypeMentionName{}
	_ bin.Decoder = &TextEntityTypeMentionName{}

	_ TextEntityTypeClass = &TextEntityTypeMentionName{}
)

// TextEntityTypeClass represents TextEntityType generic type.
//
// See https://localhost:80/doc/type/TextEntityType for reference.
//
// Example:
//  g, err := DecodeTextEntityType(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *TextEntityTypeMention: // textEntityTypeMention#37b3df65
//  case *TextEntityTypeHashtag: // textEntityTypeHashtag#c2f7a2dd
//  case *TextEntityTypeCashtag: // textEntityTypeCashtag#48e4374b
//  case *TextEntityTypeBotCommand: // textEntityTypeBotCommand#bb652bb3
//  case *TextEntityTypeUrl: // textEntityTypeUrl#b1c0d47c
//  case *TextEntityTypeEmailAddress: // textEntityTypeEmailAddress#54f81821
//  case *TextEntityTypePhoneNumber: // textEntityTypePhoneNumber#bad9aa2a
//  case *TextEntityTypeBankCardNumber: // textEntityTypeBankCardNumber#6513910
//  case *TextEntityTypeBold: // textEntityTypeBold#bcc0e1b0
//  case *TextEntityTypeItalic: // textEntityTypeItalic#f8f3965d
//  case *TextEntityTypeUnderline: // textEntityTypeUnderline#2f39cf92
//  case *TextEntityTypeStrikethrough: // textEntityTypeStrikethrough#394fc4fa
//  case *TextEntityTypeCode: // textEntityTypeCode#c5e9c94a
//  case *TextEntityTypePre: // textEntityTypePre#62491c8e
//  case *TextEntityTypePreCode: // textEntityTypePreCode#c7a77aab
//  case *TextEntityTypeTextUrl: // textEntityTypeTextUrl#1a912463
//  case *TextEntityTypeMentionName: // textEntityTypeMentionName#d0d2685d
//  default: panic(v)
//  }
type TextEntityTypeClass interface {
	bin.Encoder
	bin.Decoder
	construct() TextEntityTypeClass
	fmt.Stringer
}

// DecodeTextEntityType implements binary de-serialization for TextEntityTypeClass.
func DecodeTextEntityType(buf *bin.Buffer) (TextEntityTypeClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case TextEntityTypeMentionTypeID:
		// Decoding textEntityTypeMention#37b3df65.
		v := TextEntityTypeMention{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode TextEntityTypeClass: %w", err)
		}
		return &v, nil
	case TextEntityTypeHashtagTypeID:
		// Decoding textEntityTypeHashtag#c2f7a2dd.
		v := TextEntityTypeHashtag{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode TextEntityTypeClass: %w", err)
		}
		return &v, nil
	case TextEntityTypeCashtagTypeID:
		// Decoding textEntityTypeCashtag#48e4374b.
		v := TextEntityTypeCashtag{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode TextEntityTypeClass: %w", err)
		}
		return &v, nil
	case TextEntityTypeBotCommandTypeID:
		// Decoding textEntityTypeBotCommand#bb652bb3.
		v := TextEntityTypeBotCommand{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode TextEntityTypeClass: %w", err)
		}
		return &v, nil
	case TextEntityTypeUrlTypeID:
		// Decoding textEntityTypeUrl#b1c0d47c.
		v := TextEntityTypeUrl{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode TextEntityTypeClass: %w", err)
		}
		return &v, nil
	case TextEntityTypeEmailAddressTypeID:
		// Decoding textEntityTypeEmailAddress#54f81821.
		v := TextEntityTypeEmailAddress{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode TextEntityTypeClass: %w", err)
		}
		return &v, nil
	case TextEntityTypePhoneNumberTypeID:
		// Decoding textEntityTypePhoneNumber#bad9aa2a.
		v := TextEntityTypePhoneNumber{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode TextEntityTypeClass: %w", err)
		}
		return &v, nil
	case TextEntityTypeBankCardNumberTypeID:
		// Decoding textEntityTypeBankCardNumber#6513910.
		v := TextEntityTypeBankCardNumber{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode TextEntityTypeClass: %w", err)
		}
		return &v, nil
	case TextEntityTypeBoldTypeID:
		// Decoding textEntityTypeBold#bcc0e1b0.
		v := TextEntityTypeBold{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode TextEntityTypeClass: %w", err)
		}
		return &v, nil
	case TextEntityTypeItalicTypeID:
		// Decoding textEntityTypeItalic#f8f3965d.
		v := TextEntityTypeItalic{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode TextEntityTypeClass: %w", err)
		}
		return &v, nil
	case TextEntityTypeUnderlineTypeID:
		// Decoding textEntityTypeUnderline#2f39cf92.
		v := TextEntityTypeUnderline{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode TextEntityTypeClass: %w", err)
		}
		return &v, nil
	case TextEntityTypeStrikethroughTypeID:
		// Decoding textEntityTypeStrikethrough#394fc4fa.
		v := TextEntityTypeStrikethrough{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode TextEntityTypeClass: %w", err)
		}
		return &v, nil
	case TextEntityTypeCodeTypeID:
		// Decoding textEntityTypeCode#c5e9c94a.
		v := TextEntityTypeCode{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode TextEntityTypeClass: %w", err)
		}
		return &v, nil
	case TextEntityTypePreTypeID:
		// Decoding textEntityTypePre#62491c8e.
		v := TextEntityTypePre{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode TextEntityTypeClass: %w", err)
		}
		return &v, nil
	case TextEntityTypePreCodeTypeID:
		// Decoding textEntityTypePreCode#c7a77aab.
		v := TextEntityTypePreCode{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode TextEntityTypeClass: %w", err)
		}
		return &v, nil
	case TextEntityTypeTextUrlTypeID:
		// Decoding textEntityTypeTextUrl#1a912463.
		v := TextEntityTypeTextUrl{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode TextEntityTypeClass: %w", err)
		}
		return &v, nil
	case TextEntityTypeMentionNameTypeID:
		// Decoding textEntityTypeMentionName#d0d2685d.
		v := TextEntityTypeMentionName{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode TextEntityTypeClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode TextEntityTypeClass: %w", bin.NewUnexpectedID(id))
	}
}

// TextEntityType boxes the TextEntityTypeClass providing a helper.
type TextEntityTypeBox struct {
	TextEntityType TextEntityTypeClass
}

// Decode implements bin.Decoder for TextEntityTypeBox.
func (b *TextEntityTypeBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode TextEntityTypeBox to nil")
	}
	v, err := DecodeTextEntityType(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.TextEntityType = v
	return nil
}

// Encode implements bin.Encode for TextEntityTypeBox.
func (b *TextEntityTypeBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.TextEntityType == nil {
		return fmt.Errorf("unable to encode TextEntityTypeClass as nil")
	}
	return b.TextEntityType.Encode(buf)
}
