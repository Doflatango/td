// Code generated by gotdgen, DO NOT EDIT.

package td

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// Ok represents TL type `ok#d4edbe69`.
//
// See https://localhost:80/doc/constructor/ok for reference.
type Ok struct {
}

// OkTypeID is TL type id of Ok.
const OkTypeID = 0xd4edbe69

func (o *Ok) Zero() bool {
	if o == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (o *Ok) String() string {
	if o == nil {
		return "Ok(nil)"
	}
	type Alias Ok
	return fmt.Sprintf("Ok%+v", Alias(*o))
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (o *Ok) TypeID() uint32 {
	return OkTypeID
}

// Encode implements bin.Encoder.
func (o *Ok) Encode(b *bin.Buffer) error {
	if o == nil {
		return fmt.Errorf("can't encode ok#d4edbe69 as nil")
	}
	b.PutID(OkTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (o *Ok) Decode(b *bin.Buffer) error {
	if o == nil {
		return fmt.Errorf("can't decode ok#d4edbe69 to nil")
	}
	if err := b.ConsumeID(OkTypeID); err != nil {
		return fmt.Errorf("unable to decode ok#d4edbe69: %w", err)
	}
	return nil
}

// Ensuring interfaces in compile-time for Ok.
var (
	_ bin.Encoder = &Ok{}
	_ bin.Decoder = &Ok{}
)
