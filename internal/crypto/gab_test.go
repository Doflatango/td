package crypto

import (
	"math/big"
	"math/rand"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestGAB(t *testing.T) {
	// https://core.telegram.org/mtproto/samples-auth_key#server-dh-inner-data-decomposition-using-the-following-formula
	g := big.NewInt(2)
	gA, ok := big.NewInt(0).SetString("262AABA621CC4DF587DC94CF8252258C"+
		"0B9337DFB47545A49CDD5C9B8EAE7236"+
		"C6CADC40B24E88590F1CC2CC762EBF1C"+
		"F11DCC0B393CAAD6CEE4EE5848001C73"+
		"ACBB1D127E4CB93072AA3D1C8151B6FB"+
		"6AA6124B7CD782EAF981BDCFCE9D7A00"+
		"E423BD9D194E8AF78EF6501F415522E4"+
		"4522281C79D906DDB79C72E9C63D83FB"+
		"2A940FF779DFB5F2FD786FB4AD71C9F0"+
		"8CF48758E534E9815F634F1E3A80A5E1"+
		"C2AF210C5AB762755AD4B2126DFA61A7"+
		"7FA9DA967D65DFD0AFB5CDF26C4D4E1A"+
		"88B180F4E0D0B45BA1484F95CB2712B5"+
		"0BF3F5968D9D55C99C0FB9FB67BFF56D"+
		"7D4481B634514FBA3488C4CDA2FC0659"+
		"990E8E868B28632875A9AA703BCDCE8F", 16)
	require.True(t, ok)
	dhPrimeStr := "C71CAEB9C6B1C9048E6C522F70F13F73" +
		"980D40238E3E21C14934D037563D930F" +
		"48198A0AA7C14058229493D22530F4DB" +
		"FA336F6E0AC925139543AED44CCE7C37" +
		"20FD51F69458705AC68CD4FE6B6B13AB" +
		"DC9746512969328454F18FAF8C595F64" +
		"2477FE96BB2A941D5BCD1D4AC8CC4988" +
		"0708FA9B378E3C4F3A9060BEE67CF9A4" +
		"A4A695811051907E162753B56B0F6B41" +
		"0DBA74D8A84B2A14B3144E0EF1284754" +
		"FD17ED950D5965B4B9DD46582DB1178D" +
		"169C6BC465B0D6FF9CA3928FEF5B9AE4" +
		"E418FC15E83EBEA0F87FA9FF5EED7005" +
		"0DED2849F47BF959D956850CE929851F" +
		"0D8115F635B105EE2E4E15D04B2454BF" +
		"6F4FADF034B10403119CD8E3B92FCC5B"
	dhPrime, ok := big.NewInt(0).SetString(dhPrimeStr, 16)
	require.True(t, ok)

	t.Run("Static", func(t *testing.T) {
		b, ok := big.NewInt(0).SetString("6F620AFA575C9233EB4C014110A7BCAF49464F798A18A0981FEA1E05E8DA"+
			"67D9681E0FD6DF0EDF0272AE3492451A84502F2EFC0DA18741A5FB80BD82296919A70FAA6D07CBBBCA2037EA7D3E327B61D"+
			"585ED3373EE0553A91CBD29B01FA9A89D479CA53D57BDE3A76FBD922A923A0A38B922C1D0701F53FF52D7EA9217080163A64901"+
			"E766EB6A0F20BC391B64B9D1DD2CD13A7D0C946A3A7DF8CEC9E2236446F646C42CFE2B60A2A8D776E56C8D7519B08B88ED0970E"+
			"10D12A8C9E355D765F2B7BBB7B4CA9360083435523CB0D57D2B106FD14F94B4EEE79D8AC131CA56AD389C84FE279716F8124A54"+
			"3337FB9EA3D988EC5FA63D90A4BA3970E7A39E5C0DE5", 16)
		require.True(t, ok)
		gB, gAB := gab(g, gA, b, dhPrime)

		if err := CheckGAB(dhPrime, g, gA, gB); err != nil {
			t.Fatal(err)
		}
		if b == nil || gAB == nil {
			t.Fatal("nil")
		}
	})
	t.Run("Random", func(t *testing.T) {
		b, gB, gAB, err := GAB(dhPrime, g, gA, rand.New(rand.NewSource(239)))
		if err != nil {
			t.Fatal(err)
		}
		if err := CheckGAB(dhPrime, g, gA, gB); err != nil {
			t.Fatal(err)
		}
		if b == nil || gAB == nil {
			t.Fatal("nil")
		}
	})
}
