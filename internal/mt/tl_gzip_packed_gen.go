// Code generated by gotdgen, DO NOT EDIT.

package mt

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// GzipPacked represents TL type `gzip_packed#3072cfa1`.
type GzipPacked struct {
	// PackedData field of GzipPacked.
	PackedData []byte
}

// GzipPackedTypeID is TL type id of GzipPacked.
const GzipPackedTypeID = 0x3072cfa1

func (g *GzipPacked) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.PackedData == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *GzipPacked) String() string {
	if g == nil {
		return "GzipPacked(nil)"
	}
	type Alias GzipPacked
	return fmt.Sprintf("GzipPacked%+v", Alias(*g))
}

// FillFrom fills GzipPacked from given interface.
func (g *GzipPacked) FillFrom(from interface {
	GetPackedData() (value []byte)
}) {
	g.PackedData = from.GetPackedData()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (g *GzipPacked) TypeID() uint32 {
	return GzipPackedTypeID
}

// Encode implements bin.Encoder.
func (g *GzipPacked) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode gzip_packed#3072cfa1 as nil")
	}
	b.PutID(GzipPackedTypeID)
	b.PutBytes(g.PackedData)
	return nil
}

// GetPackedData returns value of PackedData field.
func (g *GzipPacked) GetPackedData() (value []byte) {
	return g.PackedData
}

// Decode implements bin.Decoder.
func (g *GzipPacked) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode gzip_packed#3072cfa1 to nil")
	}
	if err := b.ConsumeID(GzipPackedTypeID); err != nil {
		return fmt.Errorf("unable to decode gzip_packed#3072cfa1: %w", err)
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode gzip_packed#3072cfa1: field packed_data: %w", err)
		}
		g.PackedData = value
	}
	return nil
}

// Ensuring interfaces in compile-time for GzipPacked.
var (
	_ bin.Encoder = &GzipPacked{}
	_ bin.Decoder = &GzipPacked{}
)
