// Code generated by gotdgen, DO NOT EDIT.

package mt

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is
var _ = sort.Ints
var _ = tdp.Format

// RPCResult represents TL type `rpc_result#f35c6d01`.
type RPCResult struct {
	// ReqMsgID field of RPCResult.
	ReqMsgID int64 `tl:"req_msg_id"`
	// Result field of RPCResult.
	Result GzipPacked `tl:"result"`
}

// RPCResultTypeID is TL type id of RPCResult.
const RPCResultTypeID = 0xf35c6d01

func (r *RPCResult) Zero() bool {
	if r == nil {
		return true
	}
	if !(r.ReqMsgID == 0) {
		return false
	}
	if !(r.Result.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (r *RPCResult) String() string {
	if r == nil {
		return "RPCResult(nil)"
	}
	type Alias RPCResult
	return fmt.Sprintf("RPCResult%+v", Alias(*r))
}

// FillFrom fills RPCResult from given interface.
func (r *RPCResult) FillFrom(from interface {
	GetReqMsgID() (value int64)
	GetResult() (value GzipPacked)
}) {
	r.ReqMsgID = from.GetReqMsgID()
	r.Result = from.GetResult()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*RPCResult) TypeID() uint32 {
	return RPCResultTypeID
}

// TypeName returns name of type in TL schema.
func (*RPCResult) TypeName() string {
	return "rpc_result"
}

// TypeInfo returns info about TL type.
func (r *RPCResult) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "rpc_result",
		ID:   RPCResultTypeID,
	}
	if r == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ReqMsgID",
			SchemaName: "req_msg_id",
		},
		{
			Name:       "Result",
			SchemaName: "result",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (r *RPCResult) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode rpc_result#f35c6d01 as nil")
	}
	b.PutID(RPCResultTypeID)
	b.PutLong(r.ReqMsgID)
	if err := r.Result.Encode(b); err != nil {
		return fmt.Errorf("unable to encode rpc_result#f35c6d01: field result: %w", err)
	}
	return nil
}

// GetReqMsgID returns value of ReqMsgID field.
func (r *RPCResult) GetReqMsgID() (value int64) {
	return r.ReqMsgID
}

// GetResult returns value of Result field.
func (r *RPCResult) GetResult() (value GzipPacked) {
	return r.Result
}

// Decode implements bin.Decoder.
func (r *RPCResult) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode rpc_result#f35c6d01 to nil")
	}
	if err := b.ConsumeID(RPCResultTypeID); err != nil {
		return fmt.Errorf("unable to decode rpc_result#f35c6d01: %w", err)
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode rpc_result#f35c6d01: field req_msg_id: %w", err)
		}
		r.ReqMsgID = value
	}
	{
		if err := r.Result.Decode(b); err != nil {
			return fmt.Errorf("unable to decode rpc_result#f35c6d01: field result: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for RPCResult.
var (
	_ bin.Encoder = &RPCResult{}
	_ bin.Decoder = &RPCResult{}
)
