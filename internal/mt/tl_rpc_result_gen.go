// Code generated by gotdgen, DO NOT EDIT.

package mt

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// RPCResult represents TL type `rpc_result#f35c6d01`.
type RPCResult struct {
	// ReqMsgID field of RPCResult.
	ReqMsgID int64
	// Result field of RPCResult.
	Result GzipPacked
}

// RPCResultTypeID is TL type id of RPCResult.
const RPCResultTypeID = 0xf35c6d01

// String implements fmt.Stringer.
func (r *RPCResult) String() string {
	if r == nil {
		return "RPCResult(nil)"
	}
	var sb strings.Builder
	sb.WriteString("RPCResult")
	sb.WriteString("{\n")
	sb.WriteString("\tReqMsgID: ")
	sb.WriteString(fmt.Sprint(r.ReqMsgID))
	sb.WriteString(",\n")
	sb.WriteString("\tResult: ")
	sb.WriteString(r.Result.String())
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (r *RPCResult) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode rpc_result#f35c6d01 as nil")
	}
	b.PutID(RPCResultTypeID)
	b.PutLong(r.ReqMsgID)
	if err := r.Result.Encode(b); err != nil {
		return fmt.Errorf("unable to encode rpc_result#f35c6d01: field result: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (r *RPCResult) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode rpc_result#f35c6d01 to nil")
	}
	if err := b.ConsumeID(RPCResultTypeID); err != nil {
		return fmt.Errorf("unable to decode rpc_result#f35c6d01: %w", err)
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode rpc_result#f35c6d01: field req_msg_id: %w", err)
		}
		r.ReqMsgID = value
	}
	{
		if err := r.Result.Decode(b); err != nil {
			return fmt.Errorf("unable to decode rpc_result#f35c6d01: field result: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for RPCResult.
var (
	_ bin.Encoder = &RPCResult{}
	_ bin.Decoder = &RPCResult{}
)
