// Code generated by gotdgen, DO NOT EDIT.

package mt

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// ResPQ represents TL type `resPQ#5162463`.
type ResPQ struct {
	// Nonce field of ResPQ.
	Nonce bin.Int128
	// ServerNonce field of ResPQ.
	ServerNonce bin.Int128
	// Pq field of ResPQ.
	Pq []byte
	// ServerPublicKeyFingerprints field of ResPQ.
	ServerPublicKeyFingerprints []int64
}

// ResPQTypeID is TL type id of ResPQ.
const ResPQTypeID = 0x5162463

// String implements fmt.Stringer.
func (r *ResPQ) String() string {
	if r == nil {
		return "ResPQ(nil)"
	}
	var sb strings.Builder
	sb.WriteString("ResPQ")
	sb.WriteString("{\n")
	sb.WriteString("\tNonce: ")
	sb.WriteString(fmt.Sprint(r.Nonce))
	sb.WriteString(",\n")
	sb.WriteString("\tServerNonce: ")
	sb.WriteString(fmt.Sprint(r.ServerNonce))
	sb.WriteString(",\n")
	sb.WriteString("\tPq: ")
	sb.WriteString(fmt.Sprint(r.Pq))
	sb.WriteString(",\n")
	sb.WriteByte('[')
	for _, v := range r.ServerPublicKeyFingerprints {
		sb.WriteString(fmt.Sprint(v))
	}
	sb.WriteByte(']')
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (r *ResPQ) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode resPQ#5162463 as nil")
	}
	b.PutID(ResPQTypeID)
	b.PutInt128(r.Nonce)
	b.PutInt128(r.ServerNonce)
	b.PutBytes(r.Pq)
	b.PutVectorHeader(len(r.ServerPublicKeyFingerprints))
	for _, v := range r.ServerPublicKeyFingerprints {
		b.PutLong(v)
	}
	return nil
}

// Decode implements bin.Decoder.
func (r *ResPQ) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode resPQ#5162463 to nil")
	}
	if err := b.ConsumeID(ResPQTypeID); err != nil {
		return fmt.Errorf("unable to decode resPQ#5162463: %w", err)
	}
	{
		value, err := b.Int128()
		if err != nil {
			return fmt.Errorf("unable to decode resPQ#5162463: field nonce: %w", err)
		}
		r.Nonce = value
	}
	{
		value, err := b.Int128()
		if err != nil {
			return fmt.Errorf("unable to decode resPQ#5162463: field server_nonce: %w", err)
		}
		r.ServerNonce = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode resPQ#5162463: field pq: %w", err)
		}
		r.Pq = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode resPQ#5162463: field server_public_key_fingerprints: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode resPQ#5162463: field server_public_key_fingerprints: %w", err)
			}
			r.ServerPublicKeyFingerprints = append(r.ServerPublicKeyFingerprints, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for ResPQ.
var (
	_ bin.Encoder = &ResPQ{}
	_ bin.Decoder = &ResPQ{}
)
