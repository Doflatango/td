// Code generated by gotdgen, DO NOT EDIT.

package mt

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// GetFutureSaltsRequest represents TL type `get_future_salts#b921bd04`.
type GetFutureSaltsRequest struct {
	// Num field of GetFutureSaltsRequest.
	Num int
}

// GetFutureSaltsRequestTypeID is TL type id of GetFutureSaltsRequest.
const GetFutureSaltsRequestTypeID = 0xb921bd04

// String implements fmt.Stringer.
func (g *GetFutureSaltsRequest) String() string {
	if g == nil {
		return "GetFutureSaltsRequest(nil)"
	}
	var sb strings.Builder
	sb.WriteString("GetFutureSaltsRequest")
	sb.WriteString("{\n")
	sb.WriteString("\tNum: ")
	sb.WriteString(fmt.Sprint(g.Num))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (g *GetFutureSaltsRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode get_future_salts#b921bd04 as nil")
	}
	b.PutID(GetFutureSaltsRequestTypeID)
	b.PutInt(g.Num)
	return nil
}

// Decode implements bin.Decoder.
func (g *GetFutureSaltsRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode get_future_salts#b921bd04 to nil")
	}
	if err := b.ConsumeID(GetFutureSaltsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode get_future_salts#b921bd04: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode get_future_salts#b921bd04: field num: %w", err)
		}
		g.Num = value
	}
	return nil
}

// Ensuring interfaces in compile-time for GetFutureSaltsRequest.
var (
	_ bin.Encoder = &GetFutureSaltsRequest{}
	_ bin.Decoder = &GetFutureSaltsRequest{}
)

// GetFutureSalts invokes method get_future_salts#b921bd04 returning error if any.
func (c *Client) GetFutureSalts(ctx context.Context, num int) (*FutureSalts, error) {
	var result FutureSalts

	request := &GetFutureSaltsRequest{
		Num: num,
	}
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
