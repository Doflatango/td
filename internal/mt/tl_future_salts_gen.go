// Code generated by gotdgen, DO NOT EDIT.

package mt

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// FutureSalts represents TL type `future_salts#ae500895`.
type FutureSalts struct {
	// ReqMsgID field of FutureSalts.
	ReqMsgID int64
	// Now field of FutureSalts.
	Now int
	// Salts field of FutureSalts.
	Salts []FutureSalt
}

// FutureSaltsTypeID is TL type id of FutureSalts.
const FutureSaltsTypeID = 0xae500895

func (f *FutureSalts) Zero() bool {
	if f == nil {
		return true
	}
	if !(f.ReqMsgID == 0) {
		return false
	}
	if !(f.Now == 0) {
		return false
	}
	if !(f.Salts == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (f *FutureSalts) String() string {
	if f == nil {
		return "FutureSalts(nil)"
	}
	var sb strings.Builder
	sb.WriteString("FutureSalts")
	sb.WriteString("{\n")
	sb.WriteString("\tReqMsgID: ")
	sb.WriteString(fmt.Sprint(f.ReqMsgID))
	sb.WriteString(",\n")
	sb.WriteString("\tNow: ")
	sb.WriteString(fmt.Sprint(f.Now))
	sb.WriteString(",\n")
	sb.WriteByte('[')
	for _, v := range f.Salts {
		sb.WriteString(fmt.Sprint(v))
	}
	sb.WriteByte(']')
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (f *FutureSalts) TypeID() uint32 {
	return FutureSaltsTypeID
}

// Encode implements bin.Encoder.
func (f *FutureSalts) Encode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't encode future_salts#ae500895 as nil")
	}
	b.PutID(FutureSaltsTypeID)
	b.PutLong(f.ReqMsgID)
	b.PutInt(f.Now)
	b.PutVectorHeader(len(f.Salts))
	for idx, v := range f.Salts {
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode future_salts#ae500895: field salts element with index %d: %w", idx, err)
		}
	}
	return nil
}

// GetReqMsgID returns value of ReqMsgID field.
func (f *FutureSalts) GetReqMsgID() (value int64) {
	return f.ReqMsgID
}

// GetNow returns value of Now field.
func (f *FutureSalts) GetNow() (value int) {
	return f.Now
}

// GetSalts returns value of Salts field.
func (f *FutureSalts) GetSalts() (value []FutureSalt) {
	return f.Salts
}

// Decode implements bin.Decoder.
func (f *FutureSalts) Decode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't decode future_salts#ae500895 to nil")
	}
	if err := b.ConsumeID(FutureSaltsTypeID); err != nil {
		return fmt.Errorf("unable to decode future_salts#ae500895: %w", err)
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode future_salts#ae500895: field req_msg_id: %w", err)
		}
		f.ReqMsgID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode future_salts#ae500895: field now: %w", err)
		}
		f.Now = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode future_salts#ae500895: field salts: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value FutureSalt
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode future_salts#ae500895: field salts: %w", err)
			}
			f.Salts = append(f.Salts, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for FutureSalts.
var (
	_ bin.Encoder = &FutureSalts{}
	_ bin.Decoder = &FutureSalts{}
)
