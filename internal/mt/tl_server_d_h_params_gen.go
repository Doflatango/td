// Code generated by gotdgen, DO NOT EDIT.

package mt

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// ServerDHParamsFail represents TL type `server_DH_params_fail#79cb045d`.
type ServerDHParamsFail struct {
	// Nonce field of ServerDHParamsFail.
	Nonce bin.Int128
	// ServerNonce field of ServerDHParamsFail.
	ServerNonce bin.Int128
	// NewNonceHash field of ServerDHParamsFail.
	NewNonceHash bin.Int128
}

// ServerDHParamsFailTypeID is TL type id of ServerDHParamsFail.
const ServerDHParamsFailTypeID = 0x79cb045d

// String implements fmt.Stringer.
func (s *ServerDHParamsFail) String() string {
	if s == nil {
		return "ServerDHParamsFail(nil)"
	}
	var sb strings.Builder
	sb.WriteString("ServerDHParamsFail")
	sb.WriteString("{\n")
	sb.WriteString("\tNonce: ")
	sb.WriteString(fmt.Sprint(s.Nonce))
	sb.WriteString(",\n")
	sb.WriteString("\tServerNonce: ")
	sb.WriteString(fmt.Sprint(s.ServerNonce))
	sb.WriteString(",\n")
	sb.WriteString("\tNewNonceHash: ")
	sb.WriteString(fmt.Sprint(s.NewNonceHash))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (s *ServerDHParamsFail) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode server_DH_params_fail#79cb045d as nil")
	}
	b.PutID(ServerDHParamsFailTypeID)
	b.PutInt128(s.Nonce)
	b.PutInt128(s.ServerNonce)
	b.PutInt128(s.NewNonceHash)
	return nil
}

// Decode implements bin.Decoder.
func (s *ServerDHParamsFail) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode server_DH_params_fail#79cb045d to nil")
	}
	if err := b.ConsumeID(ServerDHParamsFailTypeID); err != nil {
		return fmt.Errorf("unable to decode server_DH_params_fail#79cb045d: %w", err)
	}
	{
		value, err := b.Int128()
		if err != nil {
			return fmt.Errorf("unable to decode server_DH_params_fail#79cb045d: field nonce: %w", err)
		}
		s.Nonce = value
	}
	{
		value, err := b.Int128()
		if err != nil {
			return fmt.Errorf("unable to decode server_DH_params_fail#79cb045d: field server_nonce: %w", err)
		}
		s.ServerNonce = value
	}
	{
		value, err := b.Int128()
		if err != nil {
			return fmt.Errorf("unable to decode server_DH_params_fail#79cb045d: field new_nonce_hash: %w", err)
		}
		s.NewNonceHash = value
	}
	return nil
}

// construct implements constructor of ServerDHParamsClass.
func (s ServerDHParamsFail) construct() ServerDHParamsClass { return &s }

// Ensuring interfaces in compile-time for ServerDHParamsFail.
var (
	_ bin.Encoder = &ServerDHParamsFail{}
	_ bin.Decoder = &ServerDHParamsFail{}

	_ ServerDHParamsClass = &ServerDHParamsFail{}
)

// ServerDHParamsOk represents TL type `server_DH_params_ok#d0e8075c`.
type ServerDHParamsOk struct {
	// Nonce field of ServerDHParamsOk.
	Nonce bin.Int128
	// ServerNonce field of ServerDHParamsOk.
	ServerNonce bin.Int128
	// EncryptedAnswer field of ServerDHParamsOk.
	EncryptedAnswer []byte
}

// ServerDHParamsOkTypeID is TL type id of ServerDHParamsOk.
const ServerDHParamsOkTypeID = 0xd0e8075c

// String implements fmt.Stringer.
func (s *ServerDHParamsOk) String() string {
	if s == nil {
		return "ServerDHParamsOk(nil)"
	}
	var sb strings.Builder
	sb.WriteString("ServerDHParamsOk")
	sb.WriteString("{\n")
	sb.WriteString("\tNonce: ")
	sb.WriteString(fmt.Sprint(s.Nonce))
	sb.WriteString(",\n")
	sb.WriteString("\tServerNonce: ")
	sb.WriteString(fmt.Sprint(s.ServerNonce))
	sb.WriteString(",\n")
	sb.WriteString("\tEncryptedAnswer: ")
	sb.WriteString(fmt.Sprint(s.EncryptedAnswer))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (s *ServerDHParamsOk) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode server_DH_params_ok#d0e8075c as nil")
	}
	b.PutID(ServerDHParamsOkTypeID)
	b.PutInt128(s.Nonce)
	b.PutInt128(s.ServerNonce)
	b.PutBytes(s.EncryptedAnswer)
	return nil
}

// Decode implements bin.Decoder.
func (s *ServerDHParamsOk) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode server_DH_params_ok#d0e8075c to nil")
	}
	if err := b.ConsumeID(ServerDHParamsOkTypeID); err != nil {
		return fmt.Errorf("unable to decode server_DH_params_ok#d0e8075c: %w", err)
	}
	{
		value, err := b.Int128()
		if err != nil {
			return fmt.Errorf("unable to decode server_DH_params_ok#d0e8075c: field nonce: %w", err)
		}
		s.Nonce = value
	}
	{
		value, err := b.Int128()
		if err != nil {
			return fmt.Errorf("unable to decode server_DH_params_ok#d0e8075c: field server_nonce: %w", err)
		}
		s.ServerNonce = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode server_DH_params_ok#d0e8075c: field encrypted_answer: %w", err)
		}
		s.EncryptedAnswer = value
	}
	return nil
}

// construct implements constructor of ServerDHParamsClass.
func (s ServerDHParamsOk) construct() ServerDHParamsClass { return &s }

// Ensuring interfaces in compile-time for ServerDHParamsOk.
var (
	_ bin.Encoder = &ServerDHParamsOk{}
	_ bin.Decoder = &ServerDHParamsOk{}

	_ ServerDHParamsClass = &ServerDHParamsOk{}
)

// ServerDHParamsClass represents Server_DH_Params generic type.
//
// Example:
//  g, err := DecodeServerDHParams(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *ServerDHParamsFail: // server_DH_params_fail#79cb045d
//  case *ServerDHParamsOk: // server_DH_params_ok#d0e8075c
//  default: panic(v)
//  }
type ServerDHParamsClass interface {
	bin.Encoder
	bin.Decoder
	construct() ServerDHParamsClass
	fmt.Stringer
}

// DecodeServerDHParams implements binary de-serialization for ServerDHParamsClass.
func DecodeServerDHParams(buf *bin.Buffer) (ServerDHParamsClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case ServerDHParamsFailTypeID:
		// Decoding server_DH_params_fail#79cb045d.
		v := ServerDHParamsFail{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ServerDHParamsClass: %w", err)
		}
		return &v, nil
	case ServerDHParamsOkTypeID:
		// Decoding server_DH_params_ok#d0e8075c.
		v := ServerDHParamsOk{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ServerDHParamsClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode ServerDHParamsClass: %w", bin.NewUnexpectedID(id))
	}
}

// ServerDHParams boxes the ServerDHParamsClass providing a helper.
type ServerDHParamsBox struct {
	Server_DH_Params ServerDHParamsClass
}

// Decode implements bin.Decoder for ServerDHParamsBox.
func (b *ServerDHParamsBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode ServerDHParamsBox to nil")
	}
	v, err := DecodeServerDHParams(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.Server_DH_Params = v
	return nil
}

// Encode implements bin.Encode for ServerDHParamsBox.
func (b *ServerDHParamsBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.Server_DH_Params == nil {
		return fmt.Errorf("unable to encode ServerDHParamsClass as nil")
	}
	return b.Server_DH_Params.Encode(buf)
}
