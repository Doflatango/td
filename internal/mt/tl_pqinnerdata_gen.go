// Code generated by gotdgen, DO NOT EDIT.

package mt

import (
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}

// PQInnerDataConst represents TL type p_q_inner_data_const#83c95aec.
type PQInnerDataConst struct {
	// Pq field of PQInnerDataConst.
	Pq []byte
	// P field of PQInnerDataConst.
	P []byte
	// Q field of PQInnerDataConst.
	Q []byte
	// Nonce field of PQInnerDataConst.
	Nonce bin.Int128
	// ServerNonce field of PQInnerDataConst.
	ServerNonce bin.Int128
	// NewNonce field of PQInnerDataConst.
	NewNonce bin.Int256
}

// PQInnerDataConstTypeID is TL type id of PQInnerDataConst.
const PQInnerDataConstTypeID = 0x83c95aec

// Encode implements bin.Encoder.
func (p *PQInnerDataConst) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode p_q_inner_data_const#83c95aec as nil")
	}
	b.PutID(PQInnerDataConstTypeID)
	b.PutBytes(p.Pq)
	b.PutBytes(p.P)
	b.PutBytes(p.Q)
	b.PutInt128(p.Nonce)
	b.PutInt128(p.ServerNonce)
	b.PutInt256(p.NewNonce)
	return nil
}

// Decode implements bin.Decoder.
func (p *PQInnerDataConst) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode p_q_inner_data_const#83c95aec to nil")
	}
	if err := b.ConsumeID(PQInnerDataConstTypeID); err != nil {
		return fmt.Errorf("unable to decode p_q_inner_data_const#83c95aec: %w", err)
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode p_q_inner_data_const#83c95aec: field pq: %w", err)
		}
		p.Pq = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode p_q_inner_data_const#83c95aec: field p: %w", err)
		}
		p.P = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode p_q_inner_data_const#83c95aec: field q: %w", err)
		}
		p.Q = value
	}
	{
		value, err := b.Int128()
		if err != nil {
			return fmt.Errorf("unable to decode p_q_inner_data_const#83c95aec: field nonce: %w", err)
		}
		p.Nonce = value
	}
	{
		value, err := b.Int128()
		if err != nil {
			return fmt.Errorf("unable to decode p_q_inner_data_const#83c95aec: field server_nonce: %w", err)
		}
		p.ServerNonce = value
	}
	{
		value, err := b.Int256()
		if err != nil {
			return fmt.Errorf("unable to decode p_q_inner_data_const#83c95aec: field new_nonce: %w", err)
		}
		p.NewNonce = value
	}
	return nil
}

// construct implements constructor of PQInnerData.
func (p PQInnerDataConst) construct() PQInnerData { return &p }

// Ensuring interfaces in compile-time for PQInnerDataConst.
var (
	_ bin.Encoder = &PQInnerDataConst{}
	_ bin.Decoder = &PQInnerDataConst{}

	_ PQInnerData = &PQInnerDataConst{}
)

// PQInnerDataTemp represents TL type p_q_inner_data_temp#3c6a84d4.
type PQInnerDataTemp struct {
	// Pq field of PQInnerDataTemp.
	Pq []byte
	// P field of PQInnerDataTemp.
	P []byte
	// Q field of PQInnerDataTemp.
	Q []byte
	// Nonce field of PQInnerDataTemp.
	Nonce bin.Int128
	// ServerNonce field of PQInnerDataTemp.
	ServerNonce bin.Int128
	// NewNonce field of PQInnerDataTemp.
	NewNonce bin.Int256
	// ExpiresIn field of PQInnerDataTemp.
	ExpiresIn int
}

// PQInnerDataTempTypeID is TL type id of PQInnerDataTemp.
const PQInnerDataTempTypeID = 0x3c6a84d4

// Encode implements bin.Encoder.
func (p *PQInnerDataTemp) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode p_q_inner_data_temp#3c6a84d4 as nil")
	}
	b.PutID(PQInnerDataTempTypeID)
	b.PutBytes(p.Pq)
	b.PutBytes(p.P)
	b.PutBytes(p.Q)
	b.PutInt128(p.Nonce)
	b.PutInt128(p.ServerNonce)
	b.PutInt256(p.NewNonce)
	b.PutInt(p.ExpiresIn)
	return nil
}

// Decode implements bin.Decoder.
func (p *PQInnerDataTemp) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode p_q_inner_data_temp#3c6a84d4 to nil")
	}
	if err := b.ConsumeID(PQInnerDataTempTypeID); err != nil {
		return fmt.Errorf("unable to decode p_q_inner_data_temp#3c6a84d4: %w", err)
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode p_q_inner_data_temp#3c6a84d4: field pq: %w", err)
		}
		p.Pq = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode p_q_inner_data_temp#3c6a84d4: field p: %w", err)
		}
		p.P = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode p_q_inner_data_temp#3c6a84d4: field q: %w", err)
		}
		p.Q = value
	}
	{
		value, err := b.Int128()
		if err != nil {
			return fmt.Errorf("unable to decode p_q_inner_data_temp#3c6a84d4: field nonce: %w", err)
		}
		p.Nonce = value
	}
	{
		value, err := b.Int128()
		if err != nil {
			return fmt.Errorf("unable to decode p_q_inner_data_temp#3c6a84d4: field server_nonce: %w", err)
		}
		p.ServerNonce = value
	}
	{
		value, err := b.Int256()
		if err != nil {
			return fmt.Errorf("unable to decode p_q_inner_data_temp#3c6a84d4: field new_nonce: %w", err)
		}
		p.NewNonce = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode p_q_inner_data_temp#3c6a84d4: field expires_in: %w", err)
		}
		p.ExpiresIn = value
	}
	return nil
}

// construct implements constructor of PQInnerData.
func (p PQInnerDataTemp) construct() PQInnerData { return &p }

// Ensuring interfaces in compile-time for PQInnerDataTemp.
var (
	_ bin.Encoder = &PQInnerDataTemp{}
	_ bin.Decoder = &PQInnerDataTemp{}

	_ PQInnerData = &PQInnerDataTemp{}
)

// PQInnerData represents PQInnerData generic type.
//
// Example:
//  g, err := DecodePQInnerData(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *PQInnerDataConst: // p_q_inner_data_const#83c95aec
//  case *PQInnerDataTemp: // p_q_inner_data_temp#3c6a84d4
//  default: panic(v)
//  }
type PQInnerData interface {
	bin.Encoder
	bin.Decoder
	construct() PQInnerData
}

// DecodePQInnerData implements binary de-serialization for PQInnerData.
func DecodePQInnerData(buf *bin.Buffer) (PQInnerData, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case PQInnerDataConstTypeID:
		// Decoding p_q_inner_data_const#83c95aec.
		v := PQInnerDataConst{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode PQInnerData: %w", err)
		}
		return &v, nil
	case PQInnerDataTempTypeID:
		// Decoding p_q_inner_data_temp#3c6a84d4.
		v := PQInnerDataTemp{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode PQInnerData: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode PQInnerData: %w", bin.NewUnexpectedID(id))
	}
}
