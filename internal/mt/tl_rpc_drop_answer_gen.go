// Code generated by gotdgen, DO NOT EDIT.

package mt

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// RPCAnswerUnknown represents TL type `rpc_answer_unknown#5e2ad36e`.
type RPCAnswerUnknown struct {
}

// RPCAnswerUnknownTypeID is TL type id of RPCAnswerUnknown.
const RPCAnswerUnknownTypeID = 0x5e2ad36e

func (r *RPCAnswerUnknown) Zero() bool {
	if r == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (r *RPCAnswerUnknown) String() string {
	if r == nil {
		return "RPCAnswerUnknown(nil)"
	}
	type Alias RPCAnswerUnknown
	return fmt.Sprintf("RPCAnswerUnknown%+v", Alias(*r))
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (r *RPCAnswerUnknown) TypeID() uint32 {
	return RPCAnswerUnknownTypeID
}

// SchemaName returns MTProto type name.
func (r *RPCAnswerUnknown) SchemaName() string {
	return "rpc_answer_unknown"
}

// Encode implements bin.Encoder.
func (r *RPCAnswerUnknown) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode rpc_answer_unknown#5e2ad36e as nil")
	}
	b.PutID(RPCAnswerUnknownTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (r *RPCAnswerUnknown) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode rpc_answer_unknown#5e2ad36e to nil")
	}
	if err := b.ConsumeID(RPCAnswerUnknownTypeID); err != nil {
		return fmt.Errorf("unable to decode rpc_answer_unknown#5e2ad36e: %w", err)
	}
	return nil
}

// construct implements constructor of RpcDropAnswerClass.
func (r RPCAnswerUnknown) construct() RpcDropAnswerClass { return &r }

// Ensuring interfaces in compile-time for RPCAnswerUnknown.
var (
	_ bin.Encoder = &RPCAnswerUnknown{}
	_ bin.Decoder = &RPCAnswerUnknown{}

	_ RpcDropAnswerClass = &RPCAnswerUnknown{}
)

// RPCAnswerDroppedRunning represents TL type `rpc_answer_dropped_running#cd78e586`.
type RPCAnswerDroppedRunning struct {
}

// RPCAnswerDroppedRunningTypeID is TL type id of RPCAnswerDroppedRunning.
const RPCAnswerDroppedRunningTypeID = 0xcd78e586

func (r *RPCAnswerDroppedRunning) Zero() bool {
	if r == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (r *RPCAnswerDroppedRunning) String() string {
	if r == nil {
		return "RPCAnswerDroppedRunning(nil)"
	}
	type Alias RPCAnswerDroppedRunning
	return fmt.Sprintf("RPCAnswerDroppedRunning%+v", Alias(*r))
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (r *RPCAnswerDroppedRunning) TypeID() uint32 {
	return RPCAnswerDroppedRunningTypeID
}

// SchemaName returns MTProto type name.
func (r *RPCAnswerDroppedRunning) SchemaName() string {
	return "rpc_answer_dropped_running"
}

// Encode implements bin.Encoder.
func (r *RPCAnswerDroppedRunning) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode rpc_answer_dropped_running#cd78e586 as nil")
	}
	b.PutID(RPCAnswerDroppedRunningTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (r *RPCAnswerDroppedRunning) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode rpc_answer_dropped_running#cd78e586 to nil")
	}
	if err := b.ConsumeID(RPCAnswerDroppedRunningTypeID); err != nil {
		return fmt.Errorf("unable to decode rpc_answer_dropped_running#cd78e586: %w", err)
	}
	return nil
}

// construct implements constructor of RpcDropAnswerClass.
func (r RPCAnswerDroppedRunning) construct() RpcDropAnswerClass { return &r }

// Ensuring interfaces in compile-time for RPCAnswerDroppedRunning.
var (
	_ bin.Encoder = &RPCAnswerDroppedRunning{}
	_ bin.Decoder = &RPCAnswerDroppedRunning{}

	_ RpcDropAnswerClass = &RPCAnswerDroppedRunning{}
)

// RPCAnswerDropped represents TL type `rpc_answer_dropped#a43ad8b7`.
type RPCAnswerDropped struct {
	// MsgID field of RPCAnswerDropped.
	MsgID int64 `schemaname:"msg_id"`
	// SeqNo field of RPCAnswerDropped.
	SeqNo int `schemaname:"seq_no"`
	// Bytes field of RPCAnswerDropped.
	Bytes int `schemaname:"bytes"`
}

// RPCAnswerDroppedTypeID is TL type id of RPCAnswerDropped.
const RPCAnswerDroppedTypeID = 0xa43ad8b7

func (r *RPCAnswerDropped) Zero() bool {
	if r == nil {
		return true
	}
	if !(r.MsgID == 0) {
		return false
	}
	if !(r.SeqNo == 0) {
		return false
	}
	if !(r.Bytes == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (r *RPCAnswerDropped) String() string {
	if r == nil {
		return "RPCAnswerDropped(nil)"
	}
	type Alias RPCAnswerDropped
	return fmt.Sprintf("RPCAnswerDropped%+v", Alias(*r))
}

// FillFrom fills RPCAnswerDropped from given interface.
func (r *RPCAnswerDropped) FillFrom(from interface {
	GetMsgID() (value int64)
	GetSeqNo() (value int)
	GetBytes() (value int)
}) {
	r.MsgID = from.GetMsgID()
	r.SeqNo = from.GetSeqNo()
	r.Bytes = from.GetBytes()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (r *RPCAnswerDropped) TypeID() uint32 {
	return RPCAnswerDroppedTypeID
}

// SchemaName returns MTProto type name.
func (r *RPCAnswerDropped) SchemaName() string {
	return "rpc_answer_dropped"
}

// Encode implements bin.Encoder.
func (r *RPCAnswerDropped) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode rpc_answer_dropped#a43ad8b7 as nil")
	}
	b.PutID(RPCAnswerDroppedTypeID)
	b.PutLong(r.MsgID)
	b.PutInt(r.SeqNo)
	b.PutInt(r.Bytes)
	return nil
}

// GetMsgID returns value of MsgID field.
func (r *RPCAnswerDropped) GetMsgID() (value int64) {
	return r.MsgID
}

// GetSeqNo returns value of SeqNo field.
func (r *RPCAnswerDropped) GetSeqNo() (value int) {
	return r.SeqNo
}

// GetBytes returns value of Bytes field.
func (r *RPCAnswerDropped) GetBytes() (value int) {
	return r.Bytes
}

// Decode implements bin.Decoder.
func (r *RPCAnswerDropped) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode rpc_answer_dropped#a43ad8b7 to nil")
	}
	if err := b.ConsumeID(RPCAnswerDroppedTypeID); err != nil {
		return fmt.Errorf("unable to decode rpc_answer_dropped#a43ad8b7: %w", err)
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode rpc_answer_dropped#a43ad8b7: field msg_id: %w", err)
		}
		r.MsgID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode rpc_answer_dropped#a43ad8b7: field seq_no: %w", err)
		}
		r.SeqNo = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode rpc_answer_dropped#a43ad8b7: field bytes: %w", err)
		}
		r.Bytes = value
	}
	return nil
}

// construct implements constructor of RpcDropAnswerClass.
func (r RPCAnswerDropped) construct() RpcDropAnswerClass { return &r }

// Ensuring interfaces in compile-time for RPCAnswerDropped.
var (
	_ bin.Encoder = &RPCAnswerDropped{}
	_ bin.Decoder = &RPCAnswerDropped{}

	_ RpcDropAnswerClass = &RPCAnswerDropped{}
)

// RpcDropAnswerClass represents RpcDropAnswer generic type.
//
// Example:
//  g, err := mt.DecodeRpcDropAnswer(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *mt.RPCAnswerUnknown: // rpc_answer_unknown#5e2ad36e
//  case *mt.RPCAnswerDroppedRunning: // rpc_answer_dropped_running#cd78e586
//  case *mt.RPCAnswerDropped: // rpc_answer_dropped#a43ad8b7
//  default: panic(v)
//  }
type RpcDropAnswerClass interface {
	bin.Encoder
	bin.Decoder
	construct() RpcDropAnswerClass

	// TypeID returns MTProto type id (CRC code).
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// SchemaName returns MTProto type name.
	SchemaName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool
}

// DecodeRpcDropAnswer implements binary de-serialization for RpcDropAnswerClass.
func DecodeRpcDropAnswer(buf *bin.Buffer) (RpcDropAnswerClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case RPCAnswerUnknownTypeID:
		// Decoding rpc_answer_unknown#5e2ad36e.
		v := RPCAnswerUnknown{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode RpcDropAnswerClass: %w", err)
		}
		return &v, nil
	case RPCAnswerDroppedRunningTypeID:
		// Decoding rpc_answer_dropped_running#cd78e586.
		v := RPCAnswerDroppedRunning{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode RpcDropAnswerClass: %w", err)
		}
		return &v, nil
	case RPCAnswerDroppedTypeID:
		// Decoding rpc_answer_dropped#a43ad8b7.
		v := RPCAnswerDropped{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode RpcDropAnswerClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode RpcDropAnswerClass: %w", bin.NewUnexpectedID(id))
	}
}

// RpcDropAnswer boxes the RpcDropAnswerClass providing a helper.
type RpcDropAnswerBox struct {
	RpcDropAnswer RpcDropAnswerClass
}

// Decode implements bin.Decoder for RpcDropAnswerBox.
func (b *RpcDropAnswerBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode RpcDropAnswerBox to nil")
	}
	v, err := DecodeRpcDropAnswer(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.RpcDropAnswer = v
	return nil
}

// Encode implements bin.Encode for RpcDropAnswerBox.
func (b *RpcDropAnswerBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.RpcDropAnswer == nil {
		return fmt.Errorf("unable to encode RpcDropAnswerClass as nil")
	}
	return b.RpcDropAnswer.Encode(buf)
}

// RpcDropAnswerClassSlice is adapter for slice of RpcDropAnswerClass.
type RpcDropAnswerClassSlice []RpcDropAnswerClass

// First returns first element of slice (if exists).
func (s RpcDropAnswerClassSlice) First() (v RpcDropAnswerClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s RpcDropAnswerClassSlice) Last() (v RpcDropAnswerClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *RpcDropAnswerClassSlice) PopFirst() (v RpcDropAnswerClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	a[len(a)-1] = nil
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *RpcDropAnswerClassSlice) Pop() (v RpcDropAnswerClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
