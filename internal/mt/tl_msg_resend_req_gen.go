// Code generated by gotdgen, DO NOT EDIT.

package mt

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// MsgResendReq represents TL type `msg_resend_req#7d861a08`.
type MsgResendReq struct {
	// MsgIds field of MsgResendReq.
	MsgIds []int64 `tl:"msg_ids"`
}

// MsgResendReqTypeID is TL type id of MsgResendReq.
const MsgResendReqTypeID = 0x7d861a08

func (m *MsgResendReq) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.MsgIds == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MsgResendReq) String() string {
	if m == nil {
		return "MsgResendReq(nil)"
	}
	type Alias MsgResendReq
	return fmt.Sprintf("MsgResendReq%+v", Alias(*m))
}

// FillFrom fills MsgResendReq from given interface.
func (m *MsgResendReq) FillFrom(from interface {
	GetMsgIds() (value []int64)
}) {
	m.MsgIds = from.GetMsgIds()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MsgResendReq) TypeID() uint32 {
	return MsgResendReqTypeID
}

// TypeName returns name of type in TL schema.
func (m *MsgResendReq) TypeName() string {
	return "msg_resend_req"
}

// Encode implements bin.Encoder.
func (m *MsgResendReq) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode msg_resend_req#7d861a08 as nil")
	}
	b.PutID(MsgResendReqTypeID)
	b.PutVectorHeader(len(m.MsgIds))
	for _, v := range m.MsgIds {
		b.PutLong(v)
	}
	return nil
}

// GetMsgIds returns value of MsgIds field.
func (m *MsgResendReq) GetMsgIds() (value []int64) {
	return m.MsgIds
}

// Decode implements bin.Decoder.
func (m *MsgResendReq) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode msg_resend_req#7d861a08 to nil")
	}
	if err := b.ConsumeID(MsgResendReqTypeID); err != nil {
		return fmt.Errorf("unable to decode msg_resend_req#7d861a08: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode msg_resend_req#7d861a08: field msg_ids: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode msg_resend_req#7d861a08: field msg_ids: %w", err)
			}
			m.MsgIds = append(m.MsgIds, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for MsgResendReq.
var (
	_ bin.Encoder = &MsgResendReq{}
	_ bin.Decoder = &MsgResendReq{}
)
