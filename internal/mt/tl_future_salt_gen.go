// Code generated by gotdgen, DO NOT EDIT.

package mt

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// FutureSalt represents TL type `future_salt#949d9dc`.
type FutureSalt struct {
	// ValidSince field of FutureSalt.
	ValidSince int
	// ValidUntil field of FutureSalt.
	ValidUntil int
	// Salt field of FutureSalt.
	Salt int64
}

// FutureSaltTypeID is TL type id of FutureSalt.
const FutureSaltTypeID = 0x949d9dc

func (f *FutureSalt) Zero() bool {
	if f == nil {
		return true
	}
	if !(f.ValidSince == 0) {
		return false
	}
	if !(f.ValidUntil == 0) {
		return false
	}
	if !(f.Salt == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (f *FutureSalt) String() string {
	if f == nil {
		return "FutureSalt(nil)"
	}
	var sb strings.Builder
	sb.WriteString("FutureSalt")
	sb.WriteString("{\n")
	sb.WriteString("\tValidSince: ")
	sb.WriteString(fmt.Sprint(f.ValidSince))
	sb.WriteString(",\n")
	sb.WriteString("\tValidUntil: ")
	sb.WriteString(fmt.Sprint(f.ValidUntil))
	sb.WriteString(",\n")
	sb.WriteString("\tSalt: ")
	sb.WriteString(fmt.Sprint(f.Salt))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (f *FutureSalt) Encode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't encode future_salt#949d9dc as nil")
	}
	b.PutID(FutureSaltTypeID)
	b.PutInt(f.ValidSince)
	b.PutInt(f.ValidUntil)
	b.PutLong(f.Salt)
	return nil
}

// Decode implements bin.Decoder.
func (f *FutureSalt) Decode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't decode future_salt#949d9dc to nil")
	}
	if err := b.ConsumeID(FutureSaltTypeID); err != nil {
		return fmt.Errorf("unable to decode future_salt#949d9dc: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode future_salt#949d9dc: field valid_since: %w", err)
		}
		f.ValidSince = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode future_salt#949d9dc: field valid_until: %w", err)
		}
		f.ValidUntil = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode future_salt#949d9dc: field salt: %w", err)
		}
		f.Salt = value
	}
	return nil
}

// Ensuring interfaces in compile-time for FutureSalt.
var (
	_ bin.Encoder = &FutureSalt{}
	_ bin.Decoder = &FutureSalt{}
)
