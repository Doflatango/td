// Code generated by gotdgen, DO NOT EDIT.

package mt

import (
	"context"
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MsgsAck represents TL type `msgs_ack#62d6b459`.
type MsgsAck struct {
	// MsgIds field of MsgsAck.
	MsgIds []int64
}

// MsgsAckTypeID is TL type id of MsgsAck.
const MsgsAckTypeID = 0x62d6b459

// Encode implements bin.Encoder.
func (m *MsgsAck) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode msgs_ack#62d6b459 as nil")
	}
	b.PutID(MsgsAckTypeID)
	b.PutVectorHeader(len(m.MsgIds))
	for _, v := range m.MsgIds {
		b.PutLong(v)
	}
	return nil
}

// Decode implements bin.Decoder.
func (m *MsgsAck) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode msgs_ack#62d6b459 to nil")
	}
	if err := b.ConsumeID(MsgsAckTypeID); err != nil {
		return fmt.Errorf("unable to decode msgs_ack#62d6b459: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode msgs_ack#62d6b459: field msg_ids: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode msgs_ack#62d6b459: field msg_ids: %w", err)
			}
			m.MsgIds = append(m.MsgIds, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for MsgsAck.
var (
	_ bin.Encoder = &MsgsAck{}
	_ bin.Decoder = &MsgsAck{}
)
