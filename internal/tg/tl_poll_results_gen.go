// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// PollResults represents TL type `pollResults#badcc1a3`.
type PollResults struct {
	// Flags field of PollResults.
	Flags bin.Fields
	// Min field of PollResults.
	Min bool
	// Results field of PollResults.
	//
	// Use SetResults and GetResults helpers.
	Results []PollAnswerVoters
	// TotalVoters field of PollResults.
	//
	// Use SetTotalVoters and GetTotalVoters helpers.
	TotalVoters int
	// RecentVoters field of PollResults.
	//
	// Use SetRecentVoters and GetRecentVoters helpers.
	RecentVoters []int
	// Solution field of PollResults.
	//
	// Use SetSolution and GetSolution helpers.
	Solution string
	// SolutionEntities field of PollResults.
	//
	// Use SetSolutionEntities and GetSolutionEntities helpers.
	SolutionEntities []MessageEntityClass
}

// PollResultsTypeID is TL type id of PollResults.
const PollResultsTypeID = 0xbadcc1a3

// Encode implements bin.Encoder.
func (p *PollResults) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode pollResults#badcc1a3 as nil")
	}
	b.PutID(PollResultsTypeID)
	if err := p.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode pollResults#badcc1a3: field flags: %w", err)
	}
	if p.Flags.Has(1) {
		b.PutVectorHeader(len(p.Results))
		for idx, v := range p.Results {
			if err := v.Encode(b); err != nil {
				return fmt.Errorf("unable to encode pollResults#badcc1a3: field results element with index %d: %w", idx, err)
			}
		}
	}
	if p.Flags.Has(2) {
		b.PutInt(p.TotalVoters)
	}
	if p.Flags.Has(3) {
		b.PutVectorHeader(len(p.RecentVoters))
		for _, v := range p.RecentVoters {
			b.PutInt(v)
		}
	}
	if p.Flags.Has(4) {
		b.PutString(p.Solution)
	}
	if p.Flags.Has(4) {
		b.PutVectorHeader(len(p.SolutionEntities))
		for idx, v := range p.SolutionEntities {
			if v == nil {
				return fmt.Errorf("unable to encode pollResults#badcc1a3: field solution_entities element with index %d is nil", idx)
			}
			if err := v.Encode(b); err != nil {
				return fmt.Errorf("unable to encode pollResults#badcc1a3: field solution_entities element with index %d: %w", idx, err)
			}
		}
	}
	return nil
}

// SetMin sets value of Min conditional field.
func (p *PollResults) SetMin(value bool) {
	if value {
		p.Flags.Set(0)
	} else {
		p.Flags.Unset(0)
	}
}

// SetResults sets value of Results conditional field.
func (p *PollResults) SetResults(value []PollAnswerVoters) {
	p.Flags.Set(1)
	p.Results = value
}

// GetResults returns value of Results conditional field and
// boolean which is true if field was set.
func (p *PollResults) GetResults() (value []PollAnswerVoters, ok bool) {
	if !p.Flags.Has(1) {
		return value, false
	}
	return p.Results, true
}

// SetTotalVoters sets value of TotalVoters conditional field.
func (p *PollResults) SetTotalVoters(value int) {
	p.Flags.Set(2)
	p.TotalVoters = value
}

// GetTotalVoters returns value of TotalVoters conditional field and
// boolean which is true if field was set.
func (p *PollResults) GetTotalVoters() (value int, ok bool) {
	if !p.Flags.Has(2) {
		return value, false
	}
	return p.TotalVoters, true
}

// SetRecentVoters sets value of RecentVoters conditional field.
func (p *PollResults) SetRecentVoters(value []int) {
	p.Flags.Set(3)
	p.RecentVoters = value
}

// GetRecentVoters returns value of RecentVoters conditional field and
// boolean which is true if field was set.
func (p *PollResults) GetRecentVoters() (value []int, ok bool) {
	if !p.Flags.Has(3) {
		return value, false
	}
	return p.RecentVoters, true
}

// SetSolution sets value of Solution conditional field.
func (p *PollResults) SetSolution(value string) {
	p.Flags.Set(4)
	p.Solution = value
}

// GetSolution returns value of Solution conditional field and
// boolean which is true if field was set.
func (p *PollResults) GetSolution() (value string, ok bool) {
	if !p.Flags.Has(4) {
		return value, false
	}
	return p.Solution, true
}

// SetSolutionEntities sets value of SolutionEntities conditional field.
func (p *PollResults) SetSolutionEntities(value []MessageEntityClass) {
	p.Flags.Set(4)
	p.SolutionEntities = value
}

// GetSolutionEntities returns value of SolutionEntities conditional field and
// boolean which is true if field was set.
func (p *PollResults) GetSolutionEntities() (value []MessageEntityClass, ok bool) {
	if !p.Flags.Has(4) {
		return value, false
	}
	return p.SolutionEntities, true
}

// Decode implements bin.Decoder.
func (p *PollResults) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode pollResults#badcc1a3 to nil")
	}
	if err := b.ConsumeID(PollResultsTypeID); err != nil {
		return fmt.Errorf("unable to decode pollResults#badcc1a3: %w", err)
	}
	{
		if err := p.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode pollResults#badcc1a3: field flags: %w", err)
		}
	}
	p.Min = p.Flags.Has(0)
	if p.Flags.Has(1) {
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode pollResults#badcc1a3: field results: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value PollAnswerVoters
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode pollResults#badcc1a3: field results: %w", err)
			}
			p.Results = append(p.Results, value)
		}
	}
	if p.Flags.Has(2) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode pollResults#badcc1a3: field total_voters: %w", err)
		}
		p.TotalVoters = value
	}
	if p.Flags.Has(3) {
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode pollResults#badcc1a3: field recent_voters: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Int()
			if err != nil {
				return fmt.Errorf("unable to decode pollResults#badcc1a3: field recent_voters: %w", err)
			}
			p.RecentVoters = append(p.RecentVoters, value)
		}
	}
	if p.Flags.Has(4) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode pollResults#badcc1a3: field solution: %w", err)
		}
		p.Solution = value
	}
	if p.Flags.Has(4) {
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode pollResults#badcc1a3: field solution_entities: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeMessageEntity(b)
			if err != nil {
				return fmt.Errorf("unable to decode pollResults#badcc1a3: field solution_entities: %w", err)
			}
			p.SolutionEntities = append(p.SolutionEntities, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for PollResults.
var (
	_ bin.Encoder = &PollResults{}
	_ bin.Decoder = &PollResults{}
)
