// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// BotCommand represents TL type `botCommand#c27ac8c7`.
type BotCommand struct {
	// Command field of BotCommand.
	Command string
	// Description field of BotCommand.
	Description string
}

// BotCommandTypeID is TL type id of BotCommand.
const BotCommandTypeID = 0xc27ac8c7

// Encode implements bin.Encoder.
func (b *BotCommand) Encode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode botCommand#c27ac8c7 as nil")
	}
	buf.PutID(BotCommandTypeID)
	buf.PutString(b.Command)
	buf.PutString(b.Description)
	return nil
}

// Decode implements bin.Decoder.
func (b *BotCommand) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode botCommand#c27ac8c7 to nil")
	}
	if err := buf.ConsumeID(BotCommandTypeID); err != nil {
		return fmt.Errorf("unable to decode botCommand#c27ac8c7: %w", err)
	}
	{
		value, err := buf.String()
		if err != nil {
			return fmt.Errorf("unable to decode botCommand#c27ac8c7: field command: %w", err)
		}
		b.Command = value
	}
	{
		value, err := buf.String()
		if err != nil {
			return fmt.Errorf("unable to decode botCommand#c27ac8c7: field description: %w", err)
		}
		b.Description = value
	}
	return nil
}

// Ensuring interfaces in compile-time for BotCommand.
var (
	_ bin.Encoder = &BotCommand{}
	_ bin.Decoder = &BotCommand{}
)
