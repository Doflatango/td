// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// ContactsResolvedPeer represents TL type `contacts.resolvedPeer#7f077ad9`.
type ContactsResolvedPeer struct {
	// Peer field of ContactsResolvedPeer.
	Peer PeerClass
	// Chats field of ContactsResolvedPeer.
	Chats []ChatClass
	// Users field of ContactsResolvedPeer.
	Users []UserClass
}

// ContactsResolvedPeerTypeID is TL type id of ContactsResolvedPeer.
const ContactsResolvedPeerTypeID = 0x7f077ad9

// Encode implements bin.Encoder.
func (r *ContactsResolvedPeer) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode contacts.resolvedPeer#7f077ad9 as nil")
	}
	b.PutID(ContactsResolvedPeerTypeID)
	if r.Peer == nil {
		return fmt.Errorf("unable to encode contacts.resolvedPeer#7f077ad9: field peer is nil")
	}
	if err := r.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode contacts.resolvedPeer#7f077ad9: field peer: %w", err)
	}
	b.PutVectorHeader(len(r.Chats))
	for idx, v := range r.Chats {
		if v == nil {
			return fmt.Errorf("unable to encode contacts.resolvedPeer#7f077ad9: field chats element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode contacts.resolvedPeer#7f077ad9: field chats element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(r.Users))
	for idx, v := range r.Users {
		if v == nil {
			return fmt.Errorf("unable to encode contacts.resolvedPeer#7f077ad9: field users element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode contacts.resolvedPeer#7f077ad9: field users element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (r *ContactsResolvedPeer) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode contacts.resolvedPeer#7f077ad9 to nil")
	}
	if err := b.ConsumeID(ContactsResolvedPeerTypeID); err != nil {
		return fmt.Errorf("unable to decode contacts.resolvedPeer#7f077ad9: %w", err)
	}
	{
		value, err := DecodePeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode contacts.resolvedPeer#7f077ad9: field peer: %w", err)
		}
		r.Peer = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode contacts.resolvedPeer#7f077ad9: field chats: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeChat(b)
			if err != nil {
				return fmt.Errorf("unable to decode contacts.resolvedPeer#7f077ad9: field chats: %w", err)
			}
			r.Chats = append(r.Chats, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode contacts.resolvedPeer#7f077ad9: field users: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(b)
			if err != nil {
				return fmt.Errorf("unable to decode contacts.resolvedPeer#7f077ad9: field users: %w", err)
			}
			r.Users = append(r.Users, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for ContactsResolvedPeer.
var (
	_ bin.Encoder = &ContactsResolvedPeer{}
	_ bin.Decoder = &ContactsResolvedPeer{}
)
