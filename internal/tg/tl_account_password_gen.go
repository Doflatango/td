// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// AccountPassword represents TL type `account.password#ad2641f8`.
type AccountPassword struct {
	// Flags field of AccountPassword.
	Flags bin.Fields
	// HasRecovery field of AccountPassword.
	HasRecovery bool
	// HasSecureValues field of AccountPassword.
	HasSecureValues bool
	// HasPassword field of AccountPassword.
	HasPassword bool
	// CurrentAlgo field of AccountPassword.
	//
	// Use SetCurrentAlgo and GetCurrentAlgo helpers.
	CurrentAlgo PasswordKdfAlgoClass
	// SrpB field of AccountPassword.
	//
	// Use SetSrpB and GetSrpB helpers.
	SrpB []byte
	// SrpID field of AccountPassword.
	//
	// Use SetSrpID and GetSrpID helpers.
	SrpID int64
	// Hint field of AccountPassword.
	//
	// Use SetHint and GetHint helpers.
	Hint string
	// EmailUnconfirmedPattern field of AccountPassword.
	//
	// Use SetEmailUnconfirmedPattern and GetEmailUnconfirmedPattern helpers.
	EmailUnconfirmedPattern string
	// NewAlgo field of AccountPassword.
	NewAlgo PasswordKdfAlgoClass
	// NewSecureAlgo field of AccountPassword.
	NewSecureAlgo SecurePasswordKdfAlgoClass
	// SecureRandom field of AccountPassword.
	SecureRandom []byte
}

// AccountPasswordTypeID is TL type id of AccountPassword.
const AccountPasswordTypeID = 0xad2641f8

// Encode implements bin.Encoder.
func (p *AccountPassword) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode account.password#ad2641f8 as nil")
	}
	b.PutID(AccountPasswordTypeID)
	if err := p.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode account.password#ad2641f8: field flags: %w", err)
	}
	if p.Flags.Has(2) {
		if p.CurrentAlgo == nil {
			return fmt.Errorf("unable to encode account.password#ad2641f8: field current_algo is nil")
		}
		if err := p.CurrentAlgo.Encode(b); err != nil {
			return fmt.Errorf("unable to encode account.password#ad2641f8: field current_algo: %w", err)
		}
	}
	if p.Flags.Has(2) {
		b.PutBytes(p.SrpB)
	}
	if p.Flags.Has(2) {
		b.PutLong(p.SrpID)
	}
	if p.Flags.Has(3) {
		b.PutString(p.Hint)
	}
	if p.Flags.Has(4) {
		b.PutString(p.EmailUnconfirmedPattern)
	}
	if p.NewAlgo == nil {
		return fmt.Errorf("unable to encode account.password#ad2641f8: field new_algo is nil")
	}
	if err := p.NewAlgo.Encode(b); err != nil {
		return fmt.Errorf("unable to encode account.password#ad2641f8: field new_algo: %w", err)
	}
	if p.NewSecureAlgo == nil {
		return fmt.Errorf("unable to encode account.password#ad2641f8: field new_secure_algo is nil")
	}
	if err := p.NewSecureAlgo.Encode(b); err != nil {
		return fmt.Errorf("unable to encode account.password#ad2641f8: field new_secure_algo: %w", err)
	}
	b.PutBytes(p.SecureRandom)
	return nil
}

// SetHasRecovery sets value of HasRecovery conditional field.
func (p *AccountPassword) SetHasRecovery(value bool) {
	if value {
		p.Flags.Set(0)
	} else {
		p.Flags.Unset(0)
	}
}

// SetHasSecureValues sets value of HasSecureValues conditional field.
func (p *AccountPassword) SetHasSecureValues(value bool) {
	if value {
		p.Flags.Set(1)
	} else {
		p.Flags.Unset(1)
	}
}

// SetHasPassword sets value of HasPassword conditional field.
func (p *AccountPassword) SetHasPassword(value bool) {
	if value {
		p.Flags.Set(2)
	} else {
		p.Flags.Unset(2)
	}
}

// SetCurrentAlgo sets value of CurrentAlgo conditional field.
func (p *AccountPassword) SetCurrentAlgo(value PasswordKdfAlgoClass) {
	p.Flags.Set(2)
	p.CurrentAlgo = value
}

// GetCurrentAlgo returns value of CurrentAlgo conditional field and
// boolean which is true if field was set.
func (p *AccountPassword) GetCurrentAlgo() (value PasswordKdfAlgoClass, ok bool) {
	if !p.Flags.Has(2) {
		return value, false
	}
	return p.CurrentAlgo, true
}

// SetSrpB sets value of SrpB conditional field.
func (p *AccountPassword) SetSrpB(value []byte) {
	p.Flags.Set(2)
	p.SrpB = value
}

// GetSrpB returns value of SrpB conditional field and
// boolean which is true if field was set.
func (p *AccountPassword) GetSrpB() (value []byte, ok bool) {
	if !p.Flags.Has(2) {
		return value, false
	}
	return p.SrpB, true
}

// SetSrpID sets value of SrpID conditional field.
func (p *AccountPassword) SetSrpID(value int64) {
	p.Flags.Set(2)
	p.SrpID = value
}

// GetSrpID returns value of SrpID conditional field and
// boolean which is true if field was set.
func (p *AccountPassword) GetSrpID() (value int64, ok bool) {
	if !p.Flags.Has(2) {
		return value, false
	}
	return p.SrpID, true
}

// SetHint sets value of Hint conditional field.
func (p *AccountPassword) SetHint(value string) {
	p.Flags.Set(3)
	p.Hint = value
}

// GetHint returns value of Hint conditional field and
// boolean which is true if field was set.
func (p *AccountPassword) GetHint() (value string, ok bool) {
	if !p.Flags.Has(3) {
		return value, false
	}
	return p.Hint, true
}

// SetEmailUnconfirmedPattern sets value of EmailUnconfirmedPattern conditional field.
func (p *AccountPassword) SetEmailUnconfirmedPattern(value string) {
	p.Flags.Set(4)
	p.EmailUnconfirmedPattern = value
}

// GetEmailUnconfirmedPattern returns value of EmailUnconfirmedPattern conditional field and
// boolean which is true if field was set.
func (p *AccountPassword) GetEmailUnconfirmedPattern() (value string, ok bool) {
	if !p.Flags.Has(4) {
		return value, false
	}
	return p.EmailUnconfirmedPattern, true
}

// Decode implements bin.Decoder.
func (p *AccountPassword) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode account.password#ad2641f8 to nil")
	}
	if err := b.ConsumeID(AccountPasswordTypeID); err != nil {
		return fmt.Errorf("unable to decode account.password#ad2641f8: %w", err)
	}
	{
		if err := p.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode account.password#ad2641f8: field flags: %w", err)
		}
	}
	p.HasRecovery = p.Flags.Has(0)
	p.HasSecureValues = p.Flags.Has(1)
	p.HasPassword = p.Flags.Has(2)
	if p.Flags.Has(2) {
		value, err := DecodePasswordKdfAlgo(b)
		if err != nil {
			return fmt.Errorf("unable to decode account.password#ad2641f8: field current_algo: %w", err)
		}
		p.CurrentAlgo = value
	}
	if p.Flags.Has(2) {
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode account.password#ad2641f8: field srp_B: %w", err)
		}
		p.SrpB = value
	}
	if p.Flags.Has(2) {
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode account.password#ad2641f8: field srp_id: %w", err)
		}
		p.SrpID = value
	}
	if p.Flags.Has(3) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode account.password#ad2641f8: field hint: %w", err)
		}
		p.Hint = value
	}
	if p.Flags.Has(4) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode account.password#ad2641f8: field email_unconfirmed_pattern: %w", err)
		}
		p.EmailUnconfirmedPattern = value
	}
	{
		value, err := DecodePasswordKdfAlgo(b)
		if err != nil {
			return fmt.Errorf("unable to decode account.password#ad2641f8: field new_algo: %w", err)
		}
		p.NewAlgo = value
	}
	{
		value, err := DecodeSecurePasswordKdfAlgo(b)
		if err != nil {
			return fmt.Errorf("unable to decode account.password#ad2641f8: field new_secure_algo: %w", err)
		}
		p.NewSecureAlgo = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode account.password#ad2641f8: field secure_random: %w", err)
		}
		p.SecureRandom = value
	}
	return nil
}

// Ensuring interfaces in compile-time for AccountPassword.
var (
	_ bin.Encoder = &AccountPassword{}
	_ bin.Decoder = &AccountPassword{}
)
