// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesGetMessagesViewsRequest represents TL type `messages.getMessagesViews#5784d3e1`.
type MessagesGetMessagesViewsRequest struct {
	// Peer field of MessagesGetMessagesViewsRequest.
	Peer InputPeerClass
	// ID field of MessagesGetMessagesViewsRequest.
	ID []int
	// Increment field of MessagesGetMessagesViewsRequest.
	Increment bool
}

// MessagesGetMessagesViewsRequestTypeID is TL type id of MessagesGetMessagesViewsRequest.
const MessagesGetMessagesViewsRequestTypeID = 0x5784d3e1

// Encode implements bin.Encoder.
func (g *MessagesGetMessagesViewsRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode messages.getMessagesViews#5784d3e1 as nil")
	}
	b.PutID(MessagesGetMessagesViewsRequestTypeID)
	if g.Peer == nil {
		return fmt.Errorf("unable to encode messages.getMessagesViews#5784d3e1: field peer is nil")
	}
	if err := g.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.getMessagesViews#5784d3e1: field peer: %w", err)
	}
	b.PutVectorHeader(len(g.ID))
	for _, v := range g.ID {
		b.PutInt(v)
	}
	b.PutBool(g.Increment)
	return nil
}

// Decode implements bin.Decoder.
func (g *MessagesGetMessagesViewsRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode messages.getMessagesViews#5784d3e1 to nil")
	}
	if err := b.ConsumeID(MessagesGetMessagesViewsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.getMessagesViews#5784d3e1: %w", err)
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.getMessagesViews#5784d3e1: field peer: %w", err)
		}
		g.Peer = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getMessagesViews#5784d3e1: field id: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Int()
			if err != nil {
				return fmt.Errorf("unable to decode messages.getMessagesViews#5784d3e1: field id: %w", err)
			}
			g.ID = append(g.ID, value)
		}
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getMessagesViews#5784d3e1: field increment: %w", err)
		}
		g.Increment = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesGetMessagesViewsRequest.
var (
	_ bin.Encoder = &MessagesGetMessagesViewsRequest{}
	_ bin.Decoder = &MessagesGetMessagesViewsRequest{}
)
