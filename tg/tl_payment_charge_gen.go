// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// PaymentCharge represents TL type `paymentCharge#ea02c27e`.
// Payment identifier
//
// See https://core.telegram.org/constructor/paymentCharge for reference.
type PaymentCharge struct {
	// Telegram payment identifier
	ID string
	// Provider payment identifier
	ProviderChargeID string
}

// PaymentChargeTypeID is TL type id of PaymentCharge.
const PaymentChargeTypeID = 0xea02c27e

func (p *PaymentCharge) Zero() bool {
	if p == nil {
		return true
	}
	if !(p.ID == "") {
		return false
	}
	if !(p.ProviderChargeID == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (p *PaymentCharge) String() string {
	if p == nil {
		return "PaymentCharge(nil)"
	}
	var sb strings.Builder
	sb.WriteString("PaymentCharge")
	sb.WriteString("{\n")
	sb.WriteString("\tID: ")
	sb.WriteString(fmt.Sprint(p.ID))
	sb.WriteString(",\n")
	sb.WriteString("\tProviderChargeID: ")
	sb.WriteString(fmt.Sprint(p.ProviderChargeID))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (p *PaymentCharge) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode paymentCharge#ea02c27e as nil")
	}
	b.PutID(PaymentChargeTypeID)
	b.PutString(p.ID)
	b.PutString(p.ProviderChargeID)
	return nil
}

// Decode implements bin.Decoder.
func (p *PaymentCharge) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode paymentCharge#ea02c27e to nil")
	}
	if err := b.ConsumeID(PaymentChargeTypeID); err != nil {
		return fmt.Errorf("unable to decode paymentCharge#ea02c27e: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode paymentCharge#ea02c27e: field id: %w", err)
		}
		p.ID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode paymentCharge#ea02c27e: field provider_charge_id: %w", err)
		}
		p.ProviderChargeID = value
	}
	return nil
}

// Ensuring interfaces in compile-time for PaymentCharge.
var (
	_ bin.Encoder = &PaymentCharge{}
	_ bin.Decoder = &PaymentCharge{}
)
