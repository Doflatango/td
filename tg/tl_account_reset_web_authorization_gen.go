// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// AccountResetWebAuthorizationRequest represents TL type `account.resetWebAuthorization#2d01b9ef`.
// Log out an active web telegram login session
//
// See https://core.telegram.org/method/account.resetWebAuthorization for reference.
type AccountResetWebAuthorizationRequest struct {
	// Session hash
	Hash int64
}

// AccountResetWebAuthorizationRequestTypeID is TL type id of AccountResetWebAuthorizationRequest.
const AccountResetWebAuthorizationRequestTypeID = 0x2d01b9ef

// Encode implements bin.Encoder.
func (r *AccountResetWebAuthorizationRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode account.resetWebAuthorization#2d01b9ef as nil")
	}
	b.PutID(AccountResetWebAuthorizationRequestTypeID)
	b.PutLong(r.Hash)
	return nil
}

// Decode implements bin.Decoder.
func (r *AccountResetWebAuthorizationRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode account.resetWebAuthorization#2d01b9ef to nil")
	}
	if err := b.ConsumeID(AccountResetWebAuthorizationRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode account.resetWebAuthorization#2d01b9ef: %w", err)
	}

	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode account.resetWebAuthorization#2d01b9ef: field hash: %w", err)
		}
		r.Hash = value
	}
	return nil
}

// Ensuring interfaces in compile-time for AccountResetWebAuthorizationRequest.
var (
	_ bin.Encoder = &AccountResetWebAuthorizationRequest{}
	_ bin.Decoder = &AccountResetWebAuthorizationRequest{}
)

// AccountResetWebAuthorization invokes method account.resetWebAuthorization#2d01b9ef returning error if any.
// Log out an active web telegram login session
//
// See https://core.telegram.org/method/account.resetWebAuthorization for reference.
func (c *Client) AccountResetWebAuthorization(ctx context.Context, request *AccountResetWebAuthorizationRequest) (BoolClass, error) {
	var result BoolBox
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Bool, nil
}
