// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// InputStickeredMediaPhoto represents TL type `inputStickeredMediaPhoto#4a992157`.
// A photo with stickers attached
//
// See https://core.telegram.org/constructor/inputStickeredMediaPhoto for reference.
type InputStickeredMediaPhoto struct {
	// The photo
	ID InputPhotoClass `tl:"id"`
}

// InputStickeredMediaPhotoTypeID is TL type id of InputStickeredMediaPhoto.
const InputStickeredMediaPhotoTypeID = 0x4a992157

func (i *InputStickeredMediaPhoto) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.ID == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InputStickeredMediaPhoto) String() string {
	if i == nil {
		return "InputStickeredMediaPhoto(nil)"
	}
	type Alias InputStickeredMediaPhoto
	return fmt.Sprintf("InputStickeredMediaPhoto%+v", Alias(*i))
}

// FillFrom fills InputStickeredMediaPhoto from given interface.
func (i *InputStickeredMediaPhoto) FillFrom(from interface {
	GetID() (value InputPhotoClass)
}) {
	i.ID = from.GetID()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (i *InputStickeredMediaPhoto) TypeID() uint32 {
	return InputStickeredMediaPhotoTypeID
}

// TypeName returns name of type in TL schema.
func (i *InputStickeredMediaPhoto) TypeName() string {
	return "inputStickeredMediaPhoto"
}

// Encode implements bin.Encoder.
func (i *InputStickeredMediaPhoto) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputStickeredMediaPhoto#4a992157 as nil")
	}
	b.PutID(InputStickeredMediaPhotoTypeID)
	if i.ID == nil {
		return fmt.Errorf("unable to encode inputStickeredMediaPhoto#4a992157: field id is nil")
	}
	if err := i.ID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode inputStickeredMediaPhoto#4a992157: field id: %w", err)
	}
	return nil
}

// GetID returns value of ID field.
func (i *InputStickeredMediaPhoto) GetID() (value InputPhotoClass) {
	return i.ID
}

// Decode implements bin.Decoder.
func (i *InputStickeredMediaPhoto) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputStickeredMediaPhoto#4a992157 to nil")
	}
	if err := b.ConsumeID(InputStickeredMediaPhotoTypeID); err != nil {
		return fmt.Errorf("unable to decode inputStickeredMediaPhoto#4a992157: %w", err)
	}
	{
		value, err := DecodeInputPhoto(b)
		if err != nil {
			return fmt.Errorf("unable to decode inputStickeredMediaPhoto#4a992157: field id: %w", err)
		}
		i.ID = value
	}
	return nil
}

// construct implements constructor of InputStickeredMediaClass.
func (i InputStickeredMediaPhoto) construct() InputStickeredMediaClass { return &i }

// Ensuring interfaces in compile-time for InputStickeredMediaPhoto.
var (
	_ bin.Encoder = &InputStickeredMediaPhoto{}
	_ bin.Decoder = &InputStickeredMediaPhoto{}

	_ InputStickeredMediaClass = &InputStickeredMediaPhoto{}
)

// InputStickeredMediaDocument represents TL type `inputStickeredMediaDocument#438865b`.
// A document with stickers attached
//
// See https://core.telegram.org/constructor/inputStickeredMediaDocument for reference.
type InputStickeredMediaDocument struct {
	// The document
	ID InputDocumentClass `tl:"id"`
}

// InputStickeredMediaDocumentTypeID is TL type id of InputStickeredMediaDocument.
const InputStickeredMediaDocumentTypeID = 0x438865b

func (i *InputStickeredMediaDocument) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.ID == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InputStickeredMediaDocument) String() string {
	if i == nil {
		return "InputStickeredMediaDocument(nil)"
	}
	type Alias InputStickeredMediaDocument
	return fmt.Sprintf("InputStickeredMediaDocument%+v", Alias(*i))
}

// FillFrom fills InputStickeredMediaDocument from given interface.
func (i *InputStickeredMediaDocument) FillFrom(from interface {
	GetID() (value InputDocumentClass)
}) {
	i.ID = from.GetID()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (i *InputStickeredMediaDocument) TypeID() uint32 {
	return InputStickeredMediaDocumentTypeID
}

// TypeName returns name of type in TL schema.
func (i *InputStickeredMediaDocument) TypeName() string {
	return "inputStickeredMediaDocument"
}

// Encode implements bin.Encoder.
func (i *InputStickeredMediaDocument) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputStickeredMediaDocument#438865b as nil")
	}
	b.PutID(InputStickeredMediaDocumentTypeID)
	if i.ID == nil {
		return fmt.Errorf("unable to encode inputStickeredMediaDocument#438865b: field id is nil")
	}
	if err := i.ID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode inputStickeredMediaDocument#438865b: field id: %w", err)
	}
	return nil
}

// GetID returns value of ID field.
func (i *InputStickeredMediaDocument) GetID() (value InputDocumentClass) {
	return i.ID
}

// Decode implements bin.Decoder.
func (i *InputStickeredMediaDocument) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputStickeredMediaDocument#438865b to nil")
	}
	if err := b.ConsumeID(InputStickeredMediaDocumentTypeID); err != nil {
		return fmt.Errorf("unable to decode inputStickeredMediaDocument#438865b: %w", err)
	}
	{
		value, err := DecodeInputDocument(b)
		if err != nil {
			return fmt.Errorf("unable to decode inputStickeredMediaDocument#438865b: field id: %w", err)
		}
		i.ID = value
	}
	return nil
}

// construct implements constructor of InputStickeredMediaClass.
func (i InputStickeredMediaDocument) construct() InputStickeredMediaClass { return &i }

// Ensuring interfaces in compile-time for InputStickeredMediaDocument.
var (
	_ bin.Encoder = &InputStickeredMediaDocument{}
	_ bin.Decoder = &InputStickeredMediaDocument{}

	_ InputStickeredMediaClass = &InputStickeredMediaDocument{}
)

// InputStickeredMediaClass represents InputStickeredMedia generic type.
//
// See https://core.telegram.org/type/InputStickeredMedia for reference.
//
// Example:
//  g, err := tg.DecodeInputStickeredMedia(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *tg.InputStickeredMediaPhoto: // inputStickeredMediaPhoto#4a992157
//  case *tg.InputStickeredMediaDocument: // inputStickeredMediaDocument#438865b
//  default: panic(v)
//  }
type InputStickeredMediaClass interface {
	bin.Encoder
	bin.Decoder
	construct() InputStickeredMediaClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool
}

// DecodeInputStickeredMedia implements binary de-serialization for InputStickeredMediaClass.
func DecodeInputStickeredMedia(buf *bin.Buffer) (InputStickeredMediaClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case InputStickeredMediaPhotoTypeID:
		// Decoding inputStickeredMediaPhoto#4a992157.
		v := InputStickeredMediaPhoto{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InputStickeredMediaClass: %w", err)
		}
		return &v, nil
	case InputStickeredMediaDocumentTypeID:
		// Decoding inputStickeredMediaDocument#438865b.
		v := InputStickeredMediaDocument{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InputStickeredMediaClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode InputStickeredMediaClass: %w", bin.NewUnexpectedID(id))
	}
}

// InputStickeredMedia boxes the InputStickeredMediaClass providing a helper.
type InputStickeredMediaBox struct {
	InputStickeredMedia InputStickeredMediaClass
}

// Decode implements bin.Decoder for InputStickeredMediaBox.
func (b *InputStickeredMediaBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode InputStickeredMediaBox to nil")
	}
	v, err := DecodeInputStickeredMedia(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.InputStickeredMedia = v
	return nil
}

// Encode implements bin.Encode for InputStickeredMediaBox.
func (b *InputStickeredMediaBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.InputStickeredMedia == nil {
		return fmt.Errorf("unable to encode InputStickeredMediaClass as nil")
	}
	return b.InputStickeredMedia.Encode(buf)
}

// InputStickeredMediaClassSlice is adapter for slice of InputStickeredMediaClass.
type InputStickeredMediaClassSlice []InputStickeredMediaClass

// First returns first element of slice (if exists).
func (s InputStickeredMediaClassSlice) First() (v InputStickeredMediaClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s InputStickeredMediaClassSlice) Last() (v InputStickeredMediaClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *InputStickeredMediaClassSlice) PopFirst() (v InputStickeredMediaClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	a[len(a)-1] = nil
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *InputStickeredMediaClassSlice) Pop() (v InputStickeredMediaClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
