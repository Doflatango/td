// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// HelpGetCdnConfigRequest represents TL type `help.getCdnConfig#52029342`.
// Get configuration for CDN file downloads.
//
// See https://core.telegram.org/method/help.getCdnConfig for reference.
type HelpGetCdnConfigRequest struct {
}

// HelpGetCdnConfigRequestTypeID is TL type id of HelpGetCdnConfigRequest.
const HelpGetCdnConfigRequestTypeID = 0x52029342

// String implements fmt.Stringer.
func (g *HelpGetCdnConfigRequest) String() string {
	if g == nil {
		return "HelpGetCdnConfigRequest(nil)"
	}
	var sb strings.Builder
	sb.WriteString("HelpGetCdnConfigRequest")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (g *HelpGetCdnConfigRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode help.getCdnConfig#52029342 as nil")
	}
	b.PutID(HelpGetCdnConfigRequestTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (g *HelpGetCdnConfigRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode help.getCdnConfig#52029342 to nil")
	}
	if err := b.ConsumeID(HelpGetCdnConfigRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode help.getCdnConfig#52029342: %w", err)
	}
	return nil
}

// Ensuring interfaces in compile-time for HelpGetCdnConfigRequest.
var (
	_ bin.Encoder = &HelpGetCdnConfigRequest{}
	_ bin.Decoder = &HelpGetCdnConfigRequest{}
)

// HelpGetCdnConfig invokes method help.getCdnConfig#52029342 returning error if any.
// Get configuration for CDN file downloads.
//
// See https://core.telegram.org/method/help.getCdnConfig for reference.
func (c *Client) HelpGetCdnConfig(ctx context.Context) (*CdnConfig, error) {
	var result CdnConfig

	request := &HelpGetCdnConfigRequest{}
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
