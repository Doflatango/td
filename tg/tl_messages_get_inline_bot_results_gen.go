// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesGetInlineBotResultsRequest represents TL type `messages.getInlineBotResults#514e999d`.
//
// See https://core.telegram.org/method/messages.getInlineBotResults for reference.
type MessagesGetInlineBotResultsRequest struct {
	// Flags field of MessagesGetInlineBotResultsRequest.
	Flags bin.Fields
	// Bot field of MessagesGetInlineBotResultsRequest.
	Bot InputUserClass
	// Peer field of MessagesGetInlineBotResultsRequest.
	Peer InputPeerClass
	// GeoPoint field of MessagesGetInlineBotResultsRequest.
	//
	// Use SetGeoPoint and GetGeoPoint helpers.
	GeoPoint InputGeoPointClass
	// Query field of MessagesGetInlineBotResultsRequest.
	Query string
	// Offset field of MessagesGetInlineBotResultsRequest.
	Offset string
}

// MessagesGetInlineBotResultsRequestTypeID is TL type id of MessagesGetInlineBotResultsRequest.
const MessagesGetInlineBotResultsRequestTypeID = 0x514e999d

// Encode implements bin.Encoder.
func (g *MessagesGetInlineBotResultsRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode messages.getInlineBotResults#514e999d as nil")
	}
	b.PutID(MessagesGetInlineBotResultsRequestTypeID)
	if err := g.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.getInlineBotResults#514e999d: field flags: %w", err)
	}
	if g.Bot == nil {
		return fmt.Errorf("unable to encode messages.getInlineBotResults#514e999d: field bot is nil")
	}
	if err := g.Bot.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.getInlineBotResults#514e999d: field bot: %w", err)
	}
	if g.Peer == nil {
		return fmt.Errorf("unable to encode messages.getInlineBotResults#514e999d: field peer is nil")
	}
	if err := g.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.getInlineBotResults#514e999d: field peer: %w", err)
	}
	if g.Flags.Has(0) {
		if g.GeoPoint == nil {
			return fmt.Errorf("unable to encode messages.getInlineBotResults#514e999d: field geo_point is nil")
		}
		if err := g.GeoPoint.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.getInlineBotResults#514e999d: field geo_point: %w", err)
		}
	}
	b.PutString(g.Query)
	b.PutString(g.Offset)
	return nil
}

// SetGeoPoint sets value of GeoPoint conditional field.
func (g *MessagesGetInlineBotResultsRequest) SetGeoPoint(value InputGeoPointClass) {
	g.Flags.Set(0)
	g.GeoPoint = value
}

// GetGeoPoint returns value of GeoPoint conditional field and
// boolean which is true if field was set.
func (g *MessagesGetInlineBotResultsRequest) GetGeoPoint() (value InputGeoPointClass, ok bool) {
	if !g.Flags.Has(0) {
		return value, false
	}
	return g.GeoPoint, true
}

// Decode implements bin.Decoder.
func (g *MessagesGetInlineBotResultsRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode messages.getInlineBotResults#514e999d to nil")
	}
	if err := b.ConsumeID(MessagesGetInlineBotResultsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.getInlineBotResults#514e999d: %w", err)
	}
	{
		if err := g.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.getInlineBotResults#514e999d: field flags: %w", err)
		}
	}
	{
		value, err := DecodeInputUser(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.getInlineBotResults#514e999d: field bot: %w", err)
		}
		g.Bot = value
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.getInlineBotResults#514e999d: field peer: %w", err)
		}
		g.Peer = value
	}
	if g.Flags.Has(0) {
		value, err := DecodeInputGeoPoint(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.getInlineBotResults#514e999d: field geo_point: %w", err)
		}
		g.GeoPoint = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getInlineBotResults#514e999d: field query: %w", err)
		}
		g.Query = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getInlineBotResults#514e999d: field offset: %w", err)
		}
		g.Offset = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesGetInlineBotResultsRequest.
var (
	_ bin.Encoder = &MessagesGetInlineBotResultsRequest{}
	_ bin.Decoder = &MessagesGetInlineBotResultsRequest{}
)

// MessagesGetInlineBotResults invokes method messages.getInlineBotResults#514e999d returning error if any.
//
// See https://core.telegram.org/method/messages.getInlineBotResults for reference.
func (c *Client) MessagesGetInlineBotResults(ctx context.Context, request *MessagesGetInlineBotResultsRequest) (*MessagesBotResults, error) {
	var result MessagesBotResults
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
