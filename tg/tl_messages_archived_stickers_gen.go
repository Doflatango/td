// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesArchivedStickers represents TL type `messages.archivedStickers#4fcba9c8`.
// Archived stickersets
//
// See https://core.telegram.org/constructor/messages.archivedStickers for reference.
type MessagesArchivedStickers struct {
	// Number of archived stickers
	Count int
	// Archived stickersets
	Sets []StickerSetCoveredClass
}

// MessagesArchivedStickersTypeID is TL type id of MessagesArchivedStickers.
const MessagesArchivedStickersTypeID = 0x4fcba9c8

// Encode implements bin.Encoder.
func (a *MessagesArchivedStickers) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode messages.archivedStickers#4fcba9c8 as nil")
	}
	b.PutID(MessagesArchivedStickersTypeID)
	b.PutInt(a.Count)
	b.PutVectorHeader(len(a.Sets))
	for idx, v := range a.Sets {
		if v == nil {
			return fmt.Errorf("unable to encode messages.archivedStickers#4fcba9c8: field sets element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.archivedStickers#4fcba9c8: field sets element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (a *MessagesArchivedStickers) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode messages.archivedStickers#4fcba9c8 to nil")
	}
	if err := b.ConsumeID(MessagesArchivedStickersTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.archivedStickers#4fcba9c8: %w", err)
	}

	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.archivedStickers#4fcba9c8: field count: %w", err)
		}
		a.Count = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.archivedStickers#4fcba9c8: field sets: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeStickerSetCovered(b)
			if err != nil {
				return fmt.Errorf("unable to decode messages.archivedStickers#4fcba9c8: field sets: %w", err)
			}
			a.Sets = append(a.Sets, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesArchivedStickers.
var (
	_ bin.Encoder = &MessagesArchivedStickers{}
	_ bin.Decoder = &MessagesArchivedStickers{}
)
