// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// PaymentsPaymentForm represents TL type `payments.paymentForm#3f56aea3`.
//
// See https://core.telegram.org/constructor/payments.paymentForm for reference.
type PaymentsPaymentForm struct {
	// Flags field of PaymentsPaymentForm.
	Flags bin.Fields
	// CanSaveCredentials field of PaymentsPaymentForm.
	CanSaveCredentials bool
	// PasswordMissing field of PaymentsPaymentForm.
	PasswordMissing bool
	// BotID field of PaymentsPaymentForm.
	BotID int
	// Invoice field of PaymentsPaymentForm.
	Invoice Invoice
	// ProviderID field of PaymentsPaymentForm.
	ProviderID int
	// URL field of PaymentsPaymentForm.
	URL string
	// NativeProvider field of PaymentsPaymentForm.
	//
	// Use SetNativeProvider and GetNativeProvider helpers.
	NativeProvider string
	// NativeParams field of PaymentsPaymentForm.
	//
	// Use SetNativeParams and GetNativeParams helpers.
	NativeParams DataJSON
	// SavedInfo field of PaymentsPaymentForm.
	//
	// Use SetSavedInfo and GetSavedInfo helpers.
	SavedInfo PaymentRequestedInfo
	// SavedCredentials field of PaymentsPaymentForm.
	//
	// Use SetSavedCredentials and GetSavedCredentials helpers.
	SavedCredentials PaymentSavedCredentialsCard
	// Users field of PaymentsPaymentForm.
	Users []UserClass
}

// PaymentsPaymentFormTypeID is TL type id of PaymentsPaymentForm.
const PaymentsPaymentFormTypeID = 0x3f56aea3

// Encode implements bin.Encoder.
func (p *PaymentsPaymentForm) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode payments.paymentForm#3f56aea3 as nil")
	}
	b.PutID(PaymentsPaymentFormTypeID)
	if err := p.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode payments.paymentForm#3f56aea3: field flags: %w", err)
	}
	b.PutInt(p.BotID)
	if err := p.Invoice.Encode(b); err != nil {
		return fmt.Errorf("unable to encode payments.paymentForm#3f56aea3: field invoice: %w", err)
	}
	b.PutInt(p.ProviderID)
	b.PutString(p.URL)
	if p.Flags.Has(4) {
		b.PutString(p.NativeProvider)
	}
	if p.Flags.Has(4) {
		if err := p.NativeParams.Encode(b); err != nil {
			return fmt.Errorf("unable to encode payments.paymentForm#3f56aea3: field native_params: %w", err)
		}
	}
	if p.Flags.Has(0) {
		if err := p.SavedInfo.Encode(b); err != nil {
			return fmt.Errorf("unable to encode payments.paymentForm#3f56aea3: field saved_info: %w", err)
		}
	}
	if p.Flags.Has(1) {
		if err := p.SavedCredentials.Encode(b); err != nil {
			return fmt.Errorf("unable to encode payments.paymentForm#3f56aea3: field saved_credentials: %w", err)
		}
	}
	b.PutVectorHeader(len(p.Users))
	for idx, v := range p.Users {
		if v == nil {
			return fmt.Errorf("unable to encode payments.paymentForm#3f56aea3: field users element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode payments.paymentForm#3f56aea3: field users element with index %d: %w", idx, err)
		}
	}
	return nil
}

// SetCanSaveCredentials sets value of CanSaveCredentials conditional field.
func (p *PaymentsPaymentForm) SetCanSaveCredentials(value bool) {
	if value {
		p.Flags.Set(2)
	} else {
		p.Flags.Unset(2)
	}
}

// SetPasswordMissing sets value of PasswordMissing conditional field.
func (p *PaymentsPaymentForm) SetPasswordMissing(value bool) {
	if value {
		p.Flags.Set(3)
	} else {
		p.Flags.Unset(3)
	}
}

// SetNativeProvider sets value of NativeProvider conditional field.
func (p *PaymentsPaymentForm) SetNativeProvider(value string) {
	p.Flags.Set(4)
	p.NativeProvider = value
}

// GetNativeProvider returns value of NativeProvider conditional field and
// boolean which is true if field was set.
func (p *PaymentsPaymentForm) GetNativeProvider() (value string, ok bool) {
	if !p.Flags.Has(4) {
		return value, false
	}
	return p.NativeProvider, true
}

// SetNativeParams sets value of NativeParams conditional field.
func (p *PaymentsPaymentForm) SetNativeParams(value DataJSON) {
	p.Flags.Set(4)
	p.NativeParams = value
}

// GetNativeParams returns value of NativeParams conditional field and
// boolean which is true if field was set.
func (p *PaymentsPaymentForm) GetNativeParams() (value DataJSON, ok bool) {
	if !p.Flags.Has(4) {
		return value, false
	}
	return p.NativeParams, true
}

// SetSavedInfo sets value of SavedInfo conditional field.
func (p *PaymentsPaymentForm) SetSavedInfo(value PaymentRequestedInfo) {
	p.Flags.Set(0)
	p.SavedInfo = value
}

// GetSavedInfo returns value of SavedInfo conditional field and
// boolean which is true if field was set.
func (p *PaymentsPaymentForm) GetSavedInfo() (value PaymentRequestedInfo, ok bool) {
	if !p.Flags.Has(0) {
		return value, false
	}
	return p.SavedInfo, true
}

// SetSavedCredentials sets value of SavedCredentials conditional field.
func (p *PaymentsPaymentForm) SetSavedCredentials(value PaymentSavedCredentialsCard) {
	p.Flags.Set(1)
	p.SavedCredentials = value
}

// GetSavedCredentials returns value of SavedCredentials conditional field and
// boolean which is true if field was set.
func (p *PaymentsPaymentForm) GetSavedCredentials() (value PaymentSavedCredentialsCard, ok bool) {
	if !p.Flags.Has(1) {
		return value, false
	}
	return p.SavedCredentials, true
}

// Decode implements bin.Decoder.
func (p *PaymentsPaymentForm) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode payments.paymentForm#3f56aea3 to nil")
	}
	if err := b.ConsumeID(PaymentsPaymentFormTypeID); err != nil {
		return fmt.Errorf("unable to decode payments.paymentForm#3f56aea3: %w", err)
	}
	{
		if err := p.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode payments.paymentForm#3f56aea3: field flags: %w", err)
		}
	}
	p.CanSaveCredentials = p.Flags.Has(2)
	p.PasswordMissing = p.Flags.Has(3)
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode payments.paymentForm#3f56aea3: field bot_id: %w", err)
		}
		p.BotID = value
	}
	{
		if err := p.Invoice.Decode(b); err != nil {
			return fmt.Errorf("unable to decode payments.paymentForm#3f56aea3: field invoice: %w", err)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode payments.paymentForm#3f56aea3: field provider_id: %w", err)
		}
		p.ProviderID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode payments.paymentForm#3f56aea3: field url: %w", err)
		}
		p.URL = value
	}
	if p.Flags.Has(4) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode payments.paymentForm#3f56aea3: field native_provider: %w", err)
		}
		p.NativeProvider = value
	}
	if p.Flags.Has(4) {
		if err := p.NativeParams.Decode(b); err != nil {
			return fmt.Errorf("unable to decode payments.paymentForm#3f56aea3: field native_params: %w", err)
		}
	}
	if p.Flags.Has(0) {
		if err := p.SavedInfo.Decode(b); err != nil {
			return fmt.Errorf("unable to decode payments.paymentForm#3f56aea3: field saved_info: %w", err)
		}
	}
	if p.Flags.Has(1) {
		if err := p.SavedCredentials.Decode(b); err != nil {
			return fmt.Errorf("unable to decode payments.paymentForm#3f56aea3: field saved_credentials: %w", err)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode payments.paymentForm#3f56aea3: field users: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(b)
			if err != nil {
				return fmt.Errorf("unable to decode payments.paymentForm#3f56aea3: field users: %w", err)
			}
			p.Users = append(p.Users, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for PaymentsPaymentForm.
var (
	_ bin.Encoder = &PaymentsPaymentForm{}
	_ bin.Decoder = &PaymentsPaymentForm{}
)
