// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// ChannelsEditPhotoRequest represents TL type `channels.editPhoto#f12e57c9`.
type ChannelsEditPhotoRequest struct {
	// Channel field of ChannelsEditPhotoRequest.
	Channel InputChannelClass
	// Photo field of ChannelsEditPhotoRequest.
	Photo InputChatPhotoClass
}

// ChannelsEditPhotoRequestTypeID is TL type id of ChannelsEditPhotoRequest.
const ChannelsEditPhotoRequestTypeID = 0xf12e57c9

// Encode implements bin.Encoder.
func (e *ChannelsEditPhotoRequest) Encode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode channels.editPhoto#f12e57c9 as nil")
	}
	b.PutID(ChannelsEditPhotoRequestTypeID)
	if e.Channel == nil {
		return fmt.Errorf("unable to encode channels.editPhoto#f12e57c9: field channel is nil")
	}
	if err := e.Channel.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channels.editPhoto#f12e57c9: field channel: %w", err)
	}
	if e.Photo == nil {
		return fmt.Errorf("unable to encode channels.editPhoto#f12e57c9: field photo is nil")
	}
	if err := e.Photo.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channels.editPhoto#f12e57c9: field photo: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (e *ChannelsEditPhotoRequest) Decode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode channels.editPhoto#f12e57c9 to nil")
	}
	if err := b.ConsumeID(ChannelsEditPhotoRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode channels.editPhoto#f12e57c9: %w", err)
	}
	{
		value, err := DecodeInputChannel(b)
		if err != nil {
			return fmt.Errorf("unable to decode channels.editPhoto#f12e57c9: field channel: %w", err)
		}
		e.Channel = value
	}
	{
		value, err := DecodeInputChatPhoto(b)
		if err != nil {
			return fmt.Errorf("unable to decode channels.editPhoto#f12e57c9: field photo: %w", err)
		}
		e.Photo = value
	}
	return nil
}

// Ensuring interfaces in compile-time for ChannelsEditPhotoRequest.
var (
	_ bin.Encoder = &ChannelsEditPhotoRequest{}
	_ bin.Decoder = &ChannelsEditPhotoRequest{}
)

// ChannelsEditPhoto invokes method channels.editPhoto#f12e57c9 returning error if any.
func (c *Client) ChannelsEditPhoto(ctx context.Context, request *ChannelsEditPhotoRequest) (UpdatesClass, error) {
	var result UpdatesBox
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
