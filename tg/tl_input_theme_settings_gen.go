// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// InputThemeSettings represents TL type `inputThemeSettings#bd507cd1`.
type InputThemeSettings struct {
	// Flags field of InputThemeSettings.
	Flags bin.Fields
	// BaseTheme field of InputThemeSettings.
	BaseTheme BaseThemeClass
	// AccentColor field of InputThemeSettings.
	AccentColor int
	// MessageTopColor field of InputThemeSettings.
	//
	// Use SetMessageTopColor and GetMessageTopColor helpers.
	MessageTopColor int
	// MessageBottomColor field of InputThemeSettings.
	//
	// Use SetMessageBottomColor and GetMessageBottomColor helpers.
	MessageBottomColor int
	// Wallpaper field of InputThemeSettings.
	//
	// Use SetWallpaper and GetWallpaper helpers.
	Wallpaper InputWallPaperClass
	// WallpaperSettings field of InputThemeSettings.
	//
	// Use SetWallpaperSettings and GetWallpaperSettings helpers.
	WallpaperSettings WallPaperSettings
}

// InputThemeSettingsTypeID is TL type id of InputThemeSettings.
const InputThemeSettingsTypeID = 0xbd507cd1

// Encode implements bin.Encoder.
func (i *InputThemeSettings) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputThemeSettings#bd507cd1 as nil")
	}
	b.PutID(InputThemeSettingsTypeID)
	if err := i.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode inputThemeSettings#bd507cd1: field flags: %w", err)
	}
	if i.BaseTheme == nil {
		return fmt.Errorf("unable to encode inputThemeSettings#bd507cd1: field base_theme is nil")
	}
	if err := i.BaseTheme.Encode(b); err != nil {
		return fmt.Errorf("unable to encode inputThemeSettings#bd507cd1: field base_theme: %w", err)
	}
	b.PutInt(i.AccentColor)
	if i.Flags.Has(0) {
		b.PutInt(i.MessageTopColor)
	}
	if i.Flags.Has(0) {
		b.PutInt(i.MessageBottomColor)
	}
	if i.Flags.Has(1) {
		if i.Wallpaper == nil {
			return fmt.Errorf("unable to encode inputThemeSettings#bd507cd1: field wallpaper is nil")
		}
		if err := i.Wallpaper.Encode(b); err != nil {
			return fmt.Errorf("unable to encode inputThemeSettings#bd507cd1: field wallpaper: %w", err)
		}
	}
	if i.Flags.Has(1) {
		if err := i.WallpaperSettings.Encode(b); err != nil {
			return fmt.Errorf("unable to encode inputThemeSettings#bd507cd1: field wallpaper_settings: %w", err)
		}
	}
	return nil
}

// SetMessageTopColor sets value of MessageTopColor conditional field.
func (i *InputThemeSettings) SetMessageTopColor(value int) {
	i.Flags.Set(0)
	i.MessageTopColor = value
}

// GetMessageTopColor returns value of MessageTopColor conditional field and
// boolean which is true if field was set.
func (i *InputThemeSettings) GetMessageTopColor() (value int, ok bool) {
	if !i.Flags.Has(0) {
		return value, false
	}
	return i.MessageTopColor, true
}

// SetMessageBottomColor sets value of MessageBottomColor conditional field.
func (i *InputThemeSettings) SetMessageBottomColor(value int) {
	i.Flags.Set(0)
	i.MessageBottomColor = value
}

// GetMessageBottomColor returns value of MessageBottomColor conditional field and
// boolean which is true if field was set.
func (i *InputThemeSettings) GetMessageBottomColor() (value int, ok bool) {
	if !i.Flags.Has(0) {
		return value, false
	}
	return i.MessageBottomColor, true
}

// SetWallpaper sets value of Wallpaper conditional field.
func (i *InputThemeSettings) SetWallpaper(value InputWallPaperClass) {
	i.Flags.Set(1)
	i.Wallpaper = value
}

// GetWallpaper returns value of Wallpaper conditional field and
// boolean which is true if field was set.
func (i *InputThemeSettings) GetWallpaper() (value InputWallPaperClass, ok bool) {
	if !i.Flags.Has(1) {
		return value, false
	}
	return i.Wallpaper, true
}

// SetWallpaperSettings sets value of WallpaperSettings conditional field.
func (i *InputThemeSettings) SetWallpaperSettings(value WallPaperSettings) {
	i.Flags.Set(1)
	i.WallpaperSettings = value
}

// GetWallpaperSettings returns value of WallpaperSettings conditional field and
// boolean which is true if field was set.
func (i *InputThemeSettings) GetWallpaperSettings() (value WallPaperSettings, ok bool) {
	if !i.Flags.Has(1) {
		return value, false
	}
	return i.WallpaperSettings, true
}

// Decode implements bin.Decoder.
func (i *InputThemeSettings) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputThemeSettings#bd507cd1 to nil")
	}
	if err := b.ConsumeID(InputThemeSettingsTypeID); err != nil {
		return fmt.Errorf("unable to decode inputThemeSettings#bd507cd1: %w", err)
	}
	{
		if err := i.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode inputThemeSettings#bd507cd1: field flags: %w", err)
		}
	}
	{
		value, err := DecodeBaseTheme(b)
		if err != nil {
			return fmt.Errorf("unable to decode inputThemeSettings#bd507cd1: field base_theme: %w", err)
		}
		i.BaseTheme = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode inputThemeSettings#bd507cd1: field accent_color: %w", err)
		}
		i.AccentColor = value
	}
	if i.Flags.Has(0) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode inputThemeSettings#bd507cd1: field message_top_color: %w", err)
		}
		i.MessageTopColor = value
	}
	if i.Flags.Has(0) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode inputThemeSettings#bd507cd1: field message_bottom_color: %w", err)
		}
		i.MessageBottomColor = value
	}
	if i.Flags.Has(1) {
		value, err := DecodeInputWallPaper(b)
		if err != nil {
			return fmt.Errorf("unable to decode inputThemeSettings#bd507cd1: field wallpaper: %w", err)
		}
		i.Wallpaper = value
	}
	if i.Flags.Has(1) {
		if err := i.WallpaperSettings.Decode(b); err != nil {
			return fmt.Errorf("unable to decode inputThemeSettings#bd507cd1: field wallpaper_settings: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for InputThemeSettings.
var (
	_ bin.Encoder = &InputThemeSettings{}
	_ bin.Decoder = &InputThemeSettings{}
)
