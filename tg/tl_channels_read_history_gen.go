// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is
var _ = sort.Ints

// ChannelsReadHistoryRequest represents TL type `channels.readHistory#cc104937`.
// Mark channel/supergroup¹ history as read
//
// Links:
//  1) https://core.telegram.org/api/channel
//
// See https://core.telegram.org/method/channels.readHistory for reference.
type ChannelsReadHistoryRequest struct {
	// Channel/supergroup¹
	//
	// Links:
	//  1) https://core.telegram.org/api/channel
	Channel InputChannelClass `schemaname:"channel"`
	// ID of message up to which messages should be marked as read
	MaxID int `schemaname:"max_id"`
}

// ChannelsReadHistoryRequestTypeID is TL type id of ChannelsReadHistoryRequest.
const ChannelsReadHistoryRequestTypeID = 0xcc104937

func (r *ChannelsReadHistoryRequest) Zero() bool {
	if r == nil {
		return true
	}
	if !(r.Channel == nil) {
		return false
	}
	if !(r.MaxID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (r *ChannelsReadHistoryRequest) String() string {
	if r == nil {
		return "ChannelsReadHistoryRequest(nil)"
	}
	type Alias ChannelsReadHistoryRequest
	return fmt.Sprintf("ChannelsReadHistoryRequest%+v", Alias(*r))
}

// FillFrom fills ChannelsReadHistoryRequest from given interface.
func (r *ChannelsReadHistoryRequest) FillFrom(from interface {
	GetChannel() (value InputChannelClass)
	GetMaxID() (value int)
}) {
	r.Channel = from.GetChannel()
	r.MaxID = from.GetMaxID()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (r *ChannelsReadHistoryRequest) TypeID() uint32 {
	return ChannelsReadHistoryRequestTypeID
}

// SchemaName returns MTProto type name.
func (r *ChannelsReadHistoryRequest) SchemaName() string {
	return "channels.readHistory"
}

// Encode implements bin.Encoder.
func (r *ChannelsReadHistoryRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode channels.readHistory#cc104937 as nil")
	}
	b.PutID(ChannelsReadHistoryRequestTypeID)
	if r.Channel == nil {
		return fmt.Errorf("unable to encode channels.readHistory#cc104937: field channel is nil")
	}
	if err := r.Channel.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channels.readHistory#cc104937: field channel: %w", err)
	}
	b.PutInt(r.MaxID)
	return nil
}

// GetChannel returns value of Channel field.
func (r *ChannelsReadHistoryRequest) GetChannel() (value InputChannelClass) {
	return r.Channel
}

// GetChannelAsNotEmpty returns mapped value of Channel field.
func (r *ChannelsReadHistoryRequest) GetChannelAsNotEmpty() (NotEmptyInputChannel, bool) {
	return r.Channel.AsNotEmpty()
}

// GetMaxID returns value of MaxID field.
func (r *ChannelsReadHistoryRequest) GetMaxID() (value int) {
	return r.MaxID
}

// Decode implements bin.Decoder.
func (r *ChannelsReadHistoryRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode channels.readHistory#cc104937 to nil")
	}
	if err := b.ConsumeID(ChannelsReadHistoryRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode channels.readHistory#cc104937: %w", err)
	}
	{
		value, err := DecodeInputChannel(b)
		if err != nil {
			return fmt.Errorf("unable to decode channels.readHistory#cc104937: field channel: %w", err)
		}
		r.Channel = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channels.readHistory#cc104937: field max_id: %w", err)
		}
		r.MaxID = value
	}
	return nil
}

// Ensuring interfaces in compile-time for ChannelsReadHistoryRequest.
var (
	_ bin.Encoder = &ChannelsReadHistoryRequest{}
	_ bin.Decoder = &ChannelsReadHistoryRequest{}
)

// ChannelsReadHistory invokes method channels.readHistory#cc104937 returning error if any.
// Mark channel/supergroup¹ history as read
//
// Links:
//  1) https://core.telegram.org/api/channel
//
// Possible errors:
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  400 MSG_ID_INVALID: Invalid message ID provided
//
// See https://core.telegram.org/method/channels.readHistory for reference.
func (c *Client) ChannelsReadHistory(ctx context.Context, request *ChannelsReadHistoryRequest) (bool, error) {
	var result BoolBox

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
