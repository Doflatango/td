// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// ChannelsReadHistoryRequest represents TL type `channels.readHistory#cc104937`.
// Mark channel/supergroup history as read
//
// See https://core.telegram.org/method/channels.readHistory for reference.
type ChannelsReadHistoryRequest struct {
	// Channel/supergroup
	Channel InputChannelClass
	// ID of message up to which messages should be marked as read
	MaxID int
}

// ChannelsReadHistoryRequestTypeID is TL type id of ChannelsReadHistoryRequest.
const ChannelsReadHistoryRequestTypeID = 0xcc104937

// Encode implements bin.Encoder.
func (r *ChannelsReadHistoryRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode channels.readHistory#cc104937 as nil")
	}
	b.PutID(ChannelsReadHistoryRequestTypeID)
	if r.Channel == nil {
		return fmt.Errorf("unable to encode channels.readHistory#cc104937: field channel is nil")
	}
	if err := r.Channel.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channels.readHistory#cc104937: field channel: %w", err)
	}
	b.PutInt(r.MaxID)
	return nil
}

// Decode implements bin.Decoder.
func (r *ChannelsReadHistoryRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode channels.readHistory#cc104937 to nil")
	}
	if err := b.ConsumeID(ChannelsReadHistoryRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode channels.readHistory#cc104937: %w", err)
	}

	{
		value, err := DecodeInputChannel(b)
		if err != nil {
			return fmt.Errorf("unable to decode channels.readHistory#cc104937: field channel: %w", err)
		}
		r.Channel = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channels.readHistory#cc104937: field max_id: %w", err)
		}
		r.MaxID = value
	}
	return nil
}

// Ensuring interfaces in compile-time for ChannelsReadHistoryRequest.
var (
	_ bin.Encoder = &ChannelsReadHistoryRequest{}
	_ bin.Decoder = &ChannelsReadHistoryRequest{}
)

// ChannelsReadHistory invokes method channels.readHistory#cc104937 returning error if any.
// Mark channel/supergroup history as read
//
// See https://core.telegram.org/method/channels.readHistory for reference.
func (c *Client) ChannelsReadHistory(ctx context.Context, request *ChannelsReadHistoryRequest) (BoolClass, error) {
	var result BoolBox
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Bool, nil
}
