// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// StickerPack represents TL type `stickerPack#12b299d4`.
//
// See https://core.telegram.org/constructor/stickerPack for reference.
type StickerPack struct {
	// Emoticon field of StickerPack.
	Emoticon string
	// Documents field of StickerPack.
	Documents []int64
}

// StickerPackTypeID is TL type id of StickerPack.
const StickerPackTypeID = 0x12b299d4

// Encode implements bin.Encoder.
func (s *StickerPack) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode stickerPack#12b299d4 as nil")
	}
	b.PutID(StickerPackTypeID)
	b.PutString(s.Emoticon)
	b.PutVectorHeader(len(s.Documents))
	for _, v := range s.Documents {
		b.PutLong(v)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StickerPack) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode stickerPack#12b299d4 to nil")
	}
	if err := b.ConsumeID(StickerPackTypeID); err != nil {
		return fmt.Errorf("unable to decode stickerPack#12b299d4: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode stickerPack#12b299d4: field emoticon: %w", err)
		}
		s.Emoticon = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode stickerPack#12b299d4: field documents: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode stickerPack#12b299d4: field documents: %w", err)
			}
			s.Documents = append(s.Documents, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for StickerPack.
var (
	_ bin.Encoder = &StickerPack{}
	_ bin.Decoder = &StickerPack{}
)
