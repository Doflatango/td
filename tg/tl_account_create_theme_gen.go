// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// AccountCreateThemeRequest represents TL type `account.createTheme#8432c21f`.
// Create a theme
//
// See https://core.telegram.org/method/account.createTheme for reference.
type AccountCreateThemeRequest struct {
	// Flags, see TL conditional fields
	Flags bin.Fields
	// Unique theme ID
	Slug string
	// Theme name
	Title string
	// Theme file
	//
	// Use SetDocument and GetDocument helpers.
	Document InputDocumentClass
	// Theme settings
	//
	// Use SetSettings and GetSettings helpers.
	Settings InputThemeSettings
}

// AccountCreateThemeRequestTypeID is TL type id of AccountCreateThemeRequest.
const AccountCreateThemeRequestTypeID = 0x8432c21f

// Encode implements bin.Encoder.
func (c *AccountCreateThemeRequest) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode account.createTheme#8432c21f as nil")
	}
	b.PutID(AccountCreateThemeRequestTypeID)
	if err := c.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode account.createTheme#8432c21f: field flags: %w", err)
	}
	b.PutString(c.Slug)
	b.PutString(c.Title)
	if c.Flags.Has(2) {
		if c.Document == nil {
			return fmt.Errorf("unable to encode account.createTheme#8432c21f: field document is nil")
		}
		if err := c.Document.Encode(b); err != nil {
			return fmt.Errorf("unable to encode account.createTheme#8432c21f: field document: %w", err)
		}
	}
	if c.Flags.Has(3) {
		if err := c.Settings.Encode(b); err != nil {
			return fmt.Errorf("unable to encode account.createTheme#8432c21f: field settings: %w", err)
		}
	}
	return nil
}

// SetDocument sets value of Document conditional field.
func (c *AccountCreateThemeRequest) SetDocument(value InputDocumentClass) {
	c.Flags.Set(2)
	c.Document = value
}

// GetDocument returns value of Document conditional field and
// boolean which is true if field was set.
func (c *AccountCreateThemeRequest) GetDocument() (value InputDocumentClass, ok bool) {
	if !c.Flags.Has(2) {
		return value, false
	}
	return c.Document, true
}

// SetSettings sets value of Settings conditional field.
func (c *AccountCreateThemeRequest) SetSettings(value InputThemeSettings) {
	c.Flags.Set(3)
	c.Settings = value
}

// GetSettings returns value of Settings conditional field and
// boolean which is true if field was set.
func (c *AccountCreateThemeRequest) GetSettings() (value InputThemeSettings, ok bool) {
	if !c.Flags.Has(3) {
		return value, false
	}
	return c.Settings, true
}

// Decode implements bin.Decoder.
func (c *AccountCreateThemeRequest) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode account.createTheme#8432c21f to nil")
	}
	if err := b.ConsumeID(AccountCreateThemeRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode account.createTheme#8432c21f: %w", err)
	}

	{
		if err := c.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode account.createTheme#8432c21f: field flags: %w", err)
		}
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode account.createTheme#8432c21f: field slug: %w", err)
		}
		c.Slug = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode account.createTheme#8432c21f: field title: %w", err)
		}
		c.Title = value
	}
	if c.Flags.Has(2) {
		value, err := DecodeInputDocument(b)
		if err != nil {
			return fmt.Errorf("unable to decode account.createTheme#8432c21f: field document: %w", err)
		}
		c.Document = value
	}
	if c.Flags.Has(3) {
		if err := c.Settings.Decode(b); err != nil {
			return fmt.Errorf("unable to decode account.createTheme#8432c21f: field settings: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for AccountCreateThemeRequest.
var (
	_ bin.Encoder = &AccountCreateThemeRequest{}
	_ bin.Decoder = &AccountCreateThemeRequest{}
)

// AccountCreateTheme invokes method account.createTheme#8432c21f returning error if any.
// Create a theme
//
// See https://core.telegram.org/method/account.createTheme for reference.
func (c *Client) AccountCreateTheme(ctx context.Context, request *AccountCreateThemeRequest) (*Theme, error) {
	var result Theme
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
