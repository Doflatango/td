// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// AccountSetPrivacyRequest represents TL type `account.setPrivacy#c9f81ce8`.
// Change privacy settings of current account
//
// See https://core.telegram.org/method/account.setPrivacy for reference.
type AccountSetPrivacyRequest struct {
	// Peers to which the privacy rules apply
	Key InputPrivacyKeyClass
	// New privacy rules
	Rules []InputPrivacyRuleClass
}

// AccountSetPrivacyRequestTypeID is TL type id of AccountSetPrivacyRequest.
const AccountSetPrivacyRequestTypeID = 0xc9f81ce8

// Encode implements bin.Encoder.
func (s *AccountSetPrivacyRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode account.setPrivacy#c9f81ce8 as nil")
	}
	b.PutID(AccountSetPrivacyRequestTypeID)
	if s.Key == nil {
		return fmt.Errorf("unable to encode account.setPrivacy#c9f81ce8: field key is nil")
	}
	if err := s.Key.Encode(b); err != nil {
		return fmt.Errorf("unable to encode account.setPrivacy#c9f81ce8: field key: %w", err)
	}
	b.PutVectorHeader(len(s.Rules))
	for idx, v := range s.Rules {
		if v == nil {
			return fmt.Errorf("unable to encode account.setPrivacy#c9f81ce8: field rules element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode account.setPrivacy#c9f81ce8: field rules element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *AccountSetPrivacyRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode account.setPrivacy#c9f81ce8 to nil")
	}
	if err := b.ConsumeID(AccountSetPrivacyRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode account.setPrivacy#c9f81ce8: %w", err)
	}
	{
		value, err := DecodeInputPrivacyKey(b)
		if err != nil {
			return fmt.Errorf("unable to decode account.setPrivacy#c9f81ce8: field key: %w", err)
		}
		s.Key = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode account.setPrivacy#c9f81ce8: field rules: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeInputPrivacyRule(b)
			if err != nil {
				return fmt.Errorf("unable to decode account.setPrivacy#c9f81ce8: field rules: %w", err)
			}
			s.Rules = append(s.Rules, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for AccountSetPrivacyRequest.
var (
	_ bin.Encoder = &AccountSetPrivacyRequest{}
	_ bin.Decoder = &AccountSetPrivacyRequest{}
)

// AccountSetPrivacy invokes method account.setPrivacy#c9f81ce8 returning error if any.
// Change privacy settings of current account
//
// See https://core.telegram.org/method/account.setPrivacy for reference.
func (c *Client) AccountSetPrivacy(ctx context.Context, request *AccountSetPrivacyRequest) (*AccountPrivacyRules, error) {
	var result AccountPrivacyRules

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
