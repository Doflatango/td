// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// ChannelsCheckUsernameRequest represents TL type `channels.checkUsername#10e6bd2c`.
// Check if a username is free and can be assigned to a channel/supergroup
//
// See https://core.telegram.org/method/channels.checkUsername for reference.
type ChannelsCheckUsernameRequest struct {
	// The channel/supergroup that will assigned the specified username
	Channel InputChannelClass
	// The username to check
	Username string
}

// ChannelsCheckUsernameRequestTypeID is TL type id of ChannelsCheckUsernameRequest.
const ChannelsCheckUsernameRequestTypeID = 0x10e6bd2c

// Encode implements bin.Encoder.
func (c *ChannelsCheckUsernameRequest) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channels.checkUsername#10e6bd2c as nil")
	}
	b.PutID(ChannelsCheckUsernameRequestTypeID)
	if c.Channel == nil {
		return fmt.Errorf("unable to encode channels.checkUsername#10e6bd2c: field channel is nil")
	}
	if err := c.Channel.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channels.checkUsername#10e6bd2c: field channel: %w", err)
	}
	b.PutString(c.Username)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelsCheckUsernameRequest) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channels.checkUsername#10e6bd2c to nil")
	}
	if err := b.ConsumeID(ChannelsCheckUsernameRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode channels.checkUsername#10e6bd2c: %w", err)
	}
	{
		value, err := DecodeInputChannel(b)
		if err != nil {
			return fmt.Errorf("unable to decode channels.checkUsername#10e6bd2c: field channel: %w", err)
		}
		c.Channel = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channels.checkUsername#10e6bd2c: field username: %w", err)
		}
		c.Username = value
	}
	return nil
}

// Ensuring interfaces in compile-time for ChannelsCheckUsernameRequest.
var (
	_ bin.Encoder = &ChannelsCheckUsernameRequest{}
	_ bin.Decoder = &ChannelsCheckUsernameRequest{}
)

// ChannelsCheckUsername invokes method channels.checkUsername#10e6bd2c returning error if any.
// Check if a username is free and can be assigned to a channel/supergroup
//
// See https://core.telegram.org/method/channels.checkUsername for reference.
func (c *Client) ChannelsCheckUsername(ctx context.Context, request *ChannelsCheckUsernameRequest) (BoolClass, error) {
	var result BoolBox
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Bool, nil
}
