// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// AccountCancelPasswordEmailRequest represents TL type `account.cancelPasswordEmail#c1cbd5b6`.
// Cancel the code that was sent to verify an email to use as 2FA recovery method.
//
// See https://core.telegram.org/method/account.cancelPasswordEmail for reference.
type AccountCancelPasswordEmailRequest struct {
}

// AccountCancelPasswordEmailRequestTypeID is TL type id of AccountCancelPasswordEmailRequest.
const AccountCancelPasswordEmailRequestTypeID = 0xc1cbd5b6

// Encode implements bin.Encoder.
func (c *AccountCancelPasswordEmailRequest) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode account.cancelPasswordEmail#c1cbd5b6 as nil")
	}
	b.PutID(AccountCancelPasswordEmailRequestTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (c *AccountCancelPasswordEmailRequest) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode account.cancelPasswordEmail#c1cbd5b6 to nil")
	}
	if err := b.ConsumeID(AccountCancelPasswordEmailRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode account.cancelPasswordEmail#c1cbd5b6: %w", err)
	}
	return nil
}

// Ensuring interfaces in compile-time for AccountCancelPasswordEmailRequest.
var (
	_ bin.Encoder = &AccountCancelPasswordEmailRequest{}
	_ bin.Decoder = &AccountCancelPasswordEmailRequest{}
)

// AccountCancelPasswordEmail invokes method account.cancelPasswordEmail#c1cbd5b6 returning error if any.
// Cancel the code that was sent to verify an email to use as 2FA recovery method.
//
// See https://core.telegram.org/method/account.cancelPasswordEmail for reference.
func (c *Client) AccountCancelPasswordEmail(ctx context.Context) (bool, error) {
	var result BoolBox

	request := &AccountCancelPasswordEmailRequest{}
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
