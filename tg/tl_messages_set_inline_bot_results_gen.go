// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesSetInlineBotResultsRequest represents TL type `messages.setInlineBotResults#eb5ea206`.
type MessagesSetInlineBotResultsRequest struct {
	// Flags field of MessagesSetInlineBotResultsRequest.
	Flags bin.Fields
	// Gallery field of MessagesSetInlineBotResultsRequest.
	Gallery bool
	// Private field of MessagesSetInlineBotResultsRequest.
	Private bool
	// QueryID field of MessagesSetInlineBotResultsRequest.
	QueryID int64
	// Results field of MessagesSetInlineBotResultsRequest.
	Results []InputBotInlineResultClass
	// CacheTime field of MessagesSetInlineBotResultsRequest.
	CacheTime int
	// NextOffset field of MessagesSetInlineBotResultsRequest.
	//
	// Use SetNextOffset and GetNextOffset helpers.
	NextOffset string
	// SwitchPm field of MessagesSetInlineBotResultsRequest.
	//
	// Use SetSwitchPm and GetSwitchPm helpers.
	SwitchPm InlineBotSwitchPM
}

// MessagesSetInlineBotResultsRequestTypeID is TL type id of MessagesSetInlineBotResultsRequest.
const MessagesSetInlineBotResultsRequestTypeID = 0xeb5ea206

// Encode implements bin.Encoder.
func (s *MessagesSetInlineBotResultsRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode messages.setInlineBotResults#eb5ea206 as nil")
	}
	b.PutID(MessagesSetInlineBotResultsRequestTypeID)
	if err := s.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.setInlineBotResults#eb5ea206: field flags: %w", err)
	}
	b.PutLong(s.QueryID)
	b.PutVectorHeader(len(s.Results))
	for idx, v := range s.Results {
		if v == nil {
			return fmt.Errorf("unable to encode messages.setInlineBotResults#eb5ea206: field results element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.setInlineBotResults#eb5ea206: field results element with index %d: %w", idx, err)
		}
	}
	b.PutInt(s.CacheTime)
	if s.Flags.Has(2) {
		b.PutString(s.NextOffset)
	}
	if s.Flags.Has(3) {
		if err := s.SwitchPm.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.setInlineBotResults#eb5ea206: field switch_pm: %w", err)
		}
	}
	return nil
}

// SetGallery sets value of Gallery conditional field.
func (s *MessagesSetInlineBotResultsRequest) SetGallery(value bool) {
	if value {
		s.Flags.Set(0)
	} else {
		s.Flags.Unset(0)
	}
}

// SetPrivate sets value of Private conditional field.
func (s *MessagesSetInlineBotResultsRequest) SetPrivate(value bool) {
	if value {
		s.Flags.Set(1)
	} else {
		s.Flags.Unset(1)
	}
}

// SetNextOffset sets value of NextOffset conditional field.
func (s *MessagesSetInlineBotResultsRequest) SetNextOffset(value string) {
	s.Flags.Set(2)
	s.NextOffset = value
}

// GetNextOffset returns value of NextOffset conditional field and
// boolean which is true if field was set.
func (s *MessagesSetInlineBotResultsRequest) GetNextOffset() (value string, ok bool) {
	if !s.Flags.Has(2) {
		return value, false
	}
	return s.NextOffset, true
}

// SetSwitchPm sets value of SwitchPm conditional field.
func (s *MessagesSetInlineBotResultsRequest) SetSwitchPm(value InlineBotSwitchPM) {
	s.Flags.Set(3)
	s.SwitchPm = value
}

// GetSwitchPm returns value of SwitchPm conditional field and
// boolean which is true if field was set.
func (s *MessagesSetInlineBotResultsRequest) GetSwitchPm() (value InlineBotSwitchPM, ok bool) {
	if !s.Flags.Has(3) {
		return value, false
	}
	return s.SwitchPm, true
}

// Decode implements bin.Decoder.
func (s *MessagesSetInlineBotResultsRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode messages.setInlineBotResults#eb5ea206 to nil")
	}
	if err := b.ConsumeID(MessagesSetInlineBotResultsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.setInlineBotResults#eb5ea206: %w", err)
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.setInlineBotResults#eb5ea206: field flags: %w", err)
		}
	}
	s.Gallery = s.Flags.Has(0)
	s.Private = s.Flags.Has(1)
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode messages.setInlineBotResults#eb5ea206: field query_id: %w", err)
		}
		s.QueryID = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.setInlineBotResults#eb5ea206: field results: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeInputBotInlineResult(b)
			if err != nil {
				return fmt.Errorf("unable to decode messages.setInlineBotResults#eb5ea206: field results: %w", err)
			}
			s.Results = append(s.Results, value)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.setInlineBotResults#eb5ea206: field cache_time: %w", err)
		}
		s.CacheTime = value
	}
	if s.Flags.Has(2) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messages.setInlineBotResults#eb5ea206: field next_offset: %w", err)
		}
		s.NextOffset = value
	}
	if s.Flags.Has(3) {
		if err := s.SwitchPm.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.setInlineBotResults#eb5ea206: field switch_pm: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesSetInlineBotResultsRequest.
var (
	_ bin.Encoder = &MessagesSetInlineBotResultsRequest{}
	_ bin.Decoder = &MessagesSetInlineBotResultsRequest{}
)
