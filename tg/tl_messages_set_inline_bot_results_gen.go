// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// MessagesSetInlineBotResultsRequest represents TL type `messages.setInlineBotResults#eb5ea206`.
// Answer an inline query, for bots only
//
// See https://core.telegram.org/method/messages.setInlineBotResults for reference.
type MessagesSetInlineBotResultsRequest struct {
	// Flags, see TL conditional fields¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// Set this flag if the results are composed of media files
	Gallery bool
	// Set this flag if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
	Private bool
	// Unique identifier for the answered query
	QueryID int64
	// Vector of results for the inline query
	Results []InputBotInlineResultClass
	// The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
	CacheTime int
	// Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don‘t support pagination. Offset length can’t exceed 64 bytes.
	//
	// Use SetNextOffset and GetNextOffset helpers.
	NextOffset string
	// If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with a certain parameter.
	//
	// Use SetSwitchPm and GetSwitchPm helpers.
	SwitchPm InlineBotSwitchPM
}

// MessagesSetInlineBotResultsRequestTypeID is TL type id of MessagesSetInlineBotResultsRequest.
const MessagesSetInlineBotResultsRequestTypeID = 0xeb5ea206

// String implements fmt.Stringer.
func (s *MessagesSetInlineBotResultsRequest) String() string {
	if s == nil {
		return "MessagesSetInlineBotResultsRequest(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessagesSetInlineBotResultsRequest")
	sb.WriteString("{\n")
	sb.WriteString("\tFlags: ")
	sb.WriteString(s.Flags.String())
	sb.WriteString(",\n")
	sb.WriteString("\tQueryID: ")
	sb.WriteString(fmt.Sprint(s.QueryID))
	sb.WriteString(",\n")
	sb.WriteByte('[')
	for _, v := range s.Results {
		sb.WriteString(fmt.Sprint(v))
	}
	sb.WriteByte(']')
	sb.WriteString("\tCacheTime: ")
	sb.WriteString(fmt.Sprint(s.CacheTime))
	sb.WriteString(",\n")
	if s.Flags.Has(2) {
		sb.WriteString("\tNextOffset: ")
		sb.WriteString(fmt.Sprint(s.NextOffset))
		sb.WriteString(",\n")
	}
	if s.Flags.Has(3) {
		sb.WriteString("\tSwitchPm: ")
		sb.WriteString(s.SwitchPm.String())
		sb.WriteString(",\n")
	}
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (s *MessagesSetInlineBotResultsRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode messages.setInlineBotResults#eb5ea206 as nil")
	}
	b.PutID(MessagesSetInlineBotResultsRequestTypeID)
	if err := s.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.setInlineBotResults#eb5ea206: field flags: %w", err)
	}
	b.PutLong(s.QueryID)
	b.PutVectorHeader(len(s.Results))
	for idx, v := range s.Results {
		if v == nil {
			return fmt.Errorf("unable to encode messages.setInlineBotResults#eb5ea206: field results element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.setInlineBotResults#eb5ea206: field results element with index %d: %w", idx, err)
		}
	}
	b.PutInt(s.CacheTime)
	if s.Flags.Has(2) {
		b.PutString(s.NextOffset)
	}
	if s.Flags.Has(3) {
		if err := s.SwitchPm.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.setInlineBotResults#eb5ea206: field switch_pm: %w", err)
		}
	}
	return nil
}

// SetGallery sets value of Gallery conditional field.
func (s *MessagesSetInlineBotResultsRequest) SetGallery(value bool) {
	if value {
		s.Flags.Set(0)
	} else {
		s.Flags.Unset(0)
	}
}

// SetPrivate sets value of Private conditional field.
func (s *MessagesSetInlineBotResultsRequest) SetPrivate(value bool) {
	if value {
		s.Flags.Set(1)
	} else {
		s.Flags.Unset(1)
	}
}

// SetNextOffset sets value of NextOffset conditional field.
func (s *MessagesSetInlineBotResultsRequest) SetNextOffset(value string) {
	s.Flags.Set(2)
	s.NextOffset = value
}

// GetNextOffset returns value of NextOffset conditional field and
// boolean which is true if field was set.
func (s *MessagesSetInlineBotResultsRequest) GetNextOffset() (value string, ok bool) {
	if !s.Flags.Has(2) {
		return value, false
	}
	return s.NextOffset, true
}

// SetSwitchPm sets value of SwitchPm conditional field.
func (s *MessagesSetInlineBotResultsRequest) SetSwitchPm(value InlineBotSwitchPM) {
	s.Flags.Set(3)
	s.SwitchPm = value
}

// GetSwitchPm returns value of SwitchPm conditional field and
// boolean which is true if field was set.
func (s *MessagesSetInlineBotResultsRequest) GetSwitchPm() (value InlineBotSwitchPM, ok bool) {
	if !s.Flags.Has(3) {
		return value, false
	}
	return s.SwitchPm, true
}

// Decode implements bin.Decoder.
func (s *MessagesSetInlineBotResultsRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode messages.setInlineBotResults#eb5ea206 to nil")
	}
	if err := b.ConsumeID(MessagesSetInlineBotResultsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.setInlineBotResults#eb5ea206: %w", err)
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.setInlineBotResults#eb5ea206: field flags: %w", err)
		}
	}
	s.Gallery = s.Flags.Has(0)
	s.Private = s.Flags.Has(1)
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode messages.setInlineBotResults#eb5ea206: field query_id: %w", err)
		}
		s.QueryID = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.setInlineBotResults#eb5ea206: field results: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeInputBotInlineResult(b)
			if err != nil {
				return fmt.Errorf("unable to decode messages.setInlineBotResults#eb5ea206: field results: %w", err)
			}
			s.Results = append(s.Results, value)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.setInlineBotResults#eb5ea206: field cache_time: %w", err)
		}
		s.CacheTime = value
	}
	if s.Flags.Has(2) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messages.setInlineBotResults#eb5ea206: field next_offset: %w", err)
		}
		s.NextOffset = value
	}
	if s.Flags.Has(3) {
		if err := s.SwitchPm.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.setInlineBotResults#eb5ea206: field switch_pm: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesSetInlineBotResultsRequest.
var (
	_ bin.Encoder = &MessagesSetInlineBotResultsRequest{}
	_ bin.Decoder = &MessagesSetInlineBotResultsRequest{}
)

// MessagesSetInlineBotResults invokes method messages.setInlineBotResults#eb5ea206 returning error if any.
// Answer an inline query, for bots only
//
// See https://core.telegram.org/method/messages.setInlineBotResults for reference.
func (c *Client) MessagesSetInlineBotResults(ctx context.Context, request *MessagesSetInlineBotResultsRequest) (bool, error) {
	var result BoolBox

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
