// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// Theme represents TL type `theme#28f1114`.
// Theme
//
// See https://core.telegram.org/constructor/theme for reference.
type Theme struct {
	// Flags, see TL conditional fieldsÂ¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// Whether the current user is the creator of this theme
	Creator bool
	// Whether this is the default theme
	Default bool
	// Theme ID
	ID int64
	// Theme access hash
	AccessHash int64
	// Unique theme ID
	Slug string
	// Theme name
	Title string
	// Theme
	//
	// Use SetDocument and GetDocument helpers.
	Document DocumentClass
	// Theme settings
	//
	// Use SetSettings and GetSettings helpers.
	Settings ThemeSettings
	// Installation count
	InstallsCount int
}

// ThemeTypeID is TL type id of Theme.
const ThemeTypeID = 0x28f1114

// String implements fmt.Stringer.
func (t *Theme) String() string {
	if t == nil {
		return "Theme(nil)"
	}
	var sb strings.Builder
	sb.WriteString("Theme")
	sb.WriteString("{\n")
	sb.WriteString("\tFlags: ")
	sb.WriteString(t.Flags.String())
	sb.WriteString(",\n")
	sb.WriteString("\tID: ")
	sb.WriteString(fmt.Sprint(t.ID))
	sb.WriteString(",\n")
	sb.WriteString("\tAccessHash: ")
	sb.WriteString(fmt.Sprint(t.AccessHash))
	sb.WriteString(",\n")
	sb.WriteString("\tSlug: ")
	sb.WriteString(fmt.Sprint(t.Slug))
	sb.WriteString(",\n")
	sb.WriteString("\tTitle: ")
	sb.WriteString(fmt.Sprint(t.Title))
	sb.WriteString(",\n")
	if t.Flags.Has(2) {
		sb.WriteString("\tDocument: ")
		sb.WriteString(t.Document.String())
		sb.WriteString(",\n")
	}
	if t.Flags.Has(3) {
		sb.WriteString("\tSettings: ")
		sb.WriteString(t.Settings.String())
		sb.WriteString(",\n")
	}
	sb.WriteString("\tInstallsCount: ")
	sb.WriteString(fmt.Sprint(t.InstallsCount))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (t *Theme) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode theme#28f1114 as nil")
	}
	b.PutID(ThemeTypeID)
	if err := t.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode theme#28f1114: field flags: %w", err)
	}
	b.PutLong(t.ID)
	b.PutLong(t.AccessHash)
	b.PutString(t.Slug)
	b.PutString(t.Title)
	if t.Flags.Has(2) {
		if t.Document == nil {
			return fmt.Errorf("unable to encode theme#28f1114: field document is nil")
		}
		if err := t.Document.Encode(b); err != nil {
			return fmt.Errorf("unable to encode theme#28f1114: field document: %w", err)
		}
	}
	if t.Flags.Has(3) {
		if err := t.Settings.Encode(b); err != nil {
			return fmt.Errorf("unable to encode theme#28f1114: field settings: %w", err)
		}
	}
	b.PutInt(t.InstallsCount)
	return nil
}

// SetCreator sets value of Creator conditional field.
func (t *Theme) SetCreator(value bool) {
	if value {
		t.Flags.Set(0)
	} else {
		t.Flags.Unset(0)
	}
}

// SetDefault sets value of Default conditional field.
func (t *Theme) SetDefault(value bool) {
	if value {
		t.Flags.Set(1)
	} else {
		t.Flags.Unset(1)
	}
}

// SetDocument sets value of Document conditional field.
func (t *Theme) SetDocument(value DocumentClass) {
	t.Flags.Set(2)
	t.Document = value
}

// GetDocument returns value of Document conditional field and
// boolean which is true if field was set.
func (t *Theme) GetDocument() (value DocumentClass, ok bool) {
	if !t.Flags.Has(2) {
		return value, false
	}
	return t.Document, true
}

// SetSettings sets value of Settings conditional field.
func (t *Theme) SetSettings(value ThemeSettings) {
	t.Flags.Set(3)
	t.Settings = value
}

// GetSettings returns value of Settings conditional field and
// boolean which is true if field was set.
func (t *Theme) GetSettings() (value ThemeSettings, ok bool) {
	if !t.Flags.Has(3) {
		return value, false
	}
	return t.Settings, true
}

// Decode implements bin.Decoder.
func (t *Theme) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode theme#28f1114 to nil")
	}
	if err := b.ConsumeID(ThemeTypeID); err != nil {
		return fmt.Errorf("unable to decode theme#28f1114: %w", err)
	}
	{
		if err := t.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode theme#28f1114: field flags: %w", err)
		}
	}
	t.Creator = t.Flags.Has(0)
	t.Default = t.Flags.Has(1)
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode theme#28f1114: field id: %w", err)
		}
		t.ID = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode theme#28f1114: field access_hash: %w", err)
		}
		t.AccessHash = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode theme#28f1114: field slug: %w", err)
		}
		t.Slug = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode theme#28f1114: field title: %w", err)
		}
		t.Title = value
	}
	if t.Flags.Has(2) {
		value, err := DecodeDocument(b)
		if err != nil {
			return fmt.Errorf("unable to decode theme#28f1114: field document: %w", err)
		}
		t.Document = value
	}
	if t.Flags.Has(3) {
		if err := t.Settings.Decode(b); err != nil {
			return fmt.Errorf("unable to decode theme#28f1114: field settings: %w", err)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode theme#28f1114: field installs_count: %w", err)
		}
		t.InstallsCount = value
	}
	return nil
}

// Ensuring interfaces in compile-time for Theme.
var (
	_ bin.Encoder = &Theme{}
	_ bin.Decoder = &Theme{}
)
