// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// Page represents TL type `page#98657f0d`.
type Page struct {
	// Flags field of Page.
	Flags bin.Fields
	// Part field of Page.
	Part bool
	// Rtl field of Page.
	Rtl bool
	// V2 field of Page.
	V2 bool
	// URL field of Page.
	URL string
	// Blocks field of Page.
	Blocks []PageBlockClass
	// Photos field of Page.
	Photos []PhotoClass
	// Documents field of Page.
	Documents []DocumentClass
	// Views field of Page.
	//
	// Use SetViews and GetViews helpers.
	Views int
}

// PageTypeID is TL type id of Page.
const PageTypeID = 0x98657f0d

// Encode implements bin.Encoder.
func (p *Page) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode page#98657f0d as nil")
	}
	b.PutID(PageTypeID)
	if err := p.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode page#98657f0d: field flags: %w", err)
	}
	b.PutString(p.URL)
	b.PutVectorHeader(len(p.Blocks))
	for idx, v := range p.Blocks {
		if v == nil {
			return fmt.Errorf("unable to encode page#98657f0d: field blocks element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode page#98657f0d: field blocks element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(p.Photos))
	for idx, v := range p.Photos {
		if v == nil {
			return fmt.Errorf("unable to encode page#98657f0d: field photos element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode page#98657f0d: field photos element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(p.Documents))
	for idx, v := range p.Documents {
		if v == nil {
			return fmt.Errorf("unable to encode page#98657f0d: field documents element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode page#98657f0d: field documents element with index %d: %w", idx, err)
		}
	}
	if p.Flags.Has(3) {
		b.PutInt(p.Views)
	}
	return nil
}

// SetPart sets value of Part conditional field.
func (p *Page) SetPart(value bool) {
	if value {
		p.Flags.Set(0)
	} else {
		p.Flags.Unset(0)
	}
}

// SetRtl sets value of Rtl conditional field.
func (p *Page) SetRtl(value bool) {
	if value {
		p.Flags.Set(1)
	} else {
		p.Flags.Unset(1)
	}
}

// SetV2 sets value of V2 conditional field.
func (p *Page) SetV2(value bool) {
	if value {
		p.Flags.Set(2)
	} else {
		p.Flags.Unset(2)
	}
}

// SetViews sets value of Views conditional field.
func (p *Page) SetViews(value int) {
	p.Flags.Set(3)
	p.Views = value
}

// GetViews returns value of Views conditional field and
// boolean which is true if field was set.
func (p *Page) GetViews() (value int, ok bool) {
	if !p.Flags.Has(3) {
		return value, false
	}
	return p.Views, true
}

// Decode implements bin.Decoder.
func (p *Page) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode page#98657f0d to nil")
	}
	if err := b.ConsumeID(PageTypeID); err != nil {
		return fmt.Errorf("unable to decode page#98657f0d: %w", err)
	}
	{
		if err := p.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode page#98657f0d: field flags: %w", err)
		}
	}
	p.Part = p.Flags.Has(0)
	p.Rtl = p.Flags.Has(1)
	p.V2 = p.Flags.Has(2)
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode page#98657f0d: field url: %w", err)
		}
		p.URL = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode page#98657f0d: field blocks: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodePageBlock(b)
			if err != nil {
				return fmt.Errorf("unable to decode page#98657f0d: field blocks: %w", err)
			}
			p.Blocks = append(p.Blocks, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode page#98657f0d: field photos: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodePhoto(b)
			if err != nil {
				return fmt.Errorf("unable to decode page#98657f0d: field photos: %w", err)
			}
			p.Photos = append(p.Photos, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode page#98657f0d: field documents: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeDocument(b)
			if err != nil {
				return fmt.Errorf("unable to decode page#98657f0d: field documents: %w", err)
			}
			p.Documents = append(p.Documents, value)
		}
	}
	if p.Flags.Has(3) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode page#98657f0d: field views: %w", err)
		}
		p.Views = value
	}
	return nil
}

// Ensuring interfaces in compile-time for Page.
var (
	_ bin.Encoder = &Page{}
	_ bin.Decoder = &Page{}
)
