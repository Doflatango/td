// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// MessagesEditChatTitleRequest represents TL type `messages.editChatTitle#dc452855`.
// Chanages chat name and sends a service message on it.
//
// See https://core.telegram.org/method/messages.editChatTitle for reference.
type MessagesEditChatTitleRequest struct {
	// Chat ID
	ChatID int
	// New chat name, different from the old one
	Title string
}

// MessagesEditChatTitleRequestTypeID is TL type id of MessagesEditChatTitleRequest.
const MessagesEditChatTitleRequestTypeID = 0xdc452855

// String implements fmt.Stringer.
func (e *MessagesEditChatTitleRequest) String() string {
	if e == nil {
		return "MessagesEditChatTitleRequest(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessagesEditChatTitleRequest")
	sb.WriteString("{\n")
	sb.WriteString("\tChatID: ")
	sb.WriteString(fmt.Sprint(e.ChatID))
	sb.WriteString(",\n")
	sb.WriteString("\tTitle: ")
	sb.WriteString(fmt.Sprint(e.Title))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (e *MessagesEditChatTitleRequest) Encode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode messages.editChatTitle#dc452855 as nil")
	}
	b.PutID(MessagesEditChatTitleRequestTypeID)
	b.PutInt(e.ChatID)
	b.PutString(e.Title)
	return nil
}

// Decode implements bin.Decoder.
func (e *MessagesEditChatTitleRequest) Decode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode messages.editChatTitle#dc452855 to nil")
	}
	if err := b.ConsumeID(MessagesEditChatTitleRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.editChatTitle#dc452855: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.editChatTitle#dc452855: field chat_id: %w", err)
		}
		e.ChatID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messages.editChatTitle#dc452855: field title: %w", err)
		}
		e.Title = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesEditChatTitleRequest.
var (
	_ bin.Encoder = &MessagesEditChatTitleRequest{}
	_ bin.Decoder = &MessagesEditChatTitleRequest{}
)

// MessagesEditChatTitle invokes method messages.editChatTitle#dc452855 returning error if any.
// Chanages chat name and sends a service message on it.
//
// Possible errors:
//  400 CHAT_ID_INVALID: The provided chat id is invalid
//  400 CHAT_NOT_MODIFIED: The pinned message wasn't modified
//  400 CHAT_TITLE_EMPTY: No chat title provided
//  400 PEER_ID_INVALID: The provided peer id is invalid
//
// See https://core.telegram.org/method/messages.editChatTitle for reference.
// Can be used by bots.
func (c *Client) MessagesEditChatTitle(ctx context.Context, request *MessagesEditChatTitleRequest) (UpdatesClass, error) {
	var result UpdatesBox

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
