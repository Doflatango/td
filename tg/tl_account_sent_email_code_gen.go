// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// AccountSentEmailCode represents TL type `account.sentEmailCode#811f854f`.
// The sent email code
//
// See https://core.telegram.org/constructor/account.sentEmailCode for reference.
type AccountSentEmailCode struct {
	// The email (to which the code was sent) must match this patternÂ¹
	//
	// Links:
	//  1) https://core.telegram.org/api/pattern
	EmailPattern string
	// The length of the verification code
	Length int
}

// AccountSentEmailCodeTypeID is TL type id of AccountSentEmailCode.
const AccountSentEmailCodeTypeID = 0x811f854f

// String implements fmt.Stringer.
func (s *AccountSentEmailCode) String() string {
	if s == nil {
		return "AccountSentEmailCode(nil)"
	}
	var sb strings.Builder
	sb.WriteString("AccountSentEmailCode")
	sb.WriteString("{\n")
	sb.WriteString("\tEmailPattern: ")
	sb.WriteString(fmt.Sprint(s.EmailPattern))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(s.Length))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (s *AccountSentEmailCode) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode account.sentEmailCode#811f854f as nil")
	}
	b.PutID(AccountSentEmailCodeTypeID)
	b.PutString(s.EmailPattern)
	b.PutInt(s.Length)
	return nil
}

// Decode implements bin.Decoder.
func (s *AccountSentEmailCode) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode account.sentEmailCode#811f854f to nil")
	}
	if err := b.ConsumeID(AccountSentEmailCodeTypeID); err != nil {
		return fmt.Errorf("unable to decode account.sentEmailCode#811f854f: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode account.sentEmailCode#811f854f: field email_pattern: %w", err)
		}
		s.EmailPattern = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode account.sentEmailCode#811f854f: field length: %w", err)
		}
		s.Length = value
	}
	return nil
}

// Ensuring interfaces in compile-time for AccountSentEmailCode.
var (
	_ bin.Encoder = &AccountSentEmailCode{}
	_ bin.Decoder = &AccountSentEmailCode{}
)
