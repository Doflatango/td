// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesGetPollVotesRequest represents TL type `messages.getPollVotes#b86e380e`.
type MessagesGetPollVotesRequest struct {
	// Flags field of MessagesGetPollVotesRequest.
	Flags bin.Fields
	// Peer field of MessagesGetPollVotesRequest.
	Peer InputPeerClass
	// ID field of MessagesGetPollVotesRequest.
	ID int
	// Option field of MessagesGetPollVotesRequest.
	//
	// Use SetOption and GetOption helpers.
	Option []byte
	// Offset field of MessagesGetPollVotesRequest.
	//
	// Use SetOffset and GetOffset helpers.
	Offset string
	// Limit field of MessagesGetPollVotesRequest.
	Limit int
}

// MessagesGetPollVotesRequestTypeID is TL type id of MessagesGetPollVotesRequest.
const MessagesGetPollVotesRequestTypeID = 0xb86e380e

// Encode implements bin.Encoder.
func (g *MessagesGetPollVotesRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode messages.getPollVotes#b86e380e as nil")
	}
	b.PutID(MessagesGetPollVotesRequestTypeID)
	if err := g.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.getPollVotes#b86e380e: field flags: %w", err)
	}
	if g.Peer == nil {
		return fmt.Errorf("unable to encode messages.getPollVotes#b86e380e: field peer is nil")
	}
	if err := g.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.getPollVotes#b86e380e: field peer: %w", err)
	}
	b.PutInt(g.ID)
	if g.Flags.Has(0) {
		b.PutBytes(g.Option)
	}
	if g.Flags.Has(1) {
		b.PutString(g.Offset)
	}
	b.PutInt(g.Limit)
	return nil
}

// SetOption sets value of Option conditional field.
func (g *MessagesGetPollVotesRequest) SetOption(value []byte) {
	g.Flags.Set(0)
	g.Option = value
}

// GetOption returns value of Option conditional field and
// boolean which is true if field was set.
func (g *MessagesGetPollVotesRequest) GetOption() (value []byte, ok bool) {
	if !g.Flags.Has(0) {
		return value, false
	}
	return g.Option, true
}

// SetOffset sets value of Offset conditional field.
func (g *MessagesGetPollVotesRequest) SetOffset(value string) {
	g.Flags.Set(1)
	g.Offset = value
}

// GetOffset returns value of Offset conditional field and
// boolean which is true if field was set.
func (g *MessagesGetPollVotesRequest) GetOffset() (value string, ok bool) {
	if !g.Flags.Has(1) {
		return value, false
	}
	return g.Offset, true
}

// Decode implements bin.Decoder.
func (g *MessagesGetPollVotesRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode messages.getPollVotes#b86e380e to nil")
	}
	if err := b.ConsumeID(MessagesGetPollVotesRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.getPollVotes#b86e380e: %w", err)
	}
	{
		if err := g.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.getPollVotes#b86e380e: field flags: %w", err)
		}
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.getPollVotes#b86e380e: field peer: %w", err)
		}
		g.Peer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getPollVotes#b86e380e: field id: %w", err)
		}
		g.ID = value
	}
	if g.Flags.Has(0) {
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getPollVotes#b86e380e: field option: %w", err)
		}
		g.Option = value
	}
	if g.Flags.Has(1) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getPollVotes#b86e380e: field offset: %w", err)
		}
		g.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getPollVotes#b86e380e: field limit: %w", err)
		}
		g.Limit = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesGetPollVotesRequest.
var (
	_ bin.Encoder = &MessagesGetPollVotesRequest{}
	_ bin.Decoder = &MessagesGetPollVotesRequest{}
)
