// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// AuthLogOutRequest represents TL type `auth.logOut#5717da40`.
// Logs out the user.
//
// See https://core.telegram.org/method/auth.logOut for reference.
type AuthLogOutRequest struct {
}

// AuthLogOutRequestTypeID is TL type id of AuthLogOutRequest.
const AuthLogOutRequestTypeID = 0x5717da40

func (l *AuthLogOutRequest) Zero() bool {
	if l == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (l *AuthLogOutRequest) String() string {
	if l == nil {
		return "AuthLogOutRequest(nil)"
	}
	type Alias AuthLogOutRequest
	return fmt.Sprintf("AuthLogOutRequest%+v", Alias(*l))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (l *AuthLogOutRequest) TypeID() uint32 {
	return AuthLogOutRequestTypeID
}

// TypeName returns name of type in TL schema.
func (l *AuthLogOutRequest) TypeName() string {
	return "auth.logOut"
}

// Encode implements bin.Encoder.
func (l *AuthLogOutRequest) Encode(b *bin.Buffer) error {
	if l == nil {
		return fmt.Errorf("can't encode auth.logOut#5717da40 as nil")
	}
	b.PutID(AuthLogOutRequestTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (l *AuthLogOutRequest) Decode(b *bin.Buffer) error {
	if l == nil {
		return fmt.Errorf("can't decode auth.logOut#5717da40 to nil")
	}
	if err := b.ConsumeID(AuthLogOutRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode auth.logOut#5717da40: %w", err)
	}
	return nil
}

// Ensuring interfaces in compile-time for AuthLogOutRequest.
var (
	_ bin.Encoder = &AuthLogOutRequest{}
	_ bin.Decoder = &AuthLogOutRequest{}
)

// AuthLogOut invokes method auth.logOut#5717da40 returning error if any.
// Logs out the user.
//
// See https://core.telegram.org/method/auth.logOut for reference.
// Can be used by bots.
func (c *Client) AuthLogOut(ctx context.Context) (bool, error) {
	var result BoolBox

	request := &AuthLogOutRequest{}
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
