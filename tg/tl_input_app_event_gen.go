// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// InputAppEvent represents TL type `inputAppEvent#1d1b1245`.
// Event that occured in the application.
//
// See https://core.telegram.org/constructor/inputAppEvent for reference.
type InputAppEvent struct {
	// Client's exact timestamp for the event
	Time float64
	// Type of event
	Type string
	// Arbitrary numeric value for more convenient selection of certain event types, or events referring to a certain object
	Peer int64
	// Details of the event
	Data JSONValueClass
}

// InputAppEventTypeID is TL type id of InputAppEvent.
const InputAppEventTypeID = 0x1d1b1245

// String implements fmt.Stringer.
func (i *InputAppEvent) String() string {
	if i == nil {
		return "InputAppEvent(nil)"
	}
	var sb strings.Builder
	sb.WriteString("InputAppEvent")
	sb.WriteString("{\n")
	sb.WriteString("\tTime: ")
	sb.WriteString(fmt.Sprint(i.Time))
	sb.WriteString(",\n")
	sb.WriteString("\tType: ")
	sb.WriteString(fmt.Sprint(i.Type))
	sb.WriteString(",\n")
	sb.WriteString("\tPeer: ")
	sb.WriteString(fmt.Sprint(i.Peer))
	sb.WriteString(",\n")
	sb.WriteString("\tData: ")
	sb.WriteString(i.Data.String())
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (i *InputAppEvent) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputAppEvent#1d1b1245 as nil")
	}
	b.PutID(InputAppEventTypeID)
	b.PutDouble(i.Time)
	b.PutString(i.Type)
	b.PutLong(i.Peer)
	if i.Data == nil {
		return fmt.Errorf("unable to encode inputAppEvent#1d1b1245: field data is nil")
	}
	if err := i.Data.Encode(b); err != nil {
		return fmt.Errorf("unable to encode inputAppEvent#1d1b1245: field data: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (i *InputAppEvent) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputAppEvent#1d1b1245 to nil")
	}
	if err := b.ConsumeID(InputAppEventTypeID); err != nil {
		return fmt.Errorf("unable to decode inputAppEvent#1d1b1245: %w", err)
	}
	{
		value, err := b.Double()
		if err != nil {
			return fmt.Errorf("unable to decode inputAppEvent#1d1b1245: field time: %w", err)
		}
		i.Time = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode inputAppEvent#1d1b1245: field type: %w", err)
		}
		i.Type = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode inputAppEvent#1d1b1245: field peer: %w", err)
		}
		i.Peer = value
	}
	{
		value, err := DecodeJSONValue(b)
		if err != nil {
			return fmt.Errorf("unable to decode inputAppEvent#1d1b1245: field data: %w", err)
		}
		i.Data = value
	}
	return nil
}

// Ensuring interfaces in compile-time for InputAppEvent.
var (
	_ bin.Encoder = &InputAppEvent{}
	_ bin.Decoder = &InputAppEvent{}
)
