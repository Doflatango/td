// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// AuthExportLoginTokenRequest represents TL type `auth.exportLoginToken#b1b41517`.
// Generate a login token, for login via QR code.
// The generated login token should be encoded using base64url, then shown as a tg://login?token=base64encodedtoken URL in the QR code.
// For more info, see login via QR code.
//
// See https://core.telegram.org/method/auth.exportLoginToken for reference.
type AuthExportLoginTokenRequest struct {
	// Application identifier (see. App configuration)
	APIID int
	// Application identifier hash (see. App configuration)
	APIHash string
	// List of already logged-in user IDs, to prevent logging in twice with the same user
	ExceptIds []int
}

// AuthExportLoginTokenRequestTypeID is TL type id of AuthExportLoginTokenRequest.
const AuthExportLoginTokenRequestTypeID = 0xb1b41517

// String implements fmt.Stringer.
func (e *AuthExportLoginTokenRequest) String() string {
	if e == nil {
		return "AuthExportLoginTokenRequest(nil)"
	}
	var sb strings.Builder
	sb.WriteString("AuthExportLoginTokenRequest")
	sb.WriteString("{\n")
	sb.WriteString("\tAPIID: ")
	sb.WriteString(fmt.Sprint(e.APIID))
	sb.WriteString(",\n")
	sb.WriteString("\tAPIHash: ")
	sb.WriteString(fmt.Sprint(e.APIHash))
	sb.WriteString(",\n")
	sb.WriteByte('[')
	for _, v := range e.ExceptIds {
		sb.WriteString(fmt.Sprint(v))
	}
	sb.WriteByte(']')
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (e *AuthExportLoginTokenRequest) Encode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode auth.exportLoginToken#b1b41517 as nil")
	}
	b.PutID(AuthExportLoginTokenRequestTypeID)
	b.PutInt(e.APIID)
	b.PutString(e.APIHash)
	b.PutVectorHeader(len(e.ExceptIds))
	for _, v := range e.ExceptIds {
		b.PutInt(v)
	}
	return nil
}

// Decode implements bin.Decoder.
func (e *AuthExportLoginTokenRequest) Decode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode auth.exportLoginToken#b1b41517 to nil")
	}
	if err := b.ConsumeID(AuthExportLoginTokenRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode auth.exportLoginToken#b1b41517: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode auth.exportLoginToken#b1b41517: field api_id: %w", err)
		}
		e.APIID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode auth.exportLoginToken#b1b41517: field api_hash: %w", err)
		}
		e.APIHash = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode auth.exportLoginToken#b1b41517: field except_ids: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Int()
			if err != nil {
				return fmt.Errorf("unable to decode auth.exportLoginToken#b1b41517: field except_ids: %w", err)
			}
			e.ExceptIds = append(e.ExceptIds, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for AuthExportLoginTokenRequest.
var (
	_ bin.Encoder = &AuthExportLoginTokenRequest{}
	_ bin.Decoder = &AuthExportLoginTokenRequest{}
)

// AuthExportLoginToken invokes method auth.exportLoginToken#b1b41517 returning error if any.
// Generate a login token, for login via QR code.
// The generated login token should be encoded using base64url, then shown as a tg://login?token=base64encodedtoken URL in the QR code.
// For more info, see login via QR code.
//
// See https://core.telegram.org/method/auth.exportLoginToken for reference.
func (c *Client) AuthExportLoginToken(ctx context.Context, request *AuthExportLoginTokenRequest) (AuthLoginTokenClass, error) {
	var result AuthLoginTokenBox

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.LoginToken, nil
}
