// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// HelpRecentMeUrls represents TL type `help.recentMeUrls#e0310d7`.
// Recent t.me URLs
//
// See https://core.telegram.org/constructor/help.recentMeUrls for reference.
type HelpRecentMeUrls struct {
	// URLs
	Urls []RecentMeUrlClass `tl:"urls"`
	// Chats
	Chats []ChatClass `tl:"chats"`
	// Users
	Users []UserClass `tl:"users"`
}

// HelpRecentMeUrlsTypeID is TL type id of HelpRecentMeUrls.
const HelpRecentMeUrlsTypeID = 0xe0310d7

func (r *HelpRecentMeUrls) Zero() bool {
	if r == nil {
		return true
	}
	if !(r.Urls == nil) {
		return false
	}
	if !(r.Chats == nil) {
		return false
	}
	if !(r.Users == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (r *HelpRecentMeUrls) String() string {
	if r == nil {
		return "HelpRecentMeUrls(nil)"
	}
	type Alias HelpRecentMeUrls
	return fmt.Sprintf("HelpRecentMeUrls%+v", Alias(*r))
}

// FillFrom fills HelpRecentMeUrls from given interface.
func (r *HelpRecentMeUrls) FillFrom(from interface {
	GetUrls() (value []RecentMeUrlClass)
	GetChats() (value []ChatClass)
	GetUsers() (value []UserClass)
}) {
	r.Urls = from.GetUrls()
	r.Chats = from.GetChats()
	r.Users = from.GetUsers()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (r *HelpRecentMeUrls) TypeID() uint32 {
	return HelpRecentMeUrlsTypeID
}

// TypeName returns name of type in TL schema.
func (r *HelpRecentMeUrls) TypeName() string {
	return "help.recentMeUrls"
}

// Encode implements bin.Encoder.
func (r *HelpRecentMeUrls) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode help.recentMeUrls#e0310d7 as nil")
	}
	b.PutID(HelpRecentMeUrlsTypeID)
	b.PutVectorHeader(len(r.Urls))
	for idx, v := range r.Urls {
		if v == nil {
			return fmt.Errorf("unable to encode help.recentMeUrls#e0310d7: field urls element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode help.recentMeUrls#e0310d7: field urls element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(r.Chats))
	for idx, v := range r.Chats {
		if v == nil {
			return fmt.Errorf("unable to encode help.recentMeUrls#e0310d7: field chats element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode help.recentMeUrls#e0310d7: field chats element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(r.Users))
	for idx, v := range r.Users {
		if v == nil {
			return fmt.Errorf("unable to encode help.recentMeUrls#e0310d7: field users element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode help.recentMeUrls#e0310d7: field users element with index %d: %w", idx, err)
		}
	}
	return nil
}

// GetUrls returns value of Urls field.
func (r *HelpRecentMeUrls) GetUrls() (value []RecentMeUrlClass) {
	return r.Urls
}

// MapUrls returns field Urls wrapped in RecentMeUrlClassSlice helper.
func (r *HelpRecentMeUrls) MapUrls() (value RecentMeUrlClassSlice) {
	return RecentMeUrlClassSlice(r.Urls)
}

// GetChats returns value of Chats field.
func (r *HelpRecentMeUrls) GetChats() (value []ChatClass) {
	return r.Chats
}

// MapChats returns field Chats wrapped in ChatClassSlice helper.
func (r *HelpRecentMeUrls) MapChats() (value ChatClassSlice) {
	return ChatClassSlice(r.Chats)
}

// GetUsers returns value of Users field.
func (r *HelpRecentMeUrls) GetUsers() (value []UserClass) {
	return r.Users
}

// MapUsers returns field Users wrapped in UserClassSlice helper.
func (r *HelpRecentMeUrls) MapUsers() (value UserClassSlice) {
	return UserClassSlice(r.Users)
}

// Decode implements bin.Decoder.
func (r *HelpRecentMeUrls) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode help.recentMeUrls#e0310d7 to nil")
	}
	if err := b.ConsumeID(HelpRecentMeUrlsTypeID); err != nil {
		return fmt.Errorf("unable to decode help.recentMeUrls#e0310d7: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode help.recentMeUrls#e0310d7: field urls: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeRecentMeUrl(b)
			if err != nil {
				return fmt.Errorf("unable to decode help.recentMeUrls#e0310d7: field urls: %w", err)
			}
			r.Urls = append(r.Urls, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode help.recentMeUrls#e0310d7: field chats: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeChat(b)
			if err != nil {
				return fmt.Errorf("unable to decode help.recentMeUrls#e0310d7: field chats: %w", err)
			}
			r.Chats = append(r.Chats, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode help.recentMeUrls#e0310d7: field users: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(b)
			if err != nil {
				return fmt.Errorf("unable to decode help.recentMeUrls#e0310d7: field users: %w", err)
			}
			r.Users = append(r.Users, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for HelpRecentMeUrls.
var (
	_ bin.Encoder = &HelpRecentMeUrls{}
	_ bin.Decoder = &HelpRecentMeUrls{}
)
