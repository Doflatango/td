// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// ReplyKeyboardHide represents TL type `replyKeyboardHide#a03e5b85`.
type ReplyKeyboardHide struct {
	// Flags field of ReplyKeyboardHide.
	Flags bin.Fields
	// Selective field of ReplyKeyboardHide.
	Selective bool
}

// ReplyKeyboardHideTypeID is TL type id of ReplyKeyboardHide.
const ReplyKeyboardHideTypeID = 0xa03e5b85

// Encode implements bin.Encoder.
func (r *ReplyKeyboardHide) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode replyKeyboardHide#a03e5b85 as nil")
	}
	b.PutID(ReplyKeyboardHideTypeID)
	if err := r.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode replyKeyboardHide#a03e5b85: field flags: %w", err)
	}
	return nil
}

// SetSelective sets value of Selective conditional field.
func (r *ReplyKeyboardHide) SetSelective(value bool) {
	if value {
		r.Flags.Set(2)
	} else {
		r.Flags.Unset(2)
	}
}

// Decode implements bin.Decoder.
func (r *ReplyKeyboardHide) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode replyKeyboardHide#a03e5b85 to nil")
	}
	if err := b.ConsumeID(ReplyKeyboardHideTypeID); err != nil {
		return fmt.Errorf("unable to decode replyKeyboardHide#a03e5b85: %w", err)
	}
	{
		if err := r.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode replyKeyboardHide#a03e5b85: field flags: %w", err)
		}
	}
	r.Selective = r.Flags.Has(2)
	return nil
}

// construct implements constructor of ReplyMarkupClass.
func (r ReplyKeyboardHide) construct() ReplyMarkupClass { return &r }

// Ensuring interfaces in compile-time for ReplyKeyboardHide.
var (
	_ bin.Encoder = &ReplyKeyboardHide{}
	_ bin.Decoder = &ReplyKeyboardHide{}

	_ ReplyMarkupClass = &ReplyKeyboardHide{}
)

// ReplyKeyboardForceReply represents TL type `replyKeyboardForceReply#f4108aa0`.
type ReplyKeyboardForceReply struct {
	// Flags field of ReplyKeyboardForceReply.
	Flags bin.Fields
	// SingleUse field of ReplyKeyboardForceReply.
	SingleUse bool
	// Selective field of ReplyKeyboardForceReply.
	Selective bool
}

// ReplyKeyboardForceReplyTypeID is TL type id of ReplyKeyboardForceReply.
const ReplyKeyboardForceReplyTypeID = 0xf4108aa0

// Encode implements bin.Encoder.
func (r *ReplyKeyboardForceReply) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode replyKeyboardForceReply#f4108aa0 as nil")
	}
	b.PutID(ReplyKeyboardForceReplyTypeID)
	if err := r.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode replyKeyboardForceReply#f4108aa0: field flags: %w", err)
	}
	return nil
}

// SetSingleUse sets value of SingleUse conditional field.
func (r *ReplyKeyboardForceReply) SetSingleUse(value bool) {
	if value {
		r.Flags.Set(1)
	} else {
		r.Flags.Unset(1)
	}
}

// SetSelective sets value of Selective conditional field.
func (r *ReplyKeyboardForceReply) SetSelective(value bool) {
	if value {
		r.Flags.Set(2)
	} else {
		r.Flags.Unset(2)
	}
}

// Decode implements bin.Decoder.
func (r *ReplyKeyboardForceReply) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode replyKeyboardForceReply#f4108aa0 to nil")
	}
	if err := b.ConsumeID(ReplyKeyboardForceReplyTypeID); err != nil {
		return fmt.Errorf("unable to decode replyKeyboardForceReply#f4108aa0: %w", err)
	}
	{
		if err := r.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode replyKeyboardForceReply#f4108aa0: field flags: %w", err)
		}
	}
	r.SingleUse = r.Flags.Has(1)
	r.Selective = r.Flags.Has(2)
	return nil
}

// construct implements constructor of ReplyMarkupClass.
func (r ReplyKeyboardForceReply) construct() ReplyMarkupClass { return &r }

// Ensuring interfaces in compile-time for ReplyKeyboardForceReply.
var (
	_ bin.Encoder = &ReplyKeyboardForceReply{}
	_ bin.Decoder = &ReplyKeyboardForceReply{}

	_ ReplyMarkupClass = &ReplyKeyboardForceReply{}
)

// ReplyKeyboardMarkup represents TL type `replyKeyboardMarkup#3502758c`.
type ReplyKeyboardMarkup struct {
	// Flags field of ReplyKeyboardMarkup.
	Flags bin.Fields
	// Resize field of ReplyKeyboardMarkup.
	Resize bool
	// SingleUse field of ReplyKeyboardMarkup.
	SingleUse bool
	// Selective field of ReplyKeyboardMarkup.
	Selective bool
	// Rows field of ReplyKeyboardMarkup.
	Rows []KeyboardButtonRow
}

// ReplyKeyboardMarkupTypeID is TL type id of ReplyKeyboardMarkup.
const ReplyKeyboardMarkupTypeID = 0x3502758c

// Encode implements bin.Encoder.
func (r *ReplyKeyboardMarkup) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode replyKeyboardMarkup#3502758c as nil")
	}
	b.PutID(ReplyKeyboardMarkupTypeID)
	if err := r.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode replyKeyboardMarkup#3502758c: field flags: %w", err)
	}
	b.PutVectorHeader(len(r.Rows))
	for idx, v := range r.Rows {
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode replyKeyboardMarkup#3502758c: field rows element with index %d: %w", idx, err)
		}
	}
	return nil
}

// SetResize sets value of Resize conditional field.
func (r *ReplyKeyboardMarkup) SetResize(value bool) {
	if value {
		r.Flags.Set(0)
	} else {
		r.Flags.Unset(0)
	}
}

// SetSingleUse sets value of SingleUse conditional field.
func (r *ReplyKeyboardMarkup) SetSingleUse(value bool) {
	if value {
		r.Flags.Set(1)
	} else {
		r.Flags.Unset(1)
	}
}

// SetSelective sets value of Selective conditional field.
func (r *ReplyKeyboardMarkup) SetSelective(value bool) {
	if value {
		r.Flags.Set(2)
	} else {
		r.Flags.Unset(2)
	}
}

// Decode implements bin.Decoder.
func (r *ReplyKeyboardMarkup) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode replyKeyboardMarkup#3502758c to nil")
	}
	if err := b.ConsumeID(ReplyKeyboardMarkupTypeID); err != nil {
		return fmt.Errorf("unable to decode replyKeyboardMarkup#3502758c: %w", err)
	}
	{
		if err := r.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode replyKeyboardMarkup#3502758c: field flags: %w", err)
		}
	}
	r.Resize = r.Flags.Has(0)
	r.SingleUse = r.Flags.Has(1)
	r.Selective = r.Flags.Has(2)
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode replyKeyboardMarkup#3502758c: field rows: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value KeyboardButtonRow
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode replyKeyboardMarkup#3502758c: field rows: %w", err)
			}
			r.Rows = append(r.Rows, value)
		}
	}
	return nil
}

// construct implements constructor of ReplyMarkupClass.
func (r ReplyKeyboardMarkup) construct() ReplyMarkupClass { return &r }

// Ensuring interfaces in compile-time for ReplyKeyboardMarkup.
var (
	_ bin.Encoder = &ReplyKeyboardMarkup{}
	_ bin.Decoder = &ReplyKeyboardMarkup{}

	_ ReplyMarkupClass = &ReplyKeyboardMarkup{}
)

// ReplyInlineMarkup represents TL type `replyInlineMarkup#48a30254`.
type ReplyInlineMarkup struct {
	// Rows field of ReplyInlineMarkup.
	Rows []KeyboardButtonRow
}

// ReplyInlineMarkupTypeID is TL type id of ReplyInlineMarkup.
const ReplyInlineMarkupTypeID = 0x48a30254

// Encode implements bin.Encoder.
func (r *ReplyInlineMarkup) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode replyInlineMarkup#48a30254 as nil")
	}
	b.PutID(ReplyInlineMarkupTypeID)
	b.PutVectorHeader(len(r.Rows))
	for idx, v := range r.Rows {
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode replyInlineMarkup#48a30254: field rows element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (r *ReplyInlineMarkup) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode replyInlineMarkup#48a30254 to nil")
	}
	if err := b.ConsumeID(ReplyInlineMarkupTypeID); err != nil {
		return fmt.Errorf("unable to decode replyInlineMarkup#48a30254: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode replyInlineMarkup#48a30254: field rows: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value KeyboardButtonRow
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode replyInlineMarkup#48a30254: field rows: %w", err)
			}
			r.Rows = append(r.Rows, value)
		}
	}
	return nil
}

// construct implements constructor of ReplyMarkupClass.
func (r ReplyInlineMarkup) construct() ReplyMarkupClass { return &r }

// Ensuring interfaces in compile-time for ReplyInlineMarkup.
var (
	_ bin.Encoder = &ReplyInlineMarkup{}
	_ bin.Decoder = &ReplyInlineMarkup{}

	_ ReplyMarkupClass = &ReplyInlineMarkup{}
)

// ReplyMarkupClass represents ReplyMarkup generic type.
//
// Example:
//  g, err := DecodeReplyMarkup(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *ReplyKeyboardHide: // replyKeyboardHide#a03e5b85
//  case *ReplyKeyboardForceReply: // replyKeyboardForceReply#f4108aa0
//  case *ReplyKeyboardMarkup: // replyKeyboardMarkup#3502758c
//  case *ReplyInlineMarkup: // replyInlineMarkup#48a30254
//  default: panic(v)
//  }
type ReplyMarkupClass interface {
	bin.Encoder
	bin.Decoder
	construct() ReplyMarkupClass
}

// DecodeReplyMarkup implements binary de-serialization for ReplyMarkupClass.
func DecodeReplyMarkup(buf *bin.Buffer) (ReplyMarkupClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case ReplyKeyboardHideTypeID:
		// Decoding replyKeyboardHide#a03e5b85.
		v := ReplyKeyboardHide{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ReplyMarkupClass: %w", err)
		}
		return &v, nil
	case ReplyKeyboardForceReplyTypeID:
		// Decoding replyKeyboardForceReply#f4108aa0.
		v := ReplyKeyboardForceReply{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ReplyMarkupClass: %w", err)
		}
		return &v, nil
	case ReplyKeyboardMarkupTypeID:
		// Decoding replyKeyboardMarkup#3502758c.
		v := ReplyKeyboardMarkup{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ReplyMarkupClass: %w", err)
		}
		return &v, nil
	case ReplyInlineMarkupTypeID:
		// Decoding replyInlineMarkup#48a30254.
		v := ReplyInlineMarkup{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ReplyMarkupClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode ReplyMarkupClass: %w", bin.NewUnexpectedID(id))
	}
}
