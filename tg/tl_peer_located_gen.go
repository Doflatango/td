// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// PeerLocated represents TL type `peerLocated#ca461b5d`.
// Peer geolocated nearby
//
// See https://core.telegram.org/constructor/peerLocated for reference.
type PeerLocated struct {
	// Peer
	Peer PeerClass
	// Validity period of current data
	Expires int
	// Distance from the peer in meters
	Distance int
}

// PeerLocatedTypeID is TL type id of PeerLocated.
const PeerLocatedTypeID = 0xca461b5d

// String implements fmt.Stringer.
func (p *PeerLocated) String() string {
	if p == nil {
		return "PeerLocated(nil)"
	}
	var sb strings.Builder
	sb.WriteString("PeerLocated")
	sb.WriteString("{\n")
	sb.WriteString("\tPeer: ")
	sb.WriteString(p.Peer.String())
	sb.WriteString(",\n")
	sb.WriteString("\tExpires: ")
	sb.WriteString(fmt.Sprint(p.Expires))
	sb.WriteString(",\n")
	sb.WriteString("\tDistance: ")
	sb.WriteString(fmt.Sprint(p.Distance))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (p *PeerLocated) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode peerLocated#ca461b5d as nil")
	}
	b.PutID(PeerLocatedTypeID)
	if p.Peer == nil {
		return fmt.Errorf("unable to encode peerLocated#ca461b5d: field peer is nil")
	}
	if err := p.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode peerLocated#ca461b5d: field peer: %w", err)
	}
	b.PutInt(p.Expires)
	b.PutInt(p.Distance)
	return nil
}

// Decode implements bin.Decoder.
func (p *PeerLocated) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode peerLocated#ca461b5d to nil")
	}
	if err := b.ConsumeID(PeerLocatedTypeID); err != nil {
		return fmt.Errorf("unable to decode peerLocated#ca461b5d: %w", err)
	}
	{
		value, err := DecodePeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode peerLocated#ca461b5d: field peer: %w", err)
		}
		p.Peer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode peerLocated#ca461b5d: field expires: %w", err)
		}
		p.Expires = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode peerLocated#ca461b5d: field distance: %w", err)
		}
		p.Distance = value
	}
	return nil
}

// construct implements constructor of PeerLocatedClass.
func (p PeerLocated) construct() PeerLocatedClass { return &p }

// Ensuring interfaces in compile-time for PeerLocated.
var (
	_ bin.Encoder = &PeerLocated{}
	_ bin.Decoder = &PeerLocated{}

	_ PeerLocatedClass = &PeerLocated{}
)

// PeerSelfLocated represents TL type `peerSelfLocated#f8ec284b`.
// Current peer
//
// See https://core.telegram.org/constructor/peerSelfLocated for reference.
type PeerSelfLocated struct {
	// Expiry of geolocation info for current peer
	Expires int
}

// PeerSelfLocatedTypeID is TL type id of PeerSelfLocated.
const PeerSelfLocatedTypeID = 0xf8ec284b

// String implements fmt.Stringer.
func (p *PeerSelfLocated) String() string {
	if p == nil {
		return "PeerSelfLocated(nil)"
	}
	var sb strings.Builder
	sb.WriteString("PeerSelfLocated")
	sb.WriteString("{\n")
	sb.WriteString("\tExpires: ")
	sb.WriteString(fmt.Sprint(p.Expires))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (p *PeerSelfLocated) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode peerSelfLocated#f8ec284b as nil")
	}
	b.PutID(PeerSelfLocatedTypeID)
	b.PutInt(p.Expires)
	return nil
}

// Decode implements bin.Decoder.
func (p *PeerSelfLocated) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode peerSelfLocated#f8ec284b to nil")
	}
	if err := b.ConsumeID(PeerSelfLocatedTypeID); err != nil {
		return fmt.Errorf("unable to decode peerSelfLocated#f8ec284b: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode peerSelfLocated#f8ec284b: field expires: %w", err)
		}
		p.Expires = value
	}
	return nil
}

// construct implements constructor of PeerLocatedClass.
func (p PeerSelfLocated) construct() PeerLocatedClass { return &p }

// Ensuring interfaces in compile-time for PeerSelfLocated.
var (
	_ bin.Encoder = &PeerSelfLocated{}
	_ bin.Decoder = &PeerSelfLocated{}

	_ PeerLocatedClass = &PeerSelfLocated{}
)

// PeerLocatedClass represents PeerLocated generic type.
//
// See https://core.telegram.org/type/PeerLocated for reference.
//
// Example:
//  g, err := DecodePeerLocated(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *PeerLocated: // peerLocated#ca461b5d
//  case *PeerSelfLocated: // peerSelfLocated#f8ec284b
//  default: panic(v)
//  }
type PeerLocatedClass interface {
	bin.Encoder
	bin.Decoder
	construct() PeerLocatedClass
	fmt.Stringer
}

// DecodePeerLocated implements binary de-serialization for PeerLocatedClass.
func DecodePeerLocated(buf *bin.Buffer) (PeerLocatedClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case PeerLocatedTypeID:
		// Decoding peerLocated#ca461b5d.
		v := PeerLocated{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode PeerLocatedClass: %w", err)
		}
		return &v, nil
	case PeerSelfLocatedTypeID:
		// Decoding peerSelfLocated#f8ec284b.
		v := PeerSelfLocated{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode PeerLocatedClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode PeerLocatedClass: %w", bin.NewUnexpectedID(id))
	}
}

// PeerLocated boxes the PeerLocatedClass providing a helper.
type PeerLocatedBox struct {
	PeerLocated PeerLocatedClass
}

// Decode implements bin.Decoder for PeerLocatedBox.
func (b *PeerLocatedBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode PeerLocatedBox to nil")
	}
	v, err := DecodePeerLocated(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.PeerLocated = v
	return nil
}

// Encode implements bin.Encode for PeerLocatedBox.
func (b *PeerLocatedBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.PeerLocated == nil {
		return fmt.Errorf("unable to encode PeerLocatedClass as nil")
	}
	return b.PeerLocated.Encode(buf)
}
