// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesReceivedMessagesRequest represents TL type `messages.receivedMessages#5a954c0`.
// Confirms receipt of messages by a client, cancels PUSH-notification sending.
//
// See https://core.telegram.org/method/messages.receivedMessages for reference.
type MessagesReceivedMessagesRequest struct {
	// Maximum message ID available in a client.
	MaxID int
}

// MessagesReceivedMessagesRequestTypeID is TL type id of MessagesReceivedMessagesRequest.
const MessagesReceivedMessagesRequestTypeID = 0x5a954c0

// Encode implements bin.Encoder.
func (r *MessagesReceivedMessagesRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode messages.receivedMessages#5a954c0 as nil")
	}
	b.PutID(MessagesReceivedMessagesRequestTypeID)
	b.PutInt(r.MaxID)
	return nil
}

// Decode implements bin.Decoder.
func (r *MessagesReceivedMessagesRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode messages.receivedMessages#5a954c0 to nil")
	}
	if err := b.ConsumeID(MessagesReceivedMessagesRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.receivedMessages#5a954c0: %w", err)
	}

	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.receivedMessages#5a954c0: field max_id: %w", err)
		}
		r.MaxID = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesReceivedMessagesRequest.
var (
	_ bin.Encoder = &MessagesReceivedMessagesRequest{}
	_ bin.Decoder = &MessagesReceivedMessagesRequest{}
)

// MessagesReceivedMessages invokes method messages.receivedMessages#5a954c0 returning error if any.
// Confirms receipt of messages by a client, cancels PUSH-notification sending.
//
// See https://core.telegram.org/method/messages.receivedMessages for reference.
func (c *Client) MessagesReceivedMessages(ctx context.Context, request *MessagesReceivedMessagesRequest) (*ReceivedNotifyMessageVector, error) {
	var result ReceivedNotifyMessageVector
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
