// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// GroupCallParticipant represents TL type `groupCallParticipant#64c62a15`.
//
// See https://core.telegram.org/constructor/groupCallParticipant for reference.
type GroupCallParticipant struct {
	// Flags field of GroupCallParticipant.
	Flags bin.Fields `tl:"flags"`
	// Muted field of GroupCallParticipant.
	Muted bool `tl:"muted"`
	// Left field of GroupCallParticipant.
	Left bool `tl:"left"`
	// CanSelfUnmute field of GroupCallParticipant.
	CanSelfUnmute bool `tl:"can_self_unmute"`
	// JustJoined field of GroupCallParticipant.
	JustJoined bool `tl:"just_joined"`
	// Versioned field of GroupCallParticipant.
	Versioned bool `tl:"versioned"`
	// Min field of GroupCallParticipant.
	Min bool `tl:"min"`
	// MutedByYou field of GroupCallParticipant.
	MutedByYou bool `tl:"muted_by_you"`
	// VolumeByAdmin field of GroupCallParticipant.
	VolumeByAdmin bool `tl:"volume_by_admin"`
	// UserID field of GroupCallParticipant.
	UserID int `tl:"user_id"`
	// Date field of GroupCallParticipant.
	Date int `tl:"date"`
	// ActiveDate field of GroupCallParticipant.
	//
	// Use SetActiveDate and GetActiveDate helpers.
	ActiveDate int `tl:"active_date"`
	// Source field of GroupCallParticipant.
	Source int `tl:"source"`
	// Volume field of GroupCallParticipant.
	//
	// Use SetVolume and GetVolume helpers.
	Volume int `tl:"volume"`
}

// GroupCallParticipantTypeID is TL type id of GroupCallParticipant.
const GroupCallParticipantTypeID = 0x64c62a15

func (g *GroupCallParticipant) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.Flags.Zero()) {
		return false
	}
	if !(g.Muted == false) {
		return false
	}
	if !(g.Left == false) {
		return false
	}
	if !(g.CanSelfUnmute == false) {
		return false
	}
	if !(g.JustJoined == false) {
		return false
	}
	if !(g.Versioned == false) {
		return false
	}
	if !(g.Min == false) {
		return false
	}
	if !(g.MutedByYou == false) {
		return false
	}
	if !(g.VolumeByAdmin == false) {
		return false
	}
	if !(g.UserID == 0) {
		return false
	}
	if !(g.Date == 0) {
		return false
	}
	if !(g.ActiveDate == 0) {
		return false
	}
	if !(g.Source == 0) {
		return false
	}
	if !(g.Volume == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *GroupCallParticipant) String() string {
	if g == nil {
		return "GroupCallParticipant(nil)"
	}
	type Alias GroupCallParticipant
	return fmt.Sprintf("GroupCallParticipant%+v", Alias(*g))
}

// FillFrom fills GroupCallParticipant from given interface.
func (g *GroupCallParticipant) FillFrom(from interface {
	GetMuted() (value bool)
	GetLeft() (value bool)
	GetCanSelfUnmute() (value bool)
	GetJustJoined() (value bool)
	GetVersioned() (value bool)
	GetMin() (value bool)
	GetMutedByYou() (value bool)
	GetVolumeByAdmin() (value bool)
	GetUserID() (value int)
	GetDate() (value int)
	GetActiveDate() (value int, ok bool)
	GetSource() (value int)
	GetVolume() (value int, ok bool)
}) {
	g.Muted = from.GetMuted()
	g.Left = from.GetLeft()
	g.CanSelfUnmute = from.GetCanSelfUnmute()
	g.JustJoined = from.GetJustJoined()
	g.Versioned = from.GetVersioned()
	g.Min = from.GetMin()
	g.MutedByYou = from.GetMutedByYou()
	g.VolumeByAdmin = from.GetVolumeByAdmin()
	g.UserID = from.GetUserID()
	g.Date = from.GetDate()
	if val, ok := from.GetActiveDate(); ok {
		g.ActiveDate = val
	}

	g.Source = from.GetSource()
	if val, ok := from.GetVolume(); ok {
		g.Volume = val
	}

}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (g *GroupCallParticipant) TypeID() uint32 {
	return GroupCallParticipantTypeID
}

// TypeName returns name of type in TL schema.
func (g *GroupCallParticipant) TypeName() string {
	return "groupCallParticipant"
}

// Encode implements bin.Encoder.
func (g *GroupCallParticipant) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode groupCallParticipant#64c62a15 as nil")
	}
	b.PutID(GroupCallParticipantTypeID)
	if !(g.Muted == false) {
		g.Flags.Set(0)
	}
	if !(g.Left == false) {
		g.Flags.Set(1)
	}
	if !(g.CanSelfUnmute == false) {
		g.Flags.Set(2)
	}
	if !(g.JustJoined == false) {
		g.Flags.Set(4)
	}
	if !(g.Versioned == false) {
		g.Flags.Set(5)
	}
	if !(g.Min == false) {
		g.Flags.Set(8)
	}
	if !(g.MutedByYou == false) {
		g.Flags.Set(9)
	}
	if !(g.VolumeByAdmin == false) {
		g.Flags.Set(10)
	}
	if !(g.ActiveDate == 0) {
		g.Flags.Set(3)
	}
	if !(g.Volume == 0) {
		g.Flags.Set(7)
	}
	if err := g.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode groupCallParticipant#64c62a15: field flags: %w", err)
	}
	b.PutInt(g.UserID)
	b.PutInt(g.Date)
	if g.Flags.Has(3) {
		b.PutInt(g.ActiveDate)
	}
	b.PutInt(g.Source)
	if g.Flags.Has(7) {
		b.PutInt(g.Volume)
	}
	return nil
}

// SetMuted sets value of Muted conditional field.
func (g *GroupCallParticipant) SetMuted(value bool) {
	if value {
		g.Flags.Set(0)
		g.Muted = true
	} else {
		g.Flags.Unset(0)
		g.Muted = false
	}
}

// GetMuted returns value of Muted conditional field.
func (g *GroupCallParticipant) GetMuted() (value bool) {
	return g.Flags.Has(0)
}

// SetLeft sets value of Left conditional field.
func (g *GroupCallParticipant) SetLeft(value bool) {
	if value {
		g.Flags.Set(1)
		g.Left = true
	} else {
		g.Flags.Unset(1)
		g.Left = false
	}
}

// GetLeft returns value of Left conditional field.
func (g *GroupCallParticipant) GetLeft() (value bool) {
	return g.Flags.Has(1)
}

// SetCanSelfUnmute sets value of CanSelfUnmute conditional field.
func (g *GroupCallParticipant) SetCanSelfUnmute(value bool) {
	if value {
		g.Flags.Set(2)
		g.CanSelfUnmute = true
	} else {
		g.Flags.Unset(2)
		g.CanSelfUnmute = false
	}
}

// GetCanSelfUnmute returns value of CanSelfUnmute conditional field.
func (g *GroupCallParticipant) GetCanSelfUnmute() (value bool) {
	return g.Flags.Has(2)
}

// SetJustJoined sets value of JustJoined conditional field.
func (g *GroupCallParticipant) SetJustJoined(value bool) {
	if value {
		g.Flags.Set(4)
		g.JustJoined = true
	} else {
		g.Flags.Unset(4)
		g.JustJoined = false
	}
}

// GetJustJoined returns value of JustJoined conditional field.
func (g *GroupCallParticipant) GetJustJoined() (value bool) {
	return g.Flags.Has(4)
}

// SetVersioned sets value of Versioned conditional field.
func (g *GroupCallParticipant) SetVersioned(value bool) {
	if value {
		g.Flags.Set(5)
		g.Versioned = true
	} else {
		g.Flags.Unset(5)
		g.Versioned = false
	}
}

// GetVersioned returns value of Versioned conditional field.
func (g *GroupCallParticipant) GetVersioned() (value bool) {
	return g.Flags.Has(5)
}

// SetMin sets value of Min conditional field.
func (g *GroupCallParticipant) SetMin(value bool) {
	if value {
		g.Flags.Set(8)
		g.Min = true
	} else {
		g.Flags.Unset(8)
		g.Min = false
	}
}

// GetMin returns value of Min conditional field.
func (g *GroupCallParticipant) GetMin() (value bool) {
	return g.Flags.Has(8)
}

// SetMutedByYou sets value of MutedByYou conditional field.
func (g *GroupCallParticipant) SetMutedByYou(value bool) {
	if value {
		g.Flags.Set(9)
		g.MutedByYou = true
	} else {
		g.Flags.Unset(9)
		g.MutedByYou = false
	}
}

// GetMutedByYou returns value of MutedByYou conditional field.
func (g *GroupCallParticipant) GetMutedByYou() (value bool) {
	return g.Flags.Has(9)
}

// SetVolumeByAdmin sets value of VolumeByAdmin conditional field.
func (g *GroupCallParticipant) SetVolumeByAdmin(value bool) {
	if value {
		g.Flags.Set(10)
		g.VolumeByAdmin = true
	} else {
		g.Flags.Unset(10)
		g.VolumeByAdmin = false
	}
}

// GetVolumeByAdmin returns value of VolumeByAdmin conditional field.
func (g *GroupCallParticipant) GetVolumeByAdmin() (value bool) {
	return g.Flags.Has(10)
}

// GetUserID returns value of UserID field.
func (g *GroupCallParticipant) GetUserID() (value int) {
	return g.UserID
}

// GetDate returns value of Date field.
func (g *GroupCallParticipant) GetDate() (value int) {
	return g.Date
}

// SetActiveDate sets value of ActiveDate conditional field.
func (g *GroupCallParticipant) SetActiveDate(value int) {
	g.Flags.Set(3)
	g.ActiveDate = value
}

// GetActiveDate returns value of ActiveDate conditional field and
// boolean which is true if field was set.
func (g *GroupCallParticipant) GetActiveDate() (value int, ok bool) {
	if !g.Flags.Has(3) {
		return value, false
	}
	return g.ActiveDate, true
}

// GetSource returns value of Source field.
func (g *GroupCallParticipant) GetSource() (value int) {
	return g.Source
}

// SetVolume sets value of Volume conditional field.
func (g *GroupCallParticipant) SetVolume(value int) {
	g.Flags.Set(7)
	g.Volume = value
}

// GetVolume returns value of Volume conditional field and
// boolean which is true if field was set.
func (g *GroupCallParticipant) GetVolume() (value int, ok bool) {
	if !g.Flags.Has(7) {
		return value, false
	}
	return g.Volume, true
}

// Decode implements bin.Decoder.
func (g *GroupCallParticipant) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode groupCallParticipant#64c62a15 to nil")
	}
	if err := b.ConsumeID(GroupCallParticipantTypeID); err != nil {
		return fmt.Errorf("unable to decode groupCallParticipant#64c62a15: %w", err)
	}
	{
		if err := g.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode groupCallParticipant#64c62a15: field flags: %w", err)
		}
	}
	g.Muted = g.Flags.Has(0)
	g.Left = g.Flags.Has(1)
	g.CanSelfUnmute = g.Flags.Has(2)
	g.JustJoined = g.Flags.Has(4)
	g.Versioned = g.Flags.Has(5)
	g.Min = g.Flags.Has(8)
	g.MutedByYou = g.Flags.Has(9)
	g.VolumeByAdmin = g.Flags.Has(10)
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode groupCallParticipant#64c62a15: field user_id: %w", err)
		}
		g.UserID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode groupCallParticipant#64c62a15: field date: %w", err)
		}
		g.Date = value
	}
	if g.Flags.Has(3) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode groupCallParticipant#64c62a15: field active_date: %w", err)
		}
		g.ActiveDate = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode groupCallParticipant#64c62a15: field source: %w", err)
		}
		g.Source = value
	}
	if g.Flags.Has(7) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode groupCallParticipant#64c62a15: field volume: %w", err)
		}
		g.Volume = value
	}
	return nil
}

// Ensuring interfaces in compile-time for GroupCallParticipant.
var (
	_ bin.Encoder = &GroupCallParticipant{}
	_ bin.Decoder = &GroupCallParticipant{}
)
