// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// InputUserEmpty represents TL type `inputUserEmpty#b98886cf`.
// Empty constructor, does not define a user.
//
// See https://core.telegram.org/constructor/inputUserEmpty for reference.
type InputUserEmpty struct {
}

// InputUserEmptyTypeID is TL type id of InputUserEmpty.
const InputUserEmptyTypeID = 0xb98886cf

func (i *InputUserEmpty) Zero() bool {
	if i == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (i *InputUserEmpty) String() string {
	if i == nil {
		return "InputUserEmpty(nil)"
	}
	var sb strings.Builder
	sb.WriteString("InputUserEmpty")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (i *InputUserEmpty) TypeID() uint32 {
	return InputUserEmptyTypeID
}

// Encode implements bin.Encoder.
func (i *InputUserEmpty) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputUserEmpty#b98886cf as nil")
	}
	b.PutID(InputUserEmptyTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (i *InputUserEmpty) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputUserEmpty#b98886cf to nil")
	}
	if err := b.ConsumeID(InputUserEmptyTypeID); err != nil {
		return fmt.Errorf("unable to decode inputUserEmpty#b98886cf: %w", err)
	}
	return nil
}

// construct implements constructor of InputUserClass.
func (i InputUserEmpty) construct() InputUserClass { return &i }

// Ensuring interfaces in compile-time for InputUserEmpty.
var (
	_ bin.Encoder = &InputUserEmpty{}
	_ bin.Decoder = &InputUserEmpty{}

	_ InputUserClass = &InputUserEmpty{}
)

// InputUserSelf represents TL type `inputUserSelf#f7c1b13f`.
// Defines the current user.
//
// See https://core.telegram.org/constructor/inputUserSelf for reference.
type InputUserSelf struct {
}

// InputUserSelfTypeID is TL type id of InputUserSelf.
const InputUserSelfTypeID = 0xf7c1b13f

func (i *InputUserSelf) Zero() bool {
	if i == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (i *InputUserSelf) String() string {
	if i == nil {
		return "InputUserSelf(nil)"
	}
	var sb strings.Builder
	sb.WriteString("InputUserSelf")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (i *InputUserSelf) TypeID() uint32 {
	return InputUserSelfTypeID
}

// Encode implements bin.Encoder.
func (i *InputUserSelf) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputUserSelf#f7c1b13f as nil")
	}
	b.PutID(InputUserSelfTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (i *InputUserSelf) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputUserSelf#f7c1b13f to nil")
	}
	if err := b.ConsumeID(InputUserSelfTypeID); err != nil {
		return fmt.Errorf("unable to decode inputUserSelf#f7c1b13f: %w", err)
	}
	return nil
}

// construct implements constructor of InputUserClass.
func (i InputUserSelf) construct() InputUserClass { return &i }

// Ensuring interfaces in compile-time for InputUserSelf.
var (
	_ bin.Encoder = &InputUserSelf{}
	_ bin.Decoder = &InputUserSelf{}

	_ InputUserClass = &InputUserSelf{}
)

// InputUser represents TL type `inputUser#d8292816`.
// Defines a user for further interaction.
//
// See https://core.telegram.org/constructor/inputUser for reference.
type InputUser struct {
	// User identifier
	UserID int
	// access_hash value from the user¹ constructor
	//
	// Links:
	//  1) https://core.telegram.org/constructor/user
	AccessHash int64
}

// InputUserTypeID is TL type id of InputUser.
const InputUserTypeID = 0xd8292816

func (i *InputUser) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.UserID == 0) {
		return false
	}
	if !(i.AccessHash == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InputUser) String() string {
	if i == nil {
		return "InputUser(nil)"
	}
	var sb strings.Builder
	sb.WriteString("InputUser")
	sb.WriteString("{\n")
	sb.WriteString("\tUserID: ")
	sb.WriteString(fmt.Sprint(i.UserID))
	sb.WriteString(",\n")
	sb.WriteString("\tAccessHash: ")
	sb.WriteString(fmt.Sprint(i.AccessHash))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (i *InputUser) TypeID() uint32 {
	return InputUserTypeID
}

// Encode implements bin.Encoder.
func (i *InputUser) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputUser#d8292816 as nil")
	}
	b.PutID(InputUserTypeID)
	b.PutInt(i.UserID)
	b.PutLong(i.AccessHash)
	return nil
}

// GetUserID returns value of UserID field.
func (i *InputUser) GetUserID() (value int) {
	return i.UserID
}

// GetAccessHash returns value of AccessHash field.
func (i *InputUser) GetAccessHash() (value int64) {
	return i.AccessHash
}

// Decode implements bin.Decoder.
func (i *InputUser) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputUser#d8292816 to nil")
	}
	if err := b.ConsumeID(InputUserTypeID); err != nil {
		return fmt.Errorf("unable to decode inputUser#d8292816: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode inputUser#d8292816: field user_id: %w", err)
		}
		i.UserID = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode inputUser#d8292816: field access_hash: %w", err)
		}
		i.AccessHash = value
	}
	return nil
}

// construct implements constructor of InputUserClass.
func (i InputUser) construct() InputUserClass { return &i }

// Ensuring interfaces in compile-time for InputUser.
var (
	_ bin.Encoder = &InputUser{}
	_ bin.Decoder = &InputUser{}

	_ InputUserClass = &InputUser{}
)

// InputUserFromMessage represents TL type `inputUserFromMessage#2d117597`.
// Defines a min¹ user that was seen in a certain message of a certain chat.
//
// Links:
//  1) https://core.telegram.org/api/min
//
// See https://core.telegram.org/constructor/inputUserFromMessage for reference.
type InputUserFromMessage struct {
	// The chat where the user was seen
	Peer InputPeerClass
	// The message ID
	MsgID int
	// The identifier of the user that was seen
	UserID int
}

// InputUserFromMessageTypeID is TL type id of InputUserFromMessage.
const InputUserFromMessageTypeID = 0x2d117597

func (i *InputUserFromMessage) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.Peer == nil) {
		return false
	}
	if !(i.MsgID == 0) {
		return false
	}
	if !(i.UserID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InputUserFromMessage) String() string {
	if i == nil {
		return "InputUserFromMessage(nil)"
	}
	var sb strings.Builder
	sb.WriteString("InputUserFromMessage")
	sb.WriteString("{\n")
	sb.WriteString("\tPeer: ")
	sb.WriteString(fmt.Sprint(i.Peer))
	sb.WriteString(",\n")
	sb.WriteString("\tMsgID: ")
	sb.WriteString(fmt.Sprint(i.MsgID))
	sb.WriteString(",\n")
	sb.WriteString("\tUserID: ")
	sb.WriteString(fmt.Sprint(i.UserID))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (i *InputUserFromMessage) TypeID() uint32 {
	return InputUserFromMessageTypeID
}

// Encode implements bin.Encoder.
func (i *InputUserFromMessage) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputUserFromMessage#2d117597 as nil")
	}
	b.PutID(InputUserFromMessageTypeID)
	if i.Peer == nil {
		return fmt.Errorf("unable to encode inputUserFromMessage#2d117597: field peer is nil")
	}
	if err := i.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode inputUserFromMessage#2d117597: field peer: %w", err)
	}
	b.PutInt(i.MsgID)
	b.PutInt(i.UserID)
	return nil
}

// GetPeer returns value of Peer field.
func (i *InputUserFromMessage) GetPeer() (value InputPeerClass) {
	return i.Peer
}

// GetMsgID returns value of MsgID field.
func (i *InputUserFromMessage) GetMsgID() (value int) {
	return i.MsgID
}

// GetUserID returns value of UserID field.
func (i *InputUserFromMessage) GetUserID() (value int) {
	return i.UserID
}

// Decode implements bin.Decoder.
func (i *InputUserFromMessage) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputUserFromMessage#2d117597 to nil")
	}
	if err := b.ConsumeID(InputUserFromMessageTypeID); err != nil {
		return fmt.Errorf("unable to decode inputUserFromMessage#2d117597: %w", err)
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode inputUserFromMessage#2d117597: field peer: %w", err)
		}
		i.Peer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode inputUserFromMessage#2d117597: field msg_id: %w", err)
		}
		i.MsgID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode inputUserFromMessage#2d117597: field user_id: %w", err)
		}
		i.UserID = value
	}
	return nil
}

// construct implements constructor of InputUserClass.
func (i InputUserFromMessage) construct() InputUserClass { return &i }

// Ensuring interfaces in compile-time for InputUserFromMessage.
var (
	_ bin.Encoder = &InputUserFromMessage{}
	_ bin.Decoder = &InputUserFromMessage{}

	_ InputUserClass = &InputUserFromMessage{}
)

// InputUserClass represents InputUser generic type.
//
// See https://core.telegram.org/type/InputUser for reference.
//
// Example:
//  g, err := DecodeInputUser(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *InputUserEmpty: // inputUserEmpty#b98886cf
//  case *InputUserSelf: // inputUserSelf#f7c1b13f
//  case *InputUser: // inputUser#d8292816
//  case *InputUserFromMessage: // inputUserFromMessage#2d117597
//  default: panic(v)
//  }
type InputUserClass interface {
	bin.Encoder
	bin.Decoder
	construct() InputUserClass

	// TypeID returns MTProto type id (CRC code).
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool
}

// DecodeInputUser implements binary de-serialization for InputUserClass.
func DecodeInputUser(buf *bin.Buffer) (InputUserClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case InputUserEmptyTypeID:
		// Decoding inputUserEmpty#b98886cf.
		v := InputUserEmpty{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InputUserClass: %w", err)
		}
		return &v, nil
	case InputUserSelfTypeID:
		// Decoding inputUserSelf#f7c1b13f.
		v := InputUserSelf{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InputUserClass: %w", err)
		}
		return &v, nil
	case InputUserTypeID:
		// Decoding inputUser#d8292816.
		v := InputUser{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InputUserClass: %w", err)
		}
		return &v, nil
	case InputUserFromMessageTypeID:
		// Decoding inputUserFromMessage#2d117597.
		v := InputUserFromMessage{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InputUserClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode InputUserClass: %w", bin.NewUnexpectedID(id))
	}
}

// InputUser boxes the InputUserClass providing a helper.
type InputUserBox struct {
	InputUser InputUserClass
}

// Decode implements bin.Decoder for InputUserBox.
func (b *InputUserBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode InputUserBox to nil")
	}
	v, err := DecodeInputUser(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.InputUser = v
	return nil
}

// Encode implements bin.Encode for InputUserBox.
func (b *InputUserBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.InputUser == nil {
		return fmt.Errorf("unable to encode InputUserClass as nil")
	}
	return b.InputUser.Encode(buf)
}
