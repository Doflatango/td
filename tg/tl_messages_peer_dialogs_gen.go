// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesPeerDialogs represents TL type `messages.peerDialogs#3371c354`.
type MessagesPeerDialogs struct {
	// Dialogs field of MessagesPeerDialogs.
	Dialogs []DialogClass
	// Messages field of MessagesPeerDialogs.
	Messages []MessageClass
	// Chats field of MessagesPeerDialogs.
	Chats []ChatClass
	// Users field of MessagesPeerDialogs.
	Users []UserClass
	// State field of MessagesPeerDialogs.
	State UpdatesState
}

// MessagesPeerDialogsTypeID is TL type id of MessagesPeerDialogs.
const MessagesPeerDialogsTypeID = 0x3371c354

// Encode implements bin.Encoder.
func (p *MessagesPeerDialogs) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode messages.peerDialogs#3371c354 as nil")
	}
	b.PutID(MessagesPeerDialogsTypeID)
	b.PutVectorHeader(len(p.Dialogs))
	for idx, v := range p.Dialogs {
		if v == nil {
			return fmt.Errorf("unable to encode messages.peerDialogs#3371c354: field dialogs element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.peerDialogs#3371c354: field dialogs element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(p.Messages))
	for idx, v := range p.Messages {
		if v == nil {
			return fmt.Errorf("unable to encode messages.peerDialogs#3371c354: field messages element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.peerDialogs#3371c354: field messages element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(p.Chats))
	for idx, v := range p.Chats {
		if v == nil {
			return fmt.Errorf("unable to encode messages.peerDialogs#3371c354: field chats element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.peerDialogs#3371c354: field chats element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(p.Users))
	for idx, v := range p.Users {
		if v == nil {
			return fmt.Errorf("unable to encode messages.peerDialogs#3371c354: field users element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.peerDialogs#3371c354: field users element with index %d: %w", idx, err)
		}
	}
	if err := p.State.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.peerDialogs#3371c354: field state: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (p *MessagesPeerDialogs) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode messages.peerDialogs#3371c354 to nil")
	}
	if err := b.ConsumeID(MessagesPeerDialogsTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.peerDialogs#3371c354: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.peerDialogs#3371c354: field dialogs: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeDialog(b)
			if err != nil {
				return fmt.Errorf("unable to decode messages.peerDialogs#3371c354: field dialogs: %w", err)
			}
			p.Dialogs = append(p.Dialogs, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.peerDialogs#3371c354: field messages: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeMessage(b)
			if err != nil {
				return fmt.Errorf("unable to decode messages.peerDialogs#3371c354: field messages: %w", err)
			}
			p.Messages = append(p.Messages, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.peerDialogs#3371c354: field chats: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeChat(b)
			if err != nil {
				return fmt.Errorf("unable to decode messages.peerDialogs#3371c354: field chats: %w", err)
			}
			p.Chats = append(p.Chats, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.peerDialogs#3371c354: field users: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(b)
			if err != nil {
				return fmt.Errorf("unable to decode messages.peerDialogs#3371c354: field users: %w", err)
			}
			p.Users = append(p.Users, value)
		}
	}
	{
		if err := p.State.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.peerDialogs#3371c354: field state: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesPeerDialogs.
var (
	_ bin.Encoder = &MessagesPeerDialogs{}
	_ bin.Decoder = &MessagesPeerDialogs{}
)
