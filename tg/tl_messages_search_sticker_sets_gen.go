// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// MessagesSearchStickerSetsRequest represents TL type `messages.searchStickerSets#c2b7d08b`.
// Search for stickersets
//
// See https://core.telegram.org/method/messages.searchStickerSets for reference.
type MessagesSearchStickerSetsRequest struct {
	// Flags, see TL conditional fields¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// Exclude featured stickersets from results
	ExcludeFeatured bool
	// Query string
	Q string
	// Hash for pagination, for more info click here¹
	//
	// Links:
	//  1) https://core.telegram.org/api/offsets#hash-generation
	Hash int
}

// MessagesSearchStickerSetsRequestTypeID is TL type id of MessagesSearchStickerSetsRequest.
const MessagesSearchStickerSetsRequestTypeID = 0xc2b7d08b

func (s *MessagesSearchStickerSetsRequest) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Flags.Zero()) {
		return false
	}
	if !(s.ExcludeFeatured == false) {
		return false
	}
	if !(s.Q == "") {
		return false
	}
	if !(s.Hash == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *MessagesSearchStickerSetsRequest) String() string {
	if s == nil {
		return "MessagesSearchStickerSetsRequest(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessagesSearchStickerSetsRequest")
	sb.WriteString("{\n")
	sb.WriteString("\tFlags: ")
	sb.WriteString(fmt.Sprint(s.Flags))
	sb.WriteString(",\n")
	sb.WriteString("\tQ: ")
	sb.WriteString(fmt.Sprint(s.Q))
	sb.WriteString(",\n")
	sb.WriteString("\tHash: ")
	sb.WriteString(fmt.Sprint(s.Hash))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (s *MessagesSearchStickerSetsRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode messages.searchStickerSets#c2b7d08b as nil")
	}
	b.PutID(MessagesSearchStickerSetsRequestTypeID)
	if !(s.ExcludeFeatured == false) {
		s.Flags.Set(0)
	}
	if err := s.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.searchStickerSets#c2b7d08b: field flags: %w", err)
	}
	b.PutString(s.Q)
	b.PutInt(s.Hash)
	return nil
}

// SetExcludeFeatured sets value of ExcludeFeatured conditional field.
func (s *MessagesSearchStickerSetsRequest) SetExcludeFeatured(value bool) {
	if value {
		s.Flags.Set(0)
		s.ExcludeFeatured = true
	} else {
		s.Flags.Unset(0)
		s.ExcludeFeatured = false
	}
}

// Decode implements bin.Decoder.
func (s *MessagesSearchStickerSetsRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode messages.searchStickerSets#c2b7d08b to nil")
	}
	if err := b.ConsumeID(MessagesSearchStickerSetsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.searchStickerSets#c2b7d08b: %w", err)
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.searchStickerSets#c2b7d08b: field flags: %w", err)
		}
	}
	s.ExcludeFeatured = s.Flags.Has(0)
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messages.searchStickerSets#c2b7d08b: field q: %w", err)
		}
		s.Q = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.searchStickerSets#c2b7d08b: field hash: %w", err)
		}
		s.Hash = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesSearchStickerSetsRequest.
var (
	_ bin.Encoder = &MessagesSearchStickerSetsRequest{}
	_ bin.Decoder = &MessagesSearchStickerSetsRequest{}
)

// MessagesSearchStickerSets invokes method messages.searchStickerSets#c2b7d08b returning error if any.
// Search for stickersets
//
// See https://core.telegram.org/method/messages.searchStickerSets for reference.
func (c *Client) MessagesSearchStickerSets(ctx context.Context, request *MessagesSearchStickerSetsRequest) (MessagesFoundStickerSetsClass, error) {
	var result MessagesFoundStickerSetsBox

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.FoundStickerSets, nil
}
