// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// EmojiLanguage represents TL type `emojiLanguage#b3fb5361`.
type EmojiLanguage struct {
	// LangCode field of EmojiLanguage.
	LangCode string
}

// EmojiLanguageTypeID is TL type id of EmojiLanguage.
const EmojiLanguageTypeID = 0xb3fb5361

// Encode implements bin.Encoder.
func (e *EmojiLanguage) Encode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode emojiLanguage#b3fb5361 as nil")
	}
	b.PutID(EmojiLanguageTypeID)
	b.PutString(e.LangCode)
	return nil
}

// Decode implements bin.Decoder.
func (e *EmojiLanguage) Decode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode emojiLanguage#b3fb5361 to nil")
	}
	if err := b.ConsumeID(EmojiLanguageTypeID); err != nil {
		return fmt.Errorf("unable to decode emojiLanguage#b3fb5361: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode emojiLanguage#b3fb5361: field lang_code: %w", err)
		}
		e.LangCode = value
	}
	return nil
}

// Ensuring interfaces in compile-time for EmojiLanguage.
var (
	_ bin.Encoder = &EmojiLanguage{}
	_ bin.Decoder = &EmojiLanguage{}
)
