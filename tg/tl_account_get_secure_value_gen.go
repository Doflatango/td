// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// AccountGetSecureValueRequest represents TL type `account.getSecureValue#73665bc2`.
// Get saved Telegram Passport document, for more info see the passport docs »
//
// See https://core.telegram.org/method/account.getSecureValue for reference.
type AccountGetSecureValueRequest struct {
	// Requested value types
	Types []SecureValueTypeClass
}

// AccountGetSecureValueRequestTypeID is TL type id of AccountGetSecureValueRequest.
const AccountGetSecureValueRequestTypeID = 0x73665bc2

// Encode implements bin.Encoder.
func (g *AccountGetSecureValueRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode account.getSecureValue#73665bc2 as nil")
	}
	b.PutID(AccountGetSecureValueRequestTypeID)
	b.PutVectorHeader(len(g.Types))
	for idx, v := range g.Types {
		if v == nil {
			return fmt.Errorf("unable to encode account.getSecureValue#73665bc2: field types element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode account.getSecureValue#73665bc2: field types element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (g *AccountGetSecureValueRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode account.getSecureValue#73665bc2 to nil")
	}
	if err := b.ConsumeID(AccountGetSecureValueRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode account.getSecureValue#73665bc2: %w", err)
	}

	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode account.getSecureValue#73665bc2: field types: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeSecureValueType(b)
			if err != nil {
				return fmt.Errorf("unable to decode account.getSecureValue#73665bc2: field types: %w", err)
			}
			g.Types = append(g.Types, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for AccountGetSecureValueRequest.
var (
	_ bin.Encoder = &AccountGetSecureValueRequest{}
	_ bin.Decoder = &AccountGetSecureValueRequest{}
)

// AccountGetSecureValue invokes method account.getSecureValue#73665bc2 returning error if any.
// Get saved Telegram Passport document, for more info see the passport docs »
//
// See https://core.telegram.org/method/account.getSecureValue for reference.
func (c *Client) AccountGetSecureValue(ctx context.Context, request *AccountGetSecureValueRequest) ([]SecureValue, error) {
	var result SecureValueVector
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Elems, nil
}
