// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// ChannelParticipantsRecent represents TL type `channelParticipantsRecent#de3f3c79`.
// Fetch only recent participants
//
// See https://core.telegram.org/constructor/channelParticipantsRecent for reference.
type ChannelParticipantsRecent struct {
}

// ChannelParticipantsRecentTypeID is TL type id of ChannelParticipantsRecent.
const ChannelParticipantsRecentTypeID = 0xde3f3c79

// String implements fmt.Stringer.
func (c *ChannelParticipantsRecent) String() string {
	if c == nil {
		return "ChannelParticipantsRecent(nil)"
	}
	var sb strings.Builder
	sb.WriteString("ChannelParticipantsRecent")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (c *ChannelParticipantsRecent) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelParticipantsRecent#de3f3c79 as nil")
	}
	b.PutID(ChannelParticipantsRecentTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelParticipantsRecent) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelParticipantsRecent#de3f3c79 to nil")
	}
	if err := b.ConsumeID(ChannelParticipantsRecentTypeID); err != nil {
		return fmt.Errorf("unable to decode channelParticipantsRecent#de3f3c79: %w", err)
	}
	return nil
}

// construct implements constructor of ChannelParticipantsFilterClass.
func (c ChannelParticipantsRecent) construct() ChannelParticipantsFilterClass { return &c }

// Ensuring interfaces in compile-time for ChannelParticipantsRecent.
var (
	_ bin.Encoder = &ChannelParticipantsRecent{}
	_ bin.Decoder = &ChannelParticipantsRecent{}

	_ ChannelParticipantsFilterClass = &ChannelParticipantsRecent{}
)

// ChannelParticipantsAdmins represents TL type `channelParticipantsAdmins#b4608969`.
// Fetch only admin participants
//
// See https://core.telegram.org/constructor/channelParticipantsAdmins for reference.
type ChannelParticipantsAdmins struct {
}

// ChannelParticipantsAdminsTypeID is TL type id of ChannelParticipantsAdmins.
const ChannelParticipantsAdminsTypeID = 0xb4608969

// String implements fmt.Stringer.
func (c *ChannelParticipantsAdmins) String() string {
	if c == nil {
		return "ChannelParticipantsAdmins(nil)"
	}
	var sb strings.Builder
	sb.WriteString("ChannelParticipantsAdmins")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (c *ChannelParticipantsAdmins) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelParticipantsAdmins#b4608969 as nil")
	}
	b.PutID(ChannelParticipantsAdminsTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelParticipantsAdmins) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelParticipantsAdmins#b4608969 to nil")
	}
	if err := b.ConsumeID(ChannelParticipantsAdminsTypeID); err != nil {
		return fmt.Errorf("unable to decode channelParticipantsAdmins#b4608969: %w", err)
	}
	return nil
}

// construct implements constructor of ChannelParticipantsFilterClass.
func (c ChannelParticipantsAdmins) construct() ChannelParticipantsFilterClass { return &c }

// Ensuring interfaces in compile-time for ChannelParticipantsAdmins.
var (
	_ bin.Encoder = &ChannelParticipantsAdmins{}
	_ bin.Decoder = &ChannelParticipantsAdmins{}

	_ ChannelParticipantsFilterClass = &ChannelParticipantsAdmins{}
)

// ChannelParticipantsKicked represents TL type `channelParticipantsKicked#a3b54985`.
// Fetch only kicked participants
//
// See https://core.telegram.org/constructor/channelParticipantsKicked for reference.
type ChannelParticipantsKicked struct {
	// Optional filter for searching kicked participants by name (otherwise empty)
	Q string
}

// ChannelParticipantsKickedTypeID is TL type id of ChannelParticipantsKicked.
const ChannelParticipantsKickedTypeID = 0xa3b54985

// String implements fmt.Stringer.
func (c *ChannelParticipantsKicked) String() string {
	if c == nil {
		return "ChannelParticipantsKicked(nil)"
	}
	var sb strings.Builder
	sb.WriteString("ChannelParticipantsKicked")
	sb.WriteString("{\n")
	sb.WriteString("\tQ: ")
	sb.WriteString(fmt.Sprint(c.Q))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (c *ChannelParticipantsKicked) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelParticipantsKicked#a3b54985 as nil")
	}
	b.PutID(ChannelParticipantsKickedTypeID)
	b.PutString(c.Q)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelParticipantsKicked) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelParticipantsKicked#a3b54985 to nil")
	}
	if err := b.ConsumeID(ChannelParticipantsKickedTypeID); err != nil {
		return fmt.Errorf("unable to decode channelParticipantsKicked#a3b54985: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantsKicked#a3b54985: field q: %w", err)
		}
		c.Q = value
	}
	return nil
}

// construct implements constructor of ChannelParticipantsFilterClass.
func (c ChannelParticipantsKicked) construct() ChannelParticipantsFilterClass { return &c }

// Ensuring interfaces in compile-time for ChannelParticipantsKicked.
var (
	_ bin.Encoder = &ChannelParticipantsKicked{}
	_ bin.Decoder = &ChannelParticipantsKicked{}

	_ ChannelParticipantsFilterClass = &ChannelParticipantsKicked{}
)

// ChannelParticipantsBots represents TL type `channelParticipantsBots#b0d1865b`.
// Fetch only bot participants
//
// See https://core.telegram.org/constructor/channelParticipantsBots for reference.
type ChannelParticipantsBots struct {
}

// ChannelParticipantsBotsTypeID is TL type id of ChannelParticipantsBots.
const ChannelParticipantsBotsTypeID = 0xb0d1865b

// String implements fmt.Stringer.
func (c *ChannelParticipantsBots) String() string {
	if c == nil {
		return "ChannelParticipantsBots(nil)"
	}
	var sb strings.Builder
	sb.WriteString("ChannelParticipantsBots")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (c *ChannelParticipantsBots) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelParticipantsBots#b0d1865b as nil")
	}
	b.PutID(ChannelParticipantsBotsTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelParticipantsBots) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelParticipantsBots#b0d1865b to nil")
	}
	if err := b.ConsumeID(ChannelParticipantsBotsTypeID); err != nil {
		return fmt.Errorf("unable to decode channelParticipantsBots#b0d1865b: %w", err)
	}
	return nil
}

// construct implements constructor of ChannelParticipantsFilterClass.
func (c ChannelParticipantsBots) construct() ChannelParticipantsFilterClass { return &c }

// Ensuring interfaces in compile-time for ChannelParticipantsBots.
var (
	_ bin.Encoder = &ChannelParticipantsBots{}
	_ bin.Decoder = &ChannelParticipantsBots{}

	_ ChannelParticipantsFilterClass = &ChannelParticipantsBots{}
)

// ChannelParticipantsBanned represents TL type `channelParticipantsBanned#1427a5e1`.
// Fetch only banned participants
//
// See https://core.telegram.org/constructor/channelParticipantsBanned for reference.
type ChannelParticipantsBanned struct {
	// Optional filter for searching banned participants by name (otherwise empty)
	Q string
}

// ChannelParticipantsBannedTypeID is TL type id of ChannelParticipantsBanned.
const ChannelParticipantsBannedTypeID = 0x1427a5e1

// String implements fmt.Stringer.
func (c *ChannelParticipantsBanned) String() string {
	if c == nil {
		return "ChannelParticipantsBanned(nil)"
	}
	var sb strings.Builder
	sb.WriteString("ChannelParticipantsBanned")
	sb.WriteString("{\n")
	sb.WriteString("\tQ: ")
	sb.WriteString(fmt.Sprint(c.Q))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (c *ChannelParticipantsBanned) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelParticipantsBanned#1427a5e1 as nil")
	}
	b.PutID(ChannelParticipantsBannedTypeID)
	b.PutString(c.Q)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelParticipantsBanned) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelParticipantsBanned#1427a5e1 to nil")
	}
	if err := b.ConsumeID(ChannelParticipantsBannedTypeID); err != nil {
		return fmt.Errorf("unable to decode channelParticipantsBanned#1427a5e1: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantsBanned#1427a5e1: field q: %w", err)
		}
		c.Q = value
	}
	return nil
}

// construct implements constructor of ChannelParticipantsFilterClass.
func (c ChannelParticipantsBanned) construct() ChannelParticipantsFilterClass { return &c }

// Ensuring interfaces in compile-time for ChannelParticipantsBanned.
var (
	_ bin.Encoder = &ChannelParticipantsBanned{}
	_ bin.Decoder = &ChannelParticipantsBanned{}

	_ ChannelParticipantsFilterClass = &ChannelParticipantsBanned{}
)

// ChannelParticipantsSearch represents TL type `channelParticipantsSearch#656ac4b`.
// Query participants by name
//
// See https://core.telegram.org/constructor/channelParticipantsSearch for reference.
type ChannelParticipantsSearch struct {
	// Search query
	Q string
}

// ChannelParticipantsSearchTypeID is TL type id of ChannelParticipantsSearch.
const ChannelParticipantsSearchTypeID = 0x656ac4b

// String implements fmt.Stringer.
func (c *ChannelParticipantsSearch) String() string {
	if c == nil {
		return "ChannelParticipantsSearch(nil)"
	}
	var sb strings.Builder
	sb.WriteString("ChannelParticipantsSearch")
	sb.WriteString("{\n")
	sb.WriteString("\tQ: ")
	sb.WriteString(fmt.Sprint(c.Q))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (c *ChannelParticipantsSearch) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelParticipantsSearch#656ac4b as nil")
	}
	b.PutID(ChannelParticipantsSearchTypeID)
	b.PutString(c.Q)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelParticipantsSearch) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelParticipantsSearch#656ac4b to nil")
	}
	if err := b.ConsumeID(ChannelParticipantsSearchTypeID); err != nil {
		return fmt.Errorf("unable to decode channelParticipantsSearch#656ac4b: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantsSearch#656ac4b: field q: %w", err)
		}
		c.Q = value
	}
	return nil
}

// construct implements constructor of ChannelParticipantsFilterClass.
func (c ChannelParticipantsSearch) construct() ChannelParticipantsFilterClass { return &c }

// Ensuring interfaces in compile-time for ChannelParticipantsSearch.
var (
	_ bin.Encoder = &ChannelParticipantsSearch{}
	_ bin.Decoder = &ChannelParticipantsSearch{}

	_ ChannelParticipantsFilterClass = &ChannelParticipantsSearch{}
)

// ChannelParticipantsContacts represents TL type `channelParticipantsContacts#bb6ae88d`.
// Fetch only participants that are also contacts
//
// See https://core.telegram.org/constructor/channelParticipantsContacts for reference.
type ChannelParticipantsContacts struct {
	// Optional search query for searching contact participants by name
	Q string
}

// ChannelParticipantsContactsTypeID is TL type id of ChannelParticipantsContacts.
const ChannelParticipantsContactsTypeID = 0xbb6ae88d

// String implements fmt.Stringer.
func (c *ChannelParticipantsContacts) String() string {
	if c == nil {
		return "ChannelParticipantsContacts(nil)"
	}
	var sb strings.Builder
	sb.WriteString("ChannelParticipantsContacts")
	sb.WriteString("{\n")
	sb.WriteString("\tQ: ")
	sb.WriteString(fmt.Sprint(c.Q))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (c *ChannelParticipantsContacts) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelParticipantsContacts#bb6ae88d as nil")
	}
	b.PutID(ChannelParticipantsContactsTypeID)
	b.PutString(c.Q)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelParticipantsContacts) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelParticipantsContacts#bb6ae88d to nil")
	}
	if err := b.ConsumeID(ChannelParticipantsContactsTypeID); err != nil {
		return fmt.Errorf("unable to decode channelParticipantsContacts#bb6ae88d: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantsContacts#bb6ae88d: field q: %w", err)
		}
		c.Q = value
	}
	return nil
}

// construct implements constructor of ChannelParticipantsFilterClass.
func (c ChannelParticipantsContacts) construct() ChannelParticipantsFilterClass { return &c }

// Ensuring interfaces in compile-time for ChannelParticipantsContacts.
var (
	_ bin.Encoder = &ChannelParticipantsContacts{}
	_ bin.Decoder = &ChannelParticipantsContacts{}

	_ ChannelParticipantsFilterClass = &ChannelParticipantsContacts{}
)

// ChannelParticipantsMentions represents TL type `channelParticipantsMentions#e04b5ceb`.
// This filter is used when looking for supergroup members to mention.
// This filter will automatically remove anonymous admins, and return even non-participant users that replied to a specific thread through the comment section of a channel.
//
// See https://core.telegram.org/constructor/channelParticipantsMentions for reference.
type ChannelParticipantsMentions struct {
	// Flags, see TL conditional fields
	Flags bin.Fields
	// Filter by user name or username
	//
	// Use SetQ and GetQ helpers.
	Q string
	// Look only for users that posted in this thread
	//
	// Use SetTopMsgID and GetTopMsgID helpers.
	TopMsgID int
}

// ChannelParticipantsMentionsTypeID is TL type id of ChannelParticipantsMentions.
const ChannelParticipantsMentionsTypeID = 0xe04b5ceb

// String implements fmt.Stringer.
func (c *ChannelParticipantsMentions) String() string {
	if c == nil {
		return "ChannelParticipantsMentions(nil)"
	}
	var sb strings.Builder
	sb.WriteString("ChannelParticipantsMentions")
	sb.WriteString("{\n")
	sb.WriteString("\tFlags: ")
	sb.WriteString(c.Flags.String())
	sb.WriteString(",\n")
	if c.Flags.Has(0) {
		sb.WriteString("\tQ: ")
		sb.WriteString(fmt.Sprint(c.Q))
		sb.WriteString(",\n")
	}
	if c.Flags.Has(1) {
		sb.WriteString("\tTopMsgID: ")
		sb.WriteString(fmt.Sprint(c.TopMsgID))
		sb.WriteString(",\n")
	}
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (c *ChannelParticipantsMentions) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelParticipantsMentions#e04b5ceb as nil")
	}
	b.PutID(ChannelParticipantsMentionsTypeID)
	if err := c.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelParticipantsMentions#e04b5ceb: field flags: %w", err)
	}
	if c.Flags.Has(0) {
		b.PutString(c.Q)
	}
	if c.Flags.Has(1) {
		b.PutInt(c.TopMsgID)
	}
	return nil
}

// SetQ sets value of Q conditional field.
func (c *ChannelParticipantsMentions) SetQ(value string) {
	c.Flags.Set(0)
	c.Q = value
}

// GetQ returns value of Q conditional field and
// boolean which is true if field was set.
func (c *ChannelParticipantsMentions) GetQ() (value string, ok bool) {
	if !c.Flags.Has(0) {
		return value, false
	}
	return c.Q, true
}

// SetTopMsgID sets value of TopMsgID conditional field.
func (c *ChannelParticipantsMentions) SetTopMsgID(value int) {
	c.Flags.Set(1)
	c.TopMsgID = value
}

// GetTopMsgID returns value of TopMsgID conditional field and
// boolean which is true if field was set.
func (c *ChannelParticipantsMentions) GetTopMsgID() (value int, ok bool) {
	if !c.Flags.Has(1) {
		return value, false
	}
	return c.TopMsgID, true
}

// Decode implements bin.Decoder.
func (c *ChannelParticipantsMentions) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelParticipantsMentions#e04b5ceb to nil")
	}
	if err := b.ConsumeID(ChannelParticipantsMentionsTypeID); err != nil {
		return fmt.Errorf("unable to decode channelParticipantsMentions#e04b5ceb: %w", err)
	}
	{
		if err := c.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelParticipantsMentions#e04b5ceb: field flags: %w", err)
		}
	}
	if c.Flags.Has(0) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantsMentions#e04b5ceb: field q: %w", err)
		}
		c.Q = value
	}
	if c.Flags.Has(1) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantsMentions#e04b5ceb: field top_msg_id: %w", err)
		}
		c.TopMsgID = value
	}
	return nil
}

// construct implements constructor of ChannelParticipantsFilterClass.
func (c ChannelParticipantsMentions) construct() ChannelParticipantsFilterClass { return &c }

// Ensuring interfaces in compile-time for ChannelParticipantsMentions.
var (
	_ bin.Encoder = &ChannelParticipantsMentions{}
	_ bin.Decoder = &ChannelParticipantsMentions{}

	_ ChannelParticipantsFilterClass = &ChannelParticipantsMentions{}
)

// ChannelParticipantsFilterClass represents ChannelParticipantsFilter generic type.
//
// See https://core.telegram.org/type/ChannelParticipantsFilter for reference.
//
// Example:
//  g, err := DecodeChannelParticipantsFilter(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *ChannelParticipantsRecent: // channelParticipantsRecent#de3f3c79
//  case *ChannelParticipantsAdmins: // channelParticipantsAdmins#b4608969
//  case *ChannelParticipantsKicked: // channelParticipantsKicked#a3b54985
//  case *ChannelParticipantsBots: // channelParticipantsBots#b0d1865b
//  case *ChannelParticipantsBanned: // channelParticipantsBanned#1427a5e1
//  case *ChannelParticipantsSearch: // channelParticipantsSearch#656ac4b
//  case *ChannelParticipantsContacts: // channelParticipantsContacts#bb6ae88d
//  case *ChannelParticipantsMentions: // channelParticipantsMentions#e04b5ceb
//  default: panic(v)
//  }
type ChannelParticipantsFilterClass interface {
	bin.Encoder
	bin.Decoder
	construct() ChannelParticipantsFilterClass
	fmt.Stringer
}

// DecodeChannelParticipantsFilter implements binary de-serialization for ChannelParticipantsFilterClass.
func DecodeChannelParticipantsFilter(buf *bin.Buffer) (ChannelParticipantsFilterClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case ChannelParticipantsRecentTypeID:
		// Decoding channelParticipantsRecent#de3f3c79.
		v := ChannelParticipantsRecent{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelParticipantsFilterClass: %w", err)
		}
		return &v, nil
	case ChannelParticipantsAdminsTypeID:
		// Decoding channelParticipantsAdmins#b4608969.
		v := ChannelParticipantsAdmins{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelParticipantsFilterClass: %w", err)
		}
		return &v, nil
	case ChannelParticipantsKickedTypeID:
		// Decoding channelParticipantsKicked#a3b54985.
		v := ChannelParticipantsKicked{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelParticipantsFilterClass: %w", err)
		}
		return &v, nil
	case ChannelParticipantsBotsTypeID:
		// Decoding channelParticipantsBots#b0d1865b.
		v := ChannelParticipantsBots{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelParticipantsFilterClass: %w", err)
		}
		return &v, nil
	case ChannelParticipantsBannedTypeID:
		// Decoding channelParticipantsBanned#1427a5e1.
		v := ChannelParticipantsBanned{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelParticipantsFilterClass: %w", err)
		}
		return &v, nil
	case ChannelParticipantsSearchTypeID:
		// Decoding channelParticipantsSearch#656ac4b.
		v := ChannelParticipantsSearch{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelParticipantsFilterClass: %w", err)
		}
		return &v, nil
	case ChannelParticipantsContactsTypeID:
		// Decoding channelParticipantsContacts#bb6ae88d.
		v := ChannelParticipantsContacts{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelParticipantsFilterClass: %w", err)
		}
		return &v, nil
	case ChannelParticipantsMentionsTypeID:
		// Decoding channelParticipantsMentions#e04b5ceb.
		v := ChannelParticipantsMentions{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelParticipantsFilterClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode ChannelParticipantsFilterClass: %w", bin.NewUnexpectedID(id))
	}
}

// ChannelParticipantsFilter boxes the ChannelParticipantsFilterClass providing a helper.
type ChannelParticipantsFilterBox struct {
	ChannelParticipantsFilter ChannelParticipantsFilterClass
}

// Decode implements bin.Decoder for ChannelParticipantsFilterBox.
func (b *ChannelParticipantsFilterBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode ChannelParticipantsFilterBox to nil")
	}
	v, err := DecodeChannelParticipantsFilter(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.ChannelParticipantsFilter = v
	return nil
}

// Encode implements bin.Encode for ChannelParticipantsFilterBox.
func (b *ChannelParticipantsFilterBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.ChannelParticipantsFilter == nil {
		return fmt.Errorf("unable to encode ChannelParticipantsFilterClass as nil")
	}
	return b.ChannelParticipantsFilter.Encode(buf)
}
