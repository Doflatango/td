// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// PaymentsSavedInfo represents TL type `payments.savedInfo#fb8fe43c`.
// Saved server-side order information
//
// See https://core.telegram.org/constructor/payments.savedInfo for reference.
type PaymentsSavedInfo struct {
	// Flags, see TL conditional fields
	Flags bin.Fields
	// Whether the user has some saved payment credentials
	HasSavedCredentials bool
	// Saved server-side order information
	//
	// Use SetSavedInfo and GetSavedInfo helpers.
	SavedInfo PaymentRequestedInfo
}

// PaymentsSavedInfoTypeID is TL type id of PaymentsSavedInfo.
const PaymentsSavedInfoTypeID = 0xfb8fe43c

// String implements fmt.Stringer.
func (s *PaymentsSavedInfo) String() string {
	if s == nil {
		return "PaymentsSavedInfo(nil)"
	}
	var sb strings.Builder
	sb.WriteString("PaymentsSavedInfo")
	sb.WriteString("{\n")
	sb.WriteString("\tFlags: ")
	sb.WriteString(s.Flags.String())
	sb.WriteString(",\n")
	if s.Flags.Has(0) {
		sb.WriteString("\tSavedInfo: ")
		sb.WriteString(s.SavedInfo.String())
		sb.WriteString(",\n")
	}
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (s *PaymentsSavedInfo) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode payments.savedInfo#fb8fe43c as nil")
	}
	b.PutID(PaymentsSavedInfoTypeID)
	if err := s.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode payments.savedInfo#fb8fe43c: field flags: %w", err)
	}
	if s.Flags.Has(0) {
		if err := s.SavedInfo.Encode(b); err != nil {
			return fmt.Errorf("unable to encode payments.savedInfo#fb8fe43c: field saved_info: %w", err)
		}
	}
	return nil
}

// SetHasSavedCredentials sets value of HasSavedCredentials conditional field.
func (s *PaymentsSavedInfo) SetHasSavedCredentials(value bool) {
	if value {
		s.Flags.Set(1)
	} else {
		s.Flags.Unset(1)
	}
}

// SetSavedInfo sets value of SavedInfo conditional field.
func (s *PaymentsSavedInfo) SetSavedInfo(value PaymentRequestedInfo) {
	s.Flags.Set(0)
	s.SavedInfo = value
}

// GetSavedInfo returns value of SavedInfo conditional field and
// boolean which is true if field was set.
func (s *PaymentsSavedInfo) GetSavedInfo() (value PaymentRequestedInfo, ok bool) {
	if !s.Flags.Has(0) {
		return value, false
	}
	return s.SavedInfo, true
}

// Decode implements bin.Decoder.
func (s *PaymentsSavedInfo) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode payments.savedInfo#fb8fe43c to nil")
	}
	if err := b.ConsumeID(PaymentsSavedInfoTypeID); err != nil {
		return fmt.Errorf("unable to decode payments.savedInfo#fb8fe43c: %w", err)
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode payments.savedInfo#fb8fe43c: field flags: %w", err)
		}
	}
	s.HasSavedCredentials = s.Flags.Has(1)
	if s.Flags.Has(0) {
		if err := s.SavedInfo.Decode(b); err != nil {
			return fmt.Errorf("unable to decode payments.savedInfo#fb8fe43c: field saved_info: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for PaymentsSavedInfo.
var (
	_ bin.Encoder = &PaymentsSavedInfo{}
	_ bin.Decoder = &PaymentsSavedInfo{}
)
