// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// HelpEditUserInfoRequest represents TL type `help.editUserInfo#66b91b70`.
// Internal use
//
// See https://core.telegram.org/method/help.editUserInfo for reference.
type HelpEditUserInfoRequest struct {
	// User
	UserID InputUserClass
	// Message
	Message string
	// Message entities for styled text
	Entities []MessageEntityClass
}

// HelpEditUserInfoRequestTypeID is TL type id of HelpEditUserInfoRequest.
const HelpEditUserInfoRequestTypeID = 0x66b91b70

// Encode implements bin.Encoder.
func (e *HelpEditUserInfoRequest) Encode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode help.editUserInfo#66b91b70 as nil")
	}
	b.PutID(HelpEditUserInfoRequestTypeID)
	if e.UserID == nil {
		return fmt.Errorf("unable to encode help.editUserInfo#66b91b70: field user_id is nil")
	}
	if err := e.UserID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode help.editUserInfo#66b91b70: field user_id: %w", err)
	}
	b.PutString(e.Message)
	b.PutVectorHeader(len(e.Entities))
	for idx, v := range e.Entities {
		if v == nil {
			return fmt.Errorf("unable to encode help.editUserInfo#66b91b70: field entities element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode help.editUserInfo#66b91b70: field entities element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (e *HelpEditUserInfoRequest) Decode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode help.editUserInfo#66b91b70 to nil")
	}
	if err := b.ConsumeID(HelpEditUserInfoRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode help.editUserInfo#66b91b70: %w", err)
	}
	{
		value, err := DecodeInputUser(b)
		if err != nil {
			return fmt.Errorf("unable to decode help.editUserInfo#66b91b70: field user_id: %w", err)
		}
		e.UserID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode help.editUserInfo#66b91b70: field message: %w", err)
		}
		e.Message = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode help.editUserInfo#66b91b70: field entities: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeMessageEntity(b)
			if err != nil {
				return fmt.Errorf("unable to decode help.editUserInfo#66b91b70: field entities: %w", err)
			}
			e.Entities = append(e.Entities, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for HelpEditUserInfoRequest.
var (
	_ bin.Encoder = &HelpEditUserInfoRequest{}
	_ bin.Decoder = &HelpEditUserInfoRequest{}
)

// HelpEditUserInfo invokes method help.editUserInfo#66b91b70 returning error if any.
// Internal use
//
// See https://core.telegram.org/method/help.editUserInfo for reference.
func (c *Client) HelpEditUserInfo(ctx context.Context, request *HelpEditUserInfoRequest) (HelpUserInfoClass, error) {
	var result HelpUserInfoBox

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.UserInfo, nil
}
