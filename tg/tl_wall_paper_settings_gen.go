// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// WallPaperSettings represents TL type `wallPaperSettings#5086cf8`.
// Wallpaper settings
//
// See https://core.telegram.org/constructor/wallPaperSettings for reference.
type WallPaperSettings struct {
	// Flags, see TL conditional fieldsÂ¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// If set, the wallpaper must be downscaled to fit in 450x450 square and then box-blurred with radius 12
	Blur bool
	// If set, the background needs to be slightly moved when device is rotated
	Motion bool
	// If set, a PNG pattern is to be combined with the color chosen by the user: the main color of the background in RGB24 format
	//
	// Use SetBackgroundColor and GetBackgroundColor helpers.
	BackgroundColor int
	// If set, a PNG pattern is to be combined with the first and second background colors (RGB24 format) in a top-bottom gradient
	//
	// Use SetSecondBackgroundColor and GetSecondBackgroundColor helpers.
	SecondBackgroundColor int
	// Intensity of the pattern when it is shown above the main background color, 0-100
	//
	// Use SetIntensity and GetIntensity helpers.
	Intensity int
	// Clockwise rotation angle of the gradient, in degrees; 0-359. Should be always divisible by 45
	//
	// Use SetRotation and GetRotation helpers.
	Rotation int
}

// WallPaperSettingsTypeID is TL type id of WallPaperSettings.
const WallPaperSettingsTypeID = 0x5086cf8

func (w *WallPaperSettings) Zero() bool {
	if w == nil {
		return true
	}
	if !(w.Flags.Zero()) {
		return false
	}
	if !(w.Blur == false) {
		return false
	}
	if !(w.Motion == false) {
		return false
	}
	if !(w.BackgroundColor == 0) {
		return false
	}
	if !(w.SecondBackgroundColor == 0) {
		return false
	}
	if !(w.Intensity == 0) {
		return false
	}
	if !(w.Rotation == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (w *WallPaperSettings) String() string {
	if w == nil {
		return "WallPaperSettings(nil)"
	}
	type Alias WallPaperSettings
	return fmt.Sprintf("WallPaperSettings%+v", Alias(*w))
}

// FillFrom fills WallPaperSettings from given interface.
func (w *WallPaperSettings) FillFrom(from interface {
	GetBlur() (value bool)
	GetMotion() (value bool)
	GetBackgroundColor() (value int, ok bool)
	GetSecondBackgroundColor() (value int, ok bool)
	GetIntensity() (value int, ok bool)
	GetRotation() (value int, ok bool)
}) {
	w.Blur = from.GetBlur()
	w.Motion = from.GetMotion()
	if val, ok := from.GetBackgroundColor(); ok {
		w.BackgroundColor = val
	}

	if val, ok := from.GetSecondBackgroundColor(); ok {
		w.SecondBackgroundColor = val
	}

	if val, ok := from.GetIntensity(); ok {
		w.Intensity = val
	}

	if val, ok := from.GetRotation(); ok {
		w.Rotation = val
	}

}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*WallPaperSettings) TypeID() uint32 {
	return WallPaperSettingsTypeID
}

// TypeName returns name of type in TL schema.
func (*WallPaperSettings) TypeName() string {
	return "wallPaperSettings"
}

// TypeInfo returns info about TL type.
func (w *WallPaperSettings) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "wallPaperSettings",
		ID:   WallPaperSettingsTypeID,
	}
	if w == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Blur",
			SchemaName: "blur",
			Null:       !w.Flags.Has(1),
		},
		{
			Name:       "Motion",
			SchemaName: "motion",
			Null:       !w.Flags.Has(2),
		},
		{
			Name:       "BackgroundColor",
			SchemaName: "background_color",
			Null:       !w.Flags.Has(0),
		},
		{
			Name:       "SecondBackgroundColor",
			SchemaName: "second_background_color",
			Null:       !w.Flags.Has(4),
		},
		{
			Name:       "Intensity",
			SchemaName: "intensity",
			Null:       !w.Flags.Has(3),
		},
		{
			Name:       "Rotation",
			SchemaName: "rotation",
			Null:       !w.Flags.Has(4),
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (w *WallPaperSettings) Encode(b *bin.Buffer) error {
	if w == nil {
		return fmt.Errorf("can't encode wallPaperSettings#5086cf8 as nil")
	}
	b.PutID(WallPaperSettingsTypeID)
	return w.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (w *WallPaperSettings) EncodeBare(b *bin.Buffer) error {
	if w == nil {
		return fmt.Errorf("can't encode wallPaperSettings#5086cf8 as nil")
	}
	if !(w.Blur == false) {
		w.Flags.Set(1)
	}
	if !(w.Motion == false) {
		w.Flags.Set(2)
	}
	if !(w.BackgroundColor == 0) {
		w.Flags.Set(0)
	}
	if !(w.SecondBackgroundColor == 0) {
		w.Flags.Set(4)
	}
	if !(w.Intensity == 0) {
		w.Flags.Set(3)
	}
	if !(w.Rotation == 0) {
		w.Flags.Set(4)
	}
	if err := w.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode wallPaperSettings#5086cf8: field flags: %w", err)
	}
	if w.Flags.Has(0) {
		b.PutInt(w.BackgroundColor)
	}
	if w.Flags.Has(4) {
		b.PutInt(w.SecondBackgroundColor)
	}
	if w.Flags.Has(3) {
		b.PutInt(w.Intensity)
	}
	if w.Flags.Has(4) {
		b.PutInt(w.Rotation)
	}
	return nil
}

// SetBlur sets value of Blur conditional field.
func (w *WallPaperSettings) SetBlur(value bool) {
	if value {
		w.Flags.Set(1)
		w.Blur = true
	} else {
		w.Flags.Unset(1)
		w.Blur = false
	}
}

// GetBlur returns value of Blur conditional field.
func (w *WallPaperSettings) GetBlur() (value bool) {
	return w.Flags.Has(1)
}

// SetMotion sets value of Motion conditional field.
func (w *WallPaperSettings) SetMotion(value bool) {
	if value {
		w.Flags.Set(2)
		w.Motion = true
	} else {
		w.Flags.Unset(2)
		w.Motion = false
	}
}

// GetMotion returns value of Motion conditional field.
func (w *WallPaperSettings) GetMotion() (value bool) {
	return w.Flags.Has(2)
}

// SetBackgroundColor sets value of BackgroundColor conditional field.
func (w *WallPaperSettings) SetBackgroundColor(value int) {
	w.Flags.Set(0)
	w.BackgroundColor = value
}

// GetBackgroundColor returns value of BackgroundColor conditional field and
// boolean which is true if field was set.
func (w *WallPaperSettings) GetBackgroundColor() (value int, ok bool) {
	if !w.Flags.Has(0) {
		return value, false
	}
	return w.BackgroundColor, true
}

// SetSecondBackgroundColor sets value of SecondBackgroundColor conditional field.
func (w *WallPaperSettings) SetSecondBackgroundColor(value int) {
	w.Flags.Set(4)
	w.SecondBackgroundColor = value
}

// GetSecondBackgroundColor returns value of SecondBackgroundColor conditional field and
// boolean which is true if field was set.
func (w *WallPaperSettings) GetSecondBackgroundColor() (value int, ok bool) {
	if !w.Flags.Has(4) {
		return value, false
	}
	return w.SecondBackgroundColor, true
}

// SetIntensity sets value of Intensity conditional field.
func (w *WallPaperSettings) SetIntensity(value int) {
	w.Flags.Set(3)
	w.Intensity = value
}

// GetIntensity returns value of Intensity conditional field and
// boolean which is true if field was set.
func (w *WallPaperSettings) GetIntensity() (value int, ok bool) {
	if !w.Flags.Has(3) {
		return value, false
	}
	return w.Intensity, true
}

// SetRotation sets value of Rotation conditional field.
func (w *WallPaperSettings) SetRotation(value int) {
	w.Flags.Set(4)
	w.Rotation = value
}

// GetRotation returns value of Rotation conditional field and
// boolean which is true if field was set.
func (w *WallPaperSettings) GetRotation() (value int, ok bool) {
	if !w.Flags.Has(4) {
		return value, false
	}
	return w.Rotation, true
}

// Decode implements bin.Decoder.
func (w *WallPaperSettings) Decode(b *bin.Buffer) error {
	if w == nil {
		return fmt.Errorf("can't decode wallPaperSettings#5086cf8 to nil")
	}
	if err := b.ConsumeID(WallPaperSettingsTypeID); err != nil {
		return fmt.Errorf("unable to decode wallPaperSettings#5086cf8: %w", err)
	}
	return w.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (w *WallPaperSettings) DecodeBare(b *bin.Buffer) error {
	if w == nil {
		return fmt.Errorf("can't decode wallPaperSettings#5086cf8 to nil")
	}
	{
		if err := w.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode wallPaperSettings#5086cf8: field flags: %w", err)
		}
	}
	w.Blur = w.Flags.Has(1)
	w.Motion = w.Flags.Has(2)
	if w.Flags.Has(0) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode wallPaperSettings#5086cf8: field background_color: %w", err)
		}
		w.BackgroundColor = value
	}
	if w.Flags.Has(4) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode wallPaperSettings#5086cf8: field second_background_color: %w", err)
		}
		w.SecondBackgroundColor = value
	}
	if w.Flags.Has(3) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode wallPaperSettings#5086cf8: field intensity: %w", err)
		}
		w.Intensity = value
	}
	if w.Flags.Has(4) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode wallPaperSettings#5086cf8: field rotation: %w", err)
		}
		w.Rotation = value
	}
	return nil
}

// Ensuring interfaces in compile-time for WallPaperSettings.
var (
	_ bin.Encoder     = &WallPaperSettings{}
	_ bin.Decoder     = &WallPaperSettings{}
	_ bin.BareEncoder = &WallPaperSettings{}
	_ bin.BareDecoder = &WallPaperSettings{}
)
