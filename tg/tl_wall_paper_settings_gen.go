// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// WallPaperSettings represents TL type `wallPaperSettings#5086cf8`.
//
// See https://core.telegram.org/constructor/wallPaperSettings for reference.
type WallPaperSettings struct {
	// Flags field of WallPaperSettings.
	Flags bin.Fields
	// Blur field of WallPaperSettings.
	Blur bool
	// Motion field of WallPaperSettings.
	Motion bool
	// BackgroundColor field of WallPaperSettings.
	//
	// Use SetBackgroundColor and GetBackgroundColor helpers.
	BackgroundColor int
	// SecondBackgroundColor field of WallPaperSettings.
	//
	// Use SetSecondBackgroundColor and GetSecondBackgroundColor helpers.
	SecondBackgroundColor int
	// Intensity field of WallPaperSettings.
	//
	// Use SetIntensity and GetIntensity helpers.
	Intensity int
	// Rotation field of WallPaperSettings.
	//
	// Use SetRotation and GetRotation helpers.
	Rotation int
}

// WallPaperSettingsTypeID is TL type id of WallPaperSettings.
const WallPaperSettingsTypeID = 0x5086cf8

// Encode implements bin.Encoder.
func (w *WallPaperSettings) Encode(b *bin.Buffer) error {
	if w == nil {
		return fmt.Errorf("can't encode wallPaperSettings#5086cf8 as nil")
	}
	b.PutID(WallPaperSettingsTypeID)
	if err := w.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode wallPaperSettings#5086cf8: field flags: %w", err)
	}
	if w.Flags.Has(0) {
		b.PutInt(w.BackgroundColor)
	}
	if w.Flags.Has(4) {
		b.PutInt(w.SecondBackgroundColor)
	}
	if w.Flags.Has(3) {
		b.PutInt(w.Intensity)
	}
	if w.Flags.Has(4) {
		b.PutInt(w.Rotation)
	}
	return nil
}

// SetBlur sets value of Blur conditional field.
func (w *WallPaperSettings) SetBlur(value bool) {
	if value {
		w.Flags.Set(1)
	} else {
		w.Flags.Unset(1)
	}
}

// SetMotion sets value of Motion conditional field.
func (w *WallPaperSettings) SetMotion(value bool) {
	if value {
		w.Flags.Set(2)
	} else {
		w.Flags.Unset(2)
	}
}

// SetBackgroundColor sets value of BackgroundColor conditional field.
func (w *WallPaperSettings) SetBackgroundColor(value int) {
	w.Flags.Set(0)
	w.BackgroundColor = value
}

// GetBackgroundColor returns value of BackgroundColor conditional field and
// boolean which is true if field was set.
func (w *WallPaperSettings) GetBackgroundColor() (value int, ok bool) {
	if !w.Flags.Has(0) {
		return value, false
	}
	return w.BackgroundColor, true
}

// SetSecondBackgroundColor sets value of SecondBackgroundColor conditional field.
func (w *WallPaperSettings) SetSecondBackgroundColor(value int) {
	w.Flags.Set(4)
	w.SecondBackgroundColor = value
}

// GetSecondBackgroundColor returns value of SecondBackgroundColor conditional field and
// boolean which is true if field was set.
func (w *WallPaperSettings) GetSecondBackgroundColor() (value int, ok bool) {
	if !w.Flags.Has(4) {
		return value, false
	}
	return w.SecondBackgroundColor, true
}

// SetIntensity sets value of Intensity conditional field.
func (w *WallPaperSettings) SetIntensity(value int) {
	w.Flags.Set(3)
	w.Intensity = value
}

// GetIntensity returns value of Intensity conditional field and
// boolean which is true if field was set.
func (w *WallPaperSettings) GetIntensity() (value int, ok bool) {
	if !w.Flags.Has(3) {
		return value, false
	}
	return w.Intensity, true
}

// SetRotation sets value of Rotation conditional field.
func (w *WallPaperSettings) SetRotation(value int) {
	w.Flags.Set(4)
	w.Rotation = value
}

// GetRotation returns value of Rotation conditional field and
// boolean which is true if field was set.
func (w *WallPaperSettings) GetRotation() (value int, ok bool) {
	if !w.Flags.Has(4) {
		return value, false
	}
	return w.Rotation, true
}

// Decode implements bin.Decoder.
func (w *WallPaperSettings) Decode(b *bin.Buffer) error {
	if w == nil {
		return fmt.Errorf("can't decode wallPaperSettings#5086cf8 to nil")
	}
	if err := b.ConsumeID(WallPaperSettingsTypeID); err != nil {
		return fmt.Errorf("unable to decode wallPaperSettings#5086cf8: %w", err)
	}
	{
		if err := w.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode wallPaperSettings#5086cf8: field flags: %w", err)
		}
	}
	w.Blur = w.Flags.Has(1)
	w.Motion = w.Flags.Has(2)
	if w.Flags.Has(0) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode wallPaperSettings#5086cf8: field background_color: %w", err)
		}
		w.BackgroundColor = value
	}
	if w.Flags.Has(4) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode wallPaperSettings#5086cf8: field second_background_color: %w", err)
		}
		w.SecondBackgroundColor = value
	}
	if w.Flags.Has(3) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode wallPaperSettings#5086cf8: field intensity: %w", err)
		}
		w.Intensity = value
	}
	if w.Flags.Has(4) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode wallPaperSettings#5086cf8: field rotation: %w", err)
		}
		w.Rotation = value
	}
	return nil
}

// Ensuring interfaces in compile-time for WallPaperSettings.
var (
	_ bin.Encoder = &WallPaperSettings{}
	_ bin.Decoder = &WallPaperSettings{}
)
