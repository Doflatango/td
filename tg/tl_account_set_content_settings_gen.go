// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// AccountSetContentSettingsRequest represents TL type `account.setContentSettings#b574b16b`.
// Set sensitive content settings (for viewing or hiding NSFW content)
//
// See https://core.telegram.org/method/account.setContentSettings for reference.
type AccountSetContentSettingsRequest struct {
	// Flags, see TL conditional fieldsÂ¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// Enable NSFW content
	SensitiveEnabled bool
}

// AccountSetContentSettingsRequestTypeID is TL type id of AccountSetContentSettingsRequest.
const AccountSetContentSettingsRequestTypeID = 0xb574b16b

func (s *AccountSetContentSettingsRequest) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Flags.Zero()) {
		return false
	}
	if !(s.SensitiveEnabled == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *AccountSetContentSettingsRequest) String() string {
	if s == nil {
		return "AccountSetContentSettingsRequest(nil)"
	}
	var sb strings.Builder
	sb.WriteString("AccountSetContentSettingsRequest")
	sb.WriteString("{\n")
	sb.WriteString("\tFlags: ")
	sb.WriteString(fmt.Sprint(s.Flags))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (s *AccountSetContentSettingsRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode account.setContentSettings#b574b16b as nil")
	}
	b.PutID(AccountSetContentSettingsRequestTypeID)
	if !(s.SensitiveEnabled == false) {
		s.Flags.Set(0)
	}
	if err := s.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode account.setContentSettings#b574b16b: field flags: %w", err)
	}
	return nil
}

// SetSensitiveEnabled sets value of SensitiveEnabled conditional field.
func (s *AccountSetContentSettingsRequest) SetSensitiveEnabled(value bool) {
	if value {
		s.Flags.Set(0)
		s.SensitiveEnabled = true
	} else {
		s.Flags.Unset(0)
		s.SensitiveEnabled = false
	}
}

// Decode implements bin.Decoder.
func (s *AccountSetContentSettingsRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode account.setContentSettings#b574b16b to nil")
	}
	if err := b.ConsumeID(AccountSetContentSettingsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode account.setContentSettings#b574b16b: %w", err)
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode account.setContentSettings#b574b16b: field flags: %w", err)
		}
	}
	s.SensitiveEnabled = s.Flags.Has(0)
	return nil
}

// Ensuring interfaces in compile-time for AccountSetContentSettingsRequest.
var (
	_ bin.Encoder = &AccountSetContentSettingsRequest{}
	_ bin.Decoder = &AccountSetContentSettingsRequest{}
)

// AccountSetContentSettings invokes method account.setContentSettings#b574b16b returning error if any.
// Set sensitive content settings (for viewing or hiding NSFW content)
//
// See https://core.telegram.org/method/account.setContentSettings for reference.
func (c *Client) AccountSetContentSettings(ctx context.Context, request *AccountSetContentSettingsRequest) (bool, error) {
	var result BoolBox

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
