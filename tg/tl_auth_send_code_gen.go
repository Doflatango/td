// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// AuthSendCodeRequest represents TL type `auth.sendCode#a677244f`.
// Send the verification code for login
//
// See https://core.telegram.org/method/auth.sendCode for reference.
type AuthSendCodeRequest struct {
	// Phone number in international format
	PhoneNumber string
	// Application identifier (see App configuration¹)
	//
	// Links:
	//  1) https://core.telegram.org/myapp
	APIID int
	// Application secret hash (see App configuration¹)
	//
	// Links:
	//  1) https://core.telegram.org/myapp
	APIHash string
	// Settings for the code type to send
	Settings CodeSettings
}

// AuthSendCodeRequestTypeID is TL type id of AuthSendCodeRequest.
const AuthSendCodeRequestTypeID = 0xa677244f

// String implements fmt.Stringer.
func (s *AuthSendCodeRequest) String() string {
	if s == nil {
		return "AuthSendCodeRequest(nil)"
	}
	var sb strings.Builder
	sb.WriteString("AuthSendCodeRequest")
	sb.WriteString("{\n")
	sb.WriteString("\tPhoneNumber: ")
	sb.WriteString(fmt.Sprint(s.PhoneNumber))
	sb.WriteString(",\n")
	sb.WriteString("\tAPIID: ")
	sb.WriteString(fmt.Sprint(s.APIID))
	sb.WriteString(",\n")
	sb.WriteString("\tAPIHash: ")
	sb.WriteString(fmt.Sprint(s.APIHash))
	sb.WriteString(",\n")
	sb.WriteString("\tSettings: ")
	sb.WriteString(s.Settings.String())
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (s *AuthSendCodeRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode auth.sendCode#a677244f as nil")
	}
	b.PutID(AuthSendCodeRequestTypeID)
	b.PutString(s.PhoneNumber)
	b.PutInt(s.APIID)
	b.PutString(s.APIHash)
	if err := s.Settings.Encode(b); err != nil {
		return fmt.Errorf("unable to encode auth.sendCode#a677244f: field settings: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *AuthSendCodeRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode auth.sendCode#a677244f to nil")
	}
	if err := b.ConsumeID(AuthSendCodeRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode auth.sendCode#a677244f: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode auth.sendCode#a677244f: field phone_number: %w", err)
		}
		s.PhoneNumber = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode auth.sendCode#a677244f: field api_id: %w", err)
		}
		s.APIID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode auth.sendCode#a677244f: field api_hash: %w", err)
		}
		s.APIHash = value
	}
	{
		if err := s.Settings.Decode(b); err != nil {
			return fmt.Errorf("unable to decode auth.sendCode#a677244f: field settings: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for AuthSendCodeRequest.
var (
	_ bin.Encoder = &AuthSendCodeRequest{}
	_ bin.Decoder = &AuthSendCodeRequest{}
)

// AuthSendCode invokes method auth.sendCode#a677244f returning error if any.
// Send the verification code for login
//
// See https://core.telegram.org/method/auth.sendCode for reference.
func (c *Client) AuthSendCode(ctx context.Context, request *AuthSendCodeRequest) (*AuthSentCode, error) {
	var result AuthSentCode

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
