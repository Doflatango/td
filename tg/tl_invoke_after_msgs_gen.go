// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// InvokeAfterMsgsRequest represents TL type `invokeAfterMsgs#3dc4b4f0`.
// Invokes a query after a successfull completion of previous queries
//
// See https://core.telegram.org/constructor/invokeAfterMsgs for reference.
type InvokeAfterMsgsRequest struct {
	// List of messages on which a current query depends
	MsgIds []int64 `schemaname:"msg_ids"`
	// The query itself
	Query bin.Object `schemaname:"query"`
}

// InvokeAfterMsgsRequestTypeID is TL type id of InvokeAfterMsgsRequest.
const InvokeAfterMsgsRequestTypeID = 0x3dc4b4f0

func (i *InvokeAfterMsgsRequest) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.MsgIds == nil) {
		return false
	}
	if !(i.Query == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InvokeAfterMsgsRequest) String() string {
	if i == nil {
		return "InvokeAfterMsgsRequest(nil)"
	}
	type Alias InvokeAfterMsgsRequest
	return fmt.Sprintf("InvokeAfterMsgsRequest%+v", Alias(*i))
}

// FillFrom fills InvokeAfterMsgsRequest from given interface.
func (i *InvokeAfterMsgsRequest) FillFrom(from interface {
	GetMsgIds() (value []int64)
	GetQuery() (value bin.Object)
}) {
	i.MsgIds = from.GetMsgIds()
	i.Query = from.GetQuery()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (i *InvokeAfterMsgsRequest) TypeID() uint32 {
	return InvokeAfterMsgsRequestTypeID
}

// SchemaName returns MTProto type name.
func (i *InvokeAfterMsgsRequest) SchemaName() string {
	return "invokeAfterMsgs"
}

// Encode implements bin.Encoder.
func (i *InvokeAfterMsgsRequest) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode invokeAfterMsgs#3dc4b4f0 as nil")
	}
	b.PutID(InvokeAfterMsgsRequestTypeID)
	b.PutVectorHeader(len(i.MsgIds))
	for _, v := range i.MsgIds {
		b.PutLong(v)
	}
	if err := i.Query.Encode(b); err != nil {
		return fmt.Errorf("unable to encode invokeAfterMsgs#3dc4b4f0: field query: %w", err)
	}
	return nil
}

// GetMsgIds returns value of MsgIds field.
func (i *InvokeAfterMsgsRequest) GetMsgIds() (value []int64) {
	return i.MsgIds
}

// GetQuery returns value of Query field.
func (i *InvokeAfterMsgsRequest) GetQuery() (value bin.Object) {
	return i.Query
}

// Decode implements bin.Decoder.
func (i *InvokeAfterMsgsRequest) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode invokeAfterMsgs#3dc4b4f0 to nil")
	}
	if err := b.ConsumeID(InvokeAfterMsgsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode invokeAfterMsgs#3dc4b4f0: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode invokeAfterMsgs#3dc4b4f0: field msg_ids: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode invokeAfterMsgs#3dc4b4f0: field msg_ids: %w", err)
			}
			i.MsgIds = append(i.MsgIds, value)
		}
	}
	{
		if err := i.Query.Decode(b); err != nil {
			return fmt.Errorf("unable to decode invokeAfterMsgs#3dc4b4f0: field query: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for InvokeAfterMsgsRequest.
var (
	_ bin.Encoder = &InvokeAfterMsgsRequest{}
	_ bin.Decoder = &InvokeAfterMsgsRequest{}
)
