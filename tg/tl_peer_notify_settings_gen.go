// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// PeerNotifySettings represents TL type `peerNotifySettings#af509d20`.
// Notification settings.
//
// See https://core.telegram.org/constructor/peerNotifySettings for reference.
type PeerNotifySettings struct {
	// Flags, see TL conditional fields
	Flags bin.Fields
	// Display text in notifications
	ShowPreviews bool
	// Mute peer?
	Silent bool
	// Mute all notifications until this date
	//
	// Use SetMuteUntil and GetMuteUntil helpers.
	MuteUntil int
	// Audio file name for notifications
	//
	// Use SetSound and GetSound helpers.
	Sound string
}

// PeerNotifySettingsTypeID is TL type id of PeerNotifySettings.
const PeerNotifySettingsTypeID = 0xaf509d20

// Encode implements bin.Encoder.
func (p *PeerNotifySettings) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode peerNotifySettings#af509d20 as nil")
	}
	b.PutID(PeerNotifySettingsTypeID)
	if err := p.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode peerNotifySettings#af509d20: field flags: %w", err)
	}
	if p.Flags.Has(2) {
		b.PutInt(p.MuteUntil)
	}
	if p.Flags.Has(3) {
		b.PutString(p.Sound)
	}
	return nil
}

// SetShowPreviews sets value of ShowPreviews conditional field.
func (p *PeerNotifySettings) SetShowPreviews(value bool) {
	if value {
		p.Flags.Set(0)
	} else {
		p.Flags.Unset(0)
	}
}

// SetSilent sets value of Silent conditional field.
func (p *PeerNotifySettings) SetSilent(value bool) {
	if value {
		p.Flags.Set(1)
	} else {
		p.Flags.Unset(1)
	}
}

// SetMuteUntil sets value of MuteUntil conditional field.
func (p *PeerNotifySettings) SetMuteUntil(value int) {
	p.Flags.Set(2)
	p.MuteUntil = value
}

// GetMuteUntil returns value of MuteUntil conditional field and
// boolean which is true if field was set.
func (p *PeerNotifySettings) GetMuteUntil() (value int, ok bool) {
	if !p.Flags.Has(2) {
		return value, false
	}
	return p.MuteUntil, true
}

// SetSound sets value of Sound conditional field.
func (p *PeerNotifySettings) SetSound(value string) {
	p.Flags.Set(3)
	p.Sound = value
}

// GetSound returns value of Sound conditional field and
// boolean which is true if field was set.
func (p *PeerNotifySettings) GetSound() (value string, ok bool) {
	if !p.Flags.Has(3) {
		return value, false
	}
	return p.Sound, true
}

// Decode implements bin.Decoder.
func (p *PeerNotifySettings) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode peerNotifySettings#af509d20 to nil")
	}
	if err := b.ConsumeID(PeerNotifySettingsTypeID); err != nil {
		return fmt.Errorf("unable to decode peerNotifySettings#af509d20: %w", err)
	}
	{
		if err := p.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode peerNotifySettings#af509d20: field flags: %w", err)
		}
	}
	p.ShowPreviews = p.Flags.Has(0)
	p.Silent = p.Flags.Has(1)
	if p.Flags.Has(2) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode peerNotifySettings#af509d20: field mute_until: %w", err)
		}
		p.MuteUntil = value
	}
	if p.Flags.Has(3) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode peerNotifySettings#af509d20: field sound: %w", err)
		}
		p.Sound = value
	}
	return nil
}

// Ensuring interfaces in compile-time for PeerNotifySettings.
var (
	_ bin.Encoder = &PeerNotifySettings{}
	_ bin.Decoder = &PeerNotifySettings{}
)
