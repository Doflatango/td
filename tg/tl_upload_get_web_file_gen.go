// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// UploadGetWebFileRequest represents TL type `upload.getWebFile#24e6818d`.
type UploadGetWebFileRequest struct {
	// Location field of UploadGetWebFileRequest.
	Location InputWebFileLocationClass
	// Offset field of UploadGetWebFileRequest.
	Offset int
	// Limit field of UploadGetWebFileRequest.
	Limit int
}

// UploadGetWebFileRequestTypeID is TL type id of UploadGetWebFileRequest.
const UploadGetWebFileRequestTypeID = 0x24e6818d

// Encode implements bin.Encoder.
func (g *UploadGetWebFileRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode upload.getWebFile#24e6818d as nil")
	}
	b.PutID(UploadGetWebFileRequestTypeID)
	if g.Location == nil {
		return fmt.Errorf("unable to encode upload.getWebFile#24e6818d: field location is nil")
	}
	if err := g.Location.Encode(b); err != nil {
		return fmt.Errorf("unable to encode upload.getWebFile#24e6818d: field location: %w", err)
	}
	b.PutInt(g.Offset)
	b.PutInt(g.Limit)
	return nil
}

// Decode implements bin.Decoder.
func (g *UploadGetWebFileRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode upload.getWebFile#24e6818d to nil")
	}
	if err := b.ConsumeID(UploadGetWebFileRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode upload.getWebFile#24e6818d: %w", err)
	}
	{
		value, err := DecodeInputWebFileLocation(b)
		if err != nil {
			return fmt.Errorf("unable to decode upload.getWebFile#24e6818d: field location: %w", err)
		}
		g.Location = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode upload.getWebFile#24e6818d: field offset: %w", err)
		}
		g.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode upload.getWebFile#24e6818d: field limit: %w", err)
		}
		g.Limit = value
	}
	return nil
}

// Ensuring interfaces in compile-time for UploadGetWebFileRequest.
var (
	_ bin.Encoder = &UploadGetWebFileRequest{}
	_ bin.Decoder = &UploadGetWebFileRequest{}
)
