// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// HelpDismissSuggestionRequest represents TL type `help.dismissSuggestion#77fa99f`.
// Dismiss a suggestion
//
// See https://core.telegram.org/method/help.dismissSuggestion for reference.
type HelpDismissSuggestionRequest struct {
	// Suggestion
	Suggestion string
}

// HelpDismissSuggestionRequestTypeID is TL type id of HelpDismissSuggestionRequest.
const HelpDismissSuggestionRequestTypeID = 0x77fa99f

// Encode implements bin.Encoder.
func (d *HelpDismissSuggestionRequest) Encode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode help.dismissSuggestion#77fa99f as nil")
	}
	b.PutID(HelpDismissSuggestionRequestTypeID)
	b.PutString(d.Suggestion)
	return nil
}

// Decode implements bin.Decoder.
func (d *HelpDismissSuggestionRequest) Decode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode help.dismissSuggestion#77fa99f to nil")
	}
	if err := b.ConsumeID(HelpDismissSuggestionRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode help.dismissSuggestion#77fa99f: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode help.dismissSuggestion#77fa99f: field suggestion: %w", err)
		}
		d.Suggestion = value
	}
	return nil
}

// Ensuring interfaces in compile-time for HelpDismissSuggestionRequest.
var (
	_ bin.Encoder = &HelpDismissSuggestionRequest{}
	_ bin.Decoder = &HelpDismissSuggestionRequest{}
)

// HelpDismissSuggestion invokes method help.dismissSuggestion#77fa99f returning error if any.
// Dismiss a suggestion
//
// See https://core.telegram.org/method/help.dismissSuggestion for reference.
func (c *Client) HelpDismissSuggestion(ctx context.Context, request *HelpDismissSuggestionRequest) (bool, error) {
	var result BoolBox
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
