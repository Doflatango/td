// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// HelpTermsOfService represents TL type `help.termsOfService#780a0310`.
// Info about the latest telegram Terms Of Service
//
// See https://core.telegram.org/constructor/help.termsOfService for reference.
type HelpTermsOfService struct {
	// Flags, see TL conditional fields
	Flags bin.Fields
	// Whether a prompt must be showed to the user, in order to accept the new terms.
	Popup bool
	// ID of the new terms
	ID DataJSON
	// Text of the new terms
	Text string
	// Message entities for styled text
	Entities []MessageEntityClass
	// Minimum age required to sign up to telegram, the user must confirm that they is older than the minimum age.
	//
	// Use SetMinAgeConfirm and GetMinAgeConfirm helpers.
	MinAgeConfirm int
}

// HelpTermsOfServiceTypeID is TL type id of HelpTermsOfService.
const HelpTermsOfServiceTypeID = 0x780a0310

// Encode implements bin.Encoder.
func (t *HelpTermsOfService) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode help.termsOfService#780a0310 as nil")
	}
	b.PutID(HelpTermsOfServiceTypeID)
	if err := t.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode help.termsOfService#780a0310: field flags: %w", err)
	}
	if err := t.ID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode help.termsOfService#780a0310: field id: %w", err)
	}
	b.PutString(t.Text)
	b.PutVectorHeader(len(t.Entities))
	for idx, v := range t.Entities {
		if v == nil {
			return fmt.Errorf("unable to encode help.termsOfService#780a0310: field entities element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode help.termsOfService#780a0310: field entities element with index %d: %w", idx, err)
		}
	}
	if t.Flags.Has(1) {
		b.PutInt(t.MinAgeConfirm)
	}
	return nil
}

// SetPopup sets value of Popup conditional field.
func (t *HelpTermsOfService) SetPopup(value bool) {
	if value {
		t.Flags.Set(0)
	} else {
		t.Flags.Unset(0)
	}
}

// SetMinAgeConfirm sets value of MinAgeConfirm conditional field.
func (t *HelpTermsOfService) SetMinAgeConfirm(value int) {
	t.Flags.Set(1)
	t.MinAgeConfirm = value
}

// GetMinAgeConfirm returns value of MinAgeConfirm conditional field and
// boolean which is true if field was set.
func (t *HelpTermsOfService) GetMinAgeConfirm() (value int, ok bool) {
	if !t.Flags.Has(1) {
		return value, false
	}
	return t.MinAgeConfirm, true
}

// Decode implements bin.Decoder.
func (t *HelpTermsOfService) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode help.termsOfService#780a0310 to nil")
	}
	if err := b.ConsumeID(HelpTermsOfServiceTypeID); err != nil {
		return fmt.Errorf("unable to decode help.termsOfService#780a0310: %w", err)
	}
	{
		if err := t.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode help.termsOfService#780a0310: field flags: %w", err)
		}
	}
	t.Popup = t.Flags.Has(0)
	{
		if err := t.ID.Decode(b); err != nil {
			return fmt.Errorf("unable to decode help.termsOfService#780a0310: field id: %w", err)
		}
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode help.termsOfService#780a0310: field text: %w", err)
		}
		t.Text = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode help.termsOfService#780a0310: field entities: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeMessageEntity(b)
			if err != nil {
				return fmt.Errorf("unable to decode help.termsOfService#780a0310: field entities: %w", err)
			}
			t.Entities = append(t.Entities, value)
		}
	}
	if t.Flags.Has(1) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode help.termsOfService#780a0310: field min_age_confirm: %w", err)
		}
		t.MinAgeConfirm = value
	}
	return nil
}

// Ensuring interfaces in compile-time for HelpTermsOfService.
var (
	_ bin.Encoder = &HelpTermsOfService{}
	_ bin.Decoder = &HelpTermsOfService{}
)
