// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// UpdateNewMessage represents TL type `updateNewMessage#1f2b0afd`.
//
// See https://core.telegram.org/constructor/updateNewMessage for reference.
type UpdateNewMessage struct {
	// Message field of UpdateNewMessage.
	Message MessageClass
	// Pts field of UpdateNewMessage.
	Pts int
	// PtsCount field of UpdateNewMessage.
	PtsCount int
}

// UpdateNewMessageTypeID is TL type id of UpdateNewMessage.
const UpdateNewMessageTypeID = 0x1f2b0afd

// Encode implements bin.Encoder.
func (u *UpdateNewMessage) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateNewMessage#1f2b0afd as nil")
	}
	b.PutID(UpdateNewMessageTypeID)
	if u.Message == nil {
		return fmt.Errorf("unable to encode updateNewMessage#1f2b0afd: field message is nil")
	}
	if err := u.Message.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateNewMessage#1f2b0afd: field message: %w", err)
	}
	b.PutInt(u.Pts)
	b.PutInt(u.PtsCount)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateNewMessage) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateNewMessage#1f2b0afd to nil")
	}
	if err := b.ConsumeID(UpdateNewMessageTypeID); err != nil {
		return fmt.Errorf("unable to decode updateNewMessage#1f2b0afd: %w", err)
	}
	{
		value, err := DecodeMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateNewMessage#1f2b0afd: field message: %w", err)
		}
		u.Message = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateNewMessage#1f2b0afd: field pts: %w", err)
		}
		u.Pts = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateNewMessage#1f2b0afd: field pts_count: %w", err)
		}
		u.PtsCount = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateNewMessage) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateNewMessage.
var (
	_ bin.Encoder = &UpdateNewMessage{}
	_ bin.Decoder = &UpdateNewMessage{}

	_ UpdateClass = &UpdateNewMessage{}
)

// UpdateMessageID represents TL type `updateMessageID#4e90bfd6`.
//
// See https://core.telegram.org/constructor/updateMessageID for reference.
type UpdateMessageID struct {
	// ID field of UpdateMessageID.
	ID int
	// RandomID field of UpdateMessageID.
	RandomID int64
}

// UpdateMessageIDTypeID is TL type id of UpdateMessageID.
const UpdateMessageIDTypeID = 0x4e90bfd6

// Encode implements bin.Encoder.
func (u *UpdateMessageID) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateMessageID#4e90bfd6 as nil")
	}
	b.PutID(UpdateMessageIDTypeID)
	b.PutInt(u.ID)
	b.PutLong(u.RandomID)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateMessageID) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateMessageID#4e90bfd6 to nil")
	}
	if err := b.ConsumeID(UpdateMessageIDTypeID); err != nil {
		return fmt.Errorf("unable to decode updateMessageID#4e90bfd6: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateMessageID#4e90bfd6: field id: %w", err)
		}
		u.ID = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode updateMessageID#4e90bfd6: field random_id: %w", err)
		}
		u.RandomID = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateMessageID) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateMessageID.
var (
	_ bin.Encoder = &UpdateMessageID{}
	_ bin.Decoder = &UpdateMessageID{}

	_ UpdateClass = &UpdateMessageID{}
)

// UpdateDeleteMessages represents TL type `updateDeleteMessages#a20db0e5`.
//
// See https://core.telegram.org/constructor/updateDeleteMessages for reference.
type UpdateDeleteMessages struct {
	// Messages field of UpdateDeleteMessages.
	Messages []int
	// Pts field of UpdateDeleteMessages.
	Pts int
	// PtsCount field of UpdateDeleteMessages.
	PtsCount int
}

// UpdateDeleteMessagesTypeID is TL type id of UpdateDeleteMessages.
const UpdateDeleteMessagesTypeID = 0xa20db0e5

// Encode implements bin.Encoder.
func (u *UpdateDeleteMessages) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateDeleteMessages#a20db0e5 as nil")
	}
	b.PutID(UpdateDeleteMessagesTypeID)
	b.PutVectorHeader(len(u.Messages))
	for _, v := range u.Messages {
		b.PutInt(v)
	}
	b.PutInt(u.Pts)
	b.PutInt(u.PtsCount)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateDeleteMessages) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateDeleteMessages#a20db0e5 to nil")
	}
	if err := b.ConsumeID(UpdateDeleteMessagesTypeID); err != nil {
		return fmt.Errorf("unable to decode updateDeleteMessages#a20db0e5: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updateDeleteMessages#a20db0e5: field messages: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Int()
			if err != nil {
				return fmt.Errorf("unable to decode updateDeleteMessages#a20db0e5: field messages: %w", err)
			}
			u.Messages = append(u.Messages, value)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateDeleteMessages#a20db0e5: field pts: %w", err)
		}
		u.Pts = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateDeleteMessages#a20db0e5: field pts_count: %w", err)
		}
		u.PtsCount = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateDeleteMessages) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateDeleteMessages.
var (
	_ bin.Encoder = &UpdateDeleteMessages{}
	_ bin.Decoder = &UpdateDeleteMessages{}

	_ UpdateClass = &UpdateDeleteMessages{}
)

// UpdateUserTyping represents TL type `updateUserTyping#5c486927`.
//
// See https://core.telegram.org/constructor/updateUserTyping for reference.
type UpdateUserTyping struct {
	// UserID field of UpdateUserTyping.
	UserID int
	// Action field of UpdateUserTyping.
	Action SendMessageActionClass
}

// UpdateUserTypingTypeID is TL type id of UpdateUserTyping.
const UpdateUserTypingTypeID = 0x5c486927

// Encode implements bin.Encoder.
func (u *UpdateUserTyping) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateUserTyping#5c486927 as nil")
	}
	b.PutID(UpdateUserTypingTypeID)
	b.PutInt(u.UserID)
	if u.Action == nil {
		return fmt.Errorf("unable to encode updateUserTyping#5c486927: field action is nil")
	}
	if err := u.Action.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateUserTyping#5c486927: field action: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateUserTyping) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateUserTyping#5c486927 to nil")
	}
	if err := b.ConsumeID(UpdateUserTypingTypeID); err != nil {
		return fmt.Errorf("unable to decode updateUserTyping#5c486927: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateUserTyping#5c486927: field user_id: %w", err)
		}
		u.UserID = value
	}
	{
		value, err := DecodeSendMessageAction(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateUserTyping#5c486927: field action: %w", err)
		}
		u.Action = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateUserTyping) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateUserTyping.
var (
	_ bin.Encoder = &UpdateUserTyping{}
	_ bin.Decoder = &UpdateUserTyping{}

	_ UpdateClass = &UpdateUserTyping{}
)

// UpdateChatUserTyping represents TL type `updateChatUserTyping#9a65ea1f`.
//
// See https://core.telegram.org/constructor/updateChatUserTyping for reference.
type UpdateChatUserTyping struct {
	// ChatID field of UpdateChatUserTyping.
	ChatID int
	// UserID field of UpdateChatUserTyping.
	UserID int
	// Action field of UpdateChatUserTyping.
	Action SendMessageActionClass
}

// UpdateChatUserTypingTypeID is TL type id of UpdateChatUserTyping.
const UpdateChatUserTypingTypeID = 0x9a65ea1f

// Encode implements bin.Encoder.
func (u *UpdateChatUserTyping) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateChatUserTyping#9a65ea1f as nil")
	}
	b.PutID(UpdateChatUserTypingTypeID)
	b.PutInt(u.ChatID)
	b.PutInt(u.UserID)
	if u.Action == nil {
		return fmt.Errorf("unable to encode updateChatUserTyping#9a65ea1f: field action is nil")
	}
	if err := u.Action.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateChatUserTyping#9a65ea1f: field action: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateChatUserTyping) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateChatUserTyping#9a65ea1f to nil")
	}
	if err := b.ConsumeID(UpdateChatUserTypingTypeID); err != nil {
		return fmt.Errorf("unable to decode updateChatUserTyping#9a65ea1f: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChatUserTyping#9a65ea1f: field chat_id: %w", err)
		}
		u.ChatID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChatUserTyping#9a65ea1f: field user_id: %w", err)
		}
		u.UserID = value
	}
	{
		value, err := DecodeSendMessageAction(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateChatUserTyping#9a65ea1f: field action: %w", err)
		}
		u.Action = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateChatUserTyping) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateChatUserTyping.
var (
	_ bin.Encoder = &UpdateChatUserTyping{}
	_ bin.Decoder = &UpdateChatUserTyping{}

	_ UpdateClass = &UpdateChatUserTyping{}
)

// UpdateChatParticipants represents TL type `updateChatParticipants#7761198`.
//
// See https://core.telegram.org/constructor/updateChatParticipants for reference.
type UpdateChatParticipants struct {
	// Participants field of UpdateChatParticipants.
	Participants ChatParticipantsClass
}

// UpdateChatParticipantsTypeID is TL type id of UpdateChatParticipants.
const UpdateChatParticipantsTypeID = 0x7761198

// Encode implements bin.Encoder.
func (u *UpdateChatParticipants) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateChatParticipants#7761198 as nil")
	}
	b.PutID(UpdateChatParticipantsTypeID)
	if u.Participants == nil {
		return fmt.Errorf("unable to encode updateChatParticipants#7761198: field participants is nil")
	}
	if err := u.Participants.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateChatParticipants#7761198: field participants: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateChatParticipants) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateChatParticipants#7761198 to nil")
	}
	if err := b.ConsumeID(UpdateChatParticipantsTypeID); err != nil {
		return fmt.Errorf("unable to decode updateChatParticipants#7761198: %w", err)
	}
	{
		value, err := DecodeChatParticipants(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateChatParticipants#7761198: field participants: %w", err)
		}
		u.Participants = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateChatParticipants) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateChatParticipants.
var (
	_ bin.Encoder = &UpdateChatParticipants{}
	_ bin.Decoder = &UpdateChatParticipants{}

	_ UpdateClass = &UpdateChatParticipants{}
)

// UpdateUserStatus represents TL type `updateUserStatus#1bfbd823`.
//
// See https://core.telegram.org/constructor/updateUserStatus for reference.
type UpdateUserStatus struct {
	// UserID field of UpdateUserStatus.
	UserID int
	// Status field of UpdateUserStatus.
	Status UserStatusClass
}

// UpdateUserStatusTypeID is TL type id of UpdateUserStatus.
const UpdateUserStatusTypeID = 0x1bfbd823

// Encode implements bin.Encoder.
func (u *UpdateUserStatus) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateUserStatus#1bfbd823 as nil")
	}
	b.PutID(UpdateUserStatusTypeID)
	b.PutInt(u.UserID)
	if u.Status == nil {
		return fmt.Errorf("unable to encode updateUserStatus#1bfbd823: field status is nil")
	}
	if err := u.Status.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateUserStatus#1bfbd823: field status: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateUserStatus) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateUserStatus#1bfbd823 to nil")
	}
	if err := b.ConsumeID(UpdateUserStatusTypeID); err != nil {
		return fmt.Errorf("unable to decode updateUserStatus#1bfbd823: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateUserStatus#1bfbd823: field user_id: %w", err)
		}
		u.UserID = value
	}
	{
		value, err := DecodeUserStatus(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateUserStatus#1bfbd823: field status: %w", err)
		}
		u.Status = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateUserStatus) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateUserStatus.
var (
	_ bin.Encoder = &UpdateUserStatus{}
	_ bin.Decoder = &UpdateUserStatus{}

	_ UpdateClass = &UpdateUserStatus{}
)

// UpdateUserName represents TL type `updateUserName#a7332b73`.
//
// See https://core.telegram.org/constructor/updateUserName for reference.
type UpdateUserName struct {
	// UserID field of UpdateUserName.
	UserID int
	// FirstName field of UpdateUserName.
	FirstName string
	// LastName field of UpdateUserName.
	LastName string
	// Username field of UpdateUserName.
	Username string
}

// UpdateUserNameTypeID is TL type id of UpdateUserName.
const UpdateUserNameTypeID = 0xa7332b73

// Encode implements bin.Encoder.
func (u *UpdateUserName) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateUserName#a7332b73 as nil")
	}
	b.PutID(UpdateUserNameTypeID)
	b.PutInt(u.UserID)
	b.PutString(u.FirstName)
	b.PutString(u.LastName)
	b.PutString(u.Username)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateUserName) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateUserName#a7332b73 to nil")
	}
	if err := b.ConsumeID(UpdateUserNameTypeID); err != nil {
		return fmt.Errorf("unable to decode updateUserName#a7332b73: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateUserName#a7332b73: field user_id: %w", err)
		}
		u.UserID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode updateUserName#a7332b73: field first_name: %w", err)
		}
		u.FirstName = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode updateUserName#a7332b73: field last_name: %w", err)
		}
		u.LastName = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode updateUserName#a7332b73: field username: %w", err)
		}
		u.Username = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateUserName) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateUserName.
var (
	_ bin.Encoder = &UpdateUserName{}
	_ bin.Decoder = &UpdateUserName{}

	_ UpdateClass = &UpdateUserName{}
)

// UpdateUserPhoto represents TL type `updateUserPhoto#95313b0c`.
//
// See https://core.telegram.org/constructor/updateUserPhoto for reference.
type UpdateUserPhoto struct {
	// UserID field of UpdateUserPhoto.
	UserID int
	// Date field of UpdateUserPhoto.
	Date int
	// Photo field of UpdateUserPhoto.
	Photo UserProfilePhotoClass
	// Previous field of UpdateUserPhoto.
	Previous bool
}

// UpdateUserPhotoTypeID is TL type id of UpdateUserPhoto.
const UpdateUserPhotoTypeID = 0x95313b0c

// Encode implements bin.Encoder.
func (u *UpdateUserPhoto) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateUserPhoto#95313b0c as nil")
	}
	b.PutID(UpdateUserPhotoTypeID)
	b.PutInt(u.UserID)
	b.PutInt(u.Date)
	if u.Photo == nil {
		return fmt.Errorf("unable to encode updateUserPhoto#95313b0c: field photo is nil")
	}
	if err := u.Photo.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateUserPhoto#95313b0c: field photo: %w", err)
	}
	b.PutBool(u.Previous)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateUserPhoto) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateUserPhoto#95313b0c to nil")
	}
	if err := b.ConsumeID(UpdateUserPhotoTypeID); err != nil {
		return fmt.Errorf("unable to decode updateUserPhoto#95313b0c: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateUserPhoto#95313b0c: field user_id: %w", err)
		}
		u.UserID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateUserPhoto#95313b0c: field date: %w", err)
		}
		u.Date = value
	}
	{
		value, err := DecodeUserProfilePhoto(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateUserPhoto#95313b0c: field photo: %w", err)
		}
		u.Photo = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode updateUserPhoto#95313b0c: field previous: %w", err)
		}
		u.Previous = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateUserPhoto) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateUserPhoto.
var (
	_ bin.Encoder = &UpdateUserPhoto{}
	_ bin.Decoder = &UpdateUserPhoto{}

	_ UpdateClass = &UpdateUserPhoto{}
)

// UpdateNewEncryptedMessage represents TL type `updateNewEncryptedMessage#12bcbd9a`.
//
// See https://core.telegram.org/constructor/updateNewEncryptedMessage for reference.
type UpdateNewEncryptedMessage struct {
	// Message field of UpdateNewEncryptedMessage.
	Message EncryptedMessageClass
	// Qts field of UpdateNewEncryptedMessage.
	Qts int
}

// UpdateNewEncryptedMessageTypeID is TL type id of UpdateNewEncryptedMessage.
const UpdateNewEncryptedMessageTypeID = 0x12bcbd9a

// Encode implements bin.Encoder.
func (u *UpdateNewEncryptedMessage) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateNewEncryptedMessage#12bcbd9a as nil")
	}
	b.PutID(UpdateNewEncryptedMessageTypeID)
	if u.Message == nil {
		return fmt.Errorf("unable to encode updateNewEncryptedMessage#12bcbd9a: field message is nil")
	}
	if err := u.Message.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateNewEncryptedMessage#12bcbd9a: field message: %w", err)
	}
	b.PutInt(u.Qts)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateNewEncryptedMessage) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateNewEncryptedMessage#12bcbd9a to nil")
	}
	if err := b.ConsumeID(UpdateNewEncryptedMessageTypeID); err != nil {
		return fmt.Errorf("unable to decode updateNewEncryptedMessage#12bcbd9a: %w", err)
	}
	{
		value, err := DecodeEncryptedMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateNewEncryptedMessage#12bcbd9a: field message: %w", err)
		}
		u.Message = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateNewEncryptedMessage#12bcbd9a: field qts: %w", err)
		}
		u.Qts = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateNewEncryptedMessage) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateNewEncryptedMessage.
var (
	_ bin.Encoder = &UpdateNewEncryptedMessage{}
	_ bin.Decoder = &UpdateNewEncryptedMessage{}

	_ UpdateClass = &UpdateNewEncryptedMessage{}
)

// UpdateEncryptedChatTyping represents TL type `updateEncryptedChatTyping#1710f156`.
//
// See https://core.telegram.org/constructor/updateEncryptedChatTyping for reference.
type UpdateEncryptedChatTyping struct {
	// ChatID field of UpdateEncryptedChatTyping.
	ChatID int
}

// UpdateEncryptedChatTypingTypeID is TL type id of UpdateEncryptedChatTyping.
const UpdateEncryptedChatTypingTypeID = 0x1710f156

// Encode implements bin.Encoder.
func (u *UpdateEncryptedChatTyping) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateEncryptedChatTyping#1710f156 as nil")
	}
	b.PutID(UpdateEncryptedChatTypingTypeID)
	b.PutInt(u.ChatID)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateEncryptedChatTyping) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateEncryptedChatTyping#1710f156 to nil")
	}
	if err := b.ConsumeID(UpdateEncryptedChatTypingTypeID); err != nil {
		return fmt.Errorf("unable to decode updateEncryptedChatTyping#1710f156: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateEncryptedChatTyping#1710f156: field chat_id: %w", err)
		}
		u.ChatID = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateEncryptedChatTyping) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateEncryptedChatTyping.
var (
	_ bin.Encoder = &UpdateEncryptedChatTyping{}
	_ bin.Decoder = &UpdateEncryptedChatTyping{}

	_ UpdateClass = &UpdateEncryptedChatTyping{}
)

// UpdateEncryption represents TL type `updateEncryption#b4a2e88d`.
//
// See https://core.telegram.org/constructor/updateEncryption for reference.
type UpdateEncryption struct {
	// Chat field of UpdateEncryption.
	Chat EncryptedChatClass
	// Date field of UpdateEncryption.
	Date int
}

// UpdateEncryptionTypeID is TL type id of UpdateEncryption.
const UpdateEncryptionTypeID = 0xb4a2e88d

// Encode implements bin.Encoder.
func (u *UpdateEncryption) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateEncryption#b4a2e88d as nil")
	}
	b.PutID(UpdateEncryptionTypeID)
	if u.Chat == nil {
		return fmt.Errorf("unable to encode updateEncryption#b4a2e88d: field chat is nil")
	}
	if err := u.Chat.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateEncryption#b4a2e88d: field chat: %w", err)
	}
	b.PutInt(u.Date)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateEncryption) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateEncryption#b4a2e88d to nil")
	}
	if err := b.ConsumeID(UpdateEncryptionTypeID); err != nil {
		return fmt.Errorf("unable to decode updateEncryption#b4a2e88d: %w", err)
	}
	{
		value, err := DecodeEncryptedChat(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateEncryption#b4a2e88d: field chat: %w", err)
		}
		u.Chat = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateEncryption#b4a2e88d: field date: %w", err)
		}
		u.Date = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateEncryption) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateEncryption.
var (
	_ bin.Encoder = &UpdateEncryption{}
	_ bin.Decoder = &UpdateEncryption{}

	_ UpdateClass = &UpdateEncryption{}
)

// UpdateEncryptedMessagesRead represents TL type `updateEncryptedMessagesRead#38fe25b7`.
//
// See https://core.telegram.org/constructor/updateEncryptedMessagesRead for reference.
type UpdateEncryptedMessagesRead struct {
	// ChatID field of UpdateEncryptedMessagesRead.
	ChatID int
	// MaxDate field of UpdateEncryptedMessagesRead.
	MaxDate int
	// Date field of UpdateEncryptedMessagesRead.
	Date int
}

// UpdateEncryptedMessagesReadTypeID is TL type id of UpdateEncryptedMessagesRead.
const UpdateEncryptedMessagesReadTypeID = 0x38fe25b7

// Encode implements bin.Encoder.
func (u *UpdateEncryptedMessagesRead) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateEncryptedMessagesRead#38fe25b7 as nil")
	}
	b.PutID(UpdateEncryptedMessagesReadTypeID)
	b.PutInt(u.ChatID)
	b.PutInt(u.MaxDate)
	b.PutInt(u.Date)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateEncryptedMessagesRead) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateEncryptedMessagesRead#38fe25b7 to nil")
	}
	if err := b.ConsumeID(UpdateEncryptedMessagesReadTypeID); err != nil {
		return fmt.Errorf("unable to decode updateEncryptedMessagesRead#38fe25b7: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateEncryptedMessagesRead#38fe25b7: field chat_id: %w", err)
		}
		u.ChatID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateEncryptedMessagesRead#38fe25b7: field max_date: %w", err)
		}
		u.MaxDate = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateEncryptedMessagesRead#38fe25b7: field date: %w", err)
		}
		u.Date = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateEncryptedMessagesRead) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateEncryptedMessagesRead.
var (
	_ bin.Encoder = &UpdateEncryptedMessagesRead{}
	_ bin.Decoder = &UpdateEncryptedMessagesRead{}

	_ UpdateClass = &UpdateEncryptedMessagesRead{}
)

// UpdateChatParticipantAdd represents TL type `updateChatParticipantAdd#ea4b0e5c`.
//
// See https://core.telegram.org/constructor/updateChatParticipantAdd for reference.
type UpdateChatParticipantAdd struct {
	// ChatID field of UpdateChatParticipantAdd.
	ChatID int
	// UserID field of UpdateChatParticipantAdd.
	UserID int
	// InviterID field of UpdateChatParticipantAdd.
	InviterID int
	// Date field of UpdateChatParticipantAdd.
	Date int
	// Version field of UpdateChatParticipantAdd.
	Version int
}

// UpdateChatParticipantAddTypeID is TL type id of UpdateChatParticipantAdd.
const UpdateChatParticipantAddTypeID = 0xea4b0e5c

// Encode implements bin.Encoder.
func (u *UpdateChatParticipantAdd) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateChatParticipantAdd#ea4b0e5c as nil")
	}
	b.PutID(UpdateChatParticipantAddTypeID)
	b.PutInt(u.ChatID)
	b.PutInt(u.UserID)
	b.PutInt(u.InviterID)
	b.PutInt(u.Date)
	b.PutInt(u.Version)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateChatParticipantAdd) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateChatParticipantAdd#ea4b0e5c to nil")
	}
	if err := b.ConsumeID(UpdateChatParticipantAddTypeID); err != nil {
		return fmt.Errorf("unable to decode updateChatParticipantAdd#ea4b0e5c: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChatParticipantAdd#ea4b0e5c: field chat_id: %w", err)
		}
		u.ChatID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChatParticipantAdd#ea4b0e5c: field user_id: %w", err)
		}
		u.UserID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChatParticipantAdd#ea4b0e5c: field inviter_id: %w", err)
		}
		u.InviterID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChatParticipantAdd#ea4b0e5c: field date: %w", err)
		}
		u.Date = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChatParticipantAdd#ea4b0e5c: field version: %w", err)
		}
		u.Version = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateChatParticipantAdd) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateChatParticipantAdd.
var (
	_ bin.Encoder = &UpdateChatParticipantAdd{}
	_ bin.Decoder = &UpdateChatParticipantAdd{}

	_ UpdateClass = &UpdateChatParticipantAdd{}
)

// UpdateChatParticipantDelete represents TL type `updateChatParticipantDelete#6e5f8c22`.
//
// See https://core.telegram.org/constructor/updateChatParticipantDelete for reference.
type UpdateChatParticipantDelete struct {
	// ChatID field of UpdateChatParticipantDelete.
	ChatID int
	// UserID field of UpdateChatParticipantDelete.
	UserID int
	// Version field of UpdateChatParticipantDelete.
	Version int
}

// UpdateChatParticipantDeleteTypeID is TL type id of UpdateChatParticipantDelete.
const UpdateChatParticipantDeleteTypeID = 0x6e5f8c22

// Encode implements bin.Encoder.
func (u *UpdateChatParticipantDelete) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateChatParticipantDelete#6e5f8c22 as nil")
	}
	b.PutID(UpdateChatParticipantDeleteTypeID)
	b.PutInt(u.ChatID)
	b.PutInt(u.UserID)
	b.PutInt(u.Version)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateChatParticipantDelete) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateChatParticipantDelete#6e5f8c22 to nil")
	}
	if err := b.ConsumeID(UpdateChatParticipantDeleteTypeID); err != nil {
		return fmt.Errorf("unable to decode updateChatParticipantDelete#6e5f8c22: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChatParticipantDelete#6e5f8c22: field chat_id: %w", err)
		}
		u.ChatID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChatParticipantDelete#6e5f8c22: field user_id: %w", err)
		}
		u.UserID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChatParticipantDelete#6e5f8c22: field version: %w", err)
		}
		u.Version = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateChatParticipantDelete) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateChatParticipantDelete.
var (
	_ bin.Encoder = &UpdateChatParticipantDelete{}
	_ bin.Decoder = &UpdateChatParticipantDelete{}

	_ UpdateClass = &UpdateChatParticipantDelete{}
)

// UpdateDcOptions represents TL type `updateDcOptions#8e5e9873`.
//
// See https://core.telegram.org/constructor/updateDcOptions for reference.
type UpdateDcOptions struct {
	// DCOptions field of UpdateDcOptions.
	DCOptions []DcOption
}

// UpdateDcOptionsTypeID is TL type id of UpdateDcOptions.
const UpdateDcOptionsTypeID = 0x8e5e9873

// Encode implements bin.Encoder.
func (u *UpdateDcOptions) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateDcOptions#8e5e9873 as nil")
	}
	b.PutID(UpdateDcOptionsTypeID)
	b.PutVectorHeader(len(u.DCOptions))
	for idx, v := range u.DCOptions {
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updateDcOptions#8e5e9873: field dc_options element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateDcOptions) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateDcOptions#8e5e9873 to nil")
	}
	if err := b.ConsumeID(UpdateDcOptionsTypeID); err != nil {
		return fmt.Errorf("unable to decode updateDcOptions#8e5e9873: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updateDcOptions#8e5e9873: field dc_options: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value DcOption
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode updateDcOptions#8e5e9873: field dc_options: %w", err)
			}
			u.DCOptions = append(u.DCOptions, value)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateDcOptions) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateDcOptions.
var (
	_ bin.Encoder = &UpdateDcOptions{}
	_ bin.Decoder = &UpdateDcOptions{}

	_ UpdateClass = &UpdateDcOptions{}
)

// UpdateNotifySettings represents TL type `updateNotifySettings#bec268ef`.
//
// See https://core.telegram.org/constructor/updateNotifySettings for reference.
type UpdateNotifySettings struct {
	// Peer field of UpdateNotifySettings.
	Peer NotifyPeerClass
	// NotifySettings field of UpdateNotifySettings.
	NotifySettings PeerNotifySettings
}

// UpdateNotifySettingsTypeID is TL type id of UpdateNotifySettings.
const UpdateNotifySettingsTypeID = 0xbec268ef

// Encode implements bin.Encoder.
func (u *UpdateNotifySettings) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateNotifySettings#bec268ef as nil")
	}
	b.PutID(UpdateNotifySettingsTypeID)
	if u.Peer == nil {
		return fmt.Errorf("unable to encode updateNotifySettings#bec268ef: field peer is nil")
	}
	if err := u.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateNotifySettings#bec268ef: field peer: %w", err)
	}
	if err := u.NotifySettings.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateNotifySettings#bec268ef: field notify_settings: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateNotifySettings) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateNotifySettings#bec268ef to nil")
	}
	if err := b.ConsumeID(UpdateNotifySettingsTypeID); err != nil {
		return fmt.Errorf("unable to decode updateNotifySettings#bec268ef: %w", err)
	}
	{
		value, err := DecodeNotifyPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateNotifySettings#bec268ef: field peer: %w", err)
		}
		u.Peer = value
	}
	{
		if err := u.NotifySettings.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateNotifySettings#bec268ef: field notify_settings: %w", err)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateNotifySettings) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateNotifySettings.
var (
	_ bin.Encoder = &UpdateNotifySettings{}
	_ bin.Decoder = &UpdateNotifySettings{}

	_ UpdateClass = &UpdateNotifySettings{}
)

// UpdateServiceNotification represents TL type `updateServiceNotification#ebe46819`.
//
// See https://core.telegram.org/constructor/updateServiceNotification for reference.
type UpdateServiceNotification struct {
	// Flags field of UpdateServiceNotification.
	Flags bin.Fields
	// Popup field of UpdateServiceNotification.
	Popup bool
	// InboxDate field of UpdateServiceNotification.
	//
	// Use SetInboxDate and GetInboxDate helpers.
	InboxDate int
	// Type field of UpdateServiceNotification.
	Type string
	// Message field of UpdateServiceNotification.
	Message string
	// Media field of UpdateServiceNotification.
	Media MessageMediaClass
	// Entities field of UpdateServiceNotification.
	Entities []MessageEntityClass
}

// UpdateServiceNotificationTypeID is TL type id of UpdateServiceNotification.
const UpdateServiceNotificationTypeID = 0xebe46819

// Encode implements bin.Encoder.
func (u *UpdateServiceNotification) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateServiceNotification#ebe46819 as nil")
	}
	b.PutID(UpdateServiceNotificationTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateServiceNotification#ebe46819: field flags: %w", err)
	}
	if u.Flags.Has(1) {
		b.PutInt(u.InboxDate)
	}
	b.PutString(u.Type)
	b.PutString(u.Message)
	if u.Media == nil {
		return fmt.Errorf("unable to encode updateServiceNotification#ebe46819: field media is nil")
	}
	if err := u.Media.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateServiceNotification#ebe46819: field media: %w", err)
	}
	b.PutVectorHeader(len(u.Entities))
	for idx, v := range u.Entities {
		if v == nil {
			return fmt.Errorf("unable to encode updateServiceNotification#ebe46819: field entities element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updateServiceNotification#ebe46819: field entities element with index %d: %w", idx, err)
		}
	}
	return nil
}

// SetPopup sets value of Popup conditional field.
func (u *UpdateServiceNotification) SetPopup(value bool) {
	if value {
		u.Flags.Set(0)
	} else {
		u.Flags.Unset(0)
	}
}

// SetInboxDate sets value of InboxDate conditional field.
func (u *UpdateServiceNotification) SetInboxDate(value int) {
	u.Flags.Set(1)
	u.InboxDate = value
}

// GetInboxDate returns value of InboxDate conditional field and
// boolean which is true if field was set.
func (u *UpdateServiceNotification) GetInboxDate() (value int, ok bool) {
	if !u.Flags.Has(1) {
		return value, false
	}
	return u.InboxDate, true
}

// Decode implements bin.Decoder.
func (u *UpdateServiceNotification) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateServiceNotification#ebe46819 to nil")
	}
	if err := b.ConsumeID(UpdateServiceNotificationTypeID); err != nil {
		return fmt.Errorf("unable to decode updateServiceNotification#ebe46819: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateServiceNotification#ebe46819: field flags: %w", err)
		}
	}
	u.Popup = u.Flags.Has(0)
	if u.Flags.Has(1) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateServiceNotification#ebe46819: field inbox_date: %w", err)
		}
		u.InboxDate = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode updateServiceNotification#ebe46819: field type: %w", err)
		}
		u.Type = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode updateServiceNotification#ebe46819: field message: %w", err)
		}
		u.Message = value
	}
	{
		value, err := DecodeMessageMedia(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateServiceNotification#ebe46819: field media: %w", err)
		}
		u.Media = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updateServiceNotification#ebe46819: field entities: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeMessageEntity(b)
			if err != nil {
				return fmt.Errorf("unable to decode updateServiceNotification#ebe46819: field entities: %w", err)
			}
			u.Entities = append(u.Entities, value)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateServiceNotification) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateServiceNotification.
var (
	_ bin.Encoder = &UpdateServiceNotification{}
	_ bin.Decoder = &UpdateServiceNotification{}

	_ UpdateClass = &UpdateServiceNotification{}
)

// UpdatePrivacy represents TL type `updatePrivacy#ee3b272a`.
//
// See https://core.telegram.org/constructor/updatePrivacy for reference.
type UpdatePrivacy struct {
	// Key field of UpdatePrivacy.
	Key PrivacyKeyClass
	// Rules field of UpdatePrivacy.
	Rules []PrivacyRuleClass
}

// UpdatePrivacyTypeID is TL type id of UpdatePrivacy.
const UpdatePrivacyTypeID = 0xee3b272a

// Encode implements bin.Encoder.
func (u *UpdatePrivacy) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updatePrivacy#ee3b272a as nil")
	}
	b.PutID(UpdatePrivacyTypeID)
	if u.Key == nil {
		return fmt.Errorf("unable to encode updatePrivacy#ee3b272a: field key is nil")
	}
	if err := u.Key.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updatePrivacy#ee3b272a: field key: %w", err)
	}
	b.PutVectorHeader(len(u.Rules))
	for idx, v := range u.Rules {
		if v == nil {
			return fmt.Errorf("unable to encode updatePrivacy#ee3b272a: field rules element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updatePrivacy#ee3b272a: field rules element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdatePrivacy) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updatePrivacy#ee3b272a to nil")
	}
	if err := b.ConsumeID(UpdatePrivacyTypeID); err != nil {
		return fmt.Errorf("unable to decode updatePrivacy#ee3b272a: %w", err)
	}
	{
		value, err := DecodePrivacyKey(b)
		if err != nil {
			return fmt.Errorf("unable to decode updatePrivacy#ee3b272a: field key: %w", err)
		}
		u.Key = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updatePrivacy#ee3b272a: field rules: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodePrivacyRule(b)
			if err != nil {
				return fmt.Errorf("unable to decode updatePrivacy#ee3b272a: field rules: %w", err)
			}
			u.Rules = append(u.Rules, value)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdatePrivacy) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdatePrivacy.
var (
	_ bin.Encoder = &UpdatePrivacy{}
	_ bin.Decoder = &UpdatePrivacy{}

	_ UpdateClass = &UpdatePrivacy{}
)

// UpdateUserPhone represents TL type `updateUserPhone#12b9417b`.
//
// See https://core.telegram.org/constructor/updateUserPhone for reference.
type UpdateUserPhone struct {
	// UserID field of UpdateUserPhone.
	UserID int
	// Phone field of UpdateUserPhone.
	Phone string
}

// UpdateUserPhoneTypeID is TL type id of UpdateUserPhone.
const UpdateUserPhoneTypeID = 0x12b9417b

// Encode implements bin.Encoder.
func (u *UpdateUserPhone) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateUserPhone#12b9417b as nil")
	}
	b.PutID(UpdateUserPhoneTypeID)
	b.PutInt(u.UserID)
	b.PutString(u.Phone)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateUserPhone) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateUserPhone#12b9417b to nil")
	}
	if err := b.ConsumeID(UpdateUserPhoneTypeID); err != nil {
		return fmt.Errorf("unable to decode updateUserPhone#12b9417b: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateUserPhone#12b9417b: field user_id: %w", err)
		}
		u.UserID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode updateUserPhone#12b9417b: field phone: %w", err)
		}
		u.Phone = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateUserPhone) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateUserPhone.
var (
	_ bin.Encoder = &UpdateUserPhone{}
	_ bin.Decoder = &UpdateUserPhone{}

	_ UpdateClass = &UpdateUserPhone{}
)

// UpdateReadHistoryInbox represents TL type `updateReadHistoryInbox#9c974fdf`.
//
// See https://core.telegram.org/constructor/updateReadHistoryInbox for reference.
type UpdateReadHistoryInbox struct {
	// Flags field of UpdateReadHistoryInbox.
	Flags bin.Fields
	// FolderID field of UpdateReadHistoryInbox.
	//
	// Use SetFolderID and GetFolderID helpers.
	FolderID int
	// Peer field of UpdateReadHistoryInbox.
	Peer PeerClass
	// MaxID field of UpdateReadHistoryInbox.
	MaxID int
	// StillUnreadCount field of UpdateReadHistoryInbox.
	StillUnreadCount int
	// Pts field of UpdateReadHistoryInbox.
	Pts int
	// PtsCount field of UpdateReadHistoryInbox.
	PtsCount int
}

// UpdateReadHistoryInboxTypeID is TL type id of UpdateReadHistoryInbox.
const UpdateReadHistoryInboxTypeID = 0x9c974fdf

// Encode implements bin.Encoder.
func (u *UpdateReadHistoryInbox) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateReadHistoryInbox#9c974fdf as nil")
	}
	b.PutID(UpdateReadHistoryInboxTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateReadHistoryInbox#9c974fdf: field flags: %w", err)
	}
	if u.Flags.Has(0) {
		b.PutInt(u.FolderID)
	}
	if u.Peer == nil {
		return fmt.Errorf("unable to encode updateReadHistoryInbox#9c974fdf: field peer is nil")
	}
	if err := u.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateReadHistoryInbox#9c974fdf: field peer: %w", err)
	}
	b.PutInt(u.MaxID)
	b.PutInt(u.StillUnreadCount)
	b.PutInt(u.Pts)
	b.PutInt(u.PtsCount)
	return nil
}

// SetFolderID sets value of FolderID conditional field.
func (u *UpdateReadHistoryInbox) SetFolderID(value int) {
	u.Flags.Set(0)
	u.FolderID = value
}

// GetFolderID returns value of FolderID conditional field and
// boolean which is true if field was set.
func (u *UpdateReadHistoryInbox) GetFolderID() (value int, ok bool) {
	if !u.Flags.Has(0) {
		return value, false
	}
	return u.FolderID, true
}

// Decode implements bin.Decoder.
func (u *UpdateReadHistoryInbox) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateReadHistoryInbox#9c974fdf to nil")
	}
	if err := b.ConsumeID(UpdateReadHistoryInboxTypeID); err != nil {
		return fmt.Errorf("unable to decode updateReadHistoryInbox#9c974fdf: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateReadHistoryInbox#9c974fdf: field flags: %w", err)
		}
	}
	if u.Flags.Has(0) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadHistoryInbox#9c974fdf: field folder_id: %w", err)
		}
		u.FolderID = value
	}
	{
		value, err := DecodePeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateReadHistoryInbox#9c974fdf: field peer: %w", err)
		}
		u.Peer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadHistoryInbox#9c974fdf: field max_id: %w", err)
		}
		u.MaxID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadHistoryInbox#9c974fdf: field still_unread_count: %w", err)
		}
		u.StillUnreadCount = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadHistoryInbox#9c974fdf: field pts: %w", err)
		}
		u.Pts = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadHistoryInbox#9c974fdf: field pts_count: %w", err)
		}
		u.PtsCount = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateReadHistoryInbox) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateReadHistoryInbox.
var (
	_ bin.Encoder = &UpdateReadHistoryInbox{}
	_ bin.Decoder = &UpdateReadHistoryInbox{}

	_ UpdateClass = &UpdateReadHistoryInbox{}
)

// UpdateReadHistoryOutbox represents TL type `updateReadHistoryOutbox#2f2f21bf`.
//
// See https://core.telegram.org/constructor/updateReadHistoryOutbox for reference.
type UpdateReadHistoryOutbox struct {
	// Peer field of UpdateReadHistoryOutbox.
	Peer PeerClass
	// MaxID field of UpdateReadHistoryOutbox.
	MaxID int
	// Pts field of UpdateReadHistoryOutbox.
	Pts int
	// PtsCount field of UpdateReadHistoryOutbox.
	PtsCount int
}

// UpdateReadHistoryOutboxTypeID is TL type id of UpdateReadHistoryOutbox.
const UpdateReadHistoryOutboxTypeID = 0x2f2f21bf

// Encode implements bin.Encoder.
func (u *UpdateReadHistoryOutbox) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateReadHistoryOutbox#2f2f21bf as nil")
	}
	b.PutID(UpdateReadHistoryOutboxTypeID)
	if u.Peer == nil {
		return fmt.Errorf("unable to encode updateReadHistoryOutbox#2f2f21bf: field peer is nil")
	}
	if err := u.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateReadHistoryOutbox#2f2f21bf: field peer: %w", err)
	}
	b.PutInt(u.MaxID)
	b.PutInt(u.Pts)
	b.PutInt(u.PtsCount)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateReadHistoryOutbox) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateReadHistoryOutbox#2f2f21bf to nil")
	}
	if err := b.ConsumeID(UpdateReadHistoryOutboxTypeID); err != nil {
		return fmt.Errorf("unable to decode updateReadHistoryOutbox#2f2f21bf: %w", err)
	}
	{
		value, err := DecodePeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateReadHistoryOutbox#2f2f21bf: field peer: %w", err)
		}
		u.Peer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadHistoryOutbox#2f2f21bf: field max_id: %w", err)
		}
		u.MaxID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadHistoryOutbox#2f2f21bf: field pts: %w", err)
		}
		u.Pts = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadHistoryOutbox#2f2f21bf: field pts_count: %w", err)
		}
		u.PtsCount = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateReadHistoryOutbox) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateReadHistoryOutbox.
var (
	_ bin.Encoder = &UpdateReadHistoryOutbox{}
	_ bin.Decoder = &UpdateReadHistoryOutbox{}

	_ UpdateClass = &UpdateReadHistoryOutbox{}
)

// UpdateWebPage represents TL type `updateWebPage#7f891213`.
//
// See https://core.telegram.org/constructor/updateWebPage for reference.
type UpdateWebPage struct {
	// Webpage field of UpdateWebPage.
	Webpage WebPageClass
	// Pts field of UpdateWebPage.
	Pts int
	// PtsCount field of UpdateWebPage.
	PtsCount int
}

// UpdateWebPageTypeID is TL type id of UpdateWebPage.
const UpdateWebPageTypeID = 0x7f891213

// Encode implements bin.Encoder.
func (u *UpdateWebPage) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateWebPage#7f891213 as nil")
	}
	b.PutID(UpdateWebPageTypeID)
	if u.Webpage == nil {
		return fmt.Errorf("unable to encode updateWebPage#7f891213: field webpage is nil")
	}
	if err := u.Webpage.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateWebPage#7f891213: field webpage: %w", err)
	}
	b.PutInt(u.Pts)
	b.PutInt(u.PtsCount)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateWebPage) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateWebPage#7f891213 to nil")
	}
	if err := b.ConsumeID(UpdateWebPageTypeID); err != nil {
		return fmt.Errorf("unable to decode updateWebPage#7f891213: %w", err)
	}
	{
		value, err := DecodeWebPage(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateWebPage#7f891213: field webpage: %w", err)
		}
		u.Webpage = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateWebPage#7f891213: field pts: %w", err)
		}
		u.Pts = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateWebPage#7f891213: field pts_count: %w", err)
		}
		u.PtsCount = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateWebPage) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateWebPage.
var (
	_ bin.Encoder = &UpdateWebPage{}
	_ bin.Decoder = &UpdateWebPage{}

	_ UpdateClass = &UpdateWebPage{}
)

// UpdateReadMessagesContents represents TL type `updateReadMessagesContents#68c13933`.
//
// See https://core.telegram.org/constructor/updateReadMessagesContents for reference.
type UpdateReadMessagesContents struct {
	// Messages field of UpdateReadMessagesContents.
	Messages []int
	// Pts field of UpdateReadMessagesContents.
	Pts int
	// PtsCount field of UpdateReadMessagesContents.
	PtsCount int
}

// UpdateReadMessagesContentsTypeID is TL type id of UpdateReadMessagesContents.
const UpdateReadMessagesContentsTypeID = 0x68c13933

// Encode implements bin.Encoder.
func (u *UpdateReadMessagesContents) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateReadMessagesContents#68c13933 as nil")
	}
	b.PutID(UpdateReadMessagesContentsTypeID)
	b.PutVectorHeader(len(u.Messages))
	for _, v := range u.Messages {
		b.PutInt(v)
	}
	b.PutInt(u.Pts)
	b.PutInt(u.PtsCount)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateReadMessagesContents) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateReadMessagesContents#68c13933 to nil")
	}
	if err := b.ConsumeID(UpdateReadMessagesContentsTypeID); err != nil {
		return fmt.Errorf("unable to decode updateReadMessagesContents#68c13933: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadMessagesContents#68c13933: field messages: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Int()
			if err != nil {
				return fmt.Errorf("unable to decode updateReadMessagesContents#68c13933: field messages: %w", err)
			}
			u.Messages = append(u.Messages, value)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadMessagesContents#68c13933: field pts: %w", err)
		}
		u.Pts = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadMessagesContents#68c13933: field pts_count: %w", err)
		}
		u.PtsCount = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateReadMessagesContents) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateReadMessagesContents.
var (
	_ bin.Encoder = &UpdateReadMessagesContents{}
	_ bin.Decoder = &UpdateReadMessagesContents{}

	_ UpdateClass = &UpdateReadMessagesContents{}
)

// UpdateChannelTooLong represents TL type `updateChannelTooLong#eb0467fb`.
//
// See https://core.telegram.org/constructor/updateChannelTooLong for reference.
type UpdateChannelTooLong struct {
	// Flags field of UpdateChannelTooLong.
	Flags bin.Fields
	// ChannelID field of UpdateChannelTooLong.
	ChannelID int
	// Pts field of UpdateChannelTooLong.
	//
	// Use SetPts and GetPts helpers.
	Pts int
}

// UpdateChannelTooLongTypeID is TL type id of UpdateChannelTooLong.
const UpdateChannelTooLongTypeID = 0xeb0467fb

// Encode implements bin.Encoder.
func (u *UpdateChannelTooLong) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateChannelTooLong#eb0467fb as nil")
	}
	b.PutID(UpdateChannelTooLongTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateChannelTooLong#eb0467fb: field flags: %w", err)
	}
	b.PutInt(u.ChannelID)
	if u.Flags.Has(0) {
		b.PutInt(u.Pts)
	}
	return nil
}

// SetPts sets value of Pts conditional field.
func (u *UpdateChannelTooLong) SetPts(value int) {
	u.Flags.Set(0)
	u.Pts = value
}

// GetPts returns value of Pts conditional field and
// boolean which is true if field was set.
func (u *UpdateChannelTooLong) GetPts() (value int, ok bool) {
	if !u.Flags.Has(0) {
		return value, false
	}
	return u.Pts, true
}

// Decode implements bin.Decoder.
func (u *UpdateChannelTooLong) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateChannelTooLong#eb0467fb to nil")
	}
	if err := b.ConsumeID(UpdateChannelTooLongTypeID); err != nil {
		return fmt.Errorf("unable to decode updateChannelTooLong#eb0467fb: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateChannelTooLong#eb0467fb: field flags: %w", err)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelTooLong#eb0467fb: field channel_id: %w", err)
		}
		u.ChannelID = value
	}
	if u.Flags.Has(0) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelTooLong#eb0467fb: field pts: %w", err)
		}
		u.Pts = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateChannelTooLong) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateChannelTooLong.
var (
	_ bin.Encoder = &UpdateChannelTooLong{}
	_ bin.Decoder = &UpdateChannelTooLong{}

	_ UpdateClass = &UpdateChannelTooLong{}
)

// UpdateChannel represents TL type `updateChannel#b6d45656`.
//
// See https://core.telegram.org/constructor/updateChannel for reference.
type UpdateChannel struct {
	// ChannelID field of UpdateChannel.
	ChannelID int
}

// UpdateChannelTypeID is TL type id of UpdateChannel.
const UpdateChannelTypeID = 0xb6d45656

// Encode implements bin.Encoder.
func (u *UpdateChannel) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateChannel#b6d45656 as nil")
	}
	b.PutID(UpdateChannelTypeID)
	b.PutInt(u.ChannelID)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateChannel) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateChannel#b6d45656 to nil")
	}
	if err := b.ConsumeID(UpdateChannelTypeID); err != nil {
		return fmt.Errorf("unable to decode updateChannel#b6d45656: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannel#b6d45656: field channel_id: %w", err)
		}
		u.ChannelID = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateChannel) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateChannel.
var (
	_ bin.Encoder = &UpdateChannel{}
	_ bin.Decoder = &UpdateChannel{}

	_ UpdateClass = &UpdateChannel{}
)

// UpdateNewChannelMessage represents TL type `updateNewChannelMessage#62ba04d9`.
//
// See https://core.telegram.org/constructor/updateNewChannelMessage for reference.
type UpdateNewChannelMessage struct {
	// Message field of UpdateNewChannelMessage.
	Message MessageClass
	// Pts field of UpdateNewChannelMessage.
	Pts int
	// PtsCount field of UpdateNewChannelMessage.
	PtsCount int
}

// UpdateNewChannelMessageTypeID is TL type id of UpdateNewChannelMessage.
const UpdateNewChannelMessageTypeID = 0x62ba04d9

// Encode implements bin.Encoder.
func (u *UpdateNewChannelMessage) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateNewChannelMessage#62ba04d9 as nil")
	}
	b.PutID(UpdateNewChannelMessageTypeID)
	if u.Message == nil {
		return fmt.Errorf("unable to encode updateNewChannelMessage#62ba04d9: field message is nil")
	}
	if err := u.Message.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateNewChannelMessage#62ba04d9: field message: %w", err)
	}
	b.PutInt(u.Pts)
	b.PutInt(u.PtsCount)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateNewChannelMessage) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateNewChannelMessage#62ba04d9 to nil")
	}
	if err := b.ConsumeID(UpdateNewChannelMessageTypeID); err != nil {
		return fmt.Errorf("unable to decode updateNewChannelMessage#62ba04d9: %w", err)
	}
	{
		value, err := DecodeMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateNewChannelMessage#62ba04d9: field message: %w", err)
		}
		u.Message = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateNewChannelMessage#62ba04d9: field pts: %w", err)
		}
		u.Pts = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateNewChannelMessage#62ba04d9: field pts_count: %w", err)
		}
		u.PtsCount = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateNewChannelMessage) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateNewChannelMessage.
var (
	_ bin.Encoder = &UpdateNewChannelMessage{}
	_ bin.Decoder = &UpdateNewChannelMessage{}

	_ UpdateClass = &UpdateNewChannelMessage{}
)

// UpdateReadChannelInbox represents TL type `updateReadChannelInbox#330b5424`.
//
// See https://core.telegram.org/constructor/updateReadChannelInbox for reference.
type UpdateReadChannelInbox struct {
	// Flags field of UpdateReadChannelInbox.
	Flags bin.Fields
	// FolderID field of UpdateReadChannelInbox.
	//
	// Use SetFolderID and GetFolderID helpers.
	FolderID int
	// ChannelID field of UpdateReadChannelInbox.
	ChannelID int
	// MaxID field of UpdateReadChannelInbox.
	MaxID int
	// StillUnreadCount field of UpdateReadChannelInbox.
	StillUnreadCount int
	// Pts field of UpdateReadChannelInbox.
	Pts int
}

// UpdateReadChannelInboxTypeID is TL type id of UpdateReadChannelInbox.
const UpdateReadChannelInboxTypeID = 0x330b5424

// Encode implements bin.Encoder.
func (u *UpdateReadChannelInbox) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateReadChannelInbox#330b5424 as nil")
	}
	b.PutID(UpdateReadChannelInboxTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateReadChannelInbox#330b5424: field flags: %w", err)
	}
	if u.Flags.Has(0) {
		b.PutInt(u.FolderID)
	}
	b.PutInt(u.ChannelID)
	b.PutInt(u.MaxID)
	b.PutInt(u.StillUnreadCount)
	b.PutInt(u.Pts)
	return nil
}

// SetFolderID sets value of FolderID conditional field.
func (u *UpdateReadChannelInbox) SetFolderID(value int) {
	u.Flags.Set(0)
	u.FolderID = value
}

// GetFolderID returns value of FolderID conditional field and
// boolean which is true if field was set.
func (u *UpdateReadChannelInbox) GetFolderID() (value int, ok bool) {
	if !u.Flags.Has(0) {
		return value, false
	}
	return u.FolderID, true
}

// Decode implements bin.Decoder.
func (u *UpdateReadChannelInbox) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateReadChannelInbox#330b5424 to nil")
	}
	if err := b.ConsumeID(UpdateReadChannelInboxTypeID); err != nil {
		return fmt.Errorf("unable to decode updateReadChannelInbox#330b5424: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateReadChannelInbox#330b5424: field flags: %w", err)
		}
	}
	if u.Flags.Has(0) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadChannelInbox#330b5424: field folder_id: %w", err)
		}
		u.FolderID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadChannelInbox#330b5424: field channel_id: %w", err)
		}
		u.ChannelID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadChannelInbox#330b5424: field max_id: %w", err)
		}
		u.MaxID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadChannelInbox#330b5424: field still_unread_count: %w", err)
		}
		u.StillUnreadCount = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadChannelInbox#330b5424: field pts: %w", err)
		}
		u.Pts = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateReadChannelInbox) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateReadChannelInbox.
var (
	_ bin.Encoder = &UpdateReadChannelInbox{}
	_ bin.Decoder = &UpdateReadChannelInbox{}

	_ UpdateClass = &UpdateReadChannelInbox{}
)

// UpdateDeleteChannelMessages represents TL type `updateDeleteChannelMessages#c37521c9`.
//
// See https://core.telegram.org/constructor/updateDeleteChannelMessages for reference.
type UpdateDeleteChannelMessages struct {
	// ChannelID field of UpdateDeleteChannelMessages.
	ChannelID int
	// Messages field of UpdateDeleteChannelMessages.
	Messages []int
	// Pts field of UpdateDeleteChannelMessages.
	Pts int
	// PtsCount field of UpdateDeleteChannelMessages.
	PtsCount int
}

// UpdateDeleteChannelMessagesTypeID is TL type id of UpdateDeleteChannelMessages.
const UpdateDeleteChannelMessagesTypeID = 0xc37521c9

// Encode implements bin.Encoder.
func (u *UpdateDeleteChannelMessages) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateDeleteChannelMessages#c37521c9 as nil")
	}
	b.PutID(UpdateDeleteChannelMessagesTypeID)
	b.PutInt(u.ChannelID)
	b.PutVectorHeader(len(u.Messages))
	for _, v := range u.Messages {
		b.PutInt(v)
	}
	b.PutInt(u.Pts)
	b.PutInt(u.PtsCount)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateDeleteChannelMessages) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateDeleteChannelMessages#c37521c9 to nil")
	}
	if err := b.ConsumeID(UpdateDeleteChannelMessagesTypeID); err != nil {
		return fmt.Errorf("unable to decode updateDeleteChannelMessages#c37521c9: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateDeleteChannelMessages#c37521c9: field channel_id: %w", err)
		}
		u.ChannelID = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updateDeleteChannelMessages#c37521c9: field messages: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Int()
			if err != nil {
				return fmt.Errorf("unable to decode updateDeleteChannelMessages#c37521c9: field messages: %w", err)
			}
			u.Messages = append(u.Messages, value)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateDeleteChannelMessages#c37521c9: field pts: %w", err)
		}
		u.Pts = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateDeleteChannelMessages#c37521c9: field pts_count: %w", err)
		}
		u.PtsCount = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateDeleteChannelMessages) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateDeleteChannelMessages.
var (
	_ bin.Encoder = &UpdateDeleteChannelMessages{}
	_ bin.Decoder = &UpdateDeleteChannelMessages{}

	_ UpdateClass = &UpdateDeleteChannelMessages{}
)

// UpdateChannelMessageViews represents TL type `updateChannelMessageViews#98a12b4b`.
//
// See https://core.telegram.org/constructor/updateChannelMessageViews for reference.
type UpdateChannelMessageViews struct {
	// ChannelID field of UpdateChannelMessageViews.
	ChannelID int
	// ID field of UpdateChannelMessageViews.
	ID int
	// Views field of UpdateChannelMessageViews.
	Views int
}

// UpdateChannelMessageViewsTypeID is TL type id of UpdateChannelMessageViews.
const UpdateChannelMessageViewsTypeID = 0x98a12b4b

// Encode implements bin.Encoder.
func (u *UpdateChannelMessageViews) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateChannelMessageViews#98a12b4b as nil")
	}
	b.PutID(UpdateChannelMessageViewsTypeID)
	b.PutInt(u.ChannelID)
	b.PutInt(u.ID)
	b.PutInt(u.Views)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateChannelMessageViews) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateChannelMessageViews#98a12b4b to nil")
	}
	if err := b.ConsumeID(UpdateChannelMessageViewsTypeID); err != nil {
		return fmt.Errorf("unable to decode updateChannelMessageViews#98a12b4b: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelMessageViews#98a12b4b: field channel_id: %w", err)
		}
		u.ChannelID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelMessageViews#98a12b4b: field id: %w", err)
		}
		u.ID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelMessageViews#98a12b4b: field views: %w", err)
		}
		u.Views = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateChannelMessageViews) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateChannelMessageViews.
var (
	_ bin.Encoder = &UpdateChannelMessageViews{}
	_ bin.Decoder = &UpdateChannelMessageViews{}

	_ UpdateClass = &UpdateChannelMessageViews{}
)

// UpdateChatParticipantAdmin represents TL type `updateChatParticipantAdmin#b6901959`.
//
// See https://core.telegram.org/constructor/updateChatParticipantAdmin for reference.
type UpdateChatParticipantAdmin struct {
	// ChatID field of UpdateChatParticipantAdmin.
	ChatID int
	// UserID field of UpdateChatParticipantAdmin.
	UserID int
	// IsAdmin field of UpdateChatParticipantAdmin.
	IsAdmin bool
	// Version field of UpdateChatParticipantAdmin.
	Version int
}

// UpdateChatParticipantAdminTypeID is TL type id of UpdateChatParticipantAdmin.
const UpdateChatParticipantAdminTypeID = 0xb6901959

// Encode implements bin.Encoder.
func (u *UpdateChatParticipantAdmin) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateChatParticipantAdmin#b6901959 as nil")
	}
	b.PutID(UpdateChatParticipantAdminTypeID)
	b.PutInt(u.ChatID)
	b.PutInt(u.UserID)
	b.PutBool(u.IsAdmin)
	b.PutInt(u.Version)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateChatParticipantAdmin) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateChatParticipantAdmin#b6901959 to nil")
	}
	if err := b.ConsumeID(UpdateChatParticipantAdminTypeID); err != nil {
		return fmt.Errorf("unable to decode updateChatParticipantAdmin#b6901959: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChatParticipantAdmin#b6901959: field chat_id: %w", err)
		}
		u.ChatID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChatParticipantAdmin#b6901959: field user_id: %w", err)
		}
		u.UserID = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode updateChatParticipantAdmin#b6901959: field is_admin: %w", err)
		}
		u.IsAdmin = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChatParticipantAdmin#b6901959: field version: %w", err)
		}
		u.Version = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateChatParticipantAdmin) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateChatParticipantAdmin.
var (
	_ bin.Encoder = &UpdateChatParticipantAdmin{}
	_ bin.Decoder = &UpdateChatParticipantAdmin{}

	_ UpdateClass = &UpdateChatParticipantAdmin{}
)

// UpdateNewStickerSet represents TL type `updateNewStickerSet#688a30aa`.
//
// See https://core.telegram.org/constructor/updateNewStickerSet for reference.
type UpdateNewStickerSet struct {
	// Stickerset field of UpdateNewStickerSet.
	Stickerset MessagesStickerSet
}

// UpdateNewStickerSetTypeID is TL type id of UpdateNewStickerSet.
const UpdateNewStickerSetTypeID = 0x688a30aa

// Encode implements bin.Encoder.
func (u *UpdateNewStickerSet) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateNewStickerSet#688a30aa as nil")
	}
	b.PutID(UpdateNewStickerSetTypeID)
	if err := u.Stickerset.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateNewStickerSet#688a30aa: field stickerset: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateNewStickerSet) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateNewStickerSet#688a30aa to nil")
	}
	if err := b.ConsumeID(UpdateNewStickerSetTypeID); err != nil {
		return fmt.Errorf("unable to decode updateNewStickerSet#688a30aa: %w", err)
	}
	{
		if err := u.Stickerset.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateNewStickerSet#688a30aa: field stickerset: %w", err)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateNewStickerSet) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateNewStickerSet.
var (
	_ bin.Encoder = &UpdateNewStickerSet{}
	_ bin.Decoder = &UpdateNewStickerSet{}

	_ UpdateClass = &UpdateNewStickerSet{}
)

// UpdateStickerSetsOrder represents TL type `updateStickerSetsOrder#bb2d201`.
//
// See https://core.telegram.org/constructor/updateStickerSetsOrder for reference.
type UpdateStickerSetsOrder struct {
	// Flags field of UpdateStickerSetsOrder.
	Flags bin.Fields
	// Masks field of UpdateStickerSetsOrder.
	Masks bool
	// Order field of UpdateStickerSetsOrder.
	Order []int64
}

// UpdateStickerSetsOrderTypeID is TL type id of UpdateStickerSetsOrder.
const UpdateStickerSetsOrderTypeID = 0xbb2d201

// Encode implements bin.Encoder.
func (u *UpdateStickerSetsOrder) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateStickerSetsOrder#bb2d201 as nil")
	}
	b.PutID(UpdateStickerSetsOrderTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateStickerSetsOrder#bb2d201: field flags: %w", err)
	}
	b.PutVectorHeader(len(u.Order))
	for _, v := range u.Order {
		b.PutLong(v)
	}
	return nil
}

// SetMasks sets value of Masks conditional field.
func (u *UpdateStickerSetsOrder) SetMasks(value bool) {
	if value {
		u.Flags.Set(0)
	} else {
		u.Flags.Unset(0)
	}
}

// Decode implements bin.Decoder.
func (u *UpdateStickerSetsOrder) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateStickerSetsOrder#bb2d201 to nil")
	}
	if err := b.ConsumeID(UpdateStickerSetsOrderTypeID); err != nil {
		return fmt.Errorf("unable to decode updateStickerSetsOrder#bb2d201: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateStickerSetsOrder#bb2d201: field flags: %w", err)
		}
	}
	u.Masks = u.Flags.Has(0)
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updateStickerSetsOrder#bb2d201: field order: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode updateStickerSetsOrder#bb2d201: field order: %w", err)
			}
			u.Order = append(u.Order, value)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateStickerSetsOrder) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateStickerSetsOrder.
var (
	_ bin.Encoder = &UpdateStickerSetsOrder{}
	_ bin.Decoder = &UpdateStickerSetsOrder{}

	_ UpdateClass = &UpdateStickerSetsOrder{}
)

// UpdateStickerSets represents TL type `updateStickerSets#43ae3dec`.
//
// See https://core.telegram.org/constructor/updateStickerSets for reference.
type UpdateStickerSets struct {
}

// UpdateStickerSetsTypeID is TL type id of UpdateStickerSets.
const UpdateStickerSetsTypeID = 0x43ae3dec

// Encode implements bin.Encoder.
func (u *UpdateStickerSets) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateStickerSets#43ae3dec as nil")
	}
	b.PutID(UpdateStickerSetsTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateStickerSets) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateStickerSets#43ae3dec to nil")
	}
	if err := b.ConsumeID(UpdateStickerSetsTypeID); err != nil {
		return fmt.Errorf("unable to decode updateStickerSets#43ae3dec: %w", err)
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateStickerSets) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateStickerSets.
var (
	_ bin.Encoder = &UpdateStickerSets{}
	_ bin.Decoder = &UpdateStickerSets{}

	_ UpdateClass = &UpdateStickerSets{}
)

// UpdateSavedGifs represents TL type `updateSavedGifs#9375341e`.
//
// See https://core.telegram.org/constructor/updateSavedGifs for reference.
type UpdateSavedGifs struct {
}

// UpdateSavedGifsTypeID is TL type id of UpdateSavedGifs.
const UpdateSavedGifsTypeID = 0x9375341e

// Encode implements bin.Encoder.
func (u *UpdateSavedGifs) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateSavedGifs#9375341e as nil")
	}
	b.PutID(UpdateSavedGifsTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateSavedGifs) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateSavedGifs#9375341e to nil")
	}
	if err := b.ConsumeID(UpdateSavedGifsTypeID); err != nil {
		return fmt.Errorf("unable to decode updateSavedGifs#9375341e: %w", err)
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateSavedGifs) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateSavedGifs.
var (
	_ bin.Encoder = &UpdateSavedGifs{}
	_ bin.Decoder = &UpdateSavedGifs{}

	_ UpdateClass = &UpdateSavedGifs{}
)

// UpdateBotInlineQuery represents TL type `updateBotInlineQuery#54826690`.
//
// See https://core.telegram.org/constructor/updateBotInlineQuery for reference.
type UpdateBotInlineQuery struct {
	// Flags field of UpdateBotInlineQuery.
	Flags bin.Fields
	// QueryID field of UpdateBotInlineQuery.
	QueryID int64
	// UserID field of UpdateBotInlineQuery.
	UserID int
	// Query field of UpdateBotInlineQuery.
	Query string
	// Geo field of UpdateBotInlineQuery.
	//
	// Use SetGeo and GetGeo helpers.
	Geo GeoPointClass
	// Offset field of UpdateBotInlineQuery.
	Offset string
}

// UpdateBotInlineQueryTypeID is TL type id of UpdateBotInlineQuery.
const UpdateBotInlineQueryTypeID = 0x54826690

// Encode implements bin.Encoder.
func (u *UpdateBotInlineQuery) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateBotInlineQuery#54826690 as nil")
	}
	b.PutID(UpdateBotInlineQueryTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateBotInlineQuery#54826690: field flags: %w", err)
	}
	b.PutLong(u.QueryID)
	b.PutInt(u.UserID)
	b.PutString(u.Query)
	if u.Flags.Has(0) {
		if u.Geo == nil {
			return fmt.Errorf("unable to encode updateBotInlineQuery#54826690: field geo is nil")
		}
		if err := u.Geo.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updateBotInlineQuery#54826690: field geo: %w", err)
		}
	}
	b.PutString(u.Offset)
	return nil
}

// SetGeo sets value of Geo conditional field.
func (u *UpdateBotInlineQuery) SetGeo(value GeoPointClass) {
	u.Flags.Set(0)
	u.Geo = value
}

// GetGeo returns value of Geo conditional field and
// boolean which is true if field was set.
func (u *UpdateBotInlineQuery) GetGeo() (value GeoPointClass, ok bool) {
	if !u.Flags.Has(0) {
		return value, false
	}
	return u.Geo, true
}

// Decode implements bin.Decoder.
func (u *UpdateBotInlineQuery) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateBotInlineQuery#54826690 to nil")
	}
	if err := b.ConsumeID(UpdateBotInlineQueryTypeID); err != nil {
		return fmt.Errorf("unable to decode updateBotInlineQuery#54826690: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateBotInlineQuery#54826690: field flags: %w", err)
		}
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotInlineQuery#54826690: field query_id: %w", err)
		}
		u.QueryID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotInlineQuery#54826690: field user_id: %w", err)
		}
		u.UserID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotInlineQuery#54826690: field query: %w", err)
		}
		u.Query = value
	}
	if u.Flags.Has(0) {
		value, err := DecodeGeoPoint(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateBotInlineQuery#54826690: field geo: %w", err)
		}
		u.Geo = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotInlineQuery#54826690: field offset: %w", err)
		}
		u.Offset = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateBotInlineQuery) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateBotInlineQuery.
var (
	_ bin.Encoder = &UpdateBotInlineQuery{}
	_ bin.Decoder = &UpdateBotInlineQuery{}

	_ UpdateClass = &UpdateBotInlineQuery{}
)

// UpdateBotInlineSend represents TL type `updateBotInlineSend#e48f964`.
//
// See https://core.telegram.org/constructor/updateBotInlineSend for reference.
type UpdateBotInlineSend struct {
	// Flags field of UpdateBotInlineSend.
	Flags bin.Fields
	// UserID field of UpdateBotInlineSend.
	UserID int
	// Query field of UpdateBotInlineSend.
	Query string
	// Geo field of UpdateBotInlineSend.
	//
	// Use SetGeo and GetGeo helpers.
	Geo GeoPointClass
	// ID field of UpdateBotInlineSend.
	ID string
	// MsgID field of UpdateBotInlineSend.
	//
	// Use SetMsgID and GetMsgID helpers.
	MsgID InputBotInlineMessageID
}

// UpdateBotInlineSendTypeID is TL type id of UpdateBotInlineSend.
const UpdateBotInlineSendTypeID = 0xe48f964

// Encode implements bin.Encoder.
func (u *UpdateBotInlineSend) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateBotInlineSend#e48f964 as nil")
	}
	b.PutID(UpdateBotInlineSendTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateBotInlineSend#e48f964: field flags: %w", err)
	}
	b.PutInt(u.UserID)
	b.PutString(u.Query)
	if u.Flags.Has(0) {
		if u.Geo == nil {
			return fmt.Errorf("unable to encode updateBotInlineSend#e48f964: field geo is nil")
		}
		if err := u.Geo.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updateBotInlineSend#e48f964: field geo: %w", err)
		}
	}
	b.PutString(u.ID)
	if u.Flags.Has(1) {
		if err := u.MsgID.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updateBotInlineSend#e48f964: field msg_id: %w", err)
		}
	}
	return nil
}

// SetGeo sets value of Geo conditional field.
func (u *UpdateBotInlineSend) SetGeo(value GeoPointClass) {
	u.Flags.Set(0)
	u.Geo = value
}

// GetGeo returns value of Geo conditional field and
// boolean which is true if field was set.
func (u *UpdateBotInlineSend) GetGeo() (value GeoPointClass, ok bool) {
	if !u.Flags.Has(0) {
		return value, false
	}
	return u.Geo, true
}

// SetMsgID sets value of MsgID conditional field.
func (u *UpdateBotInlineSend) SetMsgID(value InputBotInlineMessageID) {
	u.Flags.Set(1)
	u.MsgID = value
}

// GetMsgID returns value of MsgID conditional field and
// boolean which is true if field was set.
func (u *UpdateBotInlineSend) GetMsgID() (value InputBotInlineMessageID, ok bool) {
	if !u.Flags.Has(1) {
		return value, false
	}
	return u.MsgID, true
}

// Decode implements bin.Decoder.
func (u *UpdateBotInlineSend) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateBotInlineSend#e48f964 to nil")
	}
	if err := b.ConsumeID(UpdateBotInlineSendTypeID); err != nil {
		return fmt.Errorf("unable to decode updateBotInlineSend#e48f964: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateBotInlineSend#e48f964: field flags: %w", err)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotInlineSend#e48f964: field user_id: %w", err)
		}
		u.UserID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotInlineSend#e48f964: field query: %w", err)
		}
		u.Query = value
	}
	if u.Flags.Has(0) {
		value, err := DecodeGeoPoint(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateBotInlineSend#e48f964: field geo: %w", err)
		}
		u.Geo = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotInlineSend#e48f964: field id: %w", err)
		}
		u.ID = value
	}
	if u.Flags.Has(1) {
		if err := u.MsgID.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateBotInlineSend#e48f964: field msg_id: %w", err)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateBotInlineSend) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateBotInlineSend.
var (
	_ bin.Encoder = &UpdateBotInlineSend{}
	_ bin.Decoder = &UpdateBotInlineSend{}

	_ UpdateClass = &UpdateBotInlineSend{}
)

// UpdateEditChannelMessage represents TL type `updateEditChannelMessage#1b3f4df7`.
//
// See https://core.telegram.org/constructor/updateEditChannelMessage for reference.
type UpdateEditChannelMessage struct {
	// Message field of UpdateEditChannelMessage.
	Message MessageClass
	// Pts field of UpdateEditChannelMessage.
	Pts int
	// PtsCount field of UpdateEditChannelMessage.
	PtsCount int
}

// UpdateEditChannelMessageTypeID is TL type id of UpdateEditChannelMessage.
const UpdateEditChannelMessageTypeID = 0x1b3f4df7

// Encode implements bin.Encoder.
func (u *UpdateEditChannelMessage) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateEditChannelMessage#1b3f4df7 as nil")
	}
	b.PutID(UpdateEditChannelMessageTypeID)
	if u.Message == nil {
		return fmt.Errorf("unable to encode updateEditChannelMessage#1b3f4df7: field message is nil")
	}
	if err := u.Message.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateEditChannelMessage#1b3f4df7: field message: %w", err)
	}
	b.PutInt(u.Pts)
	b.PutInt(u.PtsCount)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateEditChannelMessage) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateEditChannelMessage#1b3f4df7 to nil")
	}
	if err := b.ConsumeID(UpdateEditChannelMessageTypeID); err != nil {
		return fmt.Errorf("unable to decode updateEditChannelMessage#1b3f4df7: %w", err)
	}
	{
		value, err := DecodeMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateEditChannelMessage#1b3f4df7: field message: %w", err)
		}
		u.Message = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateEditChannelMessage#1b3f4df7: field pts: %w", err)
		}
		u.Pts = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateEditChannelMessage#1b3f4df7: field pts_count: %w", err)
		}
		u.PtsCount = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateEditChannelMessage) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateEditChannelMessage.
var (
	_ bin.Encoder = &UpdateEditChannelMessage{}
	_ bin.Decoder = &UpdateEditChannelMessage{}

	_ UpdateClass = &UpdateEditChannelMessage{}
)

// UpdateBotCallbackQuery represents TL type `updateBotCallbackQuery#e73547e1`.
//
// See https://core.telegram.org/constructor/updateBotCallbackQuery for reference.
type UpdateBotCallbackQuery struct {
	// Flags field of UpdateBotCallbackQuery.
	Flags bin.Fields
	// QueryID field of UpdateBotCallbackQuery.
	QueryID int64
	// UserID field of UpdateBotCallbackQuery.
	UserID int
	// Peer field of UpdateBotCallbackQuery.
	Peer PeerClass
	// MsgID field of UpdateBotCallbackQuery.
	MsgID int
	// ChatInstance field of UpdateBotCallbackQuery.
	ChatInstance int64
	// Data field of UpdateBotCallbackQuery.
	//
	// Use SetData and GetData helpers.
	Data []byte
	// GameShortName field of UpdateBotCallbackQuery.
	//
	// Use SetGameShortName and GetGameShortName helpers.
	GameShortName string
}

// UpdateBotCallbackQueryTypeID is TL type id of UpdateBotCallbackQuery.
const UpdateBotCallbackQueryTypeID = 0xe73547e1

// Encode implements bin.Encoder.
func (u *UpdateBotCallbackQuery) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateBotCallbackQuery#e73547e1 as nil")
	}
	b.PutID(UpdateBotCallbackQueryTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateBotCallbackQuery#e73547e1: field flags: %w", err)
	}
	b.PutLong(u.QueryID)
	b.PutInt(u.UserID)
	if u.Peer == nil {
		return fmt.Errorf("unable to encode updateBotCallbackQuery#e73547e1: field peer is nil")
	}
	if err := u.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateBotCallbackQuery#e73547e1: field peer: %w", err)
	}
	b.PutInt(u.MsgID)
	b.PutLong(u.ChatInstance)
	if u.Flags.Has(0) {
		b.PutBytes(u.Data)
	}
	if u.Flags.Has(1) {
		b.PutString(u.GameShortName)
	}
	return nil
}

// SetData sets value of Data conditional field.
func (u *UpdateBotCallbackQuery) SetData(value []byte) {
	u.Flags.Set(0)
	u.Data = value
}

// GetData returns value of Data conditional field and
// boolean which is true if field was set.
func (u *UpdateBotCallbackQuery) GetData() (value []byte, ok bool) {
	if !u.Flags.Has(0) {
		return value, false
	}
	return u.Data, true
}

// SetGameShortName sets value of GameShortName conditional field.
func (u *UpdateBotCallbackQuery) SetGameShortName(value string) {
	u.Flags.Set(1)
	u.GameShortName = value
}

// GetGameShortName returns value of GameShortName conditional field and
// boolean which is true if field was set.
func (u *UpdateBotCallbackQuery) GetGameShortName() (value string, ok bool) {
	if !u.Flags.Has(1) {
		return value, false
	}
	return u.GameShortName, true
}

// Decode implements bin.Decoder.
func (u *UpdateBotCallbackQuery) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateBotCallbackQuery#e73547e1 to nil")
	}
	if err := b.ConsumeID(UpdateBotCallbackQueryTypeID); err != nil {
		return fmt.Errorf("unable to decode updateBotCallbackQuery#e73547e1: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateBotCallbackQuery#e73547e1: field flags: %w", err)
		}
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotCallbackQuery#e73547e1: field query_id: %w", err)
		}
		u.QueryID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotCallbackQuery#e73547e1: field user_id: %w", err)
		}
		u.UserID = value
	}
	{
		value, err := DecodePeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateBotCallbackQuery#e73547e1: field peer: %w", err)
		}
		u.Peer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotCallbackQuery#e73547e1: field msg_id: %w", err)
		}
		u.MsgID = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotCallbackQuery#e73547e1: field chat_instance: %w", err)
		}
		u.ChatInstance = value
	}
	if u.Flags.Has(0) {
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotCallbackQuery#e73547e1: field data: %w", err)
		}
		u.Data = value
	}
	if u.Flags.Has(1) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotCallbackQuery#e73547e1: field game_short_name: %w", err)
		}
		u.GameShortName = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateBotCallbackQuery) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateBotCallbackQuery.
var (
	_ bin.Encoder = &UpdateBotCallbackQuery{}
	_ bin.Decoder = &UpdateBotCallbackQuery{}

	_ UpdateClass = &UpdateBotCallbackQuery{}
)

// UpdateEditMessage represents TL type `updateEditMessage#e40370a3`.
//
// See https://core.telegram.org/constructor/updateEditMessage for reference.
type UpdateEditMessage struct {
	// Message field of UpdateEditMessage.
	Message MessageClass
	// Pts field of UpdateEditMessage.
	Pts int
	// PtsCount field of UpdateEditMessage.
	PtsCount int
}

// UpdateEditMessageTypeID is TL type id of UpdateEditMessage.
const UpdateEditMessageTypeID = 0xe40370a3

// Encode implements bin.Encoder.
func (u *UpdateEditMessage) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateEditMessage#e40370a3 as nil")
	}
	b.PutID(UpdateEditMessageTypeID)
	if u.Message == nil {
		return fmt.Errorf("unable to encode updateEditMessage#e40370a3: field message is nil")
	}
	if err := u.Message.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateEditMessage#e40370a3: field message: %w", err)
	}
	b.PutInt(u.Pts)
	b.PutInt(u.PtsCount)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateEditMessage) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateEditMessage#e40370a3 to nil")
	}
	if err := b.ConsumeID(UpdateEditMessageTypeID); err != nil {
		return fmt.Errorf("unable to decode updateEditMessage#e40370a3: %w", err)
	}
	{
		value, err := DecodeMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateEditMessage#e40370a3: field message: %w", err)
		}
		u.Message = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateEditMessage#e40370a3: field pts: %w", err)
		}
		u.Pts = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateEditMessage#e40370a3: field pts_count: %w", err)
		}
		u.PtsCount = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateEditMessage) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateEditMessage.
var (
	_ bin.Encoder = &UpdateEditMessage{}
	_ bin.Decoder = &UpdateEditMessage{}

	_ UpdateClass = &UpdateEditMessage{}
)

// UpdateInlineBotCallbackQuery represents TL type `updateInlineBotCallbackQuery#f9d27a5a`.
//
// See https://core.telegram.org/constructor/updateInlineBotCallbackQuery for reference.
type UpdateInlineBotCallbackQuery struct {
	// Flags field of UpdateInlineBotCallbackQuery.
	Flags bin.Fields
	// QueryID field of UpdateInlineBotCallbackQuery.
	QueryID int64
	// UserID field of UpdateInlineBotCallbackQuery.
	UserID int
	// MsgID field of UpdateInlineBotCallbackQuery.
	MsgID InputBotInlineMessageID
	// ChatInstance field of UpdateInlineBotCallbackQuery.
	ChatInstance int64
	// Data field of UpdateInlineBotCallbackQuery.
	//
	// Use SetData and GetData helpers.
	Data []byte
	// GameShortName field of UpdateInlineBotCallbackQuery.
	//
	// Use SetGameShortName and GetGameShortName helpers.
	GameShortName string
}

// UpdateInlineBotCallbackQueryTypeID is TL type id of UpdateInlineBotCallbackQuery.
const UpdateInlineBotCallbackQueryTypeID = 0xf9d27a5a

// Encode implements bin.Encoder.
func (u *UpdateInlineBotCallbackQuery) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateInlineBotCallbackQuery#f9d27a5a as nil")
	}
	b.PutID(UpdateInlineBotCallbackQueryTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateInlineBotCallbackQuery#f9d27a5a: field flags: %w", err)
	}
	b.PutLong(u.QueryID)
	b.PutInt(u.UserID)
	if err := u.MsgID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateInlineBotCallbackQuery#f9d27a5a: field msg_id: %w", err)
	}
	b.PutLong(u.ChatInstance)
	if u.Flags.Has(0) {
		b.PutBytes(u.Data)
	}
	if u.Flags.Has(1) {
		b.PutString(u.GameShortName)
	}
	return nil
}

// SetData sets value of Data conditional field.
func (u *UpdateInlineBotCallbackQuery) SetData(value []byte) {
	u.Flags.Set(0)
	u.Data = value
}

// GetData returns value of Data conditional field and
// boolean which is true if field was set.
func (u *UpdateInlineBotCallbackQuery) GetData() (value []byte, ok bool) {
	if !u.Flags.Has(0) {
		return value, false
	}
	return u.Data, true
}

// SetGameShortName sets value of GameShortName conditional field.
func (u *UpdateInlineBotCallbackQuery) SetGameShortName(value string) {
	u.Flags.Set(1)
	u.GameShortName = value
}

// GetGameShortName returns value of GameShortName conditional field and
// boolean which is true if field was set.
func (u *UpdateInlineBotCallbackQuery) GetGameShortName() (value string, ok bool) {
	if !u.Flags.Has(1) {
		return value, false
	}
	return u.GameShortName, true
}

// Decode implements bin.Decoder.
func (u *UpdateInlineBotCallbackQuery) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateInlineBotCallbackQuery#f9d27a5a to nil")
	}
	if err := b.ConsumeID(UpdateInlineBotCallbackQueryTypeID); err != nil {
		return fmt.Errorf("unable to decode updateInlineBotCallbackQuery#f9d27a5a: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateInlineBotCallbackQuery#f9d27a5a: field flags: %w", err)
		}
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode updateInlineBotCallbackQuery#f9d27a5a: field query_id: %w", err)
		}
		u.QueryID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateInlineBotCallbackQuery#f9d27a5a: field user_id: %w", err)
		}
		u.UserID = value
	}
	{
		if err := u.MsgID.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateInlineBotCallbackQuery#f9d27a5a: field msg_id: %w", err)
		}
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode updateInlineBotCallbackQuery#f9d27a5a: field chat_instance: %w", err)
		}
		u.ChatInstance = value
	}
	if u.Flags.Has(0) {
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode updateInlineBotCallbackQuery#f9d27a5a: field data: %w", err)
		}
		u.Data = value
	}
	if u.Flags.Has(1) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode updateInlineBotCallbackQuery#f9d27a5a: field game_short_name: %w", err)
		}
		u.GameShortName = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateInlineBotCallbackQuery) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateInlineBotCallbackQuery.
var (
	_ bin.Encoder = &UpdateInlineBotCallbackQuery{}
	_ bin.Decoder = &UpdateInlineBotCallbackQuery{}

	_ UpdateClass = &UpdateInlineBotCallbackQuery{}
)

// UpdateReadChannelOutbox represents TL type `updateReadChannelOutbox#25d6c9c7`.
//
// See https://core.telegram.org/constructor/updateReadChannelOutbox for reference.
type UpdateReadChannelOutbox struct {
	// ChannelID field of UpdateReadChannelOutbox.
	ChannelID int
	// MaxID field of UpdateReadChannelOutbox.
	MaxID int
}

// UpdateReadChannelOutboxTypeID is TL type id of UpdateReadChannelOutbox.
const UpdateReadChannelOutboxTypeID = 0x25d6c9c7

// Encode implements bin.Encoder.
func (u *UpdateReadChannelOutbox) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateReadChannelOutbox#25d6c9c7 as nil")
	}
	b.PutID(UpdateReadChannelOutboxTypeID)
	b.PutInt(u.ChannelID)
	b.PutInt(u.MaxID)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateReadChannelOutbox) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateReadChannelOutbox#25d6c9c7 to nil")
	}
	if err := b.ConsumeID(UpdateReadChannelOutboxTypeID); err != nil {
		return fmt.Errorf("unable to decode updateReadChannelOutbox#25d6c9c7: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadChannelOutbox#25d6c9c7: field channel_id: %w", err)
		}
		u.ChannelID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadChannelOutbox#25d6c9c7: field max_id: %w", err)
		}
		u.MaxID = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateReadChannelOutbox) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateReadChannelOutbox.
var (
	_ bin.Encoder = &UpdateReadChannelOutbox{}
	_ bin.Decoder = &UpdateReadChannelOutbox{}

	_ UpdateClass = &UpdateReadChannelOutbox{}
)

// UpdateDraftMessage represents TL type `updateDraftMessage#ee2bb969`.
//
// See https://core.telegram.org/constructor/updateDraftMessage for reference.
type UpdateDraftMessage struct {
	// Peer field of UpdateDraftMessage.
	Peer PeerClass
	// Draft field of UpdateDraftMessage.
	Draft DraftMessageClass
}

// UpdateDraftMessageTypeID is TL type id of UpdateDraftMessage.
const UpdateDraftMessageTypeID = 0xee2bb969

// Encode implements bin.Encoder.
func (u *UpdateDraftMessage) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateDraftMessage#ee2bb969 as nil")
	}
	b.PutID(UpdateDraftMessageTypeID)
	if u.Peer == nil {
		return fmt.Errorf("unable to encode updateDraftMessage#ee2bb969: field peer is nil")
	}
	if err := u.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateDraftMessage#ee2bb969: field peer: %w", err)
	}
	if u.Draft == nil {
		return fmt.Errorf("unable to encode updateDraftMessage#ee2bb969: field draft is nil")
	}
	if err := u.Draft.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateDraftMessage#ee2bb969: field draft: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateDraftMessage) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateDraftMessage#ee2bb969 to nil")
	}
	if err := b.ConsumeID(UpdateDraftMessageTypeID); err != nil {
		return fmt.Errorf("unable to decode updateDraftMessage#ee2bb969: %w", err)
	}
	{
		value, err := DecodePeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateDraftMessage#ee2bb969: field peer: %w", err)
		}
		u.Peer = value
	}
	{
		value, err := DecodeDraftMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateDraftMessage#ee2bb969: field draft: %w", err)
		}
		u.Draft = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateDraftMessage) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateDraftMessage.
var (
	_ bin.Encoder = &UpdateDraftMessage{}
	_ bin.Decoder = &UpdateDraftMessage{}

	_ UpdateClass = &UpdateDraftMessage{}
)

// UpdateReadFeaturedStickers represents TL type `updateReadFeaturedStickers#571d2742`.
//
// See https://core.telegram.org/constructor/updateReadFeaturedStickers for reference.
type UpdateReadFeaturedStickers struct {
}

// UpdateReadFeaturedStickersTypeID is TL type id of UpdateReadFeaturedStickers.
const UpdateReadFeaturedStickersTypeID = 0x571d2742

// Encode implements bin.Encoder.
func (u *UpdateReadFeaturedStickers) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateReadFeaturedStickers#571d2742 as nil")
	}
	b.PutID(UpdateReadFeaturedStickersTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateReadFeaturedStickers) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateReadFeaturedStickers#571d2742 to nil")
	}
	if err := b.ConsumeID(UpdateReadFeaturedStickersTypeID); err != nil {
		return fmt.Errorf("unable to decode updateReadFeaturedStickers#571d2742: %w", err)
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateReadFeaturedStickers) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateReadFeaturedStickers.
var (
	_ bin.Encoder = &UpdateReadFeaturedStickers{}
	_ bin.Decoder = &UpdateReadFeaturedStickers{}

	_ UpdateClass = &UpdateReadFeaturedStickers{}
)

// UpdateRecentStickers represents TL type `updateRecentStickers#9a422c20`.
//
// See https://core.telegram.org/constructor/updateRecentStickers for reference.
type UpdateRecentStickers struct {
}

// UpdateRecentStickersTypeID is TL type id of UpdateRecentStickers.
const UpdateRecentStickersTypeID = 0x9a422c20

// Encode implements bin.Encoder.
func (u *UpdateRecentStickers) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateRecentStickers#9a422c20 as nil")
	}
	b.PutID(UpdateRecentStickersTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateRecentStickers) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateRecentStickers#9a422c20 to nil")
	}
	if err := b.ConsumeID(UpdateRecentStickersTypeID); err != nil {
		return fmt.Errorf("unable to decode updateRecentStickers#9a422c20: %w", err)
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateRecentStickers) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateRecentStickers.
var (
	_ bin.Encoder = &UpdateRecentStickers{}
	_ bin.Decoder = &UpdateRecentStickers{}

	_ UpdateClass = &UpdateRecentStickers{}
)

// UpdateConfig represents TL type `updateConfig#a229dd06`.
//
// See https://core.telegram.org/constructor/updateConfig for reference.
type UpdateConfig struct {
}

// UpdateConfigTypeID is TL type id of UpdateConfig.
const UpdateConfigTypeID = 0xa229dd06

// Encode implements bin.Encoder.
func (u *UpdateConfig) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateConfig#a229dd06 as nil")
	}
	b.PutID(UpdateConfigTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateConfig) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateConfig#a229dd06 to nil")
	}
	if err := b.ConsumeID(UpdateConfigTypeID); err != nil {
		return fmt.Errorf("unable to decode updateConfig#a229dd06: %w", err)
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateConfig) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateConfig.
var (
	_ bin.Encoder = &UpdateConfig{}
	_ bin.Decoder = &UpdateConfig{}

	_ UpdateClass = &UpdateConfig{}
)

// UpdatePtsChanged represents TL type `updatePtsChanged#3354678f`.
//
// See https://core.telegram.org/constructor/updatePtsChanged for reference.
type UpdatePtsChanged struct {
}

// UpdatePtsChangedTypeID is TL type id of UpdatePtsChanged.
const UpdatePtsChangedTypeID = 0x3354678f

// Encode implements bin.Encoder.
func (u *UpdatePtsChanged) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updatePtsChanged#3354678f as nil")
	}
	b.PutID(UpdatePtsChangedTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdatePtsChanged) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updatePtsChanged#3354678f to nil")
	}
	if err := b.ConsumeID(UpdatePtsChangedTypeID); err != nil {
		return fmt.Errorf("unable to decode updatePtsChanged#3354678f: %w", err)
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdatePtsChanged) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdatePtsChanged.
var (
	_ bin.Encoder = &UpdatePtsChanged{}
	_ bin.Decoder = &UpdatePtsChanged{}

	_ UpdateClass = &UpdatePtsChanged{}
)

// UpdateChannelWebPage represents TL type `updateChannelWebPage#40771900`.
//
// See https://core.telegram.org/constructor/updateChannelWebPage for reference.
type UpdateChannelWebPage struct {
	// ChannelID field of UpdateChannelWebPage.
	ChannelID int
	// Webpage field of UpdateChannelWebPage.
	Webpage WebPageClass
	// Pts field of UpdateChannelWebPage.
	Pts int
	// PtsCount field of UpdateChannelWebPage.
	PtsCount int
}

// UpdateChannelWebPageTypeID is TL type id of UpdateChannelWebPage.
const UpdateChannelWebPageTypeID = 0x40771900

// Encode implements bin.Encoder.
func (u *UpdateChannelWebPage) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateChannelWebPage#40771900 as nil")
	}
	b.PutID(UpdateChannelWebPageTypeID)
	b.PutInt(u.ChannelID)
	if u.Webpage == nil {
		return fmt.Errorf("unable to encode updateChannelWebPage#40771900: field webpage is nil")
	}
	if err := u.Webpage.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateChannelWebPage#40771900: field webpage: %w", err)
	}
	b.PutInt(u.Pts)
	b.PutInt(u.PtsCount)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateChannelWebPage) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateChannelWebPage#40771900 to nil")
	}
	if err := b.ConsumeID(UpdateChannelWebPageTypeID); err != nil {
		return fmt.Errorf("unable to decode updateChannelWebPage#40771900: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelWebPage#40771900: field channel_id: %w", err)
		}
		u.ChannelID = value
	}
	{
		value, err := DecodeWebPage(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelWebPage#40771900: field webpage: %w", err)
		}
		u.Webpage = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelWebPage#40771900: field pts: %w", err)
		}
		u.Pts = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelWebPage#40771900: field pts_count: %w", err)
		}
		u.PtsCount = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateChannelWebPage) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateChannelWebPage.
var (
	_ bin.Encoder = &UpdateChannelWebPage{}
	_ bin.Decoder = &UpdateChannelWebPage{}

	_ UpdateClass = &UpdateChannelWebPage{}
)

// UpdateDialogPinned represents TL type `updateDialogPinned#6e6fe51c`.
//
// See https://core.telegram.org/constructor/updateDialogPinned for reference.
type UpdateDialogPinned struct {
	// Flags field of UpdateDialogPinned.
	Flags bin.Fields
	// Pinned field of UpdateDialogPinned.
	Pinned bool
	// FolderID field of UpdateDialogPinned.
	//
	// Use SetFolderID and GetFolderID helpers.
	FolderID int
	// Peer field of UpdateDialogPinned.
	Peer DialogPeerClass
}

// UpdateDialogPinnedTypeID is TL type id of UpdateDialogPinned.
const UpdateDialogPinnedTypeID = 0x6e6fe51c

// Encode implements bin.Encoder.
func (u *UpdateDialogPinned) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateDialogPinned#6e6fe51c as nil")
	}
	b.PutID(UpdateDialogPinnedTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateDialogPinned#6e6fe51c: field flags: %w", err)
	}
	if u.Flags.Has(1) {
		b.PutInt(u.FolderID)
	}
	if u.Peer == nil {
		return fmt.Errorf("unable to encode updateDialogPinned#6e6fe51c: field peer is nil")
	}
	if err := u.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateDialogPinned#6e6fe51c: field peer: %w", err)
	}
	return nil
}

// SetPinned sets value of Pinned conditional field.
func (u *UpdateDialogPinned) SetPinned(value bool) {
	if value {
		u.Flags.Set(0)
	} else {
		u.Flags.Unset(0)
	}
}

// SetFolderID sets value of FolderID conditional field.
func (u *UpdateDialogPinned) SetFolderID(value int) {
	u.Flags.Set(1)
	u.FolderID = value
}

// GetFolderID returns value of FolderID conditional field and
// boolean which is true if field was set.
func (u *UpdateDialogPinned) GetFolderID() (value int, ok bool) {
	if !u.Flags.Has(1) {
		return value, false
	}
	return u.FolderID, true
}

// Decode implements bin.Decoder.
func (u *UpdateDialogPinned) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateDialogPinned#6e6fe51c to nil")
	}
	if err := b.ConsumeID(UpdateDialogPinnedTypeID); err != nil {
		return fmt.Errorf("unable to decode updateDialogPinned#6e6fe51c: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateDialogPinned#6e6fe51c: field flags: %w", err)
		}
	}
	u.Pinned = u.Flags.Has(0)
	if u.Flags.Has(1) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateDialogPinned#6e6fe51c: field folder_id: %w", err)
		}
		u.FolderID = value
	}
	{
		value, err := DecodeDialogPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateDialogPinned#6e6fe51c: field peer: %w", err)
		}
		u.Peer = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateDialogPinned) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateDialogPinned.
var (
	_ bin.Encoder = &UpdateDialogPinned{}
	_ bin.Decoder = &UpdateDialogPinned{}

	_ UpdateClass = &UpdateDialogPinned{}
)

// UpdatePinnedDialogs represents TL type `updatePinnedDialogs#fa0f3ca2`.
//
// See https://core.telegram.org/constructor/updatePinnedDialogs for reference.
type UpdatePinnedDialogs struct {
	// Flags field of UpdatePinnedDialogs.
	Flags bin.Fields
	// FolderID field of UpdatePinnedDialogs.
	//
	// Use SetFolderID and GetFolderID helpers.
	FolderID int
	// Order field of UpdatePinnedDialogs.
	//
	// Use SetOrder and GetOrder helpers.
	Order []DialogPeerClass
}

// UpdatePinnedDialogsTypeID is TL type id of UpdatePinnedDialogs.
const UpdatePinnedDialogsTypeID = 0xfa0f3ca2

// Encode implements bin.Encoder.
func (u *UpdatePinnedDialogs) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updatePinnedDialogs#fa0f3ca2 as nil")
	}
	b.PutID(UpdatePinnedDialogsTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updatePinnedDialogs#fa0f3ca2: field flags: %w", err)
	}
	if u.Flags.Has(1) {
		b.PutInt(u.FolderID)
	}
	if u.Flags.Has(0) {
		b.PutVectorHeader(len(u.Order))
		for idx, v := range u.Order {
			if v == nil {
				return fmt.Errorf("unable to encode updatePinnedDialogs#fa0f3ca2: field order element with index %d is nil", idx)
			}
			if err := v.Encode(b); err != nil {
				return fmt.Errorf("unable to encode updatePinnedDialogs#fa0f3ca2: field order element with index %d: %w", idx, err)
			}
		}
	}
	return nil
}

// SetFolderID sets value of FolderID conditional field.
func (u *UpdatePinnedDialogs) SetFolderID(value int) {
	u.Flags.Set(1)
	u.FolderID = value
}

// GetFolderID returns value of FolderID conditional field and
// boolean which is true if field was set.
func (u *UpdatePinnedDialogs) GetFolderID() (value int, ok bool) {
	if !u.Flags.Has(1) {
		return value, false
	}
	return u.FolderID, true
}

// SetOrder sets value of Order conditional field.
func (u *UpdatePinnedDialogs) SetOrder(value []DialogPeerClass) {
	u.Flags.Set(0)
	u.Order = value
}

// GetOrder returns value of Order conditional field and
// boolean which is true if field was set.
func (u *UpdatePinnedDialogs) GetOrder() (value []DialogPeerClass, ok bool) {
	if !u.Flags.Has(0) {
		return value, false
	}
	return u.Order, true
}

// Decode implements bin.Decoder.
func (u *UpdatePinnedDialogs) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updatePinnedDialogs#fa0f3ca2 to nil")
	}
	if err := b.ConsumeID(UpdatePinnedDialogsTypeID); err != nil {
		return fmt.Errorf("unable to decode updatePinnedDialogs#fa0f3ca2: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updatePinnedDialogs#fa0f3ca2: field flags: %w", err)
		}
	}
	if u.Flags.Has(1) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updatePinnedDialogs#fa0f3ca2: field folder_id: %w", err)
		}
		u.FolderID = value
	}
	if u.Flags.Has(0) {
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updatePinnedDialogs#fa0f3ca2: field order: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeDialogPeer(b)
			if err != nil {
				return fmt.Errorf("unable to decode updatePinnedDialogs#fa0f3ca2: field order: %w", err)
			}
			u.Order = append(u.Order, value)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdatePinnedDialogs) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdatePinnedDialogs.
var (
	_ bin.Encoder = &UpdatePinnedDialogs{}
	_ bin.Decoder = &UpdatePinnedDialogs{}

	_ UpdateClass = &UpdatePinnedDialogs{}
)

// UpdateBotWebhookJSON represents TL type `updateBotWebhookJSON#8317c0c3`.
//
// See https://core.telegram.org/constructor/updateBotWebhookJSON for reference.
type UpdateBotWebhookJSON struct {
	// Data field of UpdateBotWebhookJSON.
	Data DataJSON
}

// UpdateBotWebhookJSONTypeID is TL type id of UpdateBotWebhookJSON.
const UpdateBotWebhookJSONTypeID = 0x8317c0c3

// Encode implements bin.Encoder.
func (u *UpdateBotWebhookJSON) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateBotWebhookJSON#8317c0c3 as nil")
	}
	b.PutID(UpdateBotWebhookJSONTypeID)
	if err := u.Data.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateBotWebhookJSON#8317c0c3: field data: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateBotWebhookJSON) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateBotWebhookJSON#8317c0c3 to nil")
	}
	if err := b.ConsumeID(UpdateBotWebhookJSONTypeID); err != nil {
		return fmt.Errorf("unable to decode updateBotWebhookJSON#8317c0c3: %w", err)
	}
	{
		if err := u.Data.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateBotWebhookJSON#8317c0c3: field data: %w", err)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateBotWebhookJSON) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateBotWebhookJSON.
var (
	_ bin.Encoder = &UpdateBotWebhookJSON{}
	_ bin.Decoder = &UpdateBotWebhookJSON{}

	_ UpdateClass = &UpdateBotWebhookJSON{}
)

// UpdateBotWebhookJSONQuery represents TL type `updateBotWebhookJSONQuery#9b9240a6`.
//
// See https://core.telegram.org/constructor/updateBotWebhookJSONQuery for reference.
type UpdateBotWebhookJSONQuery struct {
	// QueryID field of UpdateBotWebhookJSONQuery.
	QueryID int64
	// Data field of UpdateBotWebhookJSONQuery.
	Data DataJSON
	// Timeout field of UpdateBotWebhookJSONQuery.
	Timeout int
}

// UpdateBotWebhookJSONQueryTypeID is TL type id of UpdateBotWebhookJSONQuery.
const UpdateBotWebhookJSONQueryTypeID = 0x9b9240a6

// Encode implements bin.Encoder.
func (u *UpdateBotWebhookJSONQuery) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateBotWebhookJSONQuery#9b9240a6 as nil")
	}
	b.PutID(UpdateBotWebhookJSONQueryTypeID)
	b.PutLong(u.QueryID)
	if err := u.Data.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateBotWebhookJSONQuery#9b9240a6: field data: %w", err)
	}
	b.PutInt(u.Timeout)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateBotWebhookJSONQuery) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateBotWebhookJSONQuery#9b9240a6 to nil")
	}
	if err := b.ConsumeID(UpdateBotWebhookJSONQueryTypeID); err != nil {
		return fmt.Errorf("unable to decode updateBotWebhookJSONQuery#9b9240a6: %w", err)
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotWebhookJSONQuery#9b9240a6: field query_id: %w", err)
		}
		u.QueryID = value
	}
	{
		if err := u.Data.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateBotWebhookJSONQuery#9b9240a6: field data: %w", err)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotWebhookJSONQuery#9b9240a6: field timeout: %w", err)
		}
		u.Timeout = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateBotWebhookJSONQuery) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateBotWebhookJSONQuery.
var (
	_ bin.Encoder = &UpdateBotWebhookJSONQuery{}
	_ bin.Decoder = &UpdateBotWebhookJSONQuery{}

	_ UpdateClass = &UpdateBotWebhookJSONQuery{}
)

// UpdateBotShippingQuery represents TL type `updateBotShippingQuery#e0cdc940`.
//
// See https://core.telegram.org/constructor/updateBotShippingQuery for reference.
type UpdateBotShippingQuery struct {
	// QueryID field of UpdateBotShippingQuery.
	QueryID int64
	// UserID field of UpdateBotShippingQuery.
	UserID int
	// Payload field of UpdateBotShippingQuery.
	Payload []byte
	// ShippingAddress field of UpdateBotShippingQuery.
	ShippingAddress PostAddress
}

// UpdateBotShippingQueryTypeID is TL type id of UpdateBotShippingQuery.
const UpdateBotShippingQueryTypeID = 0xe0cdc940

// Encode implements bin.Encoder.
func (u *UpdateBotShippingQuery) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateBotShippingQuery#e0cdc940 as nil")
	}
	b.PutID(UpdateBotShippingQueryTypeID)
	b.PutLong(u.QueryID)
	b.PutInt(u.UserID)
	b.PutBytes(u.Payload)
	if err := u.ShippingAddress.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateBotShippingQuery#e0cdc940: field shipping_address: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateBotShippingQuery) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateBotShippingQuery#e0cdc940 to nil")
	}
	if err := b.ConsumeID(UpdateBotShippingQueryTypeID); err != nil {
		return fmt.Errorf("unable to decode updateBotShippingQuery#e0cdc940: %w", err)
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotShippingQuery#e0cdc940: field query_id: %w", err)
		}
		u.QueryID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotShippingQuery#e0cdc940: field user_id: %w", err)
		}
		u.UserID = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotShippingQuery#e0cdc940: field payload: %w", err)
		}
		u.Payload = value
	}
	{
		if err := u.ShippingAddress.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateBotShippingQuery#e0cdc940: field shipping_address: %w", err)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateBotShippingQuery) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateBotShippingQuery.
var (
	_ bin.Encoder = &UpdateBotShippingQuery{}
	_ bin.Decoder = &UpdateBotShippingQuery{}

	_ UpdateClass = &UpdateBotShippingQuery{}
)

// UpdateBotPrecheckoutQuery represents TL type `updateBotPrecheckoutQuery#5d2f3aa9`.
//
// See https://core.telegram.org/constructor/updateBotPrecheckoutQuery for reference.
type UpdateBotPrecheckoutQuery struct {
	// Flags field of UpdateBotPrecheckoutQuery.
	Flags bin.Fields
	// QueryID field of UpdateBotPrecheckoutQuery.
	QueryID int64
	// UserID field of UpdateBotPrecheckoutQuery.
	UserID int
	// Payload field of UpdateBotPrecheckoutQuery.
	Payload []byte
	// Info field of UpdateBotPrecheckoutQuery.
	//
	// Use SetInfo and GetInfo helpers.
	Info PaymentRequestedInfo
	// ShippingOptionID field of UpdateBotPrecheckoutQuery.
	//
	// Use SetShippingOptionID and GetShippingOptionID helpers.
	ShippingOptionID string
	// Currency field of UpdateBotPrecheckoutQuery.
	Currency string
	// TotalAmount field of UpdateBotPrecheckoutQuery.
	TotalAmount int64
}

// UpdateBotPrecheckoutQueryTypeID is TL type id of UpdateBotPrecheckoutQuery.
const UpdateBotPrecheckoutQueryTypeID = 0x5d2f3aa9

// Encode implements bin.Encoder.
func (u *UpdateBotPrecheckoutQuery) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateBotPrecheckoutQuery#5d2f3aa9 as nil")
	}
	b.PutID(UpdateBotPrecheckoutQueryTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateBotPrecheckoutQuery#5d2f3aa9: field flags: %w", err)
	}
	b.PutLong(u.QueryID)
	b.PutInt(u.UserID)
	b.PutBytes(u.Payload)
	if u.Flags.Has(0) {
		if err := u.Info.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updateBotPrecheckoutQuery#5d2f3aa9: field info: %w", err)
		}
	}
	if u.Flags.Has(1) {
		b.PutString(u.ShippingOptionID)
	}
	b.PutString(u.Currency)
	b.PutLong(u.TotalAmount)
	return nil
}

// SetInfo sets value of Info conditional field.
func (u *UpdateBotPrecheckoutQuery) SetInfo(value PaymentRequestedInfo) {
	u.Flags.Set(0)
	u.Info = value
}

// GetInfo returns value of Info conditional field and
// boolean which is true if field was set.
func (u *UpdateBotPrecheckoutQuery) GetInfo() (value PaymentRequestedInfo, ok bool) {
	if !u.Flags.Has(0) {
		return value, false
	}
	return u.Info, true
}

// SetShippingOptionID sets value of ShippingOptionID conditional field.
func (u *UpdateBotPrecheckoutQuery) SetShippingOptionID(value string) {
	u.Flags.Set(1)
	u.ShippingOptionID = value
}

// GetShippingOptionID returns value of ShippingOptionID conditional field and
// boolean which is true if field was set.
func (u *UpdateBotPrecheckoutQuery) GetShippingOptionID() (value string, ok bool) {
	if !u.Flags.Has(1) {
		return value, false
	}
	return u.ShippingOptionID, true
}

// Decode implements bin.Decoder.
func (u *UpdateBotPrecheckoutQuery) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateBotPrecheckoutQuery#5d2f3aa9 to nil")
	}
	if err := b.ConsumeID(UpdateBotPrecheckoutQueryTypeID); err != nil {
		return fmt.Errorf("unable to decode updateBotPrecheckoutQuery#5d2f3aa9: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateBotPrecheckoutQuery#5d2f3aa9: field flags: %w", err)
		}
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotPrecheckoutQuery#5d2f3aa9: field query_id: %w", err)
		}
		u.QueryID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotPrecheckoutQuery#5d2f3aa9: field user_id: %w", err)
		}
		u.UserID = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotPrecheckoutQuery#5d2f3aa9: field payload: %w", err)
		}
		u.Payload = value
	}
	if u.Flags.Has(0) {
		if err := u.Info.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateBotPrecheckoutQuery#5d2f3aa9: field info: %w", err)
		}
	}
	if u.Flags.Has(1) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotPrecheckoutQuery#5d2f3aa9: field shipping_option_id: %w", err)
		}
		u.ShippingOptionID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotPrecheckoutQuery#5d2f3aa9: field currency: %w", err)
		}
		u.Currency = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode updateBotPrecheckoutQuery#5d2f3aa9: field total_amount: %w", err)
		}
		u.TotalAmount = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateBotPrecheckoutQuery) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateBotPrecheckoutQuery.
var (
	_ bin.Encoder = &UpdateBotPrecheckoutQuery{}
	_ bin.Decoder = &UpdateBotPrecheckoutQuery{}

	_ UpdateClass = &UpdateBotPrecheckoutQuery{}
)

// UpdatePhoneCall represents TL type `updatePhoneCall#ab0f6b1e`.
//
// See https://core.telegram.org/constructor/updatePhoneCall for reference.
type UpdatePhoneCall struct {
	// PhoneCall field of UpdatePhoneCall.
	PhoneCall PhoneCallClass
}

// UpdatePhoneCallTypeID is TL type id of UpdatePhoneCall.
const UpdatePhoneCallTypeID = 0xab0f6b1e

// Encode implements bin.Encoder.
func (u *UpdatePhoneCall) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updatePhoneCall#ab0f6b1e as nil")
	}
	b.PutID(UpdatePhoneCallTypeID)
	if u.PhoneCall == nil {
		return fmt.Errorf("unable to encode updatePhoneCall#ab0f6b1e: field phone_call is nil")
	}
	if err := u.PhoneCall.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updatePhoneCall#ab0f6b1e: field phone_call: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdatePhoneCall) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updatePhoneCall#ab0f6b1e to nil")
	}
	if err := b.ConsumeID(UpdatePhoneCallTypeID); err != nil {
		return fmt.Errorf("unable to decode updatePhoneCall#ab0f6b1e: %w", err)
	}
	{
		value, err := DecodePhoneCall(b)
		if err != nil {
			return fmt.Errorf("unable to decode updatePhoneCall#ab0f6b1e: field phone_call: %w", err)
		}
		u.PhoneCall = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdatePhoneCall) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdatePhoneCall.
var (
	_ bin.Encoder = &UpdatePhoneCall{}
	_ bin.Decoder = &UpdatePhoneCall{}

	_ UpdateClass = &UpdatePhoneCall{}
)

// UpdateLangPackTooLong represents TL type `updateLangPackTooLong#46560264`.
//
// See https://core.telegram.org/constructor/updateLangPackTooLong for reference.
type UpdateLangPackTooLong struct {
	// LangCode field of UpdateLangPackTooLong.
	LangCode string
}

// UpdateLangPackTooLongTypeID is TL type id of UpdateLangPackTooLong.
const UpdateLangPackTooLongTypeID = 0x46560264

// Encode implements bin.Encoder.
func (u *UpdateLangPackTooLong) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateLangPackTooLong#46560264 as nil")
	}
	b.PutID(UpdateLangPackTooLongTypeID)
	b.PutString(u.LangCode)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateLangPackTooLong) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateLangPackTooLong#46560264 to nil")
	}
	if err := b.ConsumeID(UpdateLangPackTooLongTypeID); err != nil {
		return fmt.Errorf("unable to decode updateLangPackTooLong#46560264: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode updateLangPackTooLong#46560264: field lang_code: %w", err)
		}
		u.LangCode = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateLangPackTooLong) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateLangPackTooLong.
var (
	_ bin.Encoder = &UpdateLangPackTooLong{}
	_ bin.Decoder = &UpdateLangPackTooLong{}

	_ UpdateClass = &UpdateLangPackTooLong{}
)

// UpdateLangPack represents TL type `updateLangPack#56022f4d`.
//
// See https://core.telegram.org/constructor/updateLangPack for reference.
type UpdateLangPack struct {
	// Difference field of UpdateLangPack.
	Difference LangPackDifference
}

// UpdateLangPackTypeID is TL type id of UpdateLangPack.
const UpdateLangPackTypeID = 0x56022f4d

// Encode implements bin.Encoder.
func (u *UpdateLangPack) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateLangPack#56022f4d as nil")
	}
	b.PutID(UpdateLangPackTypeID)
	if err := u.Difference.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateLangPack#56022f4d: field difference: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateLangPack) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateLangPack#56022f4d to nil")
	}
	if err := b.ConsumeID(UpdateLangPackTypeID); err != nil {
		return fmt.Errorf("unable to decode updateLangPack#56022f4d: %w", err)
	}
	{
		if err := u.Difference.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateLangPack#56022f4d: field difference: %w", err)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateLangPack) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateLangPack.
var (
	_ bin.Encoder = &UpdateLangPack{}
	_ bin.Decoder = &UpdateLangPack{}

	_ UpdateClass = &UpdateLangPack{}
)

// UpdateFavedStickers represents TL type `updateFavedStickers#e511996d`.
//
// See https://core.telegram.org/constructor/updateFavedStickers for reference.
type UpdateFavedStickers struct {
}

// UpdateFavedStickersTypeID is TL type id of UpdateFavedStickers.
const UpdateFavedStickersTypeID = 0xe511996d

// Encode implements bin.Encoder.
func (u *UpdateFavedStickers) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateFavedStickers#e511996d as nil")
	}
	b.PutID(UpdateFavedStickersTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateFavedStickers) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateFavedStickers#e511996d to nil")
	}
	if err := b.ConsumeID(UpdateFavedStickersTypeID); err != nil {
		return fmt.Errorf("unable to decode updateFavedStickers#e511996d: %w", err)
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateFavedStickers) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateFavedStickers.
var (
	_ bin.Encoder = &UpdateFavedStickers{}
	_ bin.Decoder = &UpdateFavedStickers{}

	_ UpdateClass = &UpdateFavedStickers{}
)

// UpdateChannelReadMessagesContents represents TL type `updateChannelReadMessagesContents#89893b45`.
//
// See https://core.telegram.org/constructor/updateChannelReadMessagesContents for reference.
type UpdateChannelReadMessagesContents struct {
	// ChannelID field of UpdateChannelReadMessagesContents.
	ChannelID int
	// Messages field of UpdateChannelReadMessagesContents.
	Messages []int
}

// UpdateChannelReadMessagesContentsTypeID is TL type id of UpdateChannelReadMessagesContents.
const UpdateChannelReadMessagesContentsTypeID = 0x89893b45

// Encode implements bin.Encoder.
func (u *UpdateChannelReadMessagesContents) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateChannelReadMessagesContents#89893b45 as nil")
	}
	b.PutID(UpdateChannelReadMessagesContentsTypeID)
	b.PutInt(u.ChannelID)
	b.PutVectorHeader(len(u.Messages))
	for _, v := range u.Messages {
		b.PutInt(v)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateChannelReadMessagesContents) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateChannelReadMessagesContents#89893b45 to nil")
	}
	if err := b.ConsumeID(UpdateChannelReadMessagesContentsTypeID); err != nil {
		return fmt.Errorf("unable to decode updateChannelReadMessagesContents#89893b45: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelReadMessagesContents#89893b45: field channel_id: %w", err)
		}
		u.ChannelID = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelReadMessagesContents#89893b45: field messages: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Int()
			if err != nil {
				return fmt.Errorf("unable to decode updateChannelReadMessagesContents#89893b45: field messages: %w", err)
			}
			u.Messages = append(u.Messages, value)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateChannelReadMessagesContents) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateChannelReadMessagesContents.
var (
	_ bin.Encoder = &UpdateChannelReadMessagesContents{}
	_ bin.Decoder = &UpdateChannelReadMessagesContents{}

	_ UpdateClass = &UpdateChannelReadMessagesContents{}
)

// UpdateContactsReset represents TL type `updateContactsReset#7084a7be`.
//
// See https://core.telegram.org/constructor/updateContactsReset for reference.
type UpdateContactsReset struct {
}

// UpdateContactsResetTypeID is TL type id of UpdateContactsReset.
const UpdateContactsResetTypeID = 0x7084a7be

// Encode implements bin.Encoder.
func (u *UpdateContactsReset) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateContactsReset#7084a7be as nil")
	}
	b.PutID(UpdateContactsResetTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateContactsReset) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateContactsReset#7084a7be to nil")
	}
	if err := b.ConsumeID(UpdateContactsResetTypeID); err != nil {
		return fmt.Errorf("unable to decode updateContactsReset#7084a7be: %w", err)
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateContactsReset) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateContactsReset.
var (
	_ bin.Encoder = &UpdateContactsReset{}
	_ bin.Decoder = &UpdateContactsReset{}

	_ UpdateClass = &UpdateContactsReset{}
)

// UpdateChannelAvailableMessages represents TL type `updateChannelAvailableMessages#70db6837`.
//
// See https://core.telegram.org/constructor/updateChannelAvailableMessages for reference.
type UpdateChannelAvailableMessages struct {
	// ChannelID field of UpdateChannelAvailableMessages.
	ChannelID int
	// AvailableMinID field of UpdateChannelAvailableMessages.
	AvailableMinID int
}

// UpdateChannelAvailableMessagesTypeID is TL type id of UpdateChannelAvailableMessages.
const UpdateChannelAvailableMessagesTypeID = 0x70db6837

// Encode implements bin.Encoder.
func (u *UpdateChannelAvailableMessages) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateChannelAvailableMessages#70db6837 as nil")
	}
	b.PutID(UpdateChannelAvailableMessagesTypeID)
	b.PutInt(u.ChannelID)
	b.PutInt(u.AvailableMinID)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateChannelAvailableMessages) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateChannelAvailableMessages#70db6837 to nil")
	}
	if err := b.ConsumeID(UpdateChannelAvailableMessagesTypeID); err != nil {
		return fmt.Errorf("unable to decode updateChannelAvailableMessages#70db6837: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelAvailableMessages#70db6837: field channel_id: %w", err)
		}
		u.ChannelID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelAvailableMessages#70db6837: field available_min_id: %w", err)
		}
		u.AvailableMinID = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateChannelAvailableMessages) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateChannelAvailableMessages.
var (
	_ bin.Encoder = &UpdateChannelAvailableMessages{}
	_ bin.Decoder = &UpdateChannelAvailableMessages{}

	_ UpdateClass = &UpdateChannelAvailableMessages{}
)

// UpdateDialogUnreadMark represents TL type `updateDialogUnreadMark#e16459c3`.
//
// See https://core.telegram.org/constructor/updateDialogUnreadMark for reference.
type UpdateDialogUnreadMark struct {
	// Flags field of UpdateDialogUnreadMark.
	Flags bin.Fields
	// Unread field of UpdateDialogUnreadMark.
	Unread bool
	// Peer field of UpdateDialogUnreadMark.
	Peer DialogPeerClass
}

// UpdateDialogUnreadMarkTypeID is TL type id of UpdateDialogUnreadMark.
const UpdateDialogUnreadMarkTypeID = 0xe16459c3

// Encode implements bin.Encoder.
func (u *UpdateDialogUnreadMark) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateDialogUnreadMark#e16459c3 as nil")
	}
	b.PutID(UpdateDialogUnreadMarkTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateDialogUnreadMark#e16459c3: field flags: %w", err)
	}
	if u.Peer == nil {
		return fmt.Errorf("unable to encode updateDialogUnreadMark#e16459c3: field peer is nil")
	}
	if err := u.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateDialogUnreadMark#e16459c3: field peer: %w", err)
	}
	return nil
}

// SetUnread sets value of Unread conditional field.
func (u *UpdateDialogUnreadMark) SetUnread(value bool) {
	if value {
		u.Flags.Set(0)
	} else {
		u.Flags.Unset(0)
	}
}

// Decode implements bin.Decoder.
func (u *UpdateDialogUnreadMark) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateDialogUnreadMark#e16459c3 to nil")
	}
	if err := b.ConsumeID(UpdateDialogUnreadMarkTypeID); err != nil {
		return fmt.Errorf("unable to decode updateDialogUnreadMark#e16459c3: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateDialogUnreadMark#e16459c3: field flags: %w", err)
		}
	}
	u.Unread = u.Flags.Has(0)
	{
		value, err := DecodeDialogPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateDialogUnreadMark#e16459c3: field peer: %w", err)
		}
		u.Peer = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateDialogUnreadMark) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateDialogUnreadMark.
var (
	_ bin.Encoder = &UpdateDialogUnreadMark{}
	_ bin.Decoder = &UpdateDialogUnreadMark{}

	_ UpdateClass = &UpdateDialogUnreadMark{}
)

// UpdateMessagePoll represents TL type `updateMessagePoll#aca1657b`.
//
// See https://core.telegram.org/constructor/updateMessagePoll for reference.
type UpdateMessagePoll struct {
	// Flags field of UpdateMessagePoll.
	Flags bin.Fields
	// PollID field of UpdateMessagePoll.
	PollID int64
	// Poll field of UpdateMessagePoll.
	//
	// Use SetPoll and GetPoll helpers.
	Poll Poll
	// Results field of UpdateMessagePoll.
	Results PollResults
}

// UpdateMessagePollTypeID is TL type id of UpdateMessagePoll.
const UpdateMessagePollTypeID = 0xaca1657b

// Encode implements bin.Encoder.
func (u *UpdateMessagePoll) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateMessagePoll#aca1657b as nil")
	}
	b.PutID(UpdateMessagePollTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateMessagePoll#aca1657b: field flags: %w", err)
	}
	b.PutLong(u.PollID)
	if u.Flags.Has(0) {
		if err := u.Poll.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updateMessagePoll#aca1657b: field poll: %w", err)
		}
	}
	if err := u.Results.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateMessagePoll#aca1657b: field results: %w", err)
	}
	return nil
}

// SetPoll sets value of Poll conditional field.
func (u *UpdateMessagePoll) SetPoll(value Poll) {
	u.Flags.Set(0)
	u.Poll = value
}

// GetPoll returns value of Poll conditional field and
// boolean which is true if field was set.
func (u *UpdateMessagePoll) GetPoll() (value Poll, ok bool) {
	if !u.Flags.Has(0) {
		return value, false
	}
	return u.Poll, true
}

// Decode implements bin.Decoder.
func (u *UpdateMessagePoll) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateMessagePoll#aca1657b to nil")
	}
	if err := b.ConsumeID(UpdateMessagePollTypeID); err != nil {
		return fmt.Errorf("unable to decode updateMessagePoll#aca1657b: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateMessagePoll#aca1657b: field flags: %w", err)
		}
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode updateMessagePoll#aca1657b: field poll_id: %w", err)
		}
		u.PollID = value
	}
	if u.Flags.Has(0) {
		if err := u.Poll.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateMessagePoll#aca1657b: field poll: %w", err)
		}
	}
	{
		if err := u.Results.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateMessagePoll#aca1657b: field results: %w", err)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateMessagePoll) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateMessagePoll.
var (
	_ bin.Encoder = &UpdateMessagePoll{}
	_ bin.Decoder = &UpdateMessagePoll{}

	_ UpdateClass = &UpdateMessagePoll{}
)

// UpdateChatDefaultBannedRights represents TL type `updateChatDefaultBannedRights#54c01850`.
//
// See https://core.telegram.org/constructor/updateChatDefaultBannedRights for reference.
type UpdateChatDefaultBannedRights struct {
	// Peer field of UpdateChatDefaultBannedRights.
	Peer PeerClass
	// DefaultBannedRights field of UpdateChatDefaultBannedRights.
	DefaultBannedRights ChatBannedRights
	// Version field of UpdateChatDefaultBannedRights.
	Version int
}

// UpdateChatDefaultBannedRightsTypeID is TL type id of UpdateChatDefaultBannedRights.
const UpdateChatDefaultBannedRightsTypeID = 0x54c01850

// Encode implements bin.Encoder.
func (u *UpdateChatDefaultBannedRights) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateChatDefaultBannedRights#54c01850 as nil")
	}
	b.PutID(UpdateChatDefaultBannedRightsTypeID)
	if u.Peer == nil {
		return fmt.Errorf("unable to encode updateChatDefaultBannedRights#54c01850: field peer is nil")
	}
	if err := u.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateChatDefaultBannedRights#54c01850: field peer: %w", err)
	}
	if err := u.DefaultBannedRights.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateChatDefaultBannedRights#54c01850: field default_banned_rights: %w", err)
	}
	b.PutInt(u.Version)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateChatDefaultBannedRights) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateChatDefaultBannedRights#54c01850 to nil")
	}
	if err := b.ConsumeID(UpdateChatDefaultBannedRightsTypeID); err != nil {
		return fmt.Errorf("unable to decode updateChatDefaultBannedRights#54c01850: %w", err)
	}
	{
		value, err := DecodePeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateChatDefaultBannedRights#54c01850: field peer: %w", err)
		}
		u.Peer = value
	}
	{
		if err := u.DefaultBannedRights.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateChatDefaultBannedRights#54c01850: field default_banned_rights: %w", err)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChatDefaultBannedRights#54c01850: field version: %w", err)
		}
		u.Version = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateChatDefaultBannedRights) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateChatDefaultBannedRights.
var (
	_ bin.Encoder = &UpdateChatDefaultBannedRights{}
	_ bin.Decoder = &UpdateChatDefaultBannedRights{}

	_ UpdateClass = &UpdateChatDefaultBannedRights{}
)

// UpdateFolderPeers represents TL type `updateFolderPeers#19360dc0`.
//
// See https://core.telegram.org/constructor/updateFolderPeers for reference.
type UpdateFolderPeers struct {
	// FolderPeers field of UpdateFolderPeers.
	FolderPeers []FolderPeer
	// Pts field of UpdateFolderPeers.
	Pts int
	// PtsCount field of UpdateFolderPeers.
	PtsCount int
}

// UpdateFolderPeersTypeID is TL type id of UpdateFolderPeers.
const UpdateFolderPeersTypeID = 0x19360dc0

// Encode implements bin.Encoder.
func (u *UpdateFolderPeers) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateFolderPeers#19360dc0 as nil")
	}
	b.PutID(UpdateFolderPeersTypeID)
	b.PutVectorHeader(len(u.FolderPeers))
	for idx, v := range u.FolderPeers {
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updateFolderPeers#19360dc0: field folder_peers element with index %d: %w", idx, err)
		}
	}
	b.PutInt(u.Pts)
	b.PutInt(u.PtsCount)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateFolderPeers) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateFolderPeers#19360dc0 to nil")
	}
	if err := b.ConsumeID(UpdateFolderPeersTypeID); err != nil {
		return fmt.Errorf("unable to decode updateFolderPeers#19360dc0: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updateFolderPeers#19360dc0: field folder_peers: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value FolderPeer
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode updateFolderPeers#19360dc0: field folder_peers: %w", err)
			}
			u.FolderPeers = append(u.FolderPeers, value)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateFolderPeers#19360dc0: field pts: %w", err)
		}
		u.Pts = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateFolderPeers#19360dc0: field pts_count: %w", err)
		}
		u.PtsCount = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateFolderPeers) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateFolderPeers.
var (
	_ bin.Encoder = &UpdateFolderPeers{}
	_ bin.Decoder = &UpdateFolderPeers{}

	_ UpdateClass = &UpdateFolderPeers{}
)

// UpdatePeerSettings represents TL type `updatePeerSettings#6a7e7366`.
//
// See https://core.telegram.org/constructor/updatePeerSettings for reference.
type UpdatePeerSettings struct {
	// Peer field of UpdatePeerSettings.
	Peer PeerClass
	// Settings field of UpdatePeerSettings.
	Settings PeerSettings
}

// UpdatePeerSettingsTypeID is TL type id of UpdatePeerSettings.
const UpdatePeerSettingsTypeID = 0x6a7e7366

// Encode implements bin.Encoder.
func (u *UpdatePeerSettings) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updatePeerSettings#6a7e7366 as nil")
	}
	b.PutID(UpdatePeerSettingsTypeID)
	if u.Peer == nil {
		return fmt.Errorf("unable to encode updatePeerSettings#6a7e7366: field peer is nil")
	}
	if err := u.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updatePeerSettings#6a7e7366: field peer: %w", err)
	}
	if err := u.Settings.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updatePeerSettings#6a7e7366: field settings: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdatePeerSettings) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updatePeerSettings#6a7e7366 to nil")
	}
	if err := b.ConsumeID(UpdatePeerSettingsTypeID); err != nil {
		return fmt.Errorf("unable to decode updatePeerSettings#6a7e7366: %w", err)
	}
	{
		value, err := DecodePeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode updatePeerSettings#6a7e7366: field peer: %w", err)
		}
		u.Peer = value
	}
	{
		if err := u.Settings.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updatePeerSettings#6a7e7366: field settings: %w", err)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdatePeerSettings) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdatePeerSettings.
var (
	_ bin.Encoder = &UpdatePeerSettings{}
	_ bin.Decoder = &UpdatePeerSettings{}

	_ UpdateClass = &UpdatePeerSettings{}
)

// UpdatePeerLocated represents TL type `updatePeerLocated#b4afcfb0`.
//
// See https://core.telegram.org/constructor/updatePeerLocated for reference.
type UpdatePeerLocated struct {
	// Peers field of UpdatePeerLocated.
	Peers []PeerLocatedClass
}

// UpdatePeerLocatedTypeID is TL type id of UpdatePeerLocated.
const UpdatePeerLocatedTypeID = 0xb4afcfb0

// Encode implements bin.Encoder.
func (u *UpdatePeerLocated) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updatePeerLocated#b4afcfb0 as nil")
	}
	b.PutID(UpdatePeerLocatedTypeID)
	b.PutVectorHeader(len(u.Peers))
	for idx, v := range u.Peers {
		if v == nil {
			return fmt.Errorf("unable to encode updatePeerLocated#b4afcfb0: field peers element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updatePeerLocated#b4afcfb0: field peers element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdatePeerLocated) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updatePeerLocated#b4afcfb0 to nil")
	}
	if err := b.ConsumeID(UpdatePeerLocatedTypeID); err != nil {
		return fmt.Errorf("unable to decode updatePeerLocated#b4afcfb0: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updatePeerLocated#b4afcfb0: field peers: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodePeerLocated(b)
			if err != nil {
				return fmt.Errorf("unable to decode updatePeerLocated#b4afcfb0: field peers: %w", err)
			}
			u.Peers = append(u.Peers, value)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdatePeerLocated) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdatePeerLocated.
var (
	_ bin.Encoder = &UpdatePeerLocated{}
	_ bin.Decoder = &UpdatePeerLocated{}

	_ UpdateClass = &UpdatePeerLocated{}
)

// UpdateNewScheduledMessage represents TL type `updateNewScheduledMessage#39a51dfb`.
//
// See https://core.telegram.org/constructor/updateNewScheduledMessage for reference.
type UpdateNewScheduledMessage struct {
	// Message field of UpdateNewScheduledMessage.
	Message MessageClass
}

// UpdateNewScheduledMessageTypeID is TL type id of UpdateNewScheduledMessage.
const UpdateNewScheduledMessageTypeID = 0x39a51dfb

// Encode implements bin.Encoder.
func (u *UpdateNewScheduledMessage) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateNewScheduledMessage#39a51dfb as nil")
	}
	b.PutID(UpdateNewScheduledMessageTypeID)
	if u.Message == nil {
		return fmt.Errorf("unable to encode updateNewScheduledMessage#39a51dfb: field message is nil")
	}
	if err := u.Message.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateNewScheduledMessage#39a51dfb: field message: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateNewScheduledMessage) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateNewScheduledMessage#39a51dfb to nil")
	}
	if err := b.ConsumeID(UpdateNewScheduledMessageTypeID); err != nil {
		return fmt.Errorf("unable to decode updateNewScheduledMessage#39a51dfb: %w", err)
	}
	{
		value, err := DecodeMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateNewScheduledMessage#39a51dfb: field message: %w", err)
		}
		u.Message = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateNewScheduledMessage) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateNewScheduledMessage.
var (
	_ bin.Encoder = &UpdateNewScheduledMessage{}
	_ bin.Decoder = &UpdateNewScheduledMessage{}

	_ UpdateClass = &UpdateNewScheduledMessage{}
)

// UpdateDeleteScheduledMessages represents TL type `updateDeleteScheduledMessages#90866cee`.
//
// See https://core.telegram.org/constructor/updateDeleteScheduledMessages for reference.
type UpdateDeleteScheduledMessages struct {
	// Peer field of UpdateDeleteScheduledMessages.
	Peer PeerClass
	// Messages field of UpdateDeleteScheduledMessages.
	Messages []int
}

// UpdateDeleteScheduledMessagesTypeID is TL type id of UpdateDeleteScheduledMessages.
const UpdateDeleteScheduledMessagesTypeID = 0x90866cee

// Encode implements bin.Encoder.
func (u *UpdateDeleteScheduledMessages) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateDeleteScheduledMessages#90866cee as nil")
	}
	b.PutID(UpdateDeleteScheduledMessagesTypeID)
	if u.Peer == nil {
		return fmt.Errorf("unable to encode updateDeleteScheduledMessages#90866cee: field peer is nil")
	}
	if err := u.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateDeleteScheduledMessages#90866cee: field peer: %w", err)
	}
	b.PutVectorHeader(len(u.Messages))
	for _, v := range u.Messages {
		b.PutInt(v)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateDeleteScheduledMessages) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateDeleteScheduledMessages#90866cee to nil")
	}
	if err := b.ConsumeID(UpdateDeleteScheduledMessagesTypeID); err != nil {
		return fmt.Errorf("unable to decode updateDeleteScheduledMessages#90866cee: %w", err)
	}
	{
		value, err := DecodePeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateDeleteScheduledMessages#90866cee: field peer: %w", err)
		}
		u.Peer = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updateDeleteScheduledMessages#90866cee: field messages: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Int()
			if err != nil {
				return fmt.Errorf("unable to decode updateDeleteScheduledMessages#90866cee: field messages: %w", err)
			}
			u.Messages = append(u.Messages, value)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateDeleteScheduledMessages) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateDeleteScheduledMessages.
var (
	_ bin.Encoder = &UpdateDeleteScheduledMessages{}
	_ bin.Decoder = &UpdateDeleteScheduledMessages{}

	_ UpdateClass = &UpdateDeleteScheduledMessages{}
)

// UpdateTheme represents TL type `updateTheme#8216fba3`.
//
// See https://core.telegram.org/constructor/updateTheme for reference.
type UpdateTheme struct {
	// Theme field of UpdateTheme.
	Theme Theme
}

// UpdateThemeTypeID is TL type id of UpdateTheme.
const UpdateThemeTypeID = 0x8216fba3

// Encode implements bin.Encoder.
func (u *UpdateTheme) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateTheme#8216fba3 as nil")
	}
	b.PutID(UpdateThemeTypeID)
	if err := u.Theme.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateTheme#8216fba3: field theme: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateTheme) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateTheme#8216fba3 to nil")
	}
	if err := b.ConsumeID(UpdateThemeTypeID); err != nil {
		return fmt.Errorf("unable to decode updateTheme#8216fba3: %w", err)
	}
	{
		if err := u.Theme.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateTheme#8216fba3: field theme: %w", err)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateTheme) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateTheme.
var (
	_ bin.Encoder = &UpdateTheme{}
	_ bin.Decoder = &UpdateTheme{}

	_ UpdateClass = &UpdateTheme{}
)

// UpdateGeoLiveViewed represents TL type `updateGeoLiveViewed#871fb939`.
//
// See https://core.telegram.org/constructor/updateGeoLiveViewed for reference.
type UpdateGeoLiveViewed struct {
	// Peer field of UpdateGeoLiveViewed.
	Peer PeerClass
	// MsgID field of UpdateGeoLiveViewed.
	MsgID int
}

// UpdateGeoLiveViewedTypeID is TL type id of UpdateGeoLiveViewed.
const UpdateGeoLiveViewedTypeID = 0x871fb939

// Encode implements bin.Encoder.
func (u *UpdateGeoLiveViewed) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateGeoLiveViewed#871fb939 as nil")
	}
	b.PutID(UpdateGeoLiveViewedTypeID)
	if u.Peer == nil {
		return fmt.Errorf("unable to encode updateGeoLiveViewed#871fb939: field peer is nil")
	}
	if err := u.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateGeoLiveViewed#871fb939: field peer: %w", err)
	}
	b.PutInt(u.MsgID)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateGeoLiveViewed) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateGeoLiveViewed#871fb939 to nil")
	}
	if err := b.ConsumeID(UpdateGeoLiveViewedTypeID); err != nil {
		return fmt.Errorf("unable to decode updateGeoLiveViewed#871fb939: %w", err)
	}
	{
		value, err := DecodePeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateGeoLiveViewed#871fb939: field peer: %w", err)
		}
		u.Peer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateGeoLiveViewed#871fb939: field msg_id: %w", err)
		}
		u.MsgID = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateGeoLiveViewed) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateGeoLiveViewed.
var (
	_ bin.Encoder = &UpdateGeoLiveViewed{}
	_ bin.Decoder = &UpdateGeoLiveViewed{}

	_ UpdateClass = &UpdateGeoLiveViewed{}
)

// UpdateLoginToken represents TL type `updateLoginToken#564fe691`.
//
// See https://core.telegram.org/constructor/updateLoginToken for reference.
type UpdateLoginToken struct {
}

// UpdateLoginTokenTypeID is TL type id of UpdateLoginToken.
const UpdateLoginTokenTypeID = 0x564fe691

// Encode implements bin.Encoder.
func (u *UpdateLoginToken) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateLoginToken#564fe691 as nil")
	}
	b.PutID(UpdateLoginTokenTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateLoginToken) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateLoginToken#564fe691 to nil")
	}
	if err := b.ConsumeID(UpdateLoginTokenTypeID); err != nil {
		return fmt.Errorf("unable to decode updateLoginToken#564fe691: %w", err)
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateLoginToken) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateLoginToken.
var (
	_ bin.Encoder = &UpdateLoginToken{}
	_ bin.Decoder = &UpdateLoginToken{}

	_ UpdateClass = &UpdateLoginToken{}
)

// UpdateMessagePollVote represents TL type `updateMessagePollVote#42f88f2c`.
//
// See https://core.telegram.org/constructor/updateMessagePollVote for reference.
type UpdateMessagePollVote struct {
	// PollID field of UpdateMessagePollVote.
	PollID int64
	// UserID field of UpdateMessagePollVote.
	UserID int
	// Options field of UpdateMessagePollVote.
	Options [][]byte
}

// UpdateMessagePollVoteTypeID is TL type id of UpdateMessagePollVote.
const UpdateMessagePollVoteTypeID = 0x42f88f2c

// Encode implements bin.Encoder.
func (u *UpdateMessagePollVote) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateMessagePollVote#42f88f2c as nil")
	}
	b.PutID(UpdateMessagePollVoteTypeID)
	b.PutLong(u.PollID)
	b.PutInt(u.UserID)
	b.PutVectorHeader(len(u.Options))
	for _, v := range u.Options {
		b.PutBytes(v)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateMessagePollVote) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateMessagePollVote#42f88f2c to nil")
	}
	if err := b.ConsumeID(UpdateMessagePollVoteTypeID); err != nil {
		return fmt.Errorf("unable to decode updateMessagePollVote#42f88f2c: %w", err)
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode updateMessagePollVote#42f88f2c: field poll_id: %w", err)
		}
		u.PollID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateMessagePollVote#42f88f2c: field user_id: %w", err)
		}
		u.UserID = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updateMessagePollVote#42f88f2c: field options: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Bytes()
			if err != nil {
				return fmt.Errorf("unable to decode updateMessagePollVote#42f88f2c: field options: %w", err)
			}
			u.Options = append(u.Options, value)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateMessagePollVote) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateMessagePollVote.
var (
	_ bin.Encoder = &UpdateMessagePollVote{}
	_ bin.Decoder = &UpdateMessagePollVote{}

	_ UpdateClass = &UpdateMessagePollVote{}
)

// UpdateDialogFilter represents TL type `updateDialogFilter#26ffde7d`.
//
// See https://core.telegram.org/constructor/updateDialogFilter for reference.
type UpdateDialogFilter struct {
	// Flags field of UpdateDialogFilter.
	Flags bin.Fields
	// ID field of UpdateDialogFilter.
	ID int
	// Filter field of UpdateDialogFilter.
	//
	// Use SetFilter and GetFilter helpers.
	Filter DialogFilter
}

// UpdateDialogFilterTypeID is TL type id of UpdateDialogFilter.
const UpdateDialogFilterTypeID = 0x26ffde7d

// Encode implements bin.Encoder.
func (u *UpdateDialogFilter) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateDialogFilter#26ffde7d as nil")
	}
	b.PutID(UpdateDialogFilterTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateDialogFilter#26ffde7d: field flags: %w", err)
	}
	b.PutInt(u.ID)
	if u.Flags.Has(0) {
		if err := u.Filter.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updateDialogFilter#26ffde7d: field filter: %w", err)
		}
	}
	return nil
}

// SetFilter sets value of Filter conditional field.
func (u *UpdateDialogFilter) SetFilter(value DialogFilter) {
	u.Flags.Set(0)
	u.Filter = value
}

// GetFilter returns value of Filter conditional field and
// boolean which is true if field was set.
func (u *UpdateDialogFilter) GetFilter() (value DialogFilter, ok bool) {
	if !u.Flags.Has(0) {
		return value, false
	}
	return u.Filter, true
}

// Decode implements bin.Decoder.
func (u *UpdateDialogFilter) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateDialogFilter#26ffde7d to nil")
	}
	if err := b.ConsumeID(UpdateDialogFilterTypeID); err != nil {
		return fmt.Errorf("unable to decode updateDialogFilter#26ffde7d: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateDialogFilter#26ffde7d: field flags: %w", err)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateDialogFilter#26ffde7d: field id: %w", err)
		}
		u.ID = value
	}
	if u.Flags.Has(0) {
		if err := u.Filter.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateDialogFilter#26ffde7d: field filter: %w", err)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateDialogFilter) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateDialogFilter.
var (
	_ bin.Encoder = &UpdateDialogFilter{}
	_ bin.Decoder = &UpdateDialogFilter{}

	_ UpdateClass = &UpdateDialogFilter{}
)

// UpdateDialogFilterOrder represents TL type `updateDialogFilterOrder#a5d72105`.
//
// See https://core.telegram.org/constructor/updateDialogFilterOrder for reference.
type UpdateDialogFilterOrder struct {
	// Order field of UpdateDialogFilterOrder.
	Order []int
}

// UpdateDialogFilterOrderTypeID is TL type id of UpdateDialogFilterOrder.
const UpdateDialogFilterOrderTypeID = 0xa5d72105

// Encode implements bin.Encoder.
func (u *UpdateDialogFilterOrder) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateDialogFilterOrder#a5d72105 as nil")
	}
	b.PutID(UpdateDialogFilterOrderTypeID)
	b.PutVectorHeader(len(u.Order))
	for _, v := range u.Order {
		b.PutInt(v)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateDialogFilterOrder) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateDialogFilterOrder#a5d72105 to nil")
	}
	if err := b.ConsumeID(UpdateDialogFilterOrderTypeID); err != nil {
		return fmt.Errorf("unable to decode updateDialogFilterOrder#a5d72105: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updateDialogFilterOrder#a5d72105: field order: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Int()
			if err != nil {
				return fmt.Errorf("unable to decode updateDialogFilterOrder#a5d72105: field order: %w", err)
			}
			u.Order = append(u.Order, value)
		}
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateDialogFilterOrder) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateDialogFilterOrder.
var (
	_ bin.Encoder = &UpdateDialogFilterOrder{}
	_ bin.Decoder = &UpdateDialogFilterOrder{}

	_ UpdateClass = &UpdateDialogFilterOrder{}
)

// UpdateDialogFilters represents TL type `updateDialogFilters#3504914f`.
//
// See https://core.telegram.org/constructor/updateDialogFilters for reference.
type UpdateDialogFilters struct {
}

// UpdateDialogFiltersTypeID is TL type id of UpdateDialogFilters.
const UpdateDialogFiltersTypeID = 0x3504914f

// Encode implements bin.Encoder.
func (u *UpdateDialogFilters) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateDialogFilters#3504914f as nil")
	}
	b.PutID(UpdateDialogFiltersTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateDialogFilters) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateDialogFilters#3504914f to nil")
	}
	if err := b.ConsumeID(UpdateDialogFiltersTypeID); err != nil {
		return fmt.Errorf("unable to decode updateDialogFilters#3504914f: %w", err)
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateDialogFilters) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateDialogFilters.
var (
	_ bin.Encoder = &UpdateDialogFilters{}
	_ bin.Decoder = &UpdateDialogFilters{}

	_ UpdateClass = &UpdateDialogFilters{}
)

// UpdatePhoneCallSignalingData represents TL type `updatePhoneCallSignalingData#2661bf09`.
//
// See https://core.telegram.org/constructor/updatePhoneCallSignalingData for reference.
type UpdatePhoneCallSignalingData struct {
	// PhoneCallID field of UpdatePhoneCallSignalingData.
	PhoneCallID int64
	// Data field of UpdatePhoneCallSignalingData.
	Data []byte
}

// UpdatePhoneCallSignalingDataTypeID is TL type id of UpdatePhoneCallSignalingData.
const UpdatePhoneCallSignalingDataTypeID = 0x2661bf09

// Encode implements bin.Encoder.
func (u *UpdatePhoneCallSignalingData) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updatePhoneCallSignalingData#2661bf09 as nil")
	}
	b.PutID(UpdatePhoneCallSignalingDataTypeID)
	b.PutLong(u.PhoneCallID)
	b.PutBytes(u.Data)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdatePhoneCallSignalingData) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updatePhoneCallSignalingData#2661bf09 to nil")
	}
	if err := b.ConsumeID(UpdatePhoneCallSignalingDataTypeID); err != nil {
		return fmt.Errorf("unable to decode updatePhoneCallSignalingData#2661bf09: %w", err)
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode updatePhoneCallSignalingData#2661bf09: field phone_call_id: %w", err)
		}
		u.PhoneCallID = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode updatePhoneCallSignalingData#2661bf09: field data: %w", err)
		}
		u.Data = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdatePhoneCallSignalingData) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdatePhoneCallSignalingData.
var (
	_ bin.Encoder = &UpdatePhoneCallSignalingData{}
	_ bin.Decoder = &UpdatePhoneCallSignalingData{}

	_ UpdateClass = &UpdatePhoneCallSignalingData{}
)

// UpdateChannelParticipant represents TL type `updateChannelParticipant#65d2b464`.
//
// See https://core.telegram.org/constructor/updateChannelParticipant for reference.
type UpdateChannelParticipant struct {
	// Flags field of UpdateChannelParticipant.
	Flags bin.Fields
	// ChannelID field of UpdateChannelParticipant.
	ChannelID int
	// Date field of UpdateChannelParticipant.
	Date int
	// UserID field of UpdateChannelParticipant.
	UserID int
	// PrevParticipant field of UpdateChannelParticipant.
	//
	// Use SetPrevParticipant and GetPrevParticipant helpers.
	PrevParticipant ChannelParticipantClass
	// NewParticipant field of UpdateChannelParticipant.
	//
	// Use SetNewParticipant and GetNewParticipant helpers.
	NewParticipant ChannelParticipantClass
	// Qts field of UpdateChannelParticipant.
	Qts int
}

// UpdateChannelParticipantTypeID is TL type id of UpdateChannelParticipant.
const UpdateChannelParticipantTypeID = 0x65d2b464

// Encode implements bin.Encoder.
func (u *UpdateChannelParticipant) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateChannelParticipant#65d2b464 as nil")
	}
	b.PutID(UpdateChannelParticipantTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateChannelParticipant#65d2b464: field flags: %w", err)
	}
	b.PutInt(u.ChannelID)
	b.PutInt(u.Date)
	b.PutInt(u.UserID)
	if u.Flags.Has(0) {
		if u.PrevParticipant == nil {
			return fmt.Errorf("unable to encode updateChannelParticipant#65d2b464: field prev_participant is nil")
		}
		if err := u.PrevParticipant.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updateChannelParticipant#65d2b464: field prev_participant: %w", err)
		}
	}
	if u.Flags.Has(1) {
		if u.NewParticipant == nil {
			return fmt.Errorf("unable to encode updateChannelParticipant#65d2b464: field new_participant is nil")
		}
		if err := u.NewParticipant.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updateChannelParticipant#65d2b464: field new_participant: %w", err)
		}
	}
	b.PutInt(u.Qts)
	return nil
}

// SetPrevParticipant sets value of PrevParticipant conditional field.
func (u *UpdateChannelParticipant) SetPrevParticipant(value ChannelParticipantClass) {
	u.Flags.Set(0)
	u.PrevParticipant = value
}

// GetPrevParticipant returns value of PrevParticipant conditional field and
// boolean which is true if field was set.
func (u *UpdateChannelParticipant) GetPrevParticipant() (value ChannelParticipantClass, ok bool) {
	if !u.Flags.Has(0) {
		return value, false
	}
	return u.PrevParticipant, true
}

// SetNewParticipant sets value of NewParticipant conditional field.
func (u *UpdateChannelParticipant) SetNewParticipant(value ChannelParticipantClass) {
	u.Flags.Set(1)
	u.NewParticipant = value
}

// GetNewParticipant returns value of NewParticipant conditional field and
// boolean which is true if field was set.
func (u *UpdateChannelParticipant) GetNewParticipant() (value ChannelParticipantClass, ok bool) {
	if !u.Flags.Has(1) {
		return value, false
	}
	return u.NewParticipant, true
}

// Decode implements bin.Decoder.
func (u *UpdateChannelParticipant) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateChannelParticipant#65d2b464 to nil")
	}
	if err := b.ConsumeID(UpdateChannelParticipantTypeID); err != nil {
		return fmt.Errorf("unable to decode updateChannelParticipant#65d2b464: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateChannelParticipant#65d2b464: field flags: %w", err)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelParticipant#65d2b464: field channel_id: %w", err)
		}
		u.ChannelID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelParticipant#65d2b464: field date: %w", err)
		}
		u.Date = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelParticipant#65d2b464: field user_id: %w", err)
		}
		u.UserID = value
	}
	if u.Flags.Has(0) {
		value, err := DecodeChannelParticipant(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelParticipant#65d2b464: field prev_participant: %w", err)
		}
		u.PrevParticipant = value
	}
	if u.Flags.Has(1) {
		value, err := DecodeChannelParticipant(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelParticipant#65d2b464: field new_participant: %w", err)
		}
		u.NewParticipant = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelParticipant#65d2b464: field qts: %w", err)
		}
		u.Qts = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateChannelParticipant) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateChannelParticipant.
var (
	_ bin.Encoder = &UpdateChannelParticipant{}
	_ bin.Decoder = &UpdateChannelParticipant{}

	_ UpdateClass = &UpdateChannelParticipant{}
)

// UpdateChannelMessageForwards represents TL type `updateChannelMessageForwards#6e8a84df`.
//
// See https://core.telegram.org/constructor/updateChannelMessageForwards for reference.
type UpdateChannelMessageForwards struct {
	// ChannelID field of UpdateChannelMessageForwards.
	ChannelID int
	// ID field of UpdateChannelMessageForwards.
	ID int
	// Forwards field of UpdateChannelMessageForwards.
	Forwards int
}

// UpdateChannelMessageForwardsTypeID is TL type id of UpdateChannelMessageForwards.
const UpdateChannelMessageForwardsTypeID = 0x6e8a84df

// Encode implements bin.Encoder.
func (u *UpdateChannelMessageForwards) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateChannelMessageForwards#6e8a84df as nil")
	}
	b.PutID(UpdateChannelMessageForwardsTypeID)
	b.PutInt(u.ChannelID)
	b.PutInt(u.ID)
	b.PutInt(u.Forwards)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateChannelMessageForwards) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateChannelMessageForwards#6e8a84df to nil")
	}
	if err := b.ConsumeID(UpdateChannelMessageForwardsTypeID); err != nil {
		return fmt.Errorf("unable to decode updateChannelMessageForwards#6e8a84df: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelMessageForwards#6e8a84df: field channel_id: %w", err)
		}
		u.ChannelID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelMessageForwards#6e8a84df: field id: %w", err)
		}
		u.ID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelMessageForwards#6e8a84df: field forwards: %w", err)
		}
		u.Forwards = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateChannelMessageForwards) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateChannelMessageForwards.
var (
	_ bin.Encoder = &UpdateChannelMessageForwards{}
	_ bin.Decoder = &UpdateChannelMessageForwards{}

	_ UpdateClass = &UpdateChannelMessageForwards{}
)

// UpdateReadChannelDiscussionInbox represents TL type `updateReadChannelDiscussionInbox#1cc7de54`.
//
// See https://core.telegram.org/constructor/updateReadChannelDiscussionInbox for reference.
type UpdateReadChannelDiscussionInbox struct {
	// Flags field of UpdateReadChannelDiscussionInbox.
	Flags bin.Fields
	// ChannelID field of UpdateReadChannelDiscussionInbox.
	ChannelID int
	// TopMsgID field of UpdateReadChannelDiscussionInbox.
	TopMsgID int
	// ReadMaxID field of UpdateReadChannelDiscussionInbox.
	ReadMaxID int
	// BroadcastID field of UpdateReadChannelDiscussionInbox.
	//
	// Use SetBroadcastID and GetBroadcastID helpers.
	BroadcastID int
	// BroadcastPost field of UpdateReadChannelDiscussionInbox.
	//
	// Use SetBroadcastPost and GetBroadcastPost helpers.
	BroadcastPost int
}

// UpdateReadChannelDiscussionInboxTypeID is TL type id of UpdateReadChannelDiscussionInbox.
const UpdateReadChannelDiscussionInboxTypeID = 0x1cc7de54

// Encode implements bin.Encoder.
func (u *UpdateReadChannelDiscussionInbox) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateReadChannelDiscussionInbox#1cc7de54 as nil")
	}
	b.PutID(UpdateReadChannelDiscussionInboxTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateReadChannelDiscussionInbox#1cc7de54: field flags: %w", err)
	}
	b.PutInt(u.ChannelID)
	b.PutInt(u.TopMsgID)
	b.PutInt(u.ReadMaxID)
	if u.Flags.Has(0) {
		b.PutInt(u.BroadcastID)
	}
	if u.Flags.Has(0) {
		b.PutInt(u.BroadcastPost)
	}
	return nil
}

// SetBroadcastID sets value of BroadcastID conditional field.
func (u *UpdateReadChannelDiscussionInbox) SetBroadcastID(value int) {
	u.Flags.Set(0)
	u.BroadcastID = value
}

// GetBroadcastID returns value of BroadcastID conditional field and
// boolean which is true if field was set.
func (u *UpdateReadChannelDiscussionInbox) GetBroadcastID() (value int, ok bool) {
	if !u.Flags.Has(0) {
		return value, false
	}
	return u.BroadcastID, true
}

// SetBroadcastPost sets value of BroadcastPost conditional field.
func (u *UpdateReadChannelDiscussionInbox) SetBroadcastPost(value int) {
	u.Flags.Set(0)
	u.BroadcastPost = value
}

// GetBroadcastPost returns value of BroadcastPost conditional field and
// boolean which is true if field was set.
func (u *UpdateReadChannelDiscussionInbox) GetBroadcastPost() (value int, ok bool) {
	if !u.Flags.Has(0) {
		return value, false
	}
	return u.BroadcastPost, true
}

// Decode implements bin.Decoder.
func (u *UpdateReadChannelDiscussionInbox) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateReadChannelDiscussionInbox#1cc7de54 to nil")
	}
	if err := b.ConsumeID(UpdateReadChannelDiscussionInboxTypeID); err != nil {
		return fmt.Errorf("unable to decode updateReadChannelDiscussionInbox#1cc7de54: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateReadChannelDiscussionInbox#1cc7de54: field flags: %w", err)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadChannelDiscussionInbox#1cc7de54: field channel_id: %w", err)
		}
		u.ChannelID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadChannelDiscussionInbox#1cc7de54: field top_msg_id: %w", err)
		}
		u.TopMsgID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadChannelDiscussionInbox#1cc7de54: field read_max_id: %w", err)
		}
		u.ReadMaxID = value
	}
	if u.Flags.Has(0) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadChannelDiscussionInbox#1cc7de54: field broadcast_id: %w", err)
		}
		u.BroadcastID = value
	}
	if u.Flags.Has(0) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadChannelDiscussionInbox#1cc7de54: field broadcast_post: %w", err)
		}
		u.BroadcastPost = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateReadChannelDiscussionInbox) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateReadChannelDiscussionInbox.
var (
	_ bin.Encoder = &UpdateReadChannelDiscussionInbox{}
	_ bin.Decoder = &UpdateReadChannelDiscussionInbox{}

	_ UpdateClass = &UpdateReadChannelDiscussionInbox{}
)

// UpdateReadChannelDiscussionOutbox represents TL type `updateReadChannelDiscussionOutbox#4638a26c`.
//
// See https://core.telegram.org/constructor/updateReadChannelDiscussionOutbox for reference.
type UpdateReadChannelDiscussionOutbox struct {
	// ChannelID field of UpdateReadChannelDiscussionOutbox.
	ChannelID int
	// TopMsgID field of UpdateReadChannelDiscussionOutbox.
	TopMsgID int
	// ReadMaxID field of UpdateReadChannelDiscussionOutbox.
	ReadMaxID int
}

// UpdateReadChannelDiscussionOutboxTypeID is TL type id of UpdateReadChannelDiscussionOutbox.
const UpdateReadChannelDiscussionOutboxTypeID = 0x4638a26c

// Encode implements bin.Encoder.
func (u *UpdateReadChannelDiscussionOutbox) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateReadChannelDiscussionOutbox#4638a26c as nil")
	}
	b.PutID(UpdateReadChannelDiscussionOutboxTypeID)
	b.PutInt(u.ChannelID)
	b.PutInt(u.TopMsgID)
	b.PutInt(u.ReadMaxID)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdateReadChannelDiscussionOutbox) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateReadChannelDiscussionOutbox#4638a26c to nil")
	}
	if err := b.ConsumeID(UpdateReadChannelDiscussionOutboxTypeID); err != nil {
		return fmt.Errorf("unable to decode updateReadChannelDiscussionOutbox#4638a26c: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadChannelDiscussionOutbox#4638a26c: field channel_id: %w", err)
		}
		u.ChannelID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadChannelDiscussionOutbox#4638a26c: field top_msg_id: %w", err)
		}
		u.TopMsgID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateReadChannelDiscussionOutbox#4638a26c: field read_max_id: %w", err)
		}
		u.ReadMaxID = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateReadChannelDiscussionOutbox) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateReadChannelDiscussionOutbox.
var (
	_ bin.Encoder = &UpdateReadChannelDiscussionOutbox{}
	_ bin.Decoder = &UpdateReadChannelDiscussionOutbox{}

	_ UpdateClass = &UpdateReadChannelDiscussionOutbox{}
)

// UpdatePeerBlocked represents TL type `updatePeerBlocked#246a4b22`.
//
// See https://core.telegram.org/constructor/updatePeerBlocked for reference.
type UpdatePeerBlocked struct {
	// PeerID field of UpdatePeerBlocked.
	PeerID PeerClass
	// Blocked field of UpdatePeerBlocked.
	Blocked bool
}

// UpdatePeerBlockedTypeID is TL type id of UpdatePeerBlocked.
const UpdatePeerBlockedTypeID = 0x246a4b22

// Encode implements bin.Encoder.
func (u *UpdatePeerBlocked) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updatePeerBlocked#246a4b22 as nil")
	}
	b.PutID(UpdatePeerBlockedTypeID)
	if u.PeerID == nil {
		return fmt.Errorf("unable to encode updatePeerBlocked#246a4b22: field peer_id is nil")
	}
	if err := u.PeerID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updatePeerBlocked#246a4b22: field peer_id: %w", err)
	}
	b.PutBool(u.Blocked)
	return nil
}

// Decode implements bin.Decoder.
func (u *UpdatePeerBlocked) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updatePeerBlocked#246a4b22 to nil")
	}
	if err := b.ConsumeID(UpdatePeerBlockedTypeID); err != nil {
		return fmt.Errorf("unable to decode updatePeerBlocked#246a4b22: %w", err)
	}
	{
		value, err := DecodePeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode updatePeerBlocked#246a4b22: field peer_id: %w", err)
		}
		u.PeerID = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode updatePeerBlocked#246a4b22: field blocked: %w", err)
		}
		u.Blocked = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdatePeerBlocked) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdatePeerBlocked.
var (
	_ bin.Encoder = &UpdatePeerBlocked{}
	_ bin.Decoder = &UpdatePeerBlocked{}

	_ UpdateClass = &UpdatePeerBlocked{}
)

// UpdateChannelUserTyping represents TL type `updateChannelUserTyping#ff2abe9f`.
//
// See https://core.telegram.org/constructor/updateChannelUserTyping for reference.
type UpdateChannelUserTyping struct {
	// Flags field of UpdateChannelUserTyping.
	Flags bin.Fields
	// ChannelID field of UpdateChannelUserTyping.
	ChannelID int
	// TopMsgID field of UpdateChannelUserTyping.
	//
	// Use SetTopMsgID and GetTopMsgID helpers.
	TopMsgID int
	// UserID field of UpdateChannelUserTyping.
	UserID int
	// Action field of UpdateChannelUserTyping.
	Action SendMessageActionClass
}

// UpdateChannelUserTypingTypeID is TL type id of UpdateChannelUserTyping.
const UpdateChannelUserTypingTypeID = 0xff2abe9f

// Encode implements bin.Encoder.
func (u *UpdateChannelUserTyping) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updateChannelUserTyping#ff2abe9f as nil")
	}
	b.PutID(UpdateChannelUserTypingTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateChannelUserTyping#ff2abe9f: field flags: %w", err)
	}
	b.PutInt(u.ChannelID)
	if u.Flags.Has(0) {
		b.PutInt(u.TopMsgID)
	}
	b.PutInt(u.UserID)
	if u.Action == nil {
		return fmt.Errorf("unable to encode updateChannelUserTyping#ff2abe9f: field action is nil")
	}
	if err := u.Action.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updateChannelUserTyping#ff2abe9f: field action: %w", err)
	}
	return nil
}

// SetTopMsgID sets value of TopMsgID conditional field.
func (u *UpdateChannelUserTyping) SetTopMsgID(value int) {
	u.Flags.Set(0)
	u.TopMsgID = value
}

// GetTopMsgID returns value of TopMsgID conditional field and
// boolean which is true if field was set.
func (u *UpdateChannelUserTyping) GetTopMsgID() (value int, ok bool) {
	if !u.Flags.Has(0) {
		return value, false
	}
	return u.TopMsgID, true
}

// Decode implements bin.Decoder.
func (u *UpdateChannelUserTyping) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updateChannelUserTyping#ff2abe9f to nil")
	}
	if err := b.ConsumeID(UpdateChannelUserTypingTypeID); err != nil {
		return fmt.Errorf("unable to decode updateChannelUserTyping#ff2abe9f: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updateChannelUserTyping#ff2abe9f: field flags: %w", err)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelUserTyping#ff2abe9f: field channel_id: %w", err)
		}
		u.ChannelID = value
	}
	if u.Flags.Has(0) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelUserTyping#ff2abe9f: field top_msg_id: %w", err)
		}
		u.TopMsgID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelUserTyping#ff2abe9f: field user_id: %w", err)
		}
		u.UserID = value
	}
	{
		value, err := DecodeSendMessageAction(b)
		if err != nil {
			return fmt.Errorf("unable to decode updateChannelUserTyping#ff2abe9f: field action: %w", err)
		}
		u.Action = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdateChannelUserTyping) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdateChannelUserTyping.
var (
	_ bin.Encoder = &UpdateChannelUserTyping{}
	_ bin.Decoder = &UpdateChannelUserTyping{}

	_ UpdateClass = &UpdateChannelUserTyping{}
)

// UpdatePinnedMessages represents TL type `updatePinnedMessages#ed85eab5`.
//
// See https://core.telegram.org/constructor/updatePinnedMessages for reference.
type UpdatePinnedMessages struct {
	// Flags field of UpdatePinnedMessages.
	Flags bin.Fields
	// Pinned field of UpdatePinnedMessages.
	Pinned bool
	// Peer field of UpdatePinnedMessages.
	Peer PeerClass
	// Messages field of UpdatePinnedMessages.
	Messages []int
	// Pts field of UpdatePinnedMessages.
	Pts int
	// PtsCount field of UpdatePinnedMessages.
	PtsCount int
}

// UpdatePinnedMessagesTypeID is TL type id of UpdatePinnedMessages.
const UpdatePinnedMessagesTypeID = 0xed85eab5

// Encode implements bin.Encoder.
func (u *UpdatePinnedMessages) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updatePinnedMessages#ed85eab5 as nil")
	}
	b.PutID(UpdatePinnedMessagesTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updatePinnedMessages#ed85eab5: field flags: %w", err)
	}
	if u.Peer == nil {
		return fmt.Errorf("unable to encode updatePinnedMessages#ed85eab5: field peer is nil")
	}
	if err := u.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updatePinnedMessages#ed85eab5: field peer: %w", err)
	}
	b.PutVectorHeader(len(u.Messages))
	for _, v := range u.Messages {
		b.PutInt(v)
	}
	b.PutInt(u.Pts)
	b.PutInt(u.PtsCount)
	return nil
}

// SetPinned sets value of Pinned conditional field.
func (u *UpdatePinnedMessages) SetPinned(value bool) {
	if value {
		u.Flags.Set(0)
	} else {
		u.Flags.Unset(0)
	}
}

// Decode implements bin.Decoder.
func (u *UpdatePinnedMessages) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updatePinnedMessages#ed85eab5 to nil")
	}
	if err := b.ConsumeID(UpdatePinnedMessagesTypeID); err != nil {
		return fmt.Errorf("unable to decode updatePinnedMessages#ed85eab5: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updatePinnedMessages#ed85eab5: field flags: %w", err)
		}
	}
	u.Pinned = u.Flags.Has(0)
	{
		value, err := DecodePeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode updatePinnedMessages#ed85eab5: field peer: %w", err)
		}
		u.Peer = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updatePinnedMessages#ed85eab5: field messages: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Int()
			if err != nil {
				return fmt.Errorf("unable to decode updatePinnedMessages#ed85eab5: field messages: %w", err)
			}
			u.Messages = append(u.Messages, value)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updatePinnedMessages#ed85eab5: field pts: %w", err)
		}
		u.Pts = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updatePinnedMessages#ed85eab5: field pts_count: %w", err)
		}
		u.PtsCount = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdatePinnedMessages) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdatePinnedMessages.
var (
	_ bin.Encoder = &UpdatePinnedMessages{}
	_ bin.Decoder = &UpdatePinnedMessages{}

	_ UpdateClass = &UpdatePinnedMessages{}
)

// UpdatePinnedChannelMessages represents TL type `updatePinnedChannelMessages#8588878b`.
//
// See https://core.telegram.org/constructor/updatePinnedChannelMessages for reference.
type UpdatePinnedChannelMessages struct {
	// Flags field of UpdatePinnedChannelMessages.
	Flags bin.Fields
	// Pinned field of UpdatePinnedChannelMessages.
	Pinned bool
	// ChannelID field of UpdatePinnedChannelMessages.
	ChannelID int
	// Messages field of UpdatePinnedChannelMessages.
	Messages []int
	// Pts field of UpdatePinnedChannelMessages.
	Pts int
	// PtsCount field of UpdatePinnedChannelMessages.
	PtsCount int
}

// UpdatePinnedChannelMessagesTypeID is TL type id of UpdatePinnedChannelMessages.
const UpdatePinnedChannelMessagesTypeID = 0x8588878b

// Encode implements bin.Encoder.
func (u *UpdatePinnedChannelMessages) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode updatePinnedChannelMessages#8588878b as nil")
	}
	b.PutID(UpdatePinnedChannelMessagesTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updatePinnedChannelMessages#8588878b: field flags: %w", err)
	}
	b.PutInt(u.ChannelID)
	b.PutVectorHeader(len(u.Messages))
	for _, v := range u.Messages {
		b.PutInt(v)
	}
	b.PutInt(u.Pts)
	b.PutInt(u.PtsCount)
	return nil
}

// SetPinned sets value of Pinned conditional field.
func (u *UpdatePinnedChannelMessages) SetPinned(value bool) {
	if value {
		u.Flags.Set(0)
	} else {
		u.Flags.Unset(0)
	}
}

// Decode implements bin.Decoder.
func (u *UpdatePinnedChannelMessages) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode updatePinnedChannelMessages#8588878b to nil")
	}
	if err := b.ConsumeID(UpdatePinnedChannelMessagesTypeID); err != nil {
		return fmt.Errorf("unable to decode updatePinnedChannelMessages#8588878b: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updatePinnedChannelMessages#8588878b: field flags: %w", err)
		}
	}
	u.Pinned = u.Flags.Has(0)
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updatePinnedChannelMessages#8588878b: field channel_id: %w", err)
		}
		u.ChannelID = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updatePinnedChannelMessages#8588878b: field messages: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Int()
			if err != nil {
				return fmt.Errorf("unable to decode updatePinnedChannelMessages#8588878b: field messages: %w", err)
			}
			u.Messages = append(u.Messages, value)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updatePinnedChannelMessages#8588878b: field pts: %w", err)
		}
		u.Pts = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updatePinnedChannelMessages#8588878b: field pts_count: %w", err)
		}
		u.PtsCount = value
	}
	return nil
}

// construct implements constructor of UpdateClass.
func (u UpdatePinnedChannelMessages) construct() UpdateClass { return &u }

// Ensuring interfaces in compile-time for UpdatePinnedChannelMessages.
var (
	_ bin.Encoder = &UpdatePinnedChannelMessages{}
	_ bin.Decoder = &UpdatePinnedChannelMessages{}

	_ UpdateClass = &UpdatePinnedChannelMessages{}
)

// UpdateClass represents Update generic type.
//
// See https://core.telegram.org/type/Update for reference.
//
// Example:
//  g, err := DecodeUpdate(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *UpdateNewMessage: // updateNewMessage#1f2b0afd
//  case *UpdateMessageID: // updateMessageID#4e90bfd6
//  case *UpdateDeleteMessages: // updateDeleteMessages#a20db0e5
//  case *UpdateUserTyping: // updateUserTyping#5c486927
//  case *UpdateChatUserTyping: // updateChatUserTyping#9a65ea1f
//  case *UpdateChatParticipants: // updateChatParticipants#7761198
//  case *UpdateUserStatus: // updateUserStatus#1bfbd823
//  case *UpdateUserName: // updateUserName#a7332b73
//  case *UpdateUserPhoto: // updateUserPhoto#95313b0c
//  case *UpdateNewEncryptedMessage: // updateNewEncryptedMessage#12bcbd9a
//  case *UpdateEncryptedChatTyping: // updateEncryptedChatTyping#1710f156
//  case *UpdateEncryption: // updateEncryption#b4a2e88d
//  case *UpdateEncryptedMessagesRead: // updateEncryptedMessagesRead#38fe25b7
//  case *UpdateChatParticipantAdd: // updateChatParticipantAdd#ea4b0e5c
//  case *UpdateChatParticipantDelete: // updateChatParticipantDelete#6e5f8c22
//  case *UpdateDcOptions: // updateDcOptions#8e5e9873
//  case *UpdateNotifySettings: // updateNotifySettings#bec268ef
//  case *UpdateServiceNotification: // updateServiceNotification#ebe46819
//  case *UpdatePrivacy: // updatePrivacy#ee3b272a
//  case *UpdateUserPhone: // updateUserPhone#12b9417b
//  case *UpdateReadHistoryInbox: // updateReadHistoryInbox#9c974fdf
//  case *UpdateReadHistoryOutbox: // updateReadHistoryOutbox#2f2f21bf
//  case *UpdateWebPage: // updateWebPage#7f891213
//  case *UpdateReadMessagesContents: // updateReadMessagesContents#68c13933
//  case *UpdateChannelTooLong: // updateChannelTooLong#eb0467fb
//  case *UpdateChannel: // updateChannel#b6d45656
//  case *UpdateNewChannelMessage: // updateNewChannelMessage#62ba04d9
//  case *UpdateReadChannelInbox: // updateReadChannelInbox#330b5424
//  case *UpdateDeleteChannelMessages: // updateDeleteChannelMessages#c37521c9
//  case *UpdateChannelMessageViews: // updateChannelMessageViews#98a12b4b
//  case *UpdateChatParticipantAdmin: // updateChatParticipantAdmin#b6901959
//  case *UpdateNewStickerSet: // updateNewStickerSet#688a30aa
//  case *UpdateStickerSetsOrder: // updateStickerSetsOrder#bb2d201
//  case *UpdateStickerSets: // updateStickerSets#43ae3dec
//  case *UpdateSavedGifs: // updateSavedGifs#9375341e
//  case *UpdateBotInlineQuery: // updateBotInlineQuery#54826690
//  case *UpdateBotInlineSend: // updateBotInlineSend#e48f964
//  case *UpdateEditChannelMessage: // updateEditChannelMessage#1b3f4df7
//  case *UpdateBotCallbackQuery: // updateBotCallbackQuery#e73547e1
//  case *UpdateEditMessage: // updateEditMessage#e40370a3
//  case *UpdateInlineBotCallbackQuery: // updateInlineBotCallbackQuery#f9d27a5a
//  case *UpdateReadChannelOutbox: // updateReadChannelOutbox#25d6c9c7
//  case *UpdateDraftMessage: // updateDraftMessage#ee2bb969
//  case *UpdateReadFeaturedStickers: // updateReadFeaturedStickers#571d2742
//  case *UpdateRecentStickers: // updateRecentStickers#9a422c20
//  case *UpdateConfig: // updateConfig#a229dd06
//  case *UpdatePtsChanged: // updatePtsChanged#3354678f
//  case *UpdateChannelWebPage: // updateChannelWebPage#40771900
//  case *UpdateDialogPinned: // updateDialogPinned#6e6fe51c
//  case *UpdatePinnedDialogs: // updatePinnedDialogs#fa0f3ca2
//  case *UpdateBotWebhookJSON: // updateBotWebhookJSON#8317c0c3
//  case *UpdateBotWebhookJSONQuery: // updateBotWebhookJSONQuery#9b9240a6
//  case *UpdateBotShippingQuery: // updateBotShippingQuery#e0cdc940
//  case *UpdateBotPrecheckoutQuery: // updateBotPrecheckoutQuery#5d2f3aa9
//  case *UpdatePhoneCall: // updatePhoneCall#ab0f6b1e
//  case *UpdateLangPackTooLong: // updateLangPackTooLong#46560264
//  case *UpdateLangPack: // updateLangPack#56022f4d
//  case *UpdateFavedStickers: // updateFavedStickers#e511996d
//  case *UpdateChannelReadMessagesContents: // updateChannelReadMessagesContents#89893b45
//  case *UpdateContactsReset: // updateContactsReset#7084a7be
//  case *UpdateChannelAvailableMessages: // updateChannelAvailableMessages#70db6837
//  case *UpdateDialogUnreadMark: // updateDialogUnreadMark#e16459c3
//  case *UpdateMessagePoll: // updateMessagePoll#aca1657b
//  case *UpdateChatDefaultBannedRights: // updateChatDefaultBannedRights#54c01850
//  case *UpdateFolderPeers: // updateFolderPeers#19360dc0
//  case *UpdatePeerSettings: // updatePeerSettings#6a7e7366
//  case *UpdatePeerLocated: // updatePeerLocated#b4afcfb0
//  case *UpdateNewScheduledMessage: // updateNewScheduledMessage#39a51dfb
//  case *UpdateDeleteScheduledMessages: // updateDeleteScheduledMessages#90866cee
//  case *UpdateTheme: // updateTheme#8216fba3
//  case *UpdateGeoLiveViewed: // updateGeoLiveViewed#871fb939
//  case *UpdateLoginToken: // updateLoginToken#564fe691
//  case *UpdateMessagePollVote: // updateMessagePollVote#42f88f2c
//  case *UpdateDialogFilter: // updateDialogFilter#26ffde7d
//  case *UpdateDialogFilterOrder: // updateDialogFilterOrder#a5d72105
//  case *UpdateDialogFilters: // updateDialogFilters#3504914f
//  case *UpdatePhoneCallSignalingData: // updatePhoneCallSignalingData#2661bf09
//  case *UpdateChannelParticipant: // updateChannelParticipant#65d2b464
//  case *UpdateChannelMessageForwards: // updateChannelMessageForwards#6e8a84df
//  case *UpdateReadChannelDiscussionInbox: // updateReadChannelDiscussionInbox#1cc7de54
//  case *UpdateReadChannelDiscussionOutbox: // updateReadChannelDiscussionOutbox#4638a26c
//  case *UpdatePeerBlocked: // updatePeerBlocked#246a4b22
//  case *UpdateChannelUserTyping: // updateChannelUserTyping#ff2abe9f
//  case *UpdatePinnedMessages: // updatePinnedMessages#ed85eab5
//  case *UpdatePinnedChannelMessages: // updatePinnedChannelMessages#8588878b
//  default: panic(v)
//  }
type UpdateClass interface {
	bin.Encoder
	bin.Decoder
	construct() UpdateClass
}

// DecodeUpdate implements binary de-serialization for UpdateClass.
func DecodeUpdate(buf *bin.Buffer) (UpdateClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case UpdateNewMessageTypeID:
		// Decoding updateNewMessage#1f2b0afd.
		v := UpdateNewMessage{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateMessageIDTypeID:
		// Decoding updateMessageID#4e90bfd6.
		v := UpdateMessageID{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateDeleteMessagesTypeID:
		// Decoding updateDeleteMessages#a20db0e5.
		v := UpdateDeleteMessages{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateUserTypingTypeID:
		// Decoding updateUserTyping#5c486927.
		v := UpdateUserTyping{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateChatUserTypingTypeID:
		// Decoding updateChatUserTyping#9a65ea1f.
		v := UpdateChatUserTyping{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateChatParticipantsTypeID:
		// Decoding updateChatParticipants#7761198.
		v := UpdateChatParticipants{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateUserStatusTypeID:
		// Decoding updateUserStatus#1bfbd823.
		v := UpdateUserStatus{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateUserNameTypeID:
		// Decoding updateUserName#a7332b73.
		v := UpdateUserName{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateUserPhotoTypeID:
		// Decoding updateUserPhoto#95313b0c.
		v := UpdateUserPhoto{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateNewEncryptedMessageTypeID:
		// Decoding updateNewEncryptedMessage#12bcbd9a.
		v := UpdateNewEncryptedMessage{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateEncryptedChatTypingTypeID:
		// Decoding updateEncryptedChatTyping#1710f156.
		v := UpdateEncryptedChatTyping{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateEncryptionTypeID:
		// Decoding updateEncryption#b4a2e88d.
		v := UpdateEncryption{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateEncryptedMessagesReadTypeID:
		// Decoding updateEncryptedMessagesRead#38fe25b7.
		v := UpdateEncryptedMessagesRead{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateChatParticipantAddTypeID:
		// Decoding updateChatParticipantAdd#ea4b0e5c.
		v := UpdateChatParticipantAdd{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateChatParticipantDeleteTypeID:
		// Decoding updateChatParticipantDelete#6e5f8c22.
		v := UpdateChatParticipantDelete{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateDcOptionsTypeID:
		// Decoding updateDcOptions#8e5e9873.
		v := UpdateDcOptions{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateNotifySettingsTypeID:
		// Decoding updateNotifySettings#bec268ef.
		v := UpdateNotifySettings{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateServiceNotificationTypeID:
		// Decoding updateServiceNotification#ebe46819.
		v := UpdateServiceNotification{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdatePrivacyTypeID:
		// Decoding updatePrivacy#ee3b272a.
		v := UpdatePrivacy{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateUserPhoneTypeID:
		// Decoding updateUserPhone#12b9417b.
		v := UpdateUserPhone{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateReadHistoryInboxTypeID:
		// Decoding updateReadHistoryInbox#9c974fdf.
		v := UpdateReadHistoryInbox{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateReadHistoryOutboxTypeID:
		// Decoding updateReadHistoryOutbox#2f2f21bf.
		v := UpdateReadHistoryOutbox{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateWebPageTypeID:
		// Decoding updateWebPage#7f891213.
		v := UpdateWebPage{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateReadMessagesContentsTypeID:
		// Decoding updateReadMessagesContents#68c13933.
		v := UpdateReadMessagesContents{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateChannelTooLongTypeID:
		// Decoding updateChannelTooLong#eb0467fb.
		v := UpdateChannelTooLong{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateChannelTypeID:
		// Decoding updateChannel#b6d45656.
		v := UpdateChannel{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateNewChannelMessageTypeID:
		// Decoding updateNewChannelMessage#62ba04d9.
		v := UpdateNewChannelMessage{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateReadChannelInboxTypeID:
		// Decoding updateReadChannelInbox#330b5424.
		v := UpdateReadChannelInbox{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateDeleteChannelMessagesTypeID:
		// Decoding updateDeleteChannelMessages#c37521c9.
		v := UpdateDeleteChannelMessages{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateChannelMessageViewsTypeID:
		// Decoding updateChannelMessageViews#98a12b4b.
		v := UpdateChannelMessageViews{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateChatParticipantAdminTypeID:
		// Decoding updateChatParticipantAdmin#b6901959.
		v := UpdateChatParticipantAdmin{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateNewStickerSetTypeID:
		// Decoding updateNewStickerSet#688a30aa.
		v := UpdateNewStickerSet{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateStickerSetsOrderTypeID:
		// Decoding updateStickerSetsOrder#bb2d201.
		v := UpdateStickerSetsOrder{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateStickerSetsTypeID:
		// Decoding updateStickerSets#43ae3dec.
		v := UpdateStickerSets{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateSavedGifsTypeID:
		// Decoding updateSavedGifs#9375341e.
		v := UpdateSavedGifs{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateBotInlineQueryTypeID:
		// Decoding updateBotInlineQuery#54826690.
		v := UpdateBotInlineQuery{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateBotInlineSendTypeID:
		// Decoding updateBotInlineSend#e48f964.
		v := UpdateBotInlineSend{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateEditChannelMessageTypeID:
		// Decoding updateEditChannelMessage#1b3f4df7.
		v := UpdateEditChannelMessage{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateBotCallbackQueryTypeID:
		// Decoding updateBotCallbackQuery#e73547e1.
		v := UpdateBotCallbackQuery{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateEditMessageTypeID:
		// Decoding updateEditMessage#e40370a3.
		v := UpdateEditMessage{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateInlineBotCallbackQueryTypeID:
		// Decoding updateInlineBotCallbackQuery#f9d27a5a.
		v := UpdateInlineBotCallbackQuery{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateReadChannelOutboxTypeID:
		// Decoding updateReadChannelOutbox#25d6c9c7.
		v := UpdateReadChannelOutbox{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateDraftMessageTypeID:
		// Decoding updateDraftMessage#ee2bb969.
		v := UpdateDraftMessage{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateReadFeaturedStickersTypeID:
		// Decoding updateReadFeaturedStickers#571d2742.
		v := UpdateReadFeaturedStickers{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateRecentStickersTypeID:
		// Decoding updateRecentStickers#9a422c20.
		v := UpdateRecentStickers{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateConfigTypeID:
		// Decoding updateConfig#a229dd06.
		v := UpdateConfig{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdatePtsChangedTypeID:
		// Decoding updatePtsChanged#3354678f.
		v := UpdatePtsChanged{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateChannelWebPageTypeID:
		// Decoding updateChannelWebPage#40771900.
		v := UpdateChannelWebPage{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateDialogPinnedTypeID:
		// Decoding updateDialogPinned#6e6fe51c.
		v := UpdateDialogPinned{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdatePinnedDialogsTypeID:
		// Decoding updatePinnedDialogs#fa0f3ca2.
		v := UpdatePinnedDialogs{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateBotWebhookJSONTypeID:
		// Decoding updateBotWebhookJSON#8317c0c3.
		v := UpdateBotWebhookJSON{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateBotWebhookJSONQueryTypeID:
		// Decoding updateBotWebhookJSONQuery#9b9240a6.
		v := UpdateBotWebhookJSONQuery{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateBotShippingQueryTypeID:
		// Decoding updateBotShippingQuery#e0cdc940.
		v := UpdateBotShippingQuery{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateBotPrecheckoutQueryTypeID:
		// Decoding updateBotPrecheckoutQuery#5d2f3aa9.
		v := UpdateBotPrecheckoutQuery{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdatePhoneCallTypeID:
		// Decoding updatePhoneCall#ab0f6b1e.
		v := UpdatePhoneCall{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateLangPackTooLongTypeID:
		// Decoding updateLangPackTooLong#46560264.
		v := UpdateLangPackTooLong{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateLangPackTypeID:
		// Decoding updateLangPack#56022f4d.
		v := UpdateLangPack{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateFavedStickersTypeID:
		// Decoding updateFavedStickers#e511996d.
		v := UpdateFavedStickers{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateChannelReadMessagesContentsTypeID:
		// Decoding updateChannelReadMessagesContents#89893b45.
		v := UpdateChannelReadMessagesContents{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateContactsResetTypeID:
		// Decoding updateContactsReset#7084a7be.
		v := UpdateContactsReset{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateChannelAvailableMessagesTypeID:
		// Decoding updateChannelAvailableMessages#70db6837.
		v := UpdateChannelAvailableMessages{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateDialogUnreadMarkTypeID:
		// Decoding updateDialogUnreadMark#e16459c3.
		v := UpdateDialogUnreadMark{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateMessagePollTypeID:
		// Decoding updateMessagePoll#aca1657b.
		v := UpdateMessagePoll{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateChatDefaultBannedRightsTypeID:
		// Decoding updateChatDefaultBannedRights#54c01850.
		v := UpdateChatDefaultBannedRights{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateFolderPeersTypeID:
		// Decoding updateFolderPeers#19360dc0.
		v := UpdateFolderPeers{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdatePeerSettingsTypeID:
		// Decoding updatePeerSettings#6a7e7366.
		v := UpdatePeerSettings{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdatePeerLocatedTypeID:
		// Decoding updatePeerLocated#b4afcfb0.
		v := UpdatePeerLocated{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateNewScheduledMessageTypeID:
		// Decoding updateNewScheduledMessage#39a51dfb.
		v := UpdateNewScheduledMessage{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateDeleteScheduledMessagesTypeID:
		// Decoding updateDeleteScheduledMessages#90866cee.
		v := UpdateDeleteScheduledMessages{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateThemeTypeID:
		// Decoding updateTheme#8216fba3.
		v := UpdateTheme{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateGeoLiveViewedTypeID:
		// Decoding updateGeoLiveViewed#871fb939.
		v := UpdateGeoLiveViewed{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateLoginTokenTypeID:
		// Decoding updateLoginToken#564fe691.
		v := UpdateLoginToken{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateMessagePollVoteTypeID:
		// Decoding updateMessagePollVote#42f88f2c.
		v := UpdateMessagePollVote{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateDialogFilterTypeID:
		// Decoding updateDialogFilter#26ffde7d.
		v := UpdateDialogFilter{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateDialogFilterOrderTypeID:
		// Decoding updateDialogFilterOrder#a5d72105.
		v := UpdateDialogFilterOrder{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateDialogFiltersTypeID:
		// Decoding updateDialogFilters#3504914f.
		v := UpdateDialogFilters{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdatePhoneCallSignalingDataTypeID:
		// Decoding updatePhoneCallSignalingData#2661bf09.
		v := UpdatePhoneCallSignalingData{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateChannelParticipantTypeID:
		// Decoding updateChannelParticipant#65d2b464.
		v := UpdateChannelParticipant{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateChannelMessageForwardsTypeID:
		// Decoding updateChannelMessageForwards#6e8a84df.
		v := UpdateChannelMessageForwards{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateReadChannelDiscussionInboxTypeID:
		// Decoding updateReadChannelDiscussionInbox#1cc7de54.
		v := UpdateReadChannelDiscussionInbox{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateReadChannelDiscussionOutboxTypeID:
		// Decoding updateReadChannelDiscussionOutbox#4638a26c.
		v := UpdateReadChannelDiscussionOutbox{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdatePeerBlockedTypeID:
		// Decoding updatePeerBlocked#246a4b22.
		v := UpdatePeerBlocked{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdateChannelUserTypingTypeID:
		// Decoding updateChannelUserTyping#ff2abe9f.
		v := UpdateChannelUserTyping{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdatePinnedMessagesTypeID:
		// Decoding updatePinnedMessages#ed85eab5.
		v := UpdatePinnedMessages{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	case UpdatePinnedChannelMessagesTypeID:
		// Decoding updatePinnedChannelMessages#8588878b.
		v := UpdatePinnedChannelMessages{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdateClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode UpdateClass: %w", bin.NewUnexpectedID(id))
	}
}

// Update boxes the UpdateClass providing a helper.
type UpdateBox struct {
	Update UpdateClass
}

// Decode implements bin.Decoder for UpdateBox.
func (b *UpdateBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode UpdateBox to nil")
	}
	v, err := DecodeUpdate(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.Update = v
	return nil
}

// Encode implements bin.Encode for UpdateBox.
func (b *UpdateBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.Update == nil {
		return fmt.Errorf("unable to encode UpdateClass as nil")
	}
	return b.Update.Encode(buf)
}
