// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// AccountFinishTakeoutSessionRequest represents TL type `account.finishTakeoutSession#1d2652ee`.
type AccountFinishTakeoutSessionRequest struct {
	// Flags field of AccountFinishTakeoutSessionRequest.
	Flags bin.Fields
	// Success field of AccountFinishTakeoutSessionRequest.
	Success bool
}

// AccountFinishTakeoutSessionRequestTypeID is TL type id of AccountFinishTakeoutSessionRequest.
const AccountFinishTakeoutSessionRequestTypeID = 0x1d2652ee

// Encode implements bin.Encoder.
func (f *AccountFinishTakeoutSessionRequest) Encode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't encode account.finishTakeoutSession#1d2652ee as nil")
	}
	b.PutID(AccountFinishTakeoutSessionRequestTypeID)
	if err := f.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode account.finishTakeoutSession#1d2652ee: field flags: %w", err)
	}
	return nil
}

// SetSuccess sets value of Success conditional field.
func (f *AccountFinishTakeoutSessionRequest) SetSuccess(value bool) {
	if value {
		f.Flags.Set(0)
	} else {
		f.Flags.Unset(0)
	}
}

// Decode implements bin.Decoder.
func (f *AccountFinishTakeoutSessionRequest) Decode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't decode account.finishTakeoutSession#1d2652ee to nil")
	}
	if err := b.ConsumeID(AccountFinishTakeoutSessionRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode account.finishTakeoutSession#1d2652ee: %w", err)
	}
	{
		if err := f.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode account.finishTakeoutSession#1d2652ee: field flags: %w", err)
		}
	}
	f.Success = f.Flags.Has(0)
	return nil
}

// Ensuring interfaces in compile-time for AccountFinishTakeoutSessionRequest.
var (
	_ bin.Encoder = &AccountFinishTakeoutSessionRequest{}
	_ bin.Decoder = &AccountFinishTakeoutSessionRequest{}
)

// AccountFinishTakeoutSession invokes method account.finishTakeoutSession#1d2652ee returning error if any.
func (c *Client) AccountFinishTakeoutSession(ctx context.Context, request *AccountFinishTakeoutSessionRequest) (BoolClass, error) {
	var result BoolBox
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Bool, nil
}
