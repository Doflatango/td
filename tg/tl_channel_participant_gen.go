// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// ChannelParticipant represents TL type `channelParticipant#15ebac1d`.
// Channel/supergroup participant
//
// See https://core.telegram.org/constructor/channelParticipant for reference.
type ChannelParticipant struct {
	// Pariticipant user ID
	UserID int
	// Date joined
	Date int
}

// ChannelParticipantTypeID is TL type id of ChannelParticipant.
const ChannelParticipantTypeID = 0x15ebac1d

// Encode implements bin.Encoder.
func (c *ChannelParticipant) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelParticipant#15ebac1d as nil")
	}
	b.PutID(ChannelParticipantTypeID)
	b.PutInt(c.UserID)
	b.PutInt(c.Date)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelParticipant) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelParticipant#15ebac1d to nil")
	}
	if err := b.ConsumeID(ChannelParticipantTypeID); err != nil {
		return fmt.Errorf("unable to decode channelParticipant#15ebac1d: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipant#15ebac1d: field user_id: %w", err)
		}
		c.UserID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipant#15ebac1d: field date: %w", err)
		}
		c.Date = value
	}
	return nil
}

// construct implements constructor of ChannelParticipantClass.
func (c ChannelParticipant) construct() ChannelParticipantClass { return &c }

// Ensuring interfaces in compile-time for ChannelParticipant.
var (
	_ bin.Encoder = &ChannelParticipant{}
	_ bin.Decoder = &ChannelParticipant{}

	_ ChannelParticipantClass = &ChannelParticipant{}
)

// ChannelParticipantSelf represents TL type `channelParticipantSelf#a3289a6d`.
// Myself
//
// See https://core.telegram.org/constructor/channelParticipantSelf for reference.
type ChannelParticipantSelf struct {
	// User ID
	UserID int
	// User that invited me to the channel/supergroup
	InviterID int
	// When did I join the channel/supergroup
	Date int
}

// ChannelParticipantSelfTypeID is TL type id of ChannelParticipantSelf.
const ChannelParticipantSelfTypeID = 0xa3289a6d

// Encode implements bin.Encoder.
func (c *ChannelParticipantSelf) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelParticipantSelf#a3289a6d as nil")
	}
	b.PutID(ChannelParticipantSelfTypeID)
	b.PutInt(c.UserID)
	b.PutInt(c.InviterID)
	b.PutInt(c.Date)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelParticipantSelf) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelParticipantSelf#a3289a6d to nil")
	}
	if err := b.ConsumeID(ChannelParticipantSelfTypeID); err != nil {
		return fmt.Errorf("unable to decode channelParticipantSelf#a3289a6d: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantSelf#a3289a6d: field user_id: %w", err)
		}
		c.UserID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantSelf#a3289a6d: field inviter_id: %w", err)
		}
		c.InviterID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantSelf#a3289a6d: field date: %w", err)
		}
		c.Date = value
	}
	return nil
}

// construct implements constructor of ChannelParticipantClass.
func (c ChannelParticipantSelf) construct() ChannelParticipantClass { return &c }

// Ensuring interfaces in compile-time for ChannelParticipantSelf.
var (
	_ bin.Encoder = &ChannelParticipantSelf{}
	_ bin.Decoder = &ChannelParticipantSelf{}

	_ ChannelParticipantClass = &ChannelParticipantSelf{}
)

// ChannelParticipantCreator represents TL type `channelParticipantCreator#447dca4b`.
// Channel/supergroup creator
//
// See https://core.telegram.org/constructor/channelParticipantCreator for reference.
type ChannelParticipantCreator struct {
	// Flags, see TL conditional fields
	Flags bin.Fields
	// User ID
	UserID int
	// Creator admin rights
	AdminRights ChatAdminRights
	// The role (rank) of the group creator in the group: just an arbitrary string, admin by default
	//
	// Use SetRank and GetRank helpers.
	Rank string
}

// ChannelParticipantCreatorTypeID is TL type id of ChannelParticipantCreator.
const ChannelParticipantCreatorTypeID = 0x447dca4b

// Encode implements bin.Encoder.
func (c *ChannelParticipantCreator) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelParticipantCreator#447dca4b as nil")
	}
	b.PutID(ChannelParticipantCreatorTypeID)
	if err := c.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelParticipantCreator#447dca4b: field flags: %w", err)
	}
	b.PutInt(c.UserID)
	if err := c.AdminRights.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelParticipantCreator#447dca4b: field admin_rights: %w", err)
	}
	if c.Flags.Has(0) {
		b.PutString(c.Rank)
	}
	return nil
}

// SetRank sets value of Rank conditional field.
func (c *ChannelParticipantCreator) SetRank(value string) {
	c.Flags.Set(0)
	c.Rank = value
}

// GetRank returns value of Rank conditional field and
// boolean which is true if field was set.
func (c *ChannelParticipantCreator) GetRank() (value string, ok bool) {
	if !c.Flags.Has(0) {
		return value, false
	}
	return c.Rank, true
}

// Decode implements bin.Decoder.
func (c *ChannelParticipantCreator) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelParticipantCreator#447dca4b to nil")
	}
	if err := b.ConsumeID(ChannelParticipantCreatorTypeID); err != nil {
		return fmt.Errorf("unable to decode channelParticipantCreator#447dca4b: %w", err)
	}
	{
		if err := c.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelParticipantCreator#447dca4b: field flags: %w", err)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantCreator#447dca4b: field user_id: %w", err)
		}
		c.UserID = value
	}
	{
		if err := c.AdminRights.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelParticipantCreator#447dca4b: field admin_rights: %w", err)
		}
	}
	if c.Flags.Has(0) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantCreator#447dca4b: field rank: %w", err)
		}
		c.Rank = value
	}
	return nil
}

// construct implements constructor of ChannelParticipantClass.
func (c ChannelParticipantCreator) construct() ChannelParticipantClass { return &c }

// Ensuring interfaces in compile-time for ChannelParticipantCreator.
var (
	_ bin.Encoder = &ChannelParticipantCreator{}
	_ bin.Decoder = &ChannelParticipantCreator{}

	_ ChannelParticipantClass = &ChannelParticipantCreator{}
)

// ChannelParticipantAdmin represents TL type `channelParticipantAdmin#ccbebbaf`.
// Admin
//
// See https://core.telegram.org/constructor/channelParticipantAdmin for reference.
type ChannelParticipantAdmin struct {
	// Flags, see TL conditional fields
	Flags bin.Fields
	// Can this admin promote other admins with the same permissions?
	CanEdit bool
	// Is this the current user
	Self bool
	// Admin user ID
	UserID int
	// User that invited the admin to the channel/group
	//
	// Use SetInviterID and GetInviterID helpers.
	InviterID int
	// User that promoted the user to admin
	PromotedBy int
	// When did the user join
	Date int
	// Admin rights
	AdminRights ChatAdminRights
	// The role (rank) of the admin in the group: just an arbitrary string, admin by default
	//
	// Use SetRank and GetRank helpers.
	Rank string
}

// ChannelParticipantAdminTypeID is TL type id of ChannelParticipantAdmin.
const ChannelParticipantAdminTypeID = 0xccbebbaf

// Encode implements bin.Encoder.
func (c *ChannelParticipantAdmin) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelParticipantAdmin#ccbebbaf as nil")
	}
	b.PutID(ChannelParticipantAdminTypeID)
	if err := c.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelParticipantAdmin#ccbebbaf: field flags: %w", err)
	}
	b.PutInt(c.UserID)
	if c.Flags.Has(1) {
		b.PutInt(c.InviterID)
	}
	b.PutInt(c.PromotedBy)
	b.PutInt(c.Date)
	if err := c.AdminRights.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelParticipantAdmin#ccbebbaf: field admin_rights: %w", err)
	}
	if c.Flags.Has(2) {
		b.PutString(c.Rank)
	}
	return nil
}

// SetCanEdit sets value of CanEdit conditional field.
func (c *ChannelParticipantAdmin) SetCanEdit(value bool) {
	if value {
		c.Flags.Set(0)
	} else {
		c.Flags.Unset(0)
	}
}

// SetSelf sets value of Self conditional field.
func (c *ChannelParticipantAdmin) SetSelf(value bool) {
	if value {
		c.Flags.Set(1)
	} else {
		c.Flags.Unset(1)
	}
}

// SetInviterID sets value of InviterID conditional field.
func (c *ChannelParticipantAdmin) SetInviterID(value int) {
	c.Flags.Set(1)
	c.InviterID = value
}

// GetInviterID returns value of InviterID conditional field and
// boolean which is true if field was set.
func (c *ChannelParticipantAdmin) GetInviterID() (value int, ok bool) {
	if !c.Flags.Has(1) {
		return value, false
	}
	return c.InviterID, true
}

// SetRank sets value of Rank conditional field.
func (c *ChannelParticipantAdmin) SetRank(value string) {
	c.Flags.Set(2)
	c.Rank = value
}

// GetRank returns value of Rank conditional field and
// boolean which is true if field was set.
func (c *ChannelParticipantAdmin) GetRank() (value string, ok bool) {
	if !c.Flags.Has(2) {
		return value, false
	}
	return c.Rank, true
}

// Decode implements bin.Decoder.
func (c *ChannelParticipantAdmin) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelParticipantAdmin#ccbebbaf to nil")
	}
	if err := b.ConsumeID(ChannelParticipantAdminTypeID); err != nil {
		return fmt.Errorf("unable to decode channelParticipantAdmin#ccbebbaf: %w", err)
	}
	{
		if err := c.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelParticipantAdmin#ccbebbaf: field flags: %w", err)
		}
	}
	c.CanEdit = c.Flags.Has(0)
	c.Self = c.Flags.Has(1)
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantAdmin#ccbebbaf: field user_id: %w", err)
		}
		c.UserID = value
	}
	if c.Flags.Has(1) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantAdmin#ccbebbaf: field inviter_id: %w", err)
		}
		c.InviterID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantAdmin#ccbebbaf: field promoted_by: %w", err)
		}
		c.PromotedBy = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantAdmin#ccbebbaf: field date: %w", err)
		}
		c.Date = value
	}
	{
		if err := c.AdminRights.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelParticipantAdmin#ccbebbaf: field admin_rights: %w", err)
		}
	}
	if c.Flags.Has(2) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantAdmin#ccbebbaf: field rank: %w", err)
		}
		c.Rank = value
	}
	return nil
}

// construct implements constructor of ChannelParticipantClass.
func (c ChannelParticipantAdmin) construct() ChannelParticipantClass { return &c }

// Ensuring interfaces in compile-time for ChannelParticipantAdmin.
var (
	_ bin.Encoder = &ChannelParticipantAdmin{}
	_ bin.Decoder = &ChannelParticipantAdmin{}

	_ ChannelParticipantClass = &ChannelParticipantAdmin{}
)

// ChannelParticipantBanned represents TL type `channelParticipantBanned#1c0facaf`.
// Banned/kicked user
//
// See https://core.telegram.org/constructor/channelParticipantBanned for reference.
type ChannelParticipantBanned struct {
	// Flags, see TL conditional fields
	Flags bin.Fields
	// Whether the user has left the group
	Left bool
	// User ID
	UserID int
	// User was kicked by the specified admin
	KickedBy int
	// When did the user join the group
	Date int
	// Banned rights
	BannedRights ChatBannedRights
}

// ChannelParticipantBannedTypeID is TL type id of ChannelParticipantBanned.
const ChannelParticipantBannedTypeID = 0x1c0facaf

// Encode implements bin.Encoder.
func (c *ChannelParticipantBanned) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelParticipantBanned#1c0facaf as nil")
	}
	b.PutID(ChannelParticipantBannedTypeID)
	if err := c.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelParticipantBanned#1c0facaf: field flags: %w", err)
	}
	b.PutInt(c.UserID)
	b.PutInt(c.KickedBy)
	b.PutInt(c.Date)
	if err := c.BannedRights.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelParticipantBanned#1c0facaf: field banned_rights: %w", err)
	}
	return nil
}

// SetLeft sets value of Left conditional field.
func (c *ChannelParticipantBanned) SetLeft(value bool) {
	if value {
		c.Flags.Set(0)
	} else {
		c.Flags.Unset(0)
	}
}

// Decode implements bin.Decoder.
func (c *ChannelParticipantBanned) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelParticipantBanned#1c0facaf to nil")
	}
	if err := b.ConsumeID(ChannelParticipantBannedTypeID); err != nil {
		return fmt.Errorf("unable to decode channelParticipantBanned#1c0facaf: %w", err)
	}
	{
		if err := c.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelParticipantBanned#1c0facaf: field flags: %w", err)
		}
	}
	c.Left = c.Flags.Has(0)
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantBanned#1c0facaf: field user_id: %w", err)
		}
		c.UserID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantBanned#1c0facaf: field kicked_by: %w", err)
		}
		c.KickedBy = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantBanned#1c0facaf: field date: %w", err)
		}
		c.Date = value
	}
	{
		if err := c.BannedRights.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelParticipantBanned#1c0facaf: field banned_rights: %w", err)
		}
	}
	return nil
}

// construct implements constructor of ChannelParticipantClass.
func (c ChannelParticipantBanned) construct() ChannelParticipantClass { return &c }

// Ensuring interfaces in compile-time for ChannelParticipantBanned.
var (
	_ bin.Encoder = &ChannelParticipantBanned{}
	_ bin.Decoder = &ChannelParticipantBanned{}

	_ ChannelParticipantClass = &ChannelParticipantBanned{}
)

// ChannelParticipantLeft represents TL type `channelParticipantLeft#c3c6796b`.
// A participant that left the channel/supergroup
//
// See https://core.telegram.org/constructor/channelParticipantLeft for reference.
type ChannelParticipantLeft struct {
	// User ID
	UserID int
}

// ChannelParticipantLeftTypeID is TL type id of ChannelParticipantLeft.
const ChannelParticipantLeftTypeID = 0xc3c6796b

// Encode implements bin.Encoder.
func (c *ChannelParticipantLeft) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelParticipantLeft#c3c6796b as nil")
	}
	b.PutID(ChannelParticipantLeftTypeID)
	b.PutInt(c.UserID)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelParticipantLeft) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelParticipantLeft#c3c6796b to nil")
	}
	if err := b.ConsumeID(ChannelParticipantLeftTypeID); err != nil {
		return fmt.Errorf("unable to decode channelParticipantLeft#c3c6796b: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelParticipantLeft#c3c6796b: field user_id: %w", err)
		}
		c.UserID = value
	}
	return nil
}

// construct implements constructor of ChannelParticipantClass.
func (c ChannelParticipantLeft) construct() ChannelParticipantClass { return &c }

// Ensuring interfaces in compile-time for ChannelParticipantLeft.
var (
	_ bin.Encoder = &ChannelParticipantLeft{}
	_ bin.Decoder = &ChannelParticipantLeft{}

	_ ChannelParticipantClass = &ChannelParticipantLeft{}
)

// ChannelParticipantClass represents ChannelParticipant generic type.
//
// See https://core.telegram.org/type/ChannelParticipant for reference.
//
// Example:
//  g, err := DecodeChannelParticipant(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *ChannelParticipant: // channelParticipant#15ebac1d
//  case *ChannelParticipantSelf: // channelParticipantSelf#a3289a6d
//  case *ChannelParticipantCreator: // channelParticipantCreator#447dca4b
//  case *ChannelParticipantAdmin: // channelParticipantAdmin#ccbebbaf
//  case *ChannelParticipantBanned: // channelParticipantBanned#1c0facaf
//  case *ChannelParticipantLeft: // channelParticipantLeft#c3c6796b
//  default: panic(v)
//  }
type ChannelParticipantClass interface {
	bin.Encoder
	bin.Decoder
	construct() ChannelParticipantClass
}

// DecodeChannelParticipant implements binary de-serialization for ChannelParticipantClass.
func DecodeChannelParticipant(buf *bin.Buffer) (ChannelParticipantClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case ChannelParticipantTypeID:
		// Decoding channelParticipant#15ebac1d.
		v := ChannelParticipant{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelParticipantClass: %w", err)
		}
		return &v, nil
	case ChannelParticipantSelfTypeID:
		// Decoding channelParticipantSelf#a3289a6d.
		v := ChannelParticipantSelf{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelParticipantClass: %w", err)
		}
		return &v, nil
	case ChannelParticipantCreatorTypeID:
		// Decoding channelParticipantCreator#447dca4b.
		v := ChannelParticipantCreator{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelParticipantClass: %w", err)
		}
		return &v, nil
	case ChannelParticipantAdminTypeID:
		// Decoding channelParticipantAdmin#ccbebbaf.
		v := ChannelParticipantAdmin{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelParticipantClass: %w", err)
		}
		return &v, nil
	case ChannelParticipantBannedTypeID:
		// Decoding channelParticipantBanned#1c0facaf.
		v := ChannelParticipantBanned{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelParticipantClass: %w", err)
		}
		return &v, nil
	case ChannelParticipantLeftTypeID:
		// Decoding channelParticipantLeft#c3c6796b.
		v := ChannelParticipantLeft{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelParticipantClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode ChannelParticipantClass: %w", bin.NewUnexpectedID(id))
	}
}

// ChannelParticipant boxes the ChannelParticipantClass providing a helper.
type ChannelParticipantBox struct {
	ChannelParticipant ChannelParticipantClass
}

// Decode implements bin.Decoder for ChannelParticipantBox.
func (b *ChannelParticipantBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode ChannelParticipantBox to nil")
	}
	v, err := DecodeChannelParticipant(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.ChannelParticipant = v
	return nil
}

// Encode implements bin.Encode for ChannelParticipantBox.
func (b *ChannelParticipantBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.ChannelParticipant == nil {
		return fmt.Errorf("unable to encode ChannelParticipantClass as nil")
	}
	return b.ChannelParticipant.Encode(buf)
}
