// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// MessagesSearchRequest represents TL type `messages.search#c352eec`.
// Gets back found messages
//
// See https://core.telegram.org/method/messages.search for reference.
type MessagesSearchRequest struct {
	// Flags, see TL conditional fields¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields `schemaname:"flags"`
	// User or chat, histories with which are searched, or (inputPeerEmpty)¹ constructor for global search
	//
	// Links:
	//  1) https://core.telegram.org/constructor/inputPeerEmpty
	Peer InputPeerClass `schemaname:"peer"`
	// Text search request
	Q string `schemaname:"q"`
	// Only return messages sent by the specified user ID
	//
	// Use SetFromID and GetFromID helpers.
	FromID InputPeerClass `schemaname:"from_id"`
	// Thread ID¹
	//
	// Links:
	//  1) https://core.telegram.org/api/threads
	//
	// Use SetTopMsgID and GetTopMsgID helpers.
	TopMsgID int `schemaname:"top_msg_id"`
	// Filter to return only specified message types
	Filter MessagesFilterClass `schemaname:"filter"`
	// If a positive value was transferred, only messages with a sending date bigger than the transferred one will be returned
	MinDate int `schemaname:"min_date"`
	// If a positive value was transferred, only messages with a sending date smaller than the transferred one will be returned
	MaxDate int `schemaname:"max_date"`
	// Only return messages starting from the specified message ID
	OffsetID int `schemaname:"offset_id"`
	// Additional offset¹
	//
	// Links:
	//  1) https://core.telegram.org/api/offsets
	AddOffset int `schemaname:"add_offset"`
	// Number of results to return¹
	//
	// Links:
	//  1) https://core.telegram.org/api/offsets
	Limit int `schemaname:"limit"`
	// Maximum message ID to return¹
	//
	// Links:
	//  1) https://core.telegram.org/api/offsets
	MaxID int `schemaname:"max_id"`
	// Minimum message ID to return¹
	//
	// Links:
	//  1) https://core.telegram.org/api/offsets
	MinID int `schemaname:"min_id"`
	// Hash¹
	//
	// Links:
	//  1) https://core.telegram.org/api/offsets
	Hash int `schemaname:"hash"`
}

// MessagesSearchRequestTypeID is TL type id of MessagesSearchRequest.
const MessagesSearchRequestTypeID = 0xc352eec

func (s *MessagesSearchRequest) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Flags.Zero()) {
		return false
	}
	if !(s.Peer == nil) {
		return false
	}
	if !(s.Q == "") {
		return false
	}
	if !(s.FromID == nil) {
		return false
	}
	if !(s.TopMsgID == 0) {
		return false
	}
	if !(s.Filter == nil) {
		return false
	}
	if !(s.MinDate == 0) {
		return false
	}
	if !(s.MaxDate == 0) {
		return false
	}
	if !(s.OffsetID == 0) {
		return false
	}
	if !(s.AddOffset == 0) {
		return false
	}
	if !(s.Limit == 0) {
		return false
	}
	if !(s.MaxID == 0) {
		return false
	}
	if !(s.MinID == 0) {
		return false
	}
	if !(s.Hash == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *MessagesSearchRequest) String() string {
	if s == nil {
		return "MessagesSearchRequest(nil)"
	}
	type Alias MessagesSearchRequest
	return fmt.Sprintf("MessagesSearchRequest%+v", Alias(*s))
}

// FillFrom fills MessagesSearchRequest from given interface.
func (s *MessagesSearchRequest) FillFrom(from interface {
	GetPeer() (value InputPeerClass)
	GetQ() (value string)
	GetFromID() (value InputPeerClass, ok bool)
	GetTopMsgID() (value int, ok bool)
	GetFilter() (value MessagesFilterClass)
	GetMinDate() (value int)
	GetMaxDate() (value int)
	GetOffsetID() (value int)
	GetAddOffset() (value int)
	GetLimit() (value int)
	GetMaxID() (value int)
	GetMinID() (value int)
	GetHash() (value int)
}) {
	s.Peer = from.GetPeer()
	s.Q = from.GetQ()
	if val, ok := from.GetFromID(); ok {
		s.FromID = val
	}

	if val, ok := from.GetTopMsgID(); ok {
		s.TopMsgID = val
	}

	s.Filter = from.GetFilter()
	s.MinDate = from.GetMinDate()
	s.MaxDate = from.GetMaxDate()
	s.OffsetID = from.GetOffsetID()
	s.AddOffset = from.GetAddOffset()
	s.Limit = from.GetLimit()
	s.MaxID = from.GetMaxID()
	s.MinID = from.GetMinID()
	s.Hash = from.GetHash()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (s *MessagesSearchRequest) TypeID() uint32 {
	return MessagesSearchRequestTypeID
}

// SchemaName returns MTProto type name.
func (s *MessagesSearchRequest) SchemaName() string {
	return "messages.search"
}

// Encode implements bin.Encoder.
func (s *MessagesSearchRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode messages.search#c352eec as nil")
	}
	b.PutID(MessagesSearchRequestTypeID)
	if !(s.FromID == nil) {
		s.Flags.Set(0)
	}
	if !(s.TopMsgID == 0) {
		s.Flags.Set(1)
	}
	if err := s.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.search#c352eec: field flags: %w", err)
	}
	if s.Peer == nil {
		return fmt.Errorf("unable to encode messages.search#c352eec: field peer is nil")
	}
	if err := s.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.search#c352eec: field peer: %w", err)
	}
	b.PutString(s.Q)
	if s.Flags.Has(0) {
		if s.FromID == nil {
			return fmt.Errorf("unable to encode messages.search#c352eec: field from_id is nil")
		}
		if err := s.FromID.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.search#c352eec: field from_id: %w", err)
		}
	}
	if s.Flags.Has(1) {
		b.PutInt(s.TopMsgID)
	}
	if s.Filter == nil {
		return fmt.Errorf("unable to encode messages.search#c352eec: field filter is nil")
	}
	if err := s.Filter.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.search#c352eec: field filter: %w", err)
	}
	b.PutInt(s.MinDate)
	b.PutInt(s.MaxDate)
	b.PutInt(s.OffsetID)
	b.PutInt(s.AddOffset)
	b.PutInt(s.Limit)
	b.PutInt(s.MaxID)
	b.PutInt(s.MinID)
	b.PutInt(s.Hash)
	return nil
}

// GetPeer returns value of Peer field.
func (s *MessagesSearchRequest) GetPeer() (value InputPeerClass) {
	return s.Peer
}

// GetQ returns value of Q field.
func (s *MessagesSearchRequest) GetQ() (value string) {
	return s.Q
}

// SetFromID sets value of FromID conditional field.
func (s *MessagesSearchRequest) SetFromID(value InputPeerClass) {
	s.Flags.Set(0)
	s.FromID = value
}

// GetFromID returns value of FromID conditional field and
// boolean which is true if field was set.
func (s *MessagesSearchRequest) GetFromID() (value InputPeerClass, ok bool) {
	if !s.Flags.Has(0) {
		return value, false
	}
	return s.FromID, true
}

// SetTopMsgID sets value of TopMsgID conditional field.
func (s *MessagesSearchRequest) SetTopMsgID(value int) {
	s.Flags.Set(1)
	s.TopMsgID = value
}

// GetTopMsgID returns value of TopMsgID conditional field and
// boolean which is true if field was set.
func (s *MessagesSearchRequest) GetTopMsgID() (value int, ok bool) {
	if !s.Flags.Has(1) {
		return value, false
	}
	return s.TopMsgID, true
}

// GetFilter returns value of Filter field.
func (s *MessagesSearchRequest) GetFilter() (value MessagesFilterClass) {
	return s.Filter
}

// GetMinDate returns value of MinDate field.
func (s *MessagesSearchRequest) GetMinDate() (value int) {
	return s.MinDate
}

// GetMaxDate returns value of MaxDate field.
func (s *MessagesSearchRequest) GetMaxDate() (value int) {
	return s.MaxDate
}

// GetOffsetID returns value of OffsetID field.
func (s *MessagesSearchRequest) GetOffsetID() (value int) {
	return s.OffsetID
}

// GetAddOffset returns value of AddOffset field.
func (s *MessagesSearchRequest) GetAddOffset() (value int) {
	return s.AddOffset
}

// GetLimit returns value of Limit field.
func (s *MessagesSearchRequest) GetLimit() (value int) {
	return s.Limit
}

// GetMaxID returns value of MaxID field.
func (s *MessagesSearchRequest) GetMaxID() (value int) {
	return s.MaxID
}

// GetMinID returns value of MinID field.
func (s *MessagesSearchRequest) GetMinID() (value int) {
	return s.MinID
}

// GetHash returns value of Hash field.
func (s *MessagesSearchRequest) GetHash() (value int) {
	return s.Hash
}

// Decode implements bin.Decoder.
func (s *MessagesSearchRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode messages.search#c352eec to nil")
	}
	if err := b.ConsumeID(MessagesSearchRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.search#c352eec: %w", err)
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.search#c352eec: field flags: %w", err)
		}
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.search#c352eec: field peer: %w", err)
		}
		s.Peer = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messages.search#c352eec: field q: %w", err)
		}
		s.Q = value
	}
	if s.Flags.Has(0) {
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.search#c352eec: field from_id: %w", err)
		}
		s.FromID = value
	}
	if s.Flags.Has(1) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.search#c352eec: field top_msg_id: %w", err)
		}
		s.TopMsgID = value
	}
	{
		value, err := DecodeMessagesFilter(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.search#c352eec: field filter: %w", err)
		}
		s.Filter = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.search#c352eec: field min_date: %w", err)
		}
		s.MinDate = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.search#c352eec: field max_date: %w", err)
		}
		s.MaxDate = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.search#c352eec: field offset_id: %w", err)
		}
		s.OffsetID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.search#c352eec: field add_offset: %w", err)
		}
		s.AddOffset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.search#c352eec: field limit: %w", err)
		}
		s.Limit = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.search#c352eec: field max_id: %w", err)
		}
		s.MaxID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.search#c352eec: field min_id: %w", err)
		}
		s.MinID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.search#c352eec: field hash: %w", err)
		}
		s.Hash = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesSearchRequest.
var (
	_ bin.Encoder = &MessagesSearchRequest{}
	_ bin.Decoder = &MessagesSearchRequest{}
)

// MessagesSearch invokes method messages.search#c352eec returning error if any.
// Gets back found messages
//
// Possible errors:
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  400 CHAT_ADMIN_REQUIRED: You must be an admin in this chat to do this
//  400 INPUT_CONSTRUCTOR_INVALID: The provided constructor is invalid
//  400 INPUT_USER_DEACTIVATED: The specified user was deleted
//  400 MSG_ID_INVALID: Invalid message ID provided
//  400 PEER_ID_INVALID: The provided peer id is invalid
//  400 PEER_ID_NOT_SUPPORTED: The provided peer ID is not supported
//  400 SEARCH_QUERY_EMPTY: The search query is empty
//  400 USER_ID_INVALID: The provided user ID is invalid
//
// See https://core.telegram.org/method/messages.search for reference.
func (c *Client) MessagesSearch(ctx context.Context, request *MessagesSearchRequest) (MessagesMessagesClass, error) {
	var result MessagesMessagesBox

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Messages, nil
}
