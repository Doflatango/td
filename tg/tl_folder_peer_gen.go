// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// FolderPeer represents TL type `folderPeer#e9baa668`.
// Peer in a folder
//
// See https://core.telegram.org/constructor/folderPeer for reference.
type FolderPeer struct {
	// Folder peer info
	Peer PeerClass
	// Peer folder ID, for more info click here
	FolderID int
}

// FolderPeerTypeID is TL type id of FolderPeer.
const FolderPeerTypeID = 0xe9baa668

// Encode implements bin.Encoder.
func (f *FolderPeer) Encode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't encode folderPeer#e9baa668 as nil")
	}
	b.PutID(FolderPeerTypeID)
	if f.Peer == nil {
		return fmt.Errorf("unable to encode folderPeer#e9baa668: field peer is nil")
	}
	if err := f.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode folderPeer#e9baa668: field peer: %w", err)
	}
	b.PutInt(f.FolderID)
	return nil
}

// Decode implements bin.Decoder.
func (f *FolderPeer) Decode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't decode folderPeer#e9baa668 to nil")
	}
	if err := b.ConsumeID(FolderPeerTypeID); err != nil {
		return fmt.Errorf("unable to decode folderPeer#e9baa668: %w", err)
	}
	{
		value, err := DecodePeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode folderPeer#e9baa668: field peer: %w", err)
		}
		f.Peer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode folderPeer#e9baa668: field folder_id: %w", err)
		}
		f.FolderID = value
	}
	return nil
}

// Ensuring interfaces in compile-time for FolderPeer.
var (
	_ bin.Encoder = &FolderPeer{}
	_ bin.Decoder = &FolderPeer{}
)
