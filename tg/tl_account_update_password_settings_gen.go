// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// AccountUpdatePasswordSettingsRequest represents TL type `account.updatePasswordSettings#a59b102f`.
type AccountUpdatePasswordSettingsRequest struct {
	// Password field of AccountUpdatePasswordSettingsRequest.
	Password InputCheckPasswordSRPClass
	// NewSettings field of AccountUpdatePasswordSettingsRequest.
	NewSettings AccountPasswordInputSettings
}

// AccountUpdatePasswordSettingsRequestTypeID is TL type id of AccountUpdatePasswordSettingsRequest.
const AccountUpdatePasswordSettingsRequestTypeID = 0xa59b102f

// Encode implements bin.Encoder.
func (u *AccountUpdatePasswordSettingsRequest) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode account.updatePasswordSettings#a59b102f as nil")
	}
	b.PutID(AccountUpdatePasswordSettingsRequestTypeID)
	if u.Password == nil {
		return fmt.Errorf("unable to encode account.updatePasswordSettings#a59b102f: field password is nil")
	}
	if err := u.Password.Encode(b); err != nil {
		return fmt.Errorf("unable to encode account.updatePasswordSettings#a59b102f: field password: %w", err)
	}
	if err := u.NewSettings.Encode(b); err != nil {
		return fmt.Errorf("unable to encode account.updatePasswordSettings#a59b102f: field new_settings: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *AccountUpdatePasswordSettingsRequest) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode account.updatePasswordSettings#a59b102f to nil")
	}
	if err := b.ConsumeID(AccountUpdatePasswordSettingsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode account.updatePasswordSettings#a59b102f: %w", err)
	}
	{
		value, err := DecodeInputCheckPasswordSRP(b)
		if err != nil {
			return fmt.Errorf("unable to decode account.updatePasswordSettings#a59b102f: field password: %w", err)
		}
		u.Password = value
	}
	{
		if err := u.NewSettings.Decode(b); err != nil {
			return fmt.Errorf("unable to decode account.updatePasswordSettings#a59b102f: field new_settings: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for AccountUpdatePasswordSettingsRequest.
var (
	_ bin.Encoder = &AccountUpdatePasswordSettingsRequest{}
	_ bin.Decoder = &AccountUpdatePasswordSettingsRequest{}
)
