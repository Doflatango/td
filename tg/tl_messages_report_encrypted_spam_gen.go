// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesReportEncryptedSpamRequest represents TL type `messages.reportEncryptedSpam#4b0c8c0f`.
type MessagesReportEncryptedSpamRequest struct {
	// Peer field of MessagesReportEncryptedSpamRequest.
	Peer InputEncryptedChat
}

// MessagesReportEncryptedSpamRequestTypeID is TL type id of MessagesReportEncryptedSpamRequest.
const MessagesReportEncryptedSpamRequestTypeID = 0x4b0c8c0f

// Encode implements bin.Encoder.
func (r *MessagesReportEncryptedSpamRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode messages.reportEncryptedSpam#4b0c8c0f as nil")
	}
	b.PutID(MessagesReportEncryptedSpamRequestTypeID)
	if err := r.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.reportEncryptedSpam#4b0c8c0f: field peer: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (r *MessagesReportEncryptedSpamRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode messages.reportEncryptedSpam#4b0c8c0f to nil")
	}
	if err := b.ConsumeID(MessagesReportEncryptedSpamRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.reportEncryptedSpam#4b0c8c0f: %w", err)
	}
	{
		if err := r.Peer.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.reportEncryptedSpam#4b0c8c0f: field peer: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesReportEncryptedSpamRequest.
var (
	_ bin.Encoder = &MessagesReportEncryptedSpamRequest{}
	_ bin.Decoder = &MessagesReportEncryptedSpamRequest{}
)

// MessagesReportEncryptedSpam invokes method messages.reportEncryptedSpam#4b0c8c0f returning error if any.
func (c *Client) MessagesReportEncryptedSpam(ctx context.Context, request *MessagesReportEncryptedSpamRequest) (BoolClass, error) {
	var result BoolBox
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Bool, nil
}
