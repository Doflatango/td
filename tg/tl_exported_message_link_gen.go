// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// ExportedMessageLink represents TL type `exportedMessageLink#5dab1af4`.
//
// See https://core.telegram.org/constructor/exportedMessageLink for reference.
type ExportedMessageLink struct {
	// Link field of ExportedMessageLink.
	Link string
	// HTML field of ExportedMessageLink.
	HTML string
}

// ExportedMessageLinkTypeID is TL type id of ExportedMessageLink.
const ExportedMessageLinkTypeID = 0x5dab1af4

// Encode implements bin.Encoder.
func (e *ExportedMessageLink) Encode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode exportedMessageLink#5dab1af4 as nil")
	}
	b.PutID(ExportedMessageLinkTypeID)
	b.PutString(e.Link)
	b.PutString(e.HTML)
	return nil
}

// Decode implements bin.Decoder.
func (e *ExportedMessageLink) Decode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode exportedMessageLink#5dab1af4 to nil")
	}
	if err := b.ConsumeID(ExportedMessageLinkTypeID); err != nil {
		return fmt.Errorf("unable to decode exportedMessageLink#5dab1af4: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode exportedMessageLink#5dab1af4: field link: %w", err)
		}
		e.Link = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode exportedMessageLink#5dab1af4: field html: %w", err)
		}
		e.HTML = value
	}
	return nil
}

// Ensuring interfaces in compile-time for ExportedMessageLink.
var (
	_ bin.Encoder = &ExportedMessageLink{}
	_ bin.Decoder = &ExportedMessageLink{}
)
