// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// PageCaption represents TL type `pageCaption#6f747657`.
// Page caption
//
// See https://core.telegram.org/constructor/pageCaption for reference.
type PageCaption struct {
	// Caption
	Text RichTextClass
	// Credits
	Credit RichTextClass
}

// PageCaptionTypeID is TL type id of PageCaption.
const PageCaptionTypeID = 0x6f747657

// String implements fmt.Stringer.
func (p *PageCaption) String() string {
	if p == nil {
		return "PageCaption(nil)"
	}
	var sb strings.Builder
	sb.WriteString("PageCaption")
	sb.WriteString("{\n")
	sb.WriteString("\tText: ")
	sb.WriteString(p.Text.String())
	sb.WriteString(",\n")
	sb.WriteString("\tCredit: ")
	sb.WriteString(p.Credit.String())
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (p *PageCaption) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode pageCaption#6f747657 as nil")
	}
	b.PutID(PageCaptionTypeID)
	if p.Text == nil {
		return fmt.Errorf("unable to encode pageCaption#6f747657: field text is nil")
	}
	if err := p.Text.Encode(b); err != nil {
		return fmt.Errorf("unable to encode pageCaption#6f747657: field text: %w", err)
	}
	if p.Credit == nil {
		return fmt.Errorf("unable to encode pageCaption#6f747657: field credit is nil")
	}
	if err := p.Credit.Encode(b); err != nil {
		return fmt.Errorf("unable to encode pageCaption#6f747657: field credit: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (p *PageCaption) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode pageCaption#6f747657 to nil")
	}
	if err := b.ConsumeID(PageCaptionTypeID); err != nil {
		return fmt.Errorf("unable to decode pageCaption#6f747657: %w", err)
	}
	{
		value, err := DecodeRichText(b)
		if err != nil {
			return fmt.Errorf("unable to decode pageCaption#6f747657: field text: %w", err)
		}
		p.Text = value
	}
	{
		value, err := DecodeRichText(b)
		if err != nil {
			return fmt.Errorf("unable to decode pageCaption#6f747657: field credit: %w", err)
		}
		p.Credit = value
	}
	return nil
}

// Ensuring interfaces in compile-time for PageCaption.
var (
	_ bin.Encoder = &PageCaption{}
	_ bin.Decoder = &PageCaption{}
)
