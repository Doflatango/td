// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// PaymentsGetBankCardDataRequest represents TL type `payments.getBankCardData#2e79d779`.
//
// See https://core.telegram.org/method/payments.getBankCardData for reference.
type PaymentsGetBankCardDataRequest struct {
	// Number field of PaymentsGetBankCardDataRequest.
	Number string
}

// PaymentsGetBankCardDataRequestTypeID is TL type id of PaymentsGetBankCardDataRequest.
const PaymentsGetBankCardDataRequestTypeID = 0x2e79d779

// Encode implements bin.Encoder.
func (g *PaymentsGetBankCardDataRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode payments.getBankCardData#2e79d779 as nil")
	}
	b.PutID(PaymentsGetBankCardDataRequestTypeID)
	b.PutString(g.Number)
	return nil
}

// Decode implements bin.Decoder.
func (g *PaymentsGetBankCardDataRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode payments.getBankCardData#2e79d779 to nil")
	}
	if err := b.ConsumeID(PaymentsGetBankCardDataRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode payments.getBankCardData#2e79d779: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode payments.getBankCardData#2e79d779: field number: %w", err)
		}
		g.Number = value
	}
	return nil
}

// Ensuring interfaces in compile-time for PaymentsGetBankCardDataRequest.
var (
	_ bin.Encoder = &PaymentsGetBankCardDataRequest{}
	_ bin.Decoder = &PaymentsGetBankCardDataRequest{}
)

// PaymentsGetBankCardData invokes method payments.getBankCardData#2e79d779 returning error if any.
//
// See https://core.telegram.org/method/payments.getBankCardData for reference.
func (c *Client) PaymentsGetBankCardData(ctx context.Context, request *PaymentsGetBankCardDataRequest) (*PaymentsBankCardData, error) {
	var result PaymentsBankCardData
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
