// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// LangpackGetLangPackRequest represents TL type `langpack.getLangPack#f2f2330a`.
// Get localization pack strings
//
// See https://core.telegram.org/method/langpack.getLangPack for reference.
type LangpackGetLangPackRequest struct {
	// Language pack name
	LangPack string
	// Language code
	LangCode string
}

// LangpackGetLangPackRequestTypeID is TL type id of LangpackGetLangPackRequest.
const LangpackGetLangPackRequestTypeID = 0xf2f2330a

func (g *LangpackGetLangPackRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.LangPack == "") {
		return false
	}
	if !(g.LangCode == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *LangpackGetLangPackRequest) String() string {
	if g == nil {
		return "LangpackGetLangPackRequest(nil)"
	}
	var sb strings.Builder
	sb.WriteString("LangpackGetLangPackRequest")
	sb.WriteString("{\n")
	sb.WriteString("\tLangPack: ")
	sb.WriteString(fmt.Sprint(g.LangPack))
	sb.WriteString(",\n")
	sb.WriteString("\tLangCode: ")
	sb.WriteString(fmt.Sprint(g.LangCode))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (g *LangpackGetLangPackRequest) TypeID() uint32 {
	return LangpackGetLangPackRequestTypeID
}

// Encode implements bin.Encoder.
func (g *LangpackGetLangPackRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode langpack.getLangPack#f2f2330a as nil")
	}
	b.PutID(LangpackGetLangPackRequestTypeID)
	b.PutString(g.LangPack)
	b.PutString(g.LangCode)
	return nil
}

// GetLangPack returns value of LangPack field.
func (g *LangpackGetLangPackRequest) GetLangPack() (value string) {
	return g.LangPack
}

// GetLangCode returns value of LangCode field.
func (g *LangpackGetLangPackRequest) GetLangCode() (value string) {
	return g.LangCode
}

// Decode implements bin.Decoder.
func (g *LangpackGetLangPackRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode langpack.getLangPack#f2f2330a to nil")
	}
	if err := b.ConsumeID(LangpackGetLangPackRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode langpack.getLangPack#f2f2330a: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode langpack.getLangPack#f2f2330a: field lang_pack: %w", err)
		}
		g.LangPack = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode langpack.getLangPack#f2f2330a: field lang_code: %w", err)
		}
		g.LangCode = value
	}
	return nil
}

// Ensuring interfaces in compile-time for LangpackGetLangPackRequest.
var (
	_ bin.Encoder = &LangpackGetLangPackRequest{}
	_ bin.Decoder = &LangpackGetLangPackRequest{}
)

// LangpackGetLangPack invokes method langpack.getLangPack#f2f2330a returning error if any.
// Get localization pack strings
//
// Possible errors:
//  400 LANG_PACK_INVALID: The provided language pack is invalid
//
// See https://core.telegram.org/method/langpack.getLangPack for reference.
func (c *Client) LangpackGetLangPack(ctx context.Context, request *LangpackGetLangPackRequest) (*LangPackDifference, error) {
	var result LangPackDifference

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
