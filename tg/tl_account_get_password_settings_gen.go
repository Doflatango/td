// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// AccountGetPasswordSettingsRequest represents TL type `account.getPasswordSettings#9cd4eaf9`.
//
// See https://core.telegram.org/method/account.getPasswordSettings for reference.
type AccountGetPasswordSettingsRequest struct {
	// Password field of AccountGetPasswordSettingsRequest.
	Password InputCheckPasswordSRPClass
}

// AccountGetPasswordSettingsRequestTypeID is TL type id of AccountGetPasswordSettingsRequest.
const AccountGetPasswordSettingsRequestTypeID = 0x9cd4eaf9

// Encode implements bin.Encoder.
func (g *AccountGetPasswordSettingsRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode account.getPasswordSettings#9cd4eaf9 as nil")
	}
	b.PutID(AccountGetPasswordSettingsRequestTypeID)
	if g.Password == nil {
		return fmt.Errorf("unable to encode account.getPasswordSettings#9cd4eaf9: field password is nil")
	}
	if err := g.Password.Encode(b); err != nil {
		return fmt.Errorf("unable to encode account.getPasswordSettings#9cd4eaf9: field password: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (g *AccountGetPasswordSettingsRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode account.getPasswordSettings#9cd4eaf9 to nil")
	}
	if err := b.ConsumeID(AccountGetPasswordSettingsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode account.getPasswordSettings#9cd4eaf9: %w", err)
	}
	{
		value, err := DecodeInputCheckPasswordSRP(b)
		if err != nil {
			return fmt.Errorf("unable to decode account.getPasswordSettings#9cd4eaf9: field password: %w", err)
		}
		g.Password = value
	}
	return nil
}

// Ensuring interfaces in compile-time for AccountGetPasswordSettingsRequest.
var (
	_ bin.Encoder = &AccountGetPasswordSettingsRequest{}
	_ bin.Decoder = &AccountGetPasswordSettingsRequest{}
)

// AccountGetPasswordSettings invokes method account.getPasswordSettings#9cd4eaf9 returning error if any.
//
// See https://core.telegram.org/method/account.getPasswordSettings for reference.
func (c *Client) AccountGetPasswordSettings(ctx context.Context, request *AccountGetPasswordSettingsRequest) (*AccountPasswordSettings, error) {
	var result AccountPasswordSettings
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
