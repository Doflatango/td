// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesReadHistoryRequest represents TL type `messages.readHistory#e306d3a`.
type MessagesReadHistoryRequest struct {
	// Peer field of MessagesReadHistoryRequest.
	Peer InputPeerClass
	// MaxID field of MessagesReadHistoryRequest.
	MaxID int
}

// MessagesReadHistoryRequestTypeID is TL type id of MessagesReadHistoryRequest.
const MessagesReadHistoryRequestTypeID = 0xe306d3a

// Encode implements bin.Encoder.
func (r *MessagesReadHistoryRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode messages.readHistory#e306d3a as nil")
	}
	b.PutID(MessagesReadHistoryRequestTypeID)
	if r.Peer == nil {
		return fmt.Errorf("unable to encode messages.readHistory#e306d3a: field peer is nil")
	}
	if err := r.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.readHistory#e306d3a: field peer: %w", err)
	}
	b.PutInt(r.MaxID)
	return nil
}

// Decode implements bin.Decoder.
func (r *MessagesReadHistoryRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode messages.readHistory#e306d3a to nil")
	}
	if err := b.ConsumeID(MessagesReadHistoryRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.readHistory#e306d3a: %w", err)
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.readHistory#e306d3a: field peer: %w", err)
		}
		r.Peer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.readHistory#e306d3a: field max_id: %w", err)
		}
		r.MaxID = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesReadHistoryRequest.
var (
	_ bin.Encoder = &MessagesReadHistoryRequest{}
	_ bin.Decoder = &MessagesReadHistoryRequest{}
)
