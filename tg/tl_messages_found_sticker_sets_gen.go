// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesFoundStickerSetsNotModified represents TL type `messages.foundStickerSetsNotModified#d54b65d`.
type MessagesFoundStickerSetsNotModified struct {
}

// MessagesFoundStickerSetsNotModifiedTypeID is TL type id of MessagesFoundStickerSetsNotModified.
const MessagesFoundStickerSetsNotModifiedTypeID = 0xd54b65d

// Encode implements bin.Encoder.
func (f *MessagesFoundStickerSetsNotModified) Encode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't encode messages.foundStickerSetsNotModified#d54b65d as nil")
	}
	b.PutID(MessagesFoundStickerSetsNotModifiedTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (f *MessagesFoundStickerSetsNotModified) Decode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't decode messages.foundStickerSetsNotModified#d54b65d to nil")
	}
	if err := b.ConsumeID(MessagesFoundStickerSetsNotModifiedTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.foundStickerSetsNotModified#d54b65d: %w", err)
	}
	return nil
}

// construct implements constructor of MessagesFoundStickerSetsClass.
func (f MessagesFoundStickerSetsNotModified) construct() MessagesFoundStickerSetsClass { return &f }

// Ensuring interfaces in compile-time for MessagesFoundStickerSetsNotModified.
var (
	_ bin.Encoder = &MessagesFoundStickerSetsNotModified{}
	_ bin.Decoder = &MessagesFoundStickerSetsNotModified{}

	_ MessagesFoundStickerSetsClass = &MessagesFoundStickerSetsNotModified{}
)

// MessagesFoundStickerSets represents TL type `messages.foundStickerSets#5108d648`.
type MessagesFoundStickerSets struct {
	// Hash field of MessagesFoundStickerSets.
	Hash int
	// Sets field of MessagesFoundStickerSets.
	Sets []StickerSetCoveredClass
}

// MessagesFoundStickerSetsTypeID is TL type id of MessagesFoundStickerSets.
const MessagesFoundStickerSetsTypeID = 0x5108d648

// Encode implements bin.Encoder.
func (f *MessagesFoundStickerSets) Encode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't encode messages.foundStickerSets#5108d648 as nil")
	}
	b.PutID(MessagesFoundStickerSetsTypeID)
	b.PutInt(f.Hash)
	b.PutVectorHeader(len(f.Sets))
	for idx, v := range f.Sets {
		if v == nil {
			return fmt.Errorf("unable to encode messages.foundStickerSets#5108d648: field sets element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.foundStickerSets#5108d648: field sets element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (f *MessagesFoundStickerSets) Decode(b *bin.Buffer) error {
	if f == nil {
		return fmt.Errorf("can't decode messages.foundStickerSets#5108d648 to nil")
	}
	if err := b.ConsumeID(MessagesFoundStickerSetsTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.foundStickerSets#5108d648: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.foundStickerSets#5108d648: field hash: %w", err)
		}
		f.Hash = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.foundStickerSets#5108d648: field sets: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeStickerSetCovered(b)
			if err != nil {
				return fmt.Errorf("unable to decode messages.foundStickerSets#5108d648: field sets: %w", err)
			}
			f.Sets = append(f.Sets, value)
		}
	}
	return nil
}

// construct implements constructor of MessagesFoundStickerSetsClass.
func (f MessagesFoundStickerSets) construct() MessagesFoundStickerSetsClass { return &f }

// Ensuring interfaces in compile-time for MessagesFoundStickerSets.
var (
	_ bin.Encoder = &MessagesFoundStickerSets{}
	_ bin.Decoder = &MessagesFoundStickerSets{}

	_ MessagesFoundStickerSetsClass = &MessagesFoundStickerSets{}
)

// MessagesFoundStickerSetsClass represents messages.FoundStickerSets generic type.
//
// Example:
//  g, err := DecodeMessagesFoundStickerSets(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *MessagesFoundStickerSetsNotModified: // messages.foundStickerSetsNotModified#d54b65d
//  case *MessagesFoundStickerSets: // messages.foundStickerSets#5108d648
//  default: panic(v)
//  }
type MessagesFoundStickerSetsClass interface {
	bin.Encoder
	bin.Decoder
	construct() MessagesFoundStickerSetsClass
}

// DecodeMessagesFoundStickerSets implements binary de-serialization for MessagesFoundStickerSetsClass.
func DecodeMessagesFoundStickerSets(buf *bin.Buffer) (MessagesFoundStickerSetsClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case MessagesFoundStickerSetsNotModifiedTypeID:
		// Decoding messages.foundStickerSetsNotModified#d54b65d.
		v := MessagesFoundStickerSetsNotModified{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessagesFoundStickerSetsClass: %w", err)
		}
		return &v, nil
	case MessagesFoundStickerSetsTypeID:
		// Decoding messages.foundStickerSets#5108d648.
		v := MessagesFoundStickerSets{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessagesFoundStickerSetsClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode MessagesFoundStickerSetsClass: %w", bin.NewUnexpectedID(id))
	}
}

// MessagesFoundStickerSets boxes the MessagesFoundStickerSetsClass providing a helper.
type MessagesFoundStickerSetsBox struct {
	MessagesFoundStickerSets MessagesFoundStickerSetsClass
}

// Decode implements bin.Decoder for MessagesFoundStickerSetsBox.
func (b *MessagesFoundStickerSetsBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode MessagesFoundStickerSetsBox to nil")
	}
	v, err := DecodeMessagesFoundStickerSets(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.MessagesFoundStickerSets = v
	return nil
}

// Encode implements bin.Encode for MessagesFoundStickerSetsBox.
func (b *MessagesFoundStickerSetsBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.MessagesFoundStickerSets == nil {
		return fmt.Errorf("unable to encode MessagesFoundStickerSetsClass as nil")
	}
	return b.MessagesFoundStickerSets.Encode(buf)
}
