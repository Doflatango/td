// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is
var _ = sort.Ints

// UploadGetFileRequest represents TL type `upload.getFile#b15a9afc`.
// Returns content of a whole file or its part.
//
// See https://core.telegram.org/method/upload.getFile for reference.
type UploadGetFileRequest struct {
	// Flags, see TL conditional fields¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields `tl:"flags"`
	// Disable some checks on limit and offset values, useful for example to stream videos by keyframes
	Precise bool `tl:"precise"`
	// Whether the current client supports CDN downloads¹
	//
	// Links:
	//  1) https://core.telegram.org/cdn
	CDNSupported bool `tl:"cdn_supported"`
	// File location
	Location InputFileLocationClass `tl:"location"`
	// Number of bytes to be skipped
	Offset int `tl:"offset"`
	// Number of bytes to be returned
	Limit int `tl:"limit"`
}

// UploadGetFileRequestTypeID is TL type id of UploadGetFileRequest.
const UploadGetFileRequestTypeID = 0xb15a9afc

func (g *UploadGetFileRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.Flags.Zero()) {
		return false
	}
	if !(g.Precise == false) {
		return false
	}
	if !(g.CDNSupported == false) {
		return false
	}
	if !(g.Location == nil) {
		return false
	}
	if !(g.Offset == 0) {
		return false
	}
	if !(g.Limit == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *UploadGetFileRequest) String() string {
	if g == nil {
		return "UploadGetFileRequest(nil)"
	}
	type Alias UploadGetFileRequest
	return fmt.Sprintf("UploadGetFileRequest%+v", Alias(*g))
}

// FillFrom fills UploadGetFileRequest from given interface.
func (g *UploadGetFileRequest) FillFrom(from interface {
	GetPrecise() (value bool)
	GetCDNSupported() (value bool)
	GetLocation() (value InputFileLocationClass)
	GetOffset() (value int)
	GetLimit() (value int)
}) {
	g.Precise = from.GetPrecise()
	g.CDNSupported = from.GetCDNSupported()
	g.Location = from.GetLocation()
	g.Offset = from.GetOffset()
	g.Limit = from.GetLimit()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (g *UploadGetFileRequest) TypeID() uint32 {
	return UploadGetFileRequestTypeID
}

// TypeName returns name of type in TL schema.
func (g *UploadGetFileRequest) TypeName() string {
	return "upload.getFile"
}

// Encode implements bin.Encoder.
func (g *UploadGetFileRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode upload.getFile#b15a9afc as nil")
	}
	b.PutID(UploadGetFileRequestTypeID)
	if !(g.Precise == false) {
		g.Flags.Set(0)
	}
	if !(g.CDNSupported == false) {
		g.Flags.Set(1)
	}
	if err := g.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode upload.getFile#b15a9afc: field flags: %w", err)
	}
	if g.Location == nil {
		return fmt.Errorf("unable to encode upload.getFile#b15a9afc: field location is nil")
	}
	if err := g.Location.Encode(b); err != nil {
		return fmt.Errorf("unable to encode upload.getFile#b15a9afc: field location: %w", err)
	}
	b.PutInt(g.Offset)
	b.PutInt(g.Limit)
	return nil
}

// SetPrecise sets value of Precise conditional field.
func (g *UploadGetFileRequest) SetPrecise(value bool) {
	if value {
		g.Flags.Set(0)
		g.Precise = true
	} else {
		g.Flags.Unset(0)
		g.Precise = false
	}
}

// GetPrecise returns value of Precise conditional field.
func (g *UploadGetFileRequest) GetPrecise() (value bool) {
	return g.Flags.Has(0)
}

// SetCDNSupported sets value of CDNSupported conditional field.
func (g *UploadGetFileRequest) SetCDNSupported(value bool) {
	if value {
		g.Flags.Set(1)
		g.CDNSupported = true
	} else {
		g.Flags.Unset(1)
		g.CDNSupported = false
	}
}

// GetCDNSupported returns value of CDNSupported conditional field.
func (g *UploadGetFileRequest) GetCDNSupported() (value bool) {
	return g.Flags.Has(1)
}

// GetLocation returns value of Location field.
func (g *UploadGetFileRequest) GetLocation() (value InputFileLocationClass) {
	return g.Location
}

// GetOffset returns value of Offset field.
func (g *UploadGetFileRequest) GetOffset() (value int) {
	return g.Offset
}

// GetLimit returns value of Limit field.
func (g *UploadGetFileRequest) GetLimit() (value int) {
	return g.Limit
}

// Decode implements bin.Decoder.
func (g *UploadGetFileRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode upload.getFile#b15a9afc to nil")
	}
	if err := b.ConsumeID(UploadGetFileRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode upload.getFile#b15a9afc: %w", err)
	}
	{
		if err := g.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode upload.getFile#b15a9afc: field flags: %w", err)
		}
	}
	g.Precise = g.Flags.Has(0)
	g.CDNSupported = g.Flags.Has(1)
	{
		value, err := DecodeInputFileLocation(b)
		if err != nil {
			return fmt.Errorf("unable to decode upload.getFile#b15a9afc: field location: %w", err)
		}
		g.Location = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode upload.getFile#b15a9afc: field offset: %w", err)
		}
		g.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode upload.getFile#b15a9afc: field limit: %w", err)
		}
		g.Limit = value
	}
	return nil
}

// Ensuring interfaces in compile-time for UploadGetFileRequest.
var (
	_ bin.Encoder = &UploadGetFileRequest{}
	_ bin.Decoder = &UploadGetFileRequest{}
)

// UploadGetFile invokes method upload.getFile#b15a9afc returning error if any.
// Returns content of a whole file or its part.
//
// Possible errors:
//  401 AUTH_KEY_PERM_EMPTY: The temporary auth key must be binded to the permanent auth key to use these methods.
//  400 CHANNEL_INVALID: The provided channel is invalid
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  406 FILEREF_UPGRADE_NEEDED: The client has to be updated in order to support file references
//  400 FILE_ID_INVALID: The provided file id is invalid
//  400 FILE_REFERENCE_*: The file reference expired, it must be refreshed
//  400 FILE_REFERENCE_EXPIRED: File reference expired, it must be refetched as described in https://core.telegram.org/api/file_reference
//  400 LIMIT_INVALID: The provided limit is invalid
//  400 LOCATION_INVALID: The provided location is invalid
//  400 MSG_ID_INVALID: Invalid message ID provided
//  400 OFFSET_INVALID: The provided offset is invalid
//  400 PEER_ID_INVALID: The provided peer id is invalid
//
// See https://core.telegram.org/method/upload.getFile for reference.
// Can be used by bots.
func (c *Client) UploadGetFile(ctx context.Context, request *UploadGetFileRequest) (UploadFileClass, error) {
	var result UploadFileBox

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.File, nil
}
