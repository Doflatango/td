// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesSendScheduledMessagesRequest represents TL type `messages.sendScheduledMessages#bd38850a`.
type MessagesSendScheduledMessagesRequest struct {
	// Peer field of MessagesSendScheduledMessagesRequest.
	Peer InputPeerClass
	// ID field of MessagesSendScheduledMessagesRequest.
	ID []int
}

// MessagesSendScheduledMessagesRequestTypeID is TL type id of MessagesSendScheduledMessagesRequest.
const MessagesSendScheduledMessagesRequestTypeID = 0xbd38850a

// Encode implements bin.Encoder.
func (s *MessagesSendScheduledMessagesRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode messages.sendScheduledMessages#bd38850a as nil")
	}
	b.PutID(MessagesSendScheduledMessagesRequestTypeID)
	if s.Peer == nil {
		return fmt.Errorf("unable to encode messages.sendScheduledMessages#bd38850a: field peer is nil")
	}
	if err := s.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.sendScheduledMessages#bd38850a: field peer: %w", err)
	}
	b.PutVectorHeader(len(s.ID))
	for _, v := range s.ID {
		b.PutInt(v)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *MessagesSendScheduledMessagesRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode messages.sendScheduledMessages#bd38850a to nil")
	}
	if err := b.ConsumeID(MessagesSendScheduledMessagesRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.sendScheduledMessages#bd38850a: %w", err)
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.sendScheduledMessages#bd38850a: field peer: %w", err)
		}
		s.Peer = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.sendScheduledMessages#bd38850a: field id: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Int()
			if err != nil {
				return fmt.Errorf("unable to decode messages.sendScheduledMessages#bd38850a: field id: %w", err)
			}
			s.ID = append(s.ID, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesSendScheduledMessagesRequest.
var (
	_ bin.Encoder = &MessagesSendScheduledMessagesRequest{}
	_ bin.Decoder = &MessagesSendScheduledMessagesRequest{}
)

// MessagesSendScheduledMessages invokes method messages.sendScheduledMessages#bd38850a returning error if any.
func (c *Client) MessagesSendScheduledMessages(ctx context.Context, request *MessagesSendScheduledMessagesRequest) (UpdatesClass, error) {
	var result UpdatesBox
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
