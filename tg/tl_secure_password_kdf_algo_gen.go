// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// SecurePasswordKdfAlgoUnknown represents TL type `securePasswordKdfAlgoUnknown#4a8537`.
type SecurePasswordKdfAlgoUnknown struct {
}

// SecurePasswordKdfAlgoUnknownTypeID is TL type id of SecurePasswordKdfAlgoUnknown.
const SecurePasswordKdfAlgoUnknownTypeID = 0x4a8537

// Encode implements bin.Encoder.
func (s *SecurePasswordKdfAlgoUnknown) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode securePasswordKdfAlgoUnknown#4a8537 as nil")
	}
	b.PutID(SecurePasswordKdfAlgoUnknownTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (s *SecurePasswordKdfAlgoUnknown) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode securePasswordKdfAlgoUnknown#4a8537 to nil")
	}
	if err := b.ConsumeID(SecurePasswordKdfAlgoUnknownTypeID); err != nil {
		return fmt.Errorf("unable to decode securePasswordKdfAlgoUnknown#4a8537: %w", err)
	}
	return nil
}

// construct implements constructor of SecurePasswordKdfAlgoClass.
func (s SecurePasswordKdfAlgoUnknown) construct() SecurePasswordKdfAlgoClass { return &s }

// Ensuring interfaces in compile-time for SecurePasswordKdfAlgoUnknown.
var (
	_ bin.Encoder = &SecurePasswordKdfAlgoUnknown{}
	_ bin.Decoder = &SecurePasswordKdfAlgoUnknown{}

	_ SecurePasswordKdfAlgoClass = &SecurePasswordKdfAlgoUnknown{}
)

// SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 represents TL type `securePasswordKdfAlgoPBKDF2HMACSHA512iter100000#bbf2dda0`.
type SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000 struct {
	// Salt field of SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000.
	Salt []byte
}

// SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000TypeID is TL type id of SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000.
const SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000TypeID = 0xbbf2dda0

// Encode implements bin.Encoder.
func (s *SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode securePasswordKdfAlgoPBKDF2HMACSHA512iter100000#bbf2dda0 as nil")
	}
	b.PutID(SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000TypeID)
	b.PutBytes(s.Salt)
	return nil
}

// Decode implements bin.Decoder.
func (s *SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode securePasswordKdfAlgoPBKDF2HMACSHA512iter100000#bbf2dda0 to nil")
	}
	if err := b.ConsumeID(SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000TypeID); err != nil {
		return fmt.Errorf("unable to decode securePasswordKdfAlgoPBKDF2HMACSHA512iter100000#bbf2dda0: %w", err)
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode securePasswordKdfAlgoPBKDF2HMACSHA512iter100000#bbf2dda0: field salt: %w", err)
		}
		s.Salt = value
	}
	return nil
}

// construct implements constructor of SecurePasswordKdfAlgoClass.
func (s SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000) construct() SecurePasswordKdfAlgoClass {
	return &s
}

// Ensuring interfaces in compile-time for SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000.
var (
	_ bin.Encoder = &SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000{}
	_ bin.Decoder = &SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000{}

	_ SecurePasswordKdfAlgoClass = &SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000{}
)

// SecurePasswordKdfAlgoSHA512 represents TL type `securePasswordKdfAlgoSHA512#86471d92`.
type SecurePasswordKdfAlgoSHA512 struct {
	// Salt field of SecurePasswordKdfAlgoSHA512.
	Salt []byte
}

// SecurePasswordKdfAlgoSHA512TypeID is TL type id of SecurePasswordKdfAlgoSHA512.
const SecurePasswordKdfAlgoSHA512TypeID = 0x86471d92

// Encode implements bin.Encoder.
func (s *SecurePasswordKdfAlgoSHA512) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode securePasswordKdfAlgoSHA512#86471d92 as nil")
	}
	b.PutID(SecurePasswordKdfAlgoSHA512TypeID)
	b.PutBytes(s.Salt)
	return nil
}

// Decode implements bin.Decoder.
func (s *SecurePasswordKdfAlgoSHA512) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode securePasswordKdfAlgoSHA512#86471d92 to nil")
	}
	if err := b.ConsumeID(SecurePasswordKdfAlgoSHA512TypeID); err != nil {
		return fmt.Errorf("unable to decode securePasswordKdfAlgoSHA512#86471d92: %w", err)
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode securePasswordKdfAlgoSHA512#86471d92: field salt: %w", err)
		}
		s.Salt = value
	}
	return nil
}

// construct implements constructor of SecurePasswordKdfAlgoClass.
func (s SecurePasswordKdfAlgoSHA512) construct() SecurePasswordKdfAlgoClass { return &s }

// Ensuring interfaces in compile-time for SecurePasswordKdfAlgoSHA512.
var (
	_ bin.Encoder = &SecurePasswordKdfAlgoSHA512{}
	_ bin.Decoder = &SecurePasswordKdfAlgoSHA512{}

	_ SecurePasswordKdfAlgoClass = &SecurePasswordKdfAlgoSHA512{}
)

// SecurePasswordKdfAlgoClass represents SecurePasswordKdfAlgo generic type.
//
// Example:
//  g, err := DecodeSecurePasswordKdfAlgo(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *SecurePasswordKdfAlgoUnknown: // securePasswordKdfAlgoUnknown#4a8537
//  case *SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000: // securePasswordKdfAlgoPBKDF2HMACSHA512iter100000#bbf2dda0
//  case *SecurePasswordKdfAlgoSHA512: // securePasswordKdfAlgoSHA512#86471d92
//  default: panic(v)
//  }
type SecurePasswordKdfAlgoClass interface {
	bin.Encoder
	bin.Decoder
	construct() SecurePasswordKdfAlgoClass
}

// DecodeSecurePasswordKdfAlgo implements binary de-serialization for SecurePasswordKdfAlgoClass.
func DecodeSecurePasswordKdfAlgo(buf *bin.Buffer) (SecurePasswordKdfAlgoClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case SecurePasswordKdfAlgoUnknownTypeID:
		// Decoding securePasswordKdfAlgoUnknown#4a8537.
		v := SecurePasswordKdfAlgoUnknown{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode SecurePasswordKdfAlgoClass: %w", err)
		}
		return &v, nil
	case SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000TypeID:
		// Decoding securePasswordKdfAlgoPBKDF2HMACSHA512iter100000#bbf2dda0.
		v := SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode SecurePasswordKdfAlgoClass: %w", err)
		}
		return &v, nil
	case SecurePasswordKdfAlgoSHA512TypeID:
		// Decoding securePasswordKdfAlgoSHA512#86471d92.
		v := SecurePasswordKdfAlgoSHA512{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode SecurePasswordKdfAlgoClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode SecurePasswordKdfAlgoClass: %w", bin.NewUnexpectedID(id))
	}
}
