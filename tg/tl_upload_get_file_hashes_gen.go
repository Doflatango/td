// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// UploadGetFileHashesRequest represents TL type `upload.getFileHashes#c7025931`.
type UploadGetFileHashesRequest struct {
	// Location field of UploadGetFileHashesRequest.
	Location InputFileLocationClass
	// Offset field of UploadGetFileHashesRequest.
	Offset int
}

// UploadGetFileHashesRequestTypeID is TL type id of UploadGetFileHashesRequest.
const UploadGetFileHashesRequestTypeID = 0xc7025931

// Encode implements bin.Encoder.
func (g *UploadGetFileHashesRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode upload.getFileHashes#c7025931 as nil")
	}
	b.PutID(UploadGetFileHashesRequestTypeID)
	if g.Location == nil {
		return fmt.Errorf("unable to encode upload.getFileHashes#c7025931: field location is nil")
	}
	if err := g.Location.Encode(b); err != nil {
		return fmt.Errorf("unable to encode upload.getFileHashes#c7025931: field location: %w", err)
	}
	b.PutInt(g.Offset)
	return nil
}

// Decode implements bin.Decoder.
func (g *UploadGetFileHashesRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode upload.getFileHashes#c7025931 to nil")
	}
	if err := b.ConsumeID(UploadGetFileHashesRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode upload.getFileHashes#c7025931: %w", err)
	}
	{
		value, err := DecodeInputFileLocation(b)
		if err != nil {
			return fmt.Errorf("unable to decode upload.getFileHashes#c7025931: field location: %w", err)
		}
		g.Location = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode upload.getFileHashes#c7025931: field offset: %w", err)
		}
		g.Offset = value
	}
	return nil
}

// Ensuring interfaces in compile-time for UploadGetFileHashesRequest.
var (
	_ bin.Encoder = &UploadGetFileHashesRequest{}
	_ bin.Decoder = &UploadGetFileHashesRequest{}
)
