// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// Authorization represents TL type `authorization#ad01d61d`.
// Logged-in session
//
// See https://core.telegram.org/constructor/authorization for reference.
type Authorization struct {
	// Flags, see TL conditional fields¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// Whether this is the current session
	Current bool
	// Whether the session is from an official app
	OfficialApp bool
	// Whether the session is still waiting for a 2FA password
	PasswordPending bool
	// Identifier
	Hash int64
	// Device model
	DeviceModel string
	// Platform
	Platform string
	// System version
	SystemVersion string
	// API ID¹
	//
	// Links:
	//  1) https://core.telegram.org/api/obtaining_api_id
	APIID int
	// App name
	AppName string
	// App version
	AppVersion string
	// When was the session created
	DateCreated int
	// When was the session last active
	DateActive int
	// Last known IP
	IP string
	// Country determined from IP
	Country string
	// Region determined from IP
	Region string
}

// AuthorizationTypeID is TL type id of Authorization.
const AuthorizationTypeID = 0xad01d61d

// String implements fmt.Stringer.
func (a *Authorization) String() string {
	if a == nil {
		return "Authorization(nil)"
	}
	var sb strings.Builder
	sb.WriteString("Authorization")
	sb.WriteString("{\n")
	sb.WriteString("\tFlags: ")
	sb.WriteString(a.Flags.String())
	sb.WriteString(",\n")
	sb.WriteString("\tHash: ")
	sb.WriteString(fmt.Sprint(a.Hash))
	sb.WriteString(",\n")
	sb.WriteString("\tDeviceModel: ")
	sb.WriteString(fmt.Sprint(a.DeviceModel))
	sb.WriteString(",\n")
	sb.WriteString("\tPlatform: ")
	sb.WriteString(fmt.Sprint(a.Platform))
	sb.WriteString(",\n")
	sb.WriteString("\tSystemVersion: ")
	sb.WriteString(fmt.Sprint(a.SystemVersion))
	sb.WriteString(",\n")
	sb.WriteString("\tAPIID: ")
	sb.WriteString(fmt.Sprint(a.APIID))
	sb.WriteString(",\n")
	sb.WriteString("\tAppName: ")
	sb.WriteString(fmt.Sprint(a.AppName))
	sb.WriteString(",\n")
	sb.WriteString("\tAppVersion: ")
	sb.WriteString(fmt.Sprint(a.AppVersion))
	sb.WriteString(",\n")
	sb.WriteString("\tDateCreated: ")
	sb.WriteString(fmt.Sprint(a.DateCreated))
	sb.WriteString(",\n")
	sb.WriteString("\tDateActive: ")
	sb.WriteString(fmt.Sprint(a.DateActive))
	sb.WriteString(",\n")
	sb.WriteString("\tIP: ")
	sb.WriteString(fmt.Sprint(a.IP))
	sb.WriteString(",\n")
	sb.WriteString("\tCountry: ")
	sb.WriteString(fmt.Sprint(a.Country))
	sb.WriteString(",\n")
	sb.WriteString("\tRegion: ")
	sb.WriteString(fmt.Sprint(a.Region))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (a *Authorization) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode authorization#ad01d61d as nil")
	}
	b.PutID(AuthorizationTypeID)
	if err := a.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode authorization#ad01d61d: field flags: %w", err)
	}
	b.PutLong(a.Hash)
	b.PutString(a.DeviceModel)
	b.PutString(a.Platform)
	b.PutString(a.SystemVersion)
	b.PutInt(a.APIID)
	b.PutString(a.AppName)
	b.PutString(a.AppVersion)
	b.PutInt(a.DateCreated)
	b.PutInt(a.DateActive)
	b.PutString(a.IP)
	b.PutString(a.Country)
	b.PutString(a.Region)
	return nil
}

// SetCurrent sets value of Current conditional field.
func (a *Authorization) SetCurrent(value bool) {
	if value {
		a.Flags.Set(0)
		a.Current = true
	} else {
		a.Flags.Unset(0)
		a.Current = false
	}
}

// SetOfficialApp sets value of OfficialApp conditional field.
func (a *Authorization) SetOfficialApp(value bool) {
	if value {
		a.Flags.Set(1)
		a.OfficialApp = true
	} else {
		a.Flags.Unset(1)
		a.OfficialApp = false
	}
}

// SetPasswordPending sets value of PasswordPending conditional field.
func (a *Authorization) SetPasswordPending(value bool) {
	if value {
		a.Flags.Set(2)
		a.PasswordPending = true
	} else {
		a.Flags.Unset(2)
		a.PasswordPending = false
	}
}

// Decode implements bin.Decoder.
func (a *Authorization) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode authorization#ad01d61d to nil")
	}
	if err := b.ConsumeID(AuthorizationTypeID); err != nil {
		return fmt.Errorf("unable to decode authorization#ad01d61d: %w", err)
	}
	{
		if err := a.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode authorization#ad01d61d: field flags: %w", err)
		}
	}
	a.Current = a.Flags.Has(0)
	a.OfficialApp = a.Flags.Has(1)
	a.PasswordPending = a.Flags.Has(2)
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode authorization#ad01d61d: field hash: %w", err)
		}
		a.Hash = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode authorization#ad01d61d: field device_model: %w", err)
		}
		a.DeviceModel = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode authorization#ad01d61d: field platform: %w", err)
		}
		a.Platform = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode authorization#ad01d61d: field system_version: %w", err)
		}
		a.SystemVersion = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode authorization#ad01d61d: field api_id: %w", err)
		}
		a.APIID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode authorization#ad01d61d: field app_name: %w", err)
		}
		a.AppName = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode authorization#ad01d61d: field app_version: %w", err)
		}
		a.AppVersion = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode authorization#ad01d61d: field date_created: %w", err)
		}
		a.DateCreated = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode authorization#ad01d61d: field date_active: %w", err)
		}
		a.DateActive = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode authorization#ad01d61d: field ip: %w", err)
		}
		a.IP = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode authorization#ad01d61d: field country: %w", err)
		}
		a.Country = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode authorization#ad01d61d: field region: %w", err)
		}
		a.Region = value
	}
	return nil
}

// Ensuring interfaces in compile-time for Authorization.
var (
	_ bin.Encoder = &Authorization{}
	_ bin.Decoder = &Authorization{}
)
