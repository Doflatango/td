// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// InitConnectionRequest represents TL type `initConnection#c1cd5ea9`.
// Initialize connection
//
// See https://core.telegram.org/constructor/initConnection for reference.
type InitConnectionRequest struct {
	// Flags, see TL conditional fields¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// Application identifier (see. App configuration¹)
	//
	// Links:
	//  1) https://core.telegram.org/myapp
	APIID int
	// Device model
	DeviceModel string
	// Operation system version
	SystemVersion string
	// Application version
	AppVersion string
	// Code for the language used on the device's OS, ISO 639-1 standard
	SystemLangCode string
	// Language pack to use
	LangPack string
	// Code for the language used on the client, ISO 639-1 standard
	LangCode string
	// Info about an MTProto proxy
	//
	// Use SetProxy and GetProxy helpers.
	Proxy InputClientProxy
	// Additional initConnection parameters. For now, only the tz_offset field is supported, for specifying timezone offset in seconds.
	//
	// Use SetParams and GetParams helpers.
	Params JSONValueClass
	// The query itself
	Query bin.Object
}

// InitConnectionRequestTypeID is TL type id of InitConnectionRequest.
const InitConnectionRequestTypeID = 0xc1cd5ea9

func (i *InitConnectionRequest) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.Flags.Zero()) {
		return false
	}
	if !(i.APIID == 0) {
		return false
	}
	if !(i.DeviceModel == "") {
		return false
	}
	if !(i.SystemVersion == "") {
		return false
	}
	if !(i.AppVersion == "") {
		return false
	}
	if !(i.SystemLangCode == "") {
		return false
	}
	if !(i.LangPack == "") {
		return false
	}
	if !(i.LangCode == "") {
		return false
	}
	if !(i.Proxy.Zero()) {
		return false
	}
	if !(i.Params == nil) {
		return false
	}
	if !(i.Query == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InitConnectionRequest) String() string {
	if i == nil {
		return "InitConnectionRequest(nil)"
	}
	var sb strings.Builder
	sb.WriteString("InitConnectionRequest")
	sb.WriteString("{\n")
	sb.WriteString("\tFlags: ")
	sb.WriteString(fmt.Sprint(i.Flags))
	sb.WriteString(",\n")
	sb.WriteString("\tAPIID: ")
	sb.WriteString(fmt.Sprint(i.APIID))
	sb.WriteString(",\n")
	sb.WriteString("\tDeviceModel: ")
	sb.WriteString(fmt.Sprint(i.DeviceModel))
	sb.WriteString(",\n")
	sb.WriteString("\tSystemVersion: ")
	sb.WriteString(fmt.Sprint(i.SystemVersion))
	sb.WriteString(",\n")
	sb.WriteString("\tAppVersion: ")
	sb.WriteString(fmt.Sprint(i.AppVersion))
	sb.WriteString(",\n")
	sb.WriteString("\tSystemLangCode: ")
	sb.WriteString(fmt.Sprint(i.SystemLangCode))
	sb.WriteString(",\n")
	sb.WriteString("\tLangPack: ")
	sb.WriteString(fmt.Sprint(i.LangPack))
	sb.WriteString(",\n")
	sb.WriteString("\tLangCode: ")
	sb.WriteString(fmt.Sprint(i.LangCode))
	sb.WriteString(",\n")
	if i.Flags.Has(0) {
		sb.WriteString("\tProxy: ")
		sb.WriteString(fmt.Sprint(i.Proxy))
		sb.WriteString(",\n")
	}
	if i.Flags.Has(1) {
		sb.WriteString("\tParams: ")
		sb.WriteString(fmt.Sprint(i.Params))
		sb.WriteString(",\n")
	}
	sb.WriteString("\tQuery: ")
	sb.WriteString(fmt.Sprint(i.Query))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (i *InitConnectionRequest) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode initConnection#c1cd5ea9 as nil")
	}
	b.PutID(InitConnectionRequestTypeID)
	if !(i.Proxy.Zero()) {
		i.Flags.Set(0)
	}
	if !(i.Params == nil) {
		i.Flags.Set(1)
	}
	if err := i.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode initConnection#c1cd5ea9: field flags: %w", err)
	}
	b.PutInt(i.APIID)
	b.PutString(i.DeviceModel)
	b.PutString(i.SystemVersion)
	b.PutString(i.AppVersion)
	b.PutString(i.SystemLangCode)
	b.PutString(i.LangPack)
	b.PutString(i.LangCode)
	if i.Flags.Has(0) {
		if err := i.Proxy.Encode(b); err != nil {
			return fmt.Errorf("unable to encode initConnection#c1cd5ea9: field proxy: %w", err)
		}
	}
	if i.Flags.Has(1) {
		if i.Params == nil {
			return fmt.Errorf("unable to encode initConnection#c1cd5ea9: field params is nil")
		}
		if err := i.Params.Encode(b); err != nil {
			return fmt.Errorf("unable to encode initConnection#c1cd5ea9: field params: %w", err)
		}
	}
	if err := i.Query.Encode(b); err != nil {
		return fmt.Errorf("unable to encode initConnection#c1cd5ea9: field query: %w", err)
	}
	return nil
}

// SetProxy sets value of Proxy conditional field.
func (i *InitConnectionRequest) SetProxy(value InputClientProxy) {
	i.Flags.Set(0)
	i.Proxy = value
}

// GetProxy returns value of Proxy conditional field and
// boolean which is true if field was set.
func (i *InitConnectionRequest) GetProxy() (value InputClientProxy, ok bool) {
	if !i.Flags.Has(0) {
		return value, false
	}
	return i.Proxy, true
}

// SetParams sets value of Params conditional field.
func (i *InitConnectionRequest) SetParams(value JSONValueClass) {
	i.Flags.Set(1)
	i.Params = value
}

// GetParams returns value of Params conditional field and
// boolean which is true if field was set.
func (i *InitConnectionRequest) GetParams() (value JSONValueClass, ok bool) {
	if !i.Flags.Has(1) {
		return value, false
	}
	return i.Params, true
}

// Decode implements bin.Decoder.
func (i *InitConnectionRequest) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode initConnection#c1cd5ea9 to nil")
	}
	if err := b.ConsumeID(InitConnectionRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode initConnection#c1cd5ea9: %w", err)
	}
	{
		if err := i.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode initConnection#c1cd5ea9: field flags: %w", err)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode initConnection#c1cd5ea9: field api_id: %w", err)
		}
		i.APIID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode initConnection#c1cd5ea9: field device_model: %w", err)
		}
		i.DeviceModel = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode initConnection#c1cd5ea9: field system_version: %w", err)
		}
		i.SystemVersion = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode initConnection#c1cd5ea9: field app_version: %w", err)
		}
		i.AppVersion = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode initConnection#c1cd5ea9: field system_lang_code: %w", err)
		}
		i.SystemLangCode = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode initConnection#c1cd5ea9: field lang_pack: %w", err)
		}
		i.LangPack = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode initConnection#c1cd5ea9: field lang_code: %w", err)
		}
		i.LangCode = value
	}
	if i.Flags.Has(0) {
		if err := i.Proxy.Decode(b); err != nil {
			return fmt.Errorf("unable to decode initConnection#c1cd5ea9: field proxy: %w", err)
		}
	}
	if i.Flags.Has(1) {
		value, err := DecodeJSONValue(b)
		if err != nil {
			return fmt.Errorf("unable to decode initConnection#c1cd5ea9: field params: %w", err)
		}
		i.Params = value
	}
	{
		if err := i.Query.Decode(b); err != nil {
			return fmt.Errorf("unable to decode initConnection#c1cd5ea9: field query: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for InitConnectionRequest.
var (
	_ bin.Encoder = &InitConnectionRequest{}
	_ bin.Decoder = &InitConnectionRequest{}
)
