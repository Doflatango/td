// Code generated by gotdgen, DO NOT EDIT.

package e2e

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// Int represents TL type `int#a8509bda`.
//
// See https://core.telegram.org/constructor/int for reference.
type Int struct {
}

// IntTypeID is TL type id of Int.
const IntTypeID = 0xa8509bda

func (i *Int) Zero() bool {
	if i == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (i *Int) String() string {
	if i == nil {
		return "Int(nil)"
	}
	var sb strings.Builder
	sb.WriteString("Int")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (i *Int) TypeID() uint32 {
	return IntTypeID
}

// Encode implements bin.Encoder.
func (i *Int) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode int#a8509bda as nil")
	}
	b.PutID(IntTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (i *Int) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode int#a8509bda to nil")
	}
	if err := b.ConsumeID(IntTypeID); err != nil {
		return fmt.Errorf("unable to decode int#a8509bda: %w", err)
	}
	return nil
}

// Ensuring interfaces in compile-time for Int.
var (
	_ bin.Encoder = &Int{}
	_ bin.Decoder = &Int{}
)
