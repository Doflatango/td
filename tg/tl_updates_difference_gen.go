// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// UpdatesDifferenceEmpty represents TL type `updates.differenceEmpty#5d75a138`.
type UpdatesDifferenceEmpty struct {
	// Date field of UpdatesDifferenceEmpty.
	Date int
	// Seq field of UpdatesDifferenceEmpty.
	Seq int
}

// UpdatesDifferenceEmptyTypeID is TL type id of UpdatesDifferenceEmpty.
const UpdatesDifferenceEmptyTypeID = 0x5d75a138

// Encode implements bin.Encoder.
func (d *UpdatesDifferenceEmpty) Encode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode updates.differenceEmpty#5d75a138 as nil")
	}
	b.PutID(UpdatesDifferenceEmptyTypeID)
	b.PutInt(d.Date)
	b.PutInt(d.Seq)
	return nil
}

// Decode implements bin.Decoder.
func (d *UpdatesDifferenceEmpty) Decode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode updates.differenceEmpty#5d75a138 to nil")
	}
	if err := b.ConsumeID(UpdatesDifferenceEmptyTypeID); err != nil {
		return fmt.Errorf("unable to decode updates.differenceEmpty#5d75a138: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updates.differenceEmpty#5d75a138: field date: %w", err)
		}
		d.Date = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updates.differenceEmpty#5d75a138: field seq: %w", err)
		}
		d.Seq = value
	}
	return nil
}

// construct implements constructor of UpdatesDifferenceClass.
func (d UpdatesDifferenceEmpty) construct() UpdatesDifferenceClass { return &d }

// Ensuring interfaces in compile-time for UpdatesDifferenceEmpty.
var (
	_ bin.Encoder = &UpdatesDifferenceEmpty{}
	_ bin.Decoder = &UpdatesDifferenceEmpty{}

	_ UpdatesDifferenceClass = &UpdatesDifferenceEmpty{}
)

// UpdatesDifference represents TL type `updates.difference#f49ca0`.
type UpdatesDifference struct {
	// NewMessages field of UpdatesDifference.
	NewMessages []MessageClass
	// NewEncryptedMessages field of UpdatesDifference.
	NewEncryptedMessages []EncryptedMessageClass
	// OtherUpdates field of UpdatesDifference.
	OtherUpdates []UpdateClass
	// Chats field of UpdatesDifference.
	Chats []ChatClass
	// Users field of UpdatesDifference.
	Users []UserClass
	// State field of UpdatesDifference.
	State UpdatesState
}

// UpdatesDifferenceTypeID is TL type id of UpdatesDifference.
const UpdatesDifferenceTypeID = 0xf49ca0

// Encode implements bin.Encoder.
func (d *UpdatesDifference) Encode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode updates.difference#f49ca0 as nil")
	}
	b.PutID(UpdatesDifferenceTypeID)
	b.PutVectorHeader(len(d.NewMessages))
	for idx, v := range d.NewMessages {
		if v == nil {
			return fmt.Errorf("unable to encode updates.difference#f49ca0: field new_messages element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updates.difference#f49ca0: field new_messages element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(d.NewEncryptedMessages))
	for idx, v := range d.NewEncryptedMessages {
		if v == nil {
			return fmt.Errorf("unable to encode updates.difference#f49ca0: field new_encrypted_messages element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updates.difference#f49ca0: field new_encrypted_messages element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(d.OtherUpdates))
	for idx, v := range d.OtherUpdates {
		if v == nil {
			return fmt.Errorf("unable to encode updates.difference#f49ca0: field other_updates element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updates.difference#f49ca0: field other_updates element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(d.Chats))
	for idx, v := range d.Chats {
		if v == nil {
			return fmt.Errorf("unable to encode updates.difference#f49ca0: field chats element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updates.difference#f49ca0: field chats element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(d.Users))
	for idx, v := range d.Users {
		if v == nil {
			return fmt.Errorf("unable to encode updates.difference#f49ca0: field users element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updates.difference#f49ca0: field users element with index %d: %w", idx, err)
		}
	}
	if err := d.State.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updates.difference#f49ca0: field state: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (d *UpdatesDifference) Decode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode updates.difference#f49ca0 to nil")
	}
	if err := b.ConsumeID(UpdatesDifferenceTypeID); err != nil {
		return fmt.Errorf("unable to decode updates.difference#f49ca0: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updates.difference#f49ca0: field new_messages: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeMessage(b)
			if err != nil {
				return fmt.Errorf("unable to decode updates.difference#f49ca0: field new_messages: %w", err)
			}
			d.NewMessages = append(d.NewMessages, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updates.difference#f49ca0: field new_encrypted_messages: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeEncryptedMessage(b)
			if err != nil {
				return fmt.Errorf("unable to decode updates.difference#f49ca0: field new_encrypted_messages: %w", err)
			}
			d.NewEncryptedMessages = append(d.NewEncryptedMessages, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updates.difference#f49ca0: field other_updates: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUpdate(b)
			if err != nil {
				return fmt.Errorf("unable to decode updates.difference#f49ca0: field other_updates: %w", err)
			}
			d.OtherUpdates = append(d.OtherUpdates, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updates.difference#f49ca0: field chats: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeChat(b)
			if err != nil {
				return fmt.Errorf("unable to decode updates.difference#f49ca0: field chats: %w", err)
			}
			d.Chats = append(d.Chats, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updates.difference#f49ca0: field users: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(b)
			if err != nil {
				return fmt.Errorf("unable to decode updates.difference#f49ca0: field users: %w", err)
			}
			d.Users = append(d.Users, value)
		}
	}
	{
		if err := d.State.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updates.difference#f49ca0: field state: %w", err)
		}
	}
	return nil
}

// construct implements constructor of UpdatesDifferenceClass.
func (d UpdatesDifference) construct() UpdatesDifferenceClass { return &d }

// Ensuring interfaces in compile-time for UpdatesDifference.
var (
	_ bin.Encoder = &UpdatesDifference{}
	_ bin.Decoder = &UpdatesDifference{}

	_ UpdatesDifferenceClass = &UpdatesDifference{}
)

// UpdatesDifferenceSlice represents TL type `updates.differenceSlice#a8fb1981`.
type UpdatesDifferenceSlice struct {
	// NewMessages field of UpdatesDifferenceSlice.
	NewMessages []MessageClass
	// NewEncryptedMessages field of UpdatesDifferenceSlice.
	NewEncryptedMessages []EncryptedMessageClass
	// OtherUpdates field of UpdatesDifferenceSlice.
	OtherUpdates []UpdateClass
	// Chats field of UpdatesDifferenceSlice.
	Chats []ChatClass
	// Users field of UpdatesDifferenceSlice.
	Users []UserClass
	// IntermediateState field of UpdatesDifferenceSlice.
	IntermediateState UpdatesState
}

// UpdatesDifferenceSliceTypeID is TL type id of UpdatesDifferenceSlice.
const UpdatesDifferenceSliceTypeID = 0xa8fb1981

// Encode implements bin.Encoder.
func (d *UpdatesDifferenceSlice) Encode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode updates.differenceSlice#a8fb1981 as nil")
	}
	b.PutID(UpdatesDifferenceSliceTypeID)
	b.PutVectorHeader(len(d.NewMessages))
	for idx, v := range d.NewMessages {
		if v == nil {
			return fmt.Errorf("unable to encode updates.differenceSlice#a8fb1981: field new_messages element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updates.differenceSlice#a8fb1981: field new_messages element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(d.NewEncryptedMessages))
	for idx, v := range d.NewEncryptedMessages {
		if v == nil {
			return fmt.Errorf("unable to encode updates.differenceSlice#a8fb1981: field new_encrypted_messages element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updates.differenceSlice#a8fb1981: field new_encrypted_messages element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(d.OtherUpdates))
	for idx, v := range d.OtherUpdates {
		if v == nil {
			return fmt.Errorf("unable to encode updates.differenceSlice#a8fb1981: field other_updates element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updates.differenceSlice#a8fb1981: field other_updates element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(d.Chats))
	for idx, v := range d.Chats {
		if v == nil {
			return fmt.Errorf("unable to encode updates.differenceSlice#a8fb1981: field chats element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updates.differenceSlice#a8fb1981: field chats element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(d.Users))
	for idx, v := range d.Users {
		if v == nil {
			return fmt.Errorf("unable to encode updates.differenceSlice#a8fb1981: field users element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode updates.differenceSlice#a8fb1981: field users element with index %d: %w", idx, err)
		}
	}
	if err := d.IntermediateState.Encode(b); err != nil {
		return fmt.Errorf("unable to encode updates.differenceSlice#a8fb1981: field intermediate_state: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (d *UpdatesDifferenceSlice) Decode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode updates.differenceSlice#a8fb1981 to nil")
	}
	if err := b.ConsumeID(UpdatesDifferenceSliceTypeID); err != nil {
		return fmt.Errorf("unable to decode updates.differenceSlice#a8fb1981: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updates.differenceSlice#a8fb1981: field new_messages: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeMessage(b)
			if err != nil {
				return fmt.Errorf("unable to decode updates.differenceSlice#a8fb1981: field new_messages: %w", err)
			}
			d.NewMessages = append(d.NewMessages, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updates.differenceSlice#a8fb1981: field new_encrypted_messages: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeEncryptedMessage(b)
			if err != nil {
				return fmt.Errorf("unable to decode updates.differenceSlice#a8fb1981: field new_encrypted_messages: %w", err)
			}
			d.NewEncryptedMessages = append(d.NewEncryptedMessages, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updates.differenceSlice#a8fb1981: field other_updates: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUpdate(b)
			if err != nil {
				return fmt.Errorf("unable to decode updates.differenceSlice#a8fb1981: field other_updates: %w", err)
			}
			d.OtherUpdates = append(d.OtherUpdates, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updates.differenceSlice#a8fb1981: field chats: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeChat(b)
			if err != nil {
				return fmt.Errorf("unable to decode updates.differenceSlice#a8fb1981: field chats: %w", err)
			}
			d.Chats = append(d.Chats, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode updates.differenceSlice#a8fb1981: field users: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(b)
			if err != nil {
				return fmt.Errorf("unable to decode updates.differenceSlice#a8fb1981: field users: %w", err)
			}
			d.Users = append(d.Users, value)
		}
	}
	{
		if err := d.IntermediateState.Decode(b); err != nil {
			return fmt.Errorf("unable to decode updates.differenceSlice#a8fb1981: field intermediate_state: %w", err)
		}
	}
	return nil
}

// construct implements constructor of UpdatesDifferenceClass.
func (d UpdatesDifferenceSlice) construct() UpdatesDifferenceClass { return &d }

// Ensuring interfaces in compile-time for UpdatesDifferenceSlice.
var (
	_ bin.Encoder = &UpdatesDifferenceSlice{}
	_ bin.Decoder = &UpdatesDifferenceSlice{}

	_ UpdatesDifferenceClass = &UpdatesDifferenceSlice{}
)

// UpdatesDifferenceTooLong represents TL type `updates.differenceTooLong#4afe8f6d`.
type UpdatesDifferenceTooLong struct {
	// Pts field of UpdatesDifferenceTooLong.
	Pts int
}

// UpdatesDifferenceTooLongTypeID is TL type id of UpdatesDifferenceTooLong.
const UpdatesDifferenceTooLongTypeID = 0x4afe8f6d

// Encode implements bin.Encoder.
func (d *UpdatesDifferenceTooLong) Encode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode updates.differenceTooLong#4afe8f6d as nil")
	}
	b.PutID(UpdatesDifferenceTooLongTypeID)
	b.PutInt(d.Pts)
	return nil
}

// Decode implements bin.Decoder.
func (d *UpdatesDifferenceTooLong) Decode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode updates.differenceTooLong#4afe8f6d to nil")
	}
	if err := b.ConsumeID(UpdatesDifferenceTooLongTypeID); err != nil {
		return fmt.Errorf("unable to decode updates.differenceTooLong#4afe8f6d: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode updates.differenceTooLong#4afe8f6d: field pts: %w", err)
		}
		d.Pts = value
	}
	return nil
}

// construct implements constructor of UpdatesDifferenceClass.
func (d UpdatesDifferenceTooLong) construct() UpdatesDifferenceClass { return &d }

// Ensuring interfaces in compile-time for UpdatesDifferenceTooLong.
var (
	_ bin.Encoder = &UpdatesDifferenceTooLong{}
	_ bin.Decoder = &UpdatesDifferenceTooLong{}

	_ UpdatesDifferenceClass = &UpdatesDifferenceTooLong{}
)

// UpdatesDifferenceClass represents updates.Difference generic type.
//
// Example:
//  g, err := DecodeUpdatesDifference(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *UpdatesDifferenceEmpty: // updates.differenceEmpty#5d75a138
//  case *UpdatesDifference: // updates.difference#f49ca0
//  case *UpdatesDifferenceSlice: // updates.differenceSlice#a8fb1981
//  case *UpdatesDifferenceTooLong: // updates.differenceTooLong#4afe8f6d
//  default: panic(v)
//  }
type UpdatesDifferenceClass interface {
	bin.Encoder
	bin.Decoder
	construct() UpdatesDifferenceClass
}

// DecodeUpdatesDifference implements binary de-serialization for UpdatesDifferenceClass.
func DecodeUpdatesDifference(buf *bin.Buffer) (UpdatesDifferenceClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case UpdatesDifferenceEmptyTypeID:
		// Decoding updates.differenceEmpty#5d75a138.
		v := UpdatesDifferenceEmpty{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdatesDifferenceClass: %w", err)
		}
		return &v, nil
	case UpdatesDifferenceTypeID:
		// Decoding updates.difference#f49ca0.
		v := UpdatesDifference{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdatesDifferenceClass: %w", err)
		}
		return &v, nil
	case UpdatesDifferenceSliceTypeID:
		// Decoding updates.differenceSlice#a8fb1981.
		v := UpdatesDifferenceSlice{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdatesDifferenceClass: %w", err)
		}
		return &v, nil
	case UpdatesDifferenceTooLongTypeID:
		// Decoding updates.differenceTooLong#4afe8f6d.
		v := UpdatesDifferenceTooLong{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UpdatesDifferenceClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode UpdatesDifferenceClass: %w", bin.NewUnexpectedID(id))
	}
}

// UpdatesDifference boxes the UpdatesDifferenceClass providing a helper.
type UpdatesDifferenceBox struct {
	UpdatesDifference UpdatesDifferenceClass
}

// Decode implements bin.Decoder for UpdatesDifferenceBox.
func (b *UpdatesDifferenceBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode UpdatesDifferenceBox to nil")
	}
	v, err := DecodeUpdatesDifference(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.UpdatesDifference = v
	return nil
}

// Encode implements bin.Encode for UpdatesDifferenceBox.
func (b *UpdatesDifferenceBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.UpdatesDifference == nil {
		return fmt.Errorf("unable to encode UpdatesDifferenceClass as nil")
	}
	return b.UpdatesDifference.Encode(buf)
}
