// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// AccountWallPapersNotModified represents TL type `account.wallPapersNotModified#1c199183`.
// No new wallpapers were found
//
// See https://core.telegram.org/constructor/account.wallPapersNotModified for reference.
type AccountWallPapersNotModified struct {
}

// AccountWallPapersNotModifiedTypeID is TL type id of AccountWallPapersNotModified.
const AccountWallPapersNotModifiedTypeID = 0x1c199183

func (w *AccountWallPapersNotModified) Zero() bool {
	if w == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (w *AccountWallPapersNotModified) String() string {
	if w == nil {
		return "AccountWallPapersNotModified(nil)"
	}
	type Alias AccountWallPapersNotModified
	return fmt.Sprintf("AccountWallPapersNotModified%+v", Alias(*w))
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (w *AccountWallPapersNotModified) TypeID() uint32 {
	return AccountWallPapersNotModifiedTypeID
}

// SchemaName returns MTProto type name.
func (w *AccountWallPapersNotModified) SchemaName() string {
	return "account.wallPapersNotModified"
}

// Encode implements bin.Encoder.
func (w *AccountWallPapersNotModified) Encode(b *bin.Buffer) error {
	if w == nil {
		return fmt.Errorf("can't encode account.wallPapersNotModified#1c199183 as nil")
	}
	b.PutID(AccountWallPapersNotModifiedTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (w *AccountWallPapersNotModified) Decode(b *bin.Buffer) error {
	if w == nil {
		return fmt.Errorf("can't decode account.wallPapersNotModified#1c199183 to nil")
	}
	if err := b.ConsumeID(AccountWallPapersNotModifiedTypeID); err != nil {
		return fmt.Errorf("unable to decode account.wallPapersNotModified#1c199183: %w", err)
	}
	return nil
}

// construct implements constructor of AccountWallPapersClass.
func (w AccountWallPapersNotModified) construct() AccountWallPapersClass { return &w }

// Ensuring interfaces in compile-time for AccountWallPapersNotModified.
var (
	_ bin.Encoder = &AccountWallPapersNotModified{}
	_ bin.Decoder = &AccountWallPapersNotModified{}

	_ AccountWallPapersClass = &AccountWallPapersNotModified{}
)

// AccountWallPapers represents TL type `account.wallPapers#702b65a9`.
// Installed wallpapers
//
// See https://core.telegram.org/constructor/account.wallPapers for reference.
type AccountWallPapers struct {
	// Hash for pagination, for more info click hereÂ¹
	//
	// Links:
	//  1) https://core.telegram.org/api/offsets#hash-generation
	Hash int `schemaname:"hash"`
	// Wallpapers
	Wallpapers []WallPaperClass `schemaname:"wallpapers"`
}

// AccountWallPapersTypeID is TL type id of AccountWallPapers.
const AccountWallPapersTypeID = 0x702b65a9

func (w *AccountWallPapers) Zero() bool {
	if w == nil {
		return true
	}
	if !(w.Hash == 0) {
		return false
	}
	if !(w.Wallpapers == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (w *AccountWallPapers) String() string {
	if w == nil {
		return "AccountWallPapers(nil)"
	}
	type Alias AccountWallPapers
	return fmt.Sprintf("AccountWallPapers%+v", Alias(*w))
}

// FillFrom fills AccountWallPapers from given interface.
func (w *AccountWallPapers) FillFrom(from interface {
	GetHash() (value int)
	GetWallpapers() (value []WallPaperClass)
}) {
	w.Hash = from.GetHash()
	w.Wallpapers = from.GetWallpapers()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (w *AccountWallPapers) TypeID() uint32 {
	return AccountWallPapersTypeID
}

// SchemaName returns MTProto type name.
func (w *AccountWallPapers) SchemaName() string {
	return "account.wallPapers"
}

// Encode implements bin.Encoder.
func (w *AccountWallPapers) Encode(b *bin.Buffer) error {
	if w == nil {
		return fmt.Errorf("can't encode account.wallPapers#702b65a9 as nil")
	}
	b.PutID(AccountWallPapersTypeID)
	b.PutInt(w.Hash)
	b.PutVectorHeader(len(w.Wallpapers))
	for idx, v := range w.Wallpapers {
		if v == nil {
			return fmt.Errorf("unable to encode account.wallPapers#702b65a9: field wallpapers element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode account.wallPapers#702b65a9: field wallpapers element with index %d: %w", idx, err)
		}
	}
	return nil
}

// GetHash returns value of Hash field.
func (w *AccountWallPapers) GetHash() (value int) {
	return w.Hash
}

// GetWallpapers returns value of Wallpapers field.
func (w *AccountWallPapers) GetWallpapers() (value []WallPaperClass) {
	return w.Wallpapers
}

// MapWallpapers returns field Wallpapers wrapped in WallPaperClassSlice helper.
func (w *AccountWallPapers) MapWallpapers() (value WallPaperClassSlice) {
	return WallPaperClassSlice(w.Wallpapers)
}

// Decode implements bin.Decoder.
func (w *AccountWallPapers) Decode(b *bin.Buffer) error {
	if w == nil {
		return fmt.Errorf("can't decode account.wallPapers#702b65a9 to nil")
	}
	if err := b.ConsumeID(AccountWallPapersTypeID); err != nil {
		return fmt.Errorf("unable to decode account.wallPapers#702b65a9: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode account.wallPapers#702b65a9: field hash: %w", err)
		}
		w.Hash = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode account.wallPapers#702b65a9: field wallpapers: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeWallPaper(b)
			if err != nil {
				return fmt.Errorf("unable to decode account.wallPapers#702b65a9: field wallpapers: %w", err)
			}
			w.Wallpapers = append(w.Wallpapers, value)
		}
	}
	return nil
}

// construct implements constructor of AccountWallPapersClass.
func (w AccountWallPapers) construct() AccountWallPapersClass { return &w }

// Ensuring interfaces in compile-time for AccountWallPapers.
var (
	_ bin.Encoder = &AccountWallPapers{}
	_ bin.Decoder = &AccountWallPapers{}

	_ AccountWallPapersClass = &AccountWallPapers{}
)

// AccountWallPapersClass represents account.WallPapers generic type.
//
// See https://core.telegram.org/type/account.WallPapers for reference.
//
// Example:
//  g, err := tg.DecodeAccountWallPapers(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *tg.AccountWallPapersNotModified: // account.wallPapersNotModified#1c199183
//  case *tg.AccountWallPapers: // account.wallPapers#702b65a9
//  default: panic(v)
//  }
type AccountWallPapersClass interface {
	bin.Encoder
	bin.Decoder
	construct() AccountWallPapersClass

	// TypeID returns MTProto type id (CRC code).
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// SchemaName returns MTProto type name.
	SchemaName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	// AsModified tries to map AccountWallPapersClass to AccountWallPapers.
	AsModified() (*AccountWallPapers, bool)
}

// AsModified tries to map AccountWallPapersNotModified to AccountWallPapers.
func (w *AccountWallPapersNotModified) AsModified() (*AccountWallPapers, bool) {
	return nil, false
}

// AsModified tries to map AccountWallPapers to AccountWallPapers.
func (w *AccountWallPapers) AsModified() (*AccountWallPapers, bool) {
	return w, true
}

// DecodeAccountWallPapers implements binary de-serialization for AccountWallPapersClass.
func DecodeAccountWallPapers(buf *bin.Buffer) (AccountWallPapersClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case AccountWallPapersNotModifiedTypeID:
		// Decoding account.wallPapersNotModified#1c199183.
		v := AccountWallPapersNotModified{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode AccountWallPapersClass: %w", err)
		}
		return &v, nil
	case AccountWallPapersTypeID:
		// Decoding account.wallPapers#702b65a9.
		v := AccountWallPapers{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode AccountWallPapersClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode AccountWallPapersClass: %w", bin.NewUnexpectedID(id))
	}
}

// AccountWallPapers boxes the AccountWallPapersClass providing a helper.
type AccountWallPapersBox struct {
	WallPapers AccountWallPapersClass
}

// Decode implements bin.Decoder for AccountWallPapersBox.
func (b *AccountWallPapersBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode AccountWallPapersBox to nil")
	}
	v, err := DecodeAccountWallPapers(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.WallPapers = v
	return nil
}

// Encode implements bin.Encode for AccountWallPapersBox.
func (b *AccountWallPapersBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.WallPapers == nil {
		return fmt.Errorf("unable to encode AccountWallPapersClass as nil")
	}
	return b.WallPapers.Encode(buf)
}

// AccountWallPapersClassSlice is adapter for slice of AccountWallPapersClass.
type AccountWallPapersClassSlice []AccountWallPapersClass

// AppendOnlyModified appends only Modified constructors to
// given slice.
func (s AccountWallPapersClassSlice) AppendOnlyModified(to []*AccountWallPapers) []*AccountWallPapers {
	for _, elem := range s {
		value, ok := elem.AsModified()
		if !ok {
			continue
		}
		to = append(to, value)
	}

	return to
}

// AsModified returns copy with only Modified constructors.
func (s AccountWallPapersClassSlice) AsModified() (to []*AccountWallPapers) {
	return s.AppendOnlyModified(to)
}

// FirstAsModified returns first element of slice (if exists).
func (s AccountWallPapersClassSlice) FirstAsModified() (v *AccountWallPapers, ok bool) {
	value, ok := s.First()
	if !ok {
		return
	}
	return value.AsModified()
}

// LastAsModified returns last element of slice (if exists).
func (s AccountWallPapersClassSlice) LastAsModified() (v *AccountWallPapers, ok bool) {
	value, ok := s.Last()
	if !ok {
		return
	}
	return value.AsModified()
}

// PopFirstAsModified returns element of slice (if exists).
func (s *AccountWallPapersClassSlice) PopFirstAsModified() (v *AccountWallPapers, ok bool) {
	value, ok := s.PopFirst()
	if !ok {
		return
	}
	return value.AsModified()
}

// PopAsModified returns element of slice (if exists).
func (s *AccountWallPapersClassSlice) PopAsModified() (v *AccountWallPapers, ok bool) {
	value, ok := s.Pop()
	if !ok {
		return
	}
	return value.AsModified()
}

// First returns first element of slice (if exists).
func (s AccountWallPapersClassSlice) First() (v AccountWallPapersClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s AccountWallPapersClassSlice) Last() (v AccountWallPapersClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *AccountWallPapersClassSlice) PopFirst() (v AccountWallPapersClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	a[len(a)-1] = nil
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *AccountWallPapersClassSlice) Pop() (v AccountWallPapersClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
