// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// BankCardOpenUrl represents TL type `bankCardOpenUrl#f568028a`.
// Credit card info URL provided by the bank
//
// See https://core.telegram.org/constructor/bankCardOpenUrl for reference.
type BankCardOpenUrl struct {
	// Info URL
	URL string
	// Bank name
	Name string
}

// BankCardOpenUrlTypeID is TL type id of BankCardOpenUrl.
const BankCardOpenUrlTypeID = 0xf568028a

// String implements fmt.Stringer.
func (b *BankCardOpenUrl) String() string {
	if b == nil {
		return "BankCardOpenUrl(nil)"
	}
	var sb strings.Builder
	sb.WriteString("BankCardOpenUrl")
	sb.WriteString("{\n")
	sb.WriteString("\tURL: ")
	sb.WriteString(fmt.Sprint(b.URL))
	sb.WriteString(",\n")
	sb.WriteString("\tName: ")
	sb.WriteString(fmt.Sprint(b.Name))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (b *BankCardOpenUrl) Encode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode bankCardOpenUrl#f568028a as nil")
	}
	buf.PutID(BankCardOpenUrlTypeID)
	buf.PutString(b.URL)
	buf.PutString(b.Name)
	return nil
}

// Decode implements bin.Decoder.
func (b *BankCardOpenUrl) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode bankCardOpenUrl#f568028a to nil")
	}
	if err := buf.ConsumeID(BankCardOpenUrlTypeID); err != nil {
		return fmt.Errorf("unable to decode bankCardOpenUrl#f568028a: %w", err)
	}
	{
		value, err := buf.String()
		if err != nil {
			return fmt.Errorf("unable to decode bankCardOpenUrl#f568028a: field url: %w", err)
		}
		b.URL = value
	}
	{
		value, err := buf.String()
		if err != nil {
			return fmt.Errorf("unable to decode bankCardOpenUrl#f568028a: field name: %w", err)
		}
		b.Name = value
	}
	return nil
}

// Ensuring interfaces in compile-time for BankCardOpenUrl.
var (
	_ bin.Encoder = &BankCardOpenUrl{}
	_ bin.Decoder = &BankCardOpenUrl{}
)
