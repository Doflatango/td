// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// MessagesSendVoteRequest represents TL type `messages.sendVote#10ea6184`.
// Vote in a poll¹
//
// Links:
//  1) https://core.telegram.org/constructor/poll
//
// See https://core.telegram.org/method/messages.sendVote for reference.
type MessagesSendVoteRequest struct {
	// The chat where the poll was sent
	Peer InputPeerClass
	// The message ID of the poll
	MsgID int
	// The options that were chosen
	Options [][]byte
}

// MessagesSendVoteRequestTypeID is TL type id of MessagesSendVoteRequest.
const MessagesSendVoteRequestTypeID = 0x10ea6184

func (s *MessagesSendVoteRequest) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Peer == nil) {
		return false
	}
	if !(s.MsgID == 0) {
		return false
	}
	if !(s.Options == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *MessagesSendVoteRequest) String() string {
	if s == nil {
		return "MessagesSendVoteRequest(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessagesSendVoteRequest")
	sb.WriteString("{\n")
	sb.WriteString("\tPeer: ")
	sb.WriteString(fmt.Sprint(s.Peer))
	sb.WriteString(",\n")
	sb.WriteString("\tMsgID: ")
	sb.WriteString(fmt.Sprint(s.MsgID))
	sb.WriteString(",\n")
	sb.WriteByte('[')
	for _, v := range s.Options {
		sb.WriteString(fmt.Sprint(v))
	}
	sb.WriteByte(']')
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (s *MessagesSendVoteRequest) TypeID() uint32 {
	return MessagesSendVoteRequestTypeID
}

// Encode implements bin.Encoder.
func (s *MessagesSendVoteRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode messages.sendVote#10ea6184 as nil")
	}
	b.PutID(MessagesSendVoteRequestTypeID)
	if s.Peer == nil {
		return fmt.Errorf("unable to encode messages.sendVote#10ea6184: field peer is nil")
	}
	if err := s.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.sendVote#10ea6184: field peer: %w", err)
	}
	b.PutInt(s.MsgID)
	b.PutVectorHeader(len(s.Options))
	for _, v := range s.Options {
		b.PutBytes(v)
	}
	return nil
}

// GetPeer returns value of Peer field.
func (s *MessagesSendVoteRequest) GetPeer() (value InputPeerClass) {
	return s.Peer
}

// GetMsgID returns value of MsgID field.
func (s *MessagesSendVoteRequest) GetMsgID() (value int) {
	return s.MsgID
}

// GetOptions returns value of Options field.
func (s *MessagesSendVoteRequest) GetOptions() (value [][]byte) {
	return s.Options
}

// Decode implements bin.Decoder.
func (s *MessagesSendVoteRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode messages.sendVote#10ea6184 to nil")
	}
	if err := b.ConsumeID(MessagesSendVoteRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.sendVote#10ea6184: %w", err)
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.sendVote#10ea6184: field peer: %w", err)
		}
		s.Peer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.sendVote#10ea6184: field msg_id: %w", err)
		}
		s.MsgID = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.sendVote#10ea6184: field options: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Bytes()
			if err != nil {
				return fmt.Errorf("unable to decode messages.sendVote#10ea6184: field options: %w", err)
			}
			s.Options = append(s.Options, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesSendVoteRequest.
var (
	_ bin.Encoder = &MessagesSendVoteRequest{}
	_ bin.Decoder = &MessagesSendVoteRequest{}
)

// MessagesSendVote invokes method messages.sendVote#10ea6184 returning error if any.
// Vote in a poll¹
//
// Links:
//  1) https://core.telegram.org/constructor/poll
//
// Possible errors:
//  400 MESSAGE_ID_INVALID: The provided message id is invalid
//  400 MESSAGE_POLL_CLOSED: Poll closed
//  400 OPTIONS_TOO_MUCH: Too many options provided
//  400 OPTION_INVALID: Invalid option selected
//  400 REVOTE_NOT_ALLOWED: You cannot change your vote
//
// See https://core.telegram.org/method/messages.sendVote for reference.
func (c *Client) MessagesSendVote(ctx context.Context, request *MessagesSendVoteRequest) (UpdatesClass, error) {
	var result UpdatesBox

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
