// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// MessagesGetUnreadMentionsRequest represents TL type `messages.getUnreadMentions#46578472`.
// Get unread messages where we were mentioned
//
// See https://core.telegram.org/method/messages.getUnreadMentions for reference.
type MessagesGetUnreadMentionsRequest struct {
	// Peer where to look for mentions
	Peer InputPeerClass
	// Offsets for pagination, for more info click here
	OffsetID int
	// Offsets for pagination, for more info click here
	AddOffset int
	// Maximum number of results to return, see pagination
	Limit int
	// Maximum message ID to return, see pagination
	MaxID int
	// Minimum message ID to return, see pagination
	MinID int
}

// MessagesGetUnreadMentionsRequestTypeID is TL type id of MessagesGetUnreadMentionsRequest.
const MessagesGetUnreadMentionsRequestTypeID = 0x46578472

// String implements fmt.Stringer.
func (g *MessagesGetUnreadMentionsRequest) String() string {
	if g == nil {
		return "MessagesGetUnreadMentionsRequest(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessagesGetUnreadMentionsRequest")
	sb.WriteString("{\n")
	sb.WriteString("\tPeer: ")
	sb.WriteString(g.Peer.String())
	sb.WriteString(",\n")
	sb.WriteString("\tOffsetID: ")
	sb.WriteString(fmt.Sprint(g.OffsetID))
	sb.WriteString(",\n")
	sb.WriteString("\tAddOffset: ")
	sb.WriteString(fmt.Sprint(g.AddOffset))
	sb.WriteString(",\n")
	sb.WriteString("\tLimit: ")
	sb.WriteString(fmt.Sprint(g.Limit))
	sb.WriteString(",\n")
	sb.WriteString("\tMaxID: ")
	sb.WriteString(fmt.Sprint(g.MaxID))
	sb.WriteString(",\n")
	sb.WriteString("\tMinID: ")
	sb.WriteString(fmt.Sprint(g.MinID))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (g *MessagesGetUnreadMentionsRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode messages.getUnreadMentions#46578472 as nil")
	}
	b.PutID(MessagesGetUnreadMentionsRequestTypeID)
	if g.Peer == nil {
		return fmt.Errorf("unable to encode messages.getUnreadMentions#46578472: field peer is nil")
	}
	if err := g.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.getUnreadMentions#46578472: field peer: %w", err)
	}
	b.PutInt(g.OffsetID)
	b.PutInt(g.AddOffset)
	b.PutInt(g.Limit)
	b.PutInt(g.MaxID)
	b.PutInt(g.MinID)
	return nil
}

// Decode implements bin.Decoder.
func (g *MessagesGetUnreadMentionsRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode messages.getUnreadMentions#46578472 to nil")
	}
	if err := b.ConsumeID(MessagesGetUnreadMentionsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.getUnreadMentions#46578472: %w", err)
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.getUnreadMentions#46578472: field peer: %w", err)
		}
		g.Peer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getUnreadMentions#46578472: field offset_id: %w", err)
		}
		g.OffsetID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getUnreadMentions#46578472: field add_offset: %w", err)
		}
		g.AddOffset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getUnreadMentions#46578472: field limit: %w", err)
		}
		g.Limit = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getUnreadMentions#46578472: field max_id: %w", err)
		}
		g.MaxID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getUnreadMentions#46578472: field min_id: %w", err)
		}
		g.MinID = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesGetUnreadMentionsRequest.
var (
	_ bin.Encoder = &MessagesGetUnreadMentionsRequest{}
	_ bin.Decoder = &MessagesGetUnreadMentionsRequest{}
)

// MessagesGetUnreadMentions invokes method messages.getUnreadMentions#46578472 returning error if any.
// Get unread messages where we were mentioned
//
// See https://core.telegram.org/method/messages.getUnreadMentions for reference.
func (c *Client) MessagesGetUnreadMentions(ctx context.Context, request *MessagesGetUnreadMentionsRequest) (MessagesMessagesClass, error) {
	var result MessagesMessagesBox

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Messages, nil
}
