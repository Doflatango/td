// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// NotifyPeer represents TL type `notifyPeer#9fd40bd8`.
type NotifyPeer struct {
	// Peer field of NotifyPeer.
	Peer PeerClass
}

// NotifyPeerTypeID is TL type id of NotifyPeer.
const NotifyPeerTypeID = 0x9fd40bd8

// Encode implements bin.Encoder.
func (n *NotifyPeer) Encode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't encode notifyPeer#9fd40bd8 as nil")
	}
	b.PutID(NotifyPeerTypeID)
	if n.Peer == nil {
		return fmt.Errorf("unable to encode notifyPeer#9fd40bd8: field peer is nil")
	}
	if err := n.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode notifyPeer#9fd40bd8: field peer: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (n *NotifyPeer) Decode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't decode notifyPeer#9fd40bd8 to nil")
	}
	if err := b.ConsumeID(NotifyPeerTypeID); err != nil {
		return fmt.Errorf("unable to decode notifyPeer#9fd40bd8: %w", err)
	}
	{
		value, err := DecodePeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode notifyPeer#9fd40bd8: field peer: %w", err)
		}
		n.Peer = value
	}
	return nil
}

// construct implements constructor of NotifyPeerClass.
func (n NotifyPeer) construct() NotifyPeerClass { return &n }

// Ensuring interfaces in compile-time for NotifyPeer.
var (
	_ bin.Encoder = &NotifyPeer{}
	_ bin.Decoder = &NotifyPeer{}

	_ NotifyPeerClass = &NotifyPeer{}
)

// NotifyUsers represents TL type `notifyUsers#b4c83b4c`.
type NotifyUsers struct {
}

// NotifyUsersTypeID is TL type id of NotifyUsers.
const NotifyUsersTypeID = 0xb4c83b4c

// Encode implements bin.Encoder.
func (n *NotifyUsers) Encode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't encode notifyUsers#b4c83b4c as nil")
	}
	b.PutID(NotifyUsersTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (n *NotifyUsers) Decode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't decode notifyUsers#b4c83b4c to nil")
	}
	if err := b.ConsumeID(NotifyUsersTypeID); err != nil {
		return fmt.Errorf("unable to decode notifyUsers#b4c83b4c: %w", err)
	}
	return nil
}

// construct implements constructor of NotifyPeerClass.
func (n NotifyUsers) construct() NotifyPeerClass { return &n }

// Ensuring interfaces in compile-time for NotifyUsers.
var (
	_ bin.Encoder = &NotifyUsers{}
	_ bin.Decoder = &NotifyUsers{}

	_ NotifyPeerClass = &NotifyUsers{}
)

// NotifyChats represents TL type `notifyChats#c007cec3`.
type NotifyChats struct {
}

// NotifyChatsTypeID is TL type id of NotifyChats.
const NotifyChatsTypeID = 0xc007cec3

// Encode implements bin.Encoder.
func (n *NotifyChats) Encode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't encode notifyChats#c007cec3 as nil")
	}
	b.PutID(NotifyChatsTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (n *NotifyChats) Decode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't decode notifyChats#c007cec3 to nil")
	}
	if err := b.ConsumeID(NotifyChatsTypeID); err != nil {
		return fmt.Errorf("unable to decode notifyChats#c007cec3: %w", err)
	}
	return nil
}

// construct implements constructor of NotifyPeerClass.
func (n NotifyChats) construct() NotifyPeerClass { return &n }

// Ensuring interfaces in compile-time for NotifyChats.
var (
	_ bin.Encoder = &NotifyChats{}
	_ bin.Decoder = &NotifyChats{}

	_ NotifyPeerClass = &NotifyChats{}
)

// NotifyBroadcasts represents TL type `notifyBroadcasts#d612e8ef`.
type NotifyBroadcasts struct {
}

// NotifyBroadcastsTypeID is TL type id of NotifyBroadcasts.
const NotifyBroadcastsTypeID = 0xd612e8ef

// Encode implements bin.Encoder.
func (n *NotifyBroadcasts) Encode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't encode notifyBroadcasts#d612e8ef as nil")
	}
	b.PutID(NotifyBroadcastsTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (n *NotifyBroadcasts) Decode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't decode notifyBroadcasts#d612e8ef to nil")
	}
	if err := b.ConsumeID(NotifyBroadcastsTypeID); err != nil {
		return fmt.Errorf("unable to decode notifyBroadcasts#d612e8ef: %w", err)
	}
	return nil
}

// construct implements constructor of NotifyPeerClass.
func (n NotifyBroadcasts) construct() NotifyPeerClass { return &n }

// Ensuring interfaces in compile-time for NotifyBroadcasts.
var (
	_ bin.Encoder = &NotifyBroadcasts{}
	_ bin.Decoder = &NotifyBroadcasts{}

	_ NotifyPeerClass = &NotifyBroadcasts{}
)

// NotifyPeerClass represents NotifyPeer generic type.
//
// Example:
//  g, err := DecodeNotifyPeer(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *NotifyPeer: // notifyPeer#9fd40bd8
//  case *NotifyUsers: // notifyUsers#b4c83b4c
//  case *NotifyChats: // notifyChats#c007cec3
//  case *NotifyBroadcasts: // notifyBroadcasts#d612e8ef
//  default: panic(v)
//  }
type NotifyPeerClass interface {
	bin.Encoder
	bin.Decoder
	construct() NotifyPeerClass
}

// DecodeNotifyPeer implements binary de-serialization for NotifyPeerClass.
func DecodeNotifyPeer(buf *bin.Buffer) (NotifyPeerClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case NotifyPeerTypeID:
		// Decoding notifyPeer#9fd40bd8.
		v := NotifyPeer{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode NotifyPeerClass: %w", err)
		}
		return &v, nil
	case NotifyUsersTypeID:
		// Decoding notifyUsers#b4c83b4c.
		v := NotifyUsers{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode NotifyPeerClass: %w", err)
		}
		return &v, nil
	case NotifyChatsTypeID:
		// Decoding notifyChats#c007cec3.
		v := NotifyChats{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode NotifyPeerClass: %w", err)
		}
		return &v, nil
	case NotifyBroadcastsTypeID:
		// Decoding notifyBroadcasts#d612e8ef.
		v := NotifyBroadcasts{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode NotifyPeerClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode NotifyPeerClass: %w", bin.NewUnexpectedID(id))
	}
}

// NotifyPeer boxes the NotifyPeerClass providing a helper.
type NotifyPeerBox struct {
	NotifyPeer NotifyPeerClass
}

// Decode implements bin.Decoder for NotifyPeerBox.
func (b *NotifyPeerBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode NotifyPeerBox to nil")
	}
	v, err := DecodeNotifyPeer(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.NotifyPeer = v
	return nil
}

// Encode implements bin.Encode for NotifyPeerBox.
func (b *NotifyPeerBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.NotifyPeer == nil {
		return fmt.Errorf("unable to encode NotifyPeerClass as nil")
	}
	return b.NotifyPeer.Encode(buf)
}
