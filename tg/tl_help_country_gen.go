// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// HelpCountry represents TL type `help.country#c3878e23`.
//
// See https://core.telegram.org/constructor/help.country for reference.
type HelpCountry struct {
	// Flags field of HelpCountry.
	Flags bin.Fields
	// Hidden field of HelpCountry.
	Hidden bool
	// Iso2 field of HelpCountry.
	Iso2 string
	// DefaultName field of HelpCountry.
	DefaultName string
	// Name field of HelpCountry.
	//
	// Use SetName and GetName helpers.
	Name string
	// CountryCodes field of HelpCountry.
	CountryCodes []HelpCountryCode
}

// HelpCountryTypeID is TL type id of HelpCountry.
const HelpCountryTypeID = 0xc3878e23

// Encode implements bin.Encoder.
func (c *HelpCountry) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode help.country#c3878e23 as nil")
	}
	b.PutID(HelpCountryTypeID)
	if err := c.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode help.country#c3878e23: field flags: %w", err)
	}
	b.PutString(c.Iso2)
	b.PutString(c.DefaultName)
	if c.Flags.Has(1) {
		b.PutString(c.Name)
	}
	b.PutVectorHeader(len(c.CountryCodes))
	for idx, v := range c.CountryCodes {
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode help.country#c3878e23: field country_codes element with index %d: %w", idx, err)
		}
	}
	return nil
}

// SetHidden sets value of Hidden conditional field.
func (c *HelpCountry) SetHidden(value bool) {
	if value {
		c.Flags.Set(0)
	} else {
		c.Flags.Unset(0)
	}
}

// SetName sets value of Name conditional field.
func (c *HelpCountry) SetName(value string) {
	c.Flags.Set(1)
	c.Name = value
}

// GetName returns value of Name conditional field and
// boolean which is true if field was set.
func (c *HelpCountry) GetName() (value string, ok bool) {
	if !c.Flags.Has(1) {
		return value, false
	}
	return c.Name, true
}

// Decode implements bin.Decoder.
func (c *HelpCountry) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode help.country#c3878e23 to nil")
	}
	if err := b.ConsumeID(HelpCountryTypeID); err != nil {
		return fmt.Errorf("unable to decode help.country#c3878e23: %w", err)
	}
	{
		if err := c.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode help.country#c3878e23: field flags: %w", err)
		}
	}
	c.Hidden = c.Flags.Has(0)
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode help.country#c3878e23: field iso2: %w", err)
		}
		c.Iso2 = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode help.country#c3878e23: field default_name: %w", err)
		}
		c.DefaultName = value
	}
	if c.Flags.Has(1) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode help.country#c3878e23: field name: %w", err)
		}
		c.Name = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode help.country#c3878e23: field country_codes: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value HelpCountryCode
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode help.country#c3878e23: field country_codes: %w", err)
			}
			c.CountryCodes = append(c.CountryCodes, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for HelpCountry.
var (
	_ bin.Encoder = &HelpCountry{}
	_ bin.Decoder = &HelpCountry{}
)
