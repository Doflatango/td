// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// AuthAcceptLoginTokenRequest represents TL type `auth.acceptLoginToken#e894ad4d`.
type AuthAcceptLoginTokenRequest struct {
	// Token field of AuthAcceptLoginTokenRequest.
	Token []byte
}

// AuthAcceptLoginTokenRequestTypeID is TL type id of AuthAcceptLoginTokenRequest.
const AuthAcceptLoginTokenRequestTypeID = 0xe894ad4d

// Encode implements bin.Encoder.
func (a *AuthAcceptLoginTokenRequest) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode auth.acceptLoginToken#e894ad4d as nil")
	}
	b.PutID(AuthAcceptLoginTokenRequestTypeID)
	b.PutBytes(a.Token)
	return nil
}

// Decode implements bin.Decoder.
func (a *AuthAcceptLoginTokenRequest) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode auth.acceptLoginToken#e894ad4d to nil")
	}
	if err := b.ConsumeID(AuthAcceptLoginTokenRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode auth.acceptLoginToken#e894ad4d: %w", err)
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode auth.acceptLoginToken#e894ad4d: field token: %w", err)
		}
		a.Token = value
	}
	return nil
}

// Ensuring interfaces in compile-time for AuthAcceptLoginTokenRequest.
var (
	_ bin.Encoder = &AuthAcceptLoginTokenRequest{}
	_ bin.Decoder = &AuthAcceptLoginTokenRequest{}
)
