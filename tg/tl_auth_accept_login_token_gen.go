// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// AuthAcceptLoginTokenRequest represents TL type `auth.acceptLoginToken#e894ad4d`.
// Accept QR code login token, logging in the app that generated it.
// Returns info about the new session.
// For more info, see login via QR code¹.
//
// Links:
//  1) https://core.telegram.org/api/qr-login
//
// See https://core.telegram.org/method/auth.acceptLoginToken for reference.
type AuthAcceptLoginTokenRequest struct {
	// Login token embedded in QR code, for more info, see login via QR code¹.
	//
	// Links:
	//  1) https://core.telegram.org/api/qr-login
	Token []byte
}

// AuthAcceptLoginTokenRequestTypeID is TL type id of AuthAcceptLoginTokenRequest.
const AuthAcceptLoginTokenRequestTypeID = 0xe894ad4d

func (a *AuthAcceptLoginTokenRequest) Zero() bool {
	if a == nil {
		return true
	}
	if !(a.Token == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (a *AuthAcceptLoginTokenRequest) String() string {
	if a == nil {
		return "AuthAcceptLoginTokenRequest(nil)"
	}
	var sb strings.Builder
	sb.WriteString("AuthAcceptLoginTokenRequest")
	sb.WriteString("{\n")
	sb.WriteString("\tToken: ")
	sb.WriteString(fmt.Sprint(a.Token))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (a *AuthAcceptLoginTokenRequest) TypeID() uint32 {
	return AuthAcceptLoginTokenRequestTypeID
}

// Encode implements bin.Encoder.
func (a *AuthAcceptLoginTokenRequest) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode auth.acceptLoginToken#e894ad4d as nil")
	}
	b.PutID(AuthAcceptLoginTokenRequestTypeID)
	b.PutBytes(a.Token)
	return nil
}

// GetToken returns value of Token field.
func (a *AuthAcceptLoginTokenRequest) GetToken() (value []byte) {
	return a.Token
}

// Decode implements bin.Decoder.
func (a *AuthAcceptLoginTokenRequest) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode auth.acceptLoginToken#e894ad4d to nil")
	}
	if err := b.ConsumeID(AuthAcceptLoginTokenRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode auth.acceptLoginToken#e894ad4d: %w", err)
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode auth.acceptLoginToken#e894ad4d: field token: %w", err)
		}
		a.Token = value
	}
	return nil
}

// Ensuring interfaces in compile-time for AuthAcceptLoginTokenRequest.
var (
	_ bin.Encoder = &AuthAcceptLoginTokenRequest{}
	_ bin.Decoder = &AuthAcceptLoginTokenRequest{}
)

// AuthAcceptLoginToken invokes method auth.acceptLoginToken#e894ad4d returning error if any.
// Accept QR code login token, logging in the app that generated it.
// Returns info about the new session.
// For more info, see login via QR code¹.
//
// Links:
//  1) https://core.telegram.org/api/qr-login
//
// Possible errors:
//  400 AUTH_TOKEN_INVALIDX: The specified auth token is invalid
//
// See https://core.telegram.org/method/auth.acceptLoginToken for reference.
func (c *Client) AuthAcceptLoginToken(ctx context.Context, token []byte) (*Authorization, error) {
	var result Authorization

	request := &AuthAcceptLoginTokenRequest{
		Token: token,
	}
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
