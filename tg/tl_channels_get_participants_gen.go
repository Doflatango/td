// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// ChannelsGetParticipantsRequest represents TL type `channels.getParticipants#123e05e9`.
// Get the participants of a supergroup/channel
//
// See https://core.telegram.org/method/channels.getParticipants for reference.
type ChannelsGetParticipantsRequest struct {
	// Channel
	Channel InputChannelClass
	// Which participant types to fetch
	Filter ChannelParticipantsFilterClass
	// Offset
	Offset int
	// Limit
	Limit int
	// Hash
	Hash int
}

// ChannelsGetParticipantsRequestTypeID is TL type id of ChannelsGetParticipantsRequest.
const ChannelsGetParticipantsRequestTypeID = 0x123e05e9

// Encode implements bin.Encoder.
func (g *ChannelsGetParticipantsRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode channels.getParticipants#123e05e9 as nil")
	}
	b.PutID(ChannelsGetParticipantsRequestTypeID)
	if g.Channel == nil {
		return fmt.Errorf("unable to encode channels.getParticipants#123e05e9: field channel is nil")
	}
	if err := g.Channel.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channels.getParticipants#123e05e9: field channel: %w", err)
	}
	if g.Filter == nil {
		return fmt.Errorf("unable to encode channels.getParticipants#123e05e9: field filter is nil")
	}
	if err := g.Filter.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channels.getParticipants#123e05e9: field filter: %w", err)
	}
	b.PutInt(g.Offset)
	b.PutInt(g.Limit)
	b.PutInt(g.Hash)
	return nil
}

// Decode implements bin.Decoder.
func (g *ChannelsGetParticipantsRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode channels.getParticipants#123e05e9 to nil")
	}
	if err := b.ConsumeID(ChannelsGetParticipantsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode channels.getParticipants#123e05e9: %w", err)
	}
	{
		value, err := DecodeInputChannel(b)
		if err != nil {
			return fmt.Errorf("unable to decode channels.getParticipants#123e05e9: field channel: %w", err)
		}
		g.Channel = value
	}
	{
		value, err := DecodeChannelParticipantsFilter(b)
		if err != nil {
			return fmt.Errorf("unable to decode channels.getParticipants#123e05e9: field filter: %w", err)
		}
		g.Filter = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channels.getParticipants#123e05e9: field offset: %w", err)
		}
		g.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channels.getParticipants#123e05e9: field limit: %w", err)
		}
		g.Limit = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channels.getParticipants#123e05e9: field hash: %w", err)
		}
		g.Hash = value
	}
	return nil
}

// Ensuring interfaces in compile-time for ChannelsGetParticipantsRequest.
var (
	_ bin.Encoder = &ChannelsGetParticipantsRequest{}
	_ bin.Decoder = &ChannelsGetParticipantsRequest{}
)

// ChannelsGetParticipants invokes method channels.getParticipants#123e05e9 returning error if any.
// Get the participants of a supergroup/channel
//
// See https://core.telegram.org/method/channels.getParticipants for reference.
func (c *Client) ChannelsGetParticipants(ctx context.Context, request *ChannelsGetParticipantsRequest) (ChannelsChannelParticipantsClass, error) {
	var result ChannelsChannelParticipantsBox
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.ChannelParticipants, nil
}
