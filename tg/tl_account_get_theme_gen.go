// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// AccountGetThemeRequest represents TL type `account.getTheme#8d9d742b`.
type AccountGetThemeRequest struct {
	// Format field of AccountGetThemeRequest.
	Format string
	// Theme field of AccountGetThemeRequest.
	Theme InputThemeClass
	// DocumentID field of AccountGetThemeRequest.
	DocumentID int64
}

// AccountGetThemeRequestTypeID is TL type id of AccountGetThemeRequest.
const AccountGetThemeRequestTypeID = 0x8d9d742b

// Encode implements bin.Encoder.
func (g *AccountGetThemeRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode account.getTheme#8d9d742b as nil")
	}
	b.PutID(AccountGetThemeRequestTypeID)
	b.PutString(g.Format)
	if g.Theme == nil {
		return fmt.Errorf("unable to encode account.getTheme#8d9d742b: field theme is nil")
	}
	if err := g.Theme.Encode(b); err != nil {
		return fmt.Errorf("unable to encode account.getTheme#8d9d742b: field theme: %w", err)
	}
	b.PutLong(g.DocumentID)
	return nil
}

// Decode implements bin.Decoder.
func (g *AccountGetThemeRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode account.getTheme#8d9d742b to nil")
	}
	if err := b.ConsumeID(AccountGetThemeRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode account.getTheme#8d9d742b: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode account.getTheme#8d9d742b: field format: %w", err)
		}
		g.Format = value
	}
	{
		value, err := DecodeInputTheme(b)
		if err != nil {
			return fmt.Errorf("unable to decode account.getTheme#8d9d742b: field theme: %w", err)
		}
		g.Theme = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode account.getTheme#8d9d742b: field document_id: %w", err)
		}
		g.DocumentID = value
	}
	return nil
}

// Ensuring interfaces in compile-time for AccountGetThemeRequest.
var (
	_ bin.Encoder = &AccountGetThemeRequest{}
	_ bin.Decoder = &AccountGetThemeRequest{}
)
