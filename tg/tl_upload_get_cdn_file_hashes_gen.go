// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is
var _ = sort.Ints
var _ = tdp.Format

// UploadGetCdnFileHashesRequest represents TL type `upload.getCdnFileHashes#4da54231`.
// Get SHA256 hashes for verifying downloaded CDN¹ files
//
// Links:
//  1) https://core.telegram.org/cdn
//
// See https://core.telegram.org/method/upload.getCdnFileHashes for reference.
type UploadGetCdnFileHashesRequest struct {
	// File
	FileToken []byte `tl:"file_token"`
	// Offset from which to start getting hashes
	Offset int `tl:"offset"`
}

// UploadGetCdnFileHashesRequestTypeID is TL type id of UploadGetCdnFileHashesRequest.
const UploadGetCdnFileHashesRequestTypeID = 0x4da54231

func (g *UploadGetCdnFileHashesRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.FileToken == nil) {
		return false
	}
	if !(g.Offset == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *UploadGetCdnFileHashesRequest) String() string {
	if g == nil {
		return "UploadGetCdnFileHashesRequest(nil)"
	}
	type Alias UploadGetCdnFileHashesRequest
	return fmt.Sprintf("UploadGetCdnFileHashesRequest%+v", Alias(*g))
}

// FillFrom fills UploadGetCdnFileHashesRequest from given interface.
func (g *UploadGetCdnFileHashesRequest) FillFrom(from interface {
	GetFileToken() (value []byte)
	GetOffset() (value int)
}) {
	g.FileToken = from.GetFileToken()
	g.Offset = from.GetOffset()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*UploadGetCdnFileHashesRequest) TypeID() uint32 {
	return UploadGetCdnFileHashesRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*UploadGetCdnFileHashesRequest) TypeName() string {
	return "upload.getCdnFileHashes"
}

// TypeInfo returns info about TL type.
func (g *UploadGetCdnFileHashesRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "upload.getCdnFileHashes",
		ID:   UploadGetCdnFileHashesRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "FileToken",
			SchemaName: "file_token",
		},
		{
			Name:       "Offset",
			SchemaName: "offset",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *UploadGetCdnFileHashesRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode upload.getCdnFileHashes#4da54231 as nil")
	}
	b.PutID(UploadGetCdnFileHashesRequestTypeID)
	b.PutBytes(g.FileToken)
	b.PutInt(g.Offset)
	return nil
}

// GetFileToken returns value of FileToken field.
func (g *UploadGetCdnFileHashesRequest) GetFileToken() (value []byte) {
	return g.FileToken
}

// GetOffset returns value of Offset field.
func (g *UploadGetCdnFileHashesRequest) GetOffset() (value int) {
	return g.Offset
}

// Decode implements bin.Decoder.
func (g *UploadGetCdnFileHashesRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode upload.getCdnFileHashes#4da54231 to nil")
	}
	if err := b.ConsumeID(UploadGetCdnFileHashesRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode upload.getCdnFileHashes#4da54231: %w", err)
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode upload.getCdnFileHashes#4da54231: field file_token: %w", err)
		}
		g.FileToken = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode upload.getCdnFileHashes#4da54231: field offset: %w", err)
		}
		g.Offset = value
	}
	return nil
}

// Ensuring interfaces in compile-time for UploadGetCdnFileHashesRequest.
var (
	_ bin.Encoder = &UploadGetCdnFileHashesRequest{}
	_ bin.Decoder = &UploadGetCdnFileHashesRequest{}
)

// UploadGetCdnFileHashes invokes method upload.getCdnFileHashes#4da54231 returning error if any.
// Get SHA256 hashes for verifying downloaded CDN¹ files
//
// Links:
//  1) https://core.telegram.org/cdn
//
// Possible errors:
//  400 CDN_METHOD_INVALID: You can't call this method in a CDN DC
//  400 RSA_DECRYPT_FAILED: Internal RSA decryption failed
//
// See https://core.telegram.org/method/upload.getCdnFileHashes for reference.
// Can be used by bots.
func (c *Client) UploadGetCdnFileHashes(ctx context.Context, request *UploadGetCdnFileHashesRequest) ([]FileHash, error) {
	var result FileHashVector

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return []FileHash(result.Elems), nil
}
