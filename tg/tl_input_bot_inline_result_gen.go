// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// InputBotInlineResult represents TL type `inputBotInlineResult#88bf9319`.
// An inline bot result
//
// See https://core.telegram.org/constructor/inputBotInlineResult for reference.
type InputBotInlineResult struct {
	// Flags, see TL conditional fields
	Flags bin.Fields
	// ID of result
	ID string
	// Result type (see bot API docs)
	Type string
	// Result title
	//
	// Use SetTitle and GetTitle helpers.
	Title string
	// Result description
	//
	// Use SetDescription and GetDescription helpers.
	Description string
	// URL of result
	//
	// Use SetURL and GetURL helpers.
	URL string
	// Thumbnail for result
	//
	// Use SetThumb and GetThumb helpers.
	Thumb InputWebDocument
	// Result contents
	//
	// Use SetContent and GetContent helpers.
	Content InputWebDocument
	// Message to send when the result is selected
	SendMessage InputBotInlineMessageClass
}

// InputBotInlineResultTypeID is TL type id of InputBotInlineResult.
const InputBotInlineResultTypeID = 0x88bf9319

// String implements fmt.Stringer.
func (i *InputBotInlineResult) String() string {
	if i == nil {
		return "InputBotInlineResult(nil)"
	}
	var sb strings.Builder
	sb.WriteString("InputBotInlineResult")
	sb.WriteString("{\n")
	sb.WriteString("\tFlags: ")
	sb.WriteString(i.Flags.String())
	sb.WriteString(",\n")
	sb.WriteString("\tID: ")
	sb.WriteString(fmt.Sprint(i.ID))
	sb.WriteString(",\n")
	sb.WriteString("\tType: ")
	sb.WriteString(fmt.Sprint(i.Type))
	sb.WriteString(",\n")
	if i.Flags.Has(1) {
		sb.WriteString("\tTitle: ")
		sb.WriteString(fmt.Sprint(i.Title))
		sb.WriteString(",\n")
	}
	if i.Flags.Has(2) {
		sb.WriteString("\tDescription: ")
		sb.WriteString(fmt.Sprint(i.Description))
		sb.WriteString(",\n")
	}
	if i.Flags.Has(3) {
		sb.WriteString("\tURL: ")
		sb.WriteString(fmt.Sprint(i.URL))
		sb.WriteString(",\n")
	}
	if i.Flags.Has(4) {
		sb.WriteString("\tThumb: ")
		sb.WriteString(i.Thumb.String())
		sb.WriteString(",\n")
	}
	if i.Flags.Has(5) {
		sb.WriteString("\tContent: ")
		sb.WriteString(i.Content.String())
		sb.WriteString(",\n")
	}
	sb.WriteString("\tSendMessage: ")
	sb.WriteString(i.SendMessage.String())
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (i *InputBotInlineResult) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputBotInlineResult#88bf9319 as nil")
	}
	b.PutID(InputBotInlineResultTypeID)
	if err := i.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode inputBotInlineResult#88bf9319: field flags: %w", err)
	}
	b.PutString(i.ID)
	b.PutString(i.Type)
	if i.Flags.Has(1) {
		b.PutString(i.Title)
	}
	if i.Flags.Has(2) {
		b.PutString(i.Description)
	}
	if i.Flags.Has(3) {
		b.PutString(i.URL)
	}
	if i.Flags.Has(4) {
		if err := i.Thumb.Encode(b); err != nil {
			return fmt.Errorf("unable to encode inputBotInlineResult#88bf9319: field thumb: %w", err)
		}
	}
	if i.Flags.Has(5) {
		if err := i.Content.Encode(b); err != nil {
			return fmt.Errorf("unable to encode inputBotInlineResult#88bf9319: field content: %w", err)
		}
	}
	if i.SendMessage == nil {
		return fmt.Errorf("unable to encode inputBotInlineResult#88bf9319: field send_message is nil")
	}
	if err := i.SendMessage.Encode(b); err != nil {
		return fmt.Errorf("unable to encode inputBotInlineResult#88bf9319: field send_message: %w", err)
	}
	return nil
}

// SetTitle sets value of Title conditional field.
func (i *InputBotInlineResult) SetTitle(value string) {
	i.Flags.Set(1)
	i.Title = value
}

// GetTitle returns value of Title conditional field and
// boolean which is true if field was set.
func (i *InputBotInlineResult) GetTitle() (value string, ok bool) {
	if !i.Flags.Has(1) {
		return value, false
	}
	return i.Title, true
}

// SetDescription sets value of Description conditional field.
func (i *InputBotInlineResult) SetDescription(value string) {
	i.Flags.Set(2)
	i.Description = value
}

// GetDescription returns value of Description conditional field and
// boolean which is true if field was set.
func (i *InputBotInlineResult) GetDescription() (value string, ok bool) {
	if !i.Flags.Has(2) {
		return value, false
	}
	return i.Description, true
}

// SetURL sets value of URL conditional field.
func (i *InputBotInlineResult) SetURL(value string) {
	i.Flags.Set(3)
	i.URL = value
}

// GetURL returns value of URL conditional field and
// boolean which is true if field was set.
func (i *InputBotInlineResult) GetURL() (value string, ok bool) {
	if !i.Flags.Has(3) {
		return value, false
	}
	return i.URL, true
}

// SetThumb sets value of Thumb conditional field.
func (i *InputBotInlineResult) SetThumb(value InputWebDocument) {
	i.Flags.Set(4)
	i.Thumb = value
}

// GetThumb returns value of Thumb conditional field and
// boolean which is true if field was set.
func (i *InputBotInlineResult) GetThumb() (value InputWebDocument, ok bool) {
	if !i.Flags.Has(4) {
		return value, false
	}
	return i.Thumb, true
}

// SetContent sets value of Content conditional field.
func (i *InputBotInlineResult) SetContent(value InputWebDocument) {
	i.Flags.Set(5)
	i.Content = value
}

// GetContent returns value of Content conditional field and
// boolean which is true if field was set.
func (i *InputBotInlineResult) GetContent() (value InputWebDocument, ok bool) {
	if !i.Flags.Has(5) {
		return value, false
	}
	return i.Content, true
}

// Decode implements bin.Decoder.
func (i *InputBotInlineResult) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputBotInlineResult#88bf9319 to nil")
	}
	if err := b.ConsumeID(InputBotInlineResultTypeID); err != nil {
		return fmt.Errorf("unable to decode inputBotInlineResult#88bf9319: %w", err)
	}
	{
		if err := i.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResult#88bf9319: field flags: %w", err)
		}
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResult#88bf9319: field id: %w", err)
		}
		i.ID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResult#88bf9319: field type: %w", err)
		}
		i.Type = value
	}
	if i.Flags.Has(1) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResult#88bf9319: field title: %w", err)
		}
		i.Title = value
	}
	if i.Flags.Has(2) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResult#88bf9319: field description: %w", err)
		}
		i.Description = value
	}
	if i.Flags.Has(3) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResult#88bf9319: field url: %w", err)
		}
		i.URL = value
	}
	if i.Flags.Has(4) {
		if err := i.Thumb.Decode(b); err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResult#88bf9319: field thumb: %w", err)
		}
	}
	if i.Flags.Has(5) {
		if err := i.Content.Decode(b); err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResult#88bf9319: field content: %w", err)
		}
	}
	{
		value, err := DecodeInputBotInlineMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResult#88bf9319: field send_message: %w", err)
		}
		i.SendMessage = value
	}
	return nil
}

// construct implements constructor of InputBotInlineResultClass.
func (i InputBotInlineResult) construct() InputBotInlineResultClass { return &i }

// Ensuring interfaces in compile-time for InputBotInlineResult.
var (
	_ bin.Encoder = &InputBotInlineResult{}
	_ bin.Decoder = &InputBotInlineResult{}

	_ InputBotInlineResultClass = &InputBotInlineResult{}
)

// InputBotInlineResultPhoto represents TL type `inputBotInlineResultPhoto#a8d864a7`.
// Photo
//
// See https://core.telegram.org/constructor/inputBotInlineResultPhoto for reference.
type InputBotInlineResultPhoto struct {
	// Result ID
	ID string
	// Result type (see bot API docs)
	Type string
	// Photo to send
	Photo InputPhotoClass
	// Message to send when the result is selected
	SendMessage InputBotInlineMessageClass
}

// InputBotInlineResultPhotoTypeID is TL type id of InputBotInlineResultPhoto.
const InputBotInlineResultPhotoTypeID = 0xa8d864a7

// String implements fmt.Stringer.
func (i *InputBotInlineResultPhoto) String() string {
	if i == nil {
		return "InputBotInlineResultPhoto(nil)"
	}
	var sb strings.Builder
	sb.WriteString("InputBotInlineResultPhoto")
	sb.WriteString("{\n")
	sb.WriteString("\tID: ")
	sb.WriteString(fmt.Sprint(i.ID))
	sb.WriteString(",\n")
	sb.WriteString("\tType: ")
	sb.WriteString(fmt.Sprint(i.Type))
	sb.WriteString(",\n")
	sb.WriteString("\tPhoto: ")
	sb.WriteString(i.Photo.String())
	sb.WriteString(",\n")
	sb.WriteString("\tSendMessage: ")
	sb.WriteString(i.SendMessage.String())
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (i *InputBotInlineResultPhoto) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputBotInlineResultPhoto#a8d864a7 as nil")
	}
	b.PutID(InputBotInlineResultPhotoTypeID)
	b.PutString(i.ID)
	b.PutString(i.Type)
	if i.Photo == nil {
		return fmt.Errorf("unable to encode inputBotInlineResultPhoto#a8d864a7: field photo is nil")
	}
	if err := i.Photo.Encode(b); err != nil {
		return fmt.Errorf("unable to encode inputBotInlineResultPhoto#a8d864a7: field photo: %w", err)
	}
	if i.SendMessage == nil {
		return fmt.Errorf("unable to encode inputBotInlineResultPhoto#a8d864a7: field send_message is nil")
	}
	if err := i.SendMessage.Encode(b); err != nil {
		return fmt.Errorf("unable to encode inputBotInlineResultPhoto#a8d864a7: field send_message: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (i *InputBotInlineResultPhoto) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputBotInlineResultPhoto#a8d864a7 to nil")
	}
	if err := b.ConsumeID(InputBotInlineResultPhotoTypeID); err != nil {
		return fmt.Errorf("unable to decode inputBotInlineResultPhoto#a8d864a7: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResultPhoto#a8d864a7: field id: %w", err)
		}
		i.ID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResultPhoto#a8d864a7: field type: %w", err)
		}
		i.Type = value
	}
	{
		value, err := DecodeInputPhoto(b)
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResultPhoto#a8d864a7: field photo: %w", err)
		}
		i.Photo = value
	}
	{
		value, err := DecodeInputBotInlineMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResultPhoto#a8d864a7: field send_message: %w", err)
		}
		i.SendMessage = value
	}
	return nil
}

// construct implements constructor of InputBotInlineResultClass.
func (i InputBotInlineResultPhoto) construct() InputBotInlineResultClass { return &i }

// Ensuring interfaces in compile-time for InputBotInlineResultPhoto.
var (
	_ bin.Encoder = &InputBotInlineResultPhoto{}
	_ bin.Decoder = &InputBotInlineResultPhoto{}

	_ InputBotInlineResultClass = &InputBotInlineResultPhoto{}
)

// InputBotInlineResultDocument represents TL type `inputBotInlineResultDocument#fff8fdc4`.
// Document (media of any type except for photos)
//
// See https://core.telegram.org/constructor/inputBotInlineResultDocument for reference.
type InputBotInlineResultDocument struct {
	// Flags, see TL conditional fields
	Flags bin.Fields
	// Result ID
	ID string
	// Result type (see bot API docs)
	Type string
	// Result title
	//
	// Use SetTitle and GetTitle helpers.
	Title string
	// Result description
	//
	// Use SetDescription and GetDescription helpers.
	Description string
	// Document to send
	Document InputDocumentClass
	// Message to send when the result is selected
	SendMessage InputBotInlineMessageClass
}

// InputBotInlineResultDocumentTypeID is TL type id of InputBotInlineResultDocument.
const InputBotInlineResultDocumentTypeID = 0xfff8fdc4

// String implements fmt.Stringer.
func (i *InputBotInlineResultDocument) String() string {
	if i == nil {
		return "InputBotInlineResultDocument(nil)"
	}
	var sb strings.Builder
	sb.WriteString("InputBotInlineResultDocument")
	sb.WriteString("{\n")
	sb.WriteString("\tFlags: ")
	sb.WriteString(i.Flags.String())
	sb.WriteString(",\n")
	sb.WriteString("\tID: ")
	sb.WriteString(fmt.Sprint(i.ID))
	sb.WriteString(",\n")
	sb.WriteString("\tType: ")
	sb.WriteString(fmt.Sprint(i.Type))
	sb.WriteString(",\n")
	if i.Flags.Has(1) {
		sb.WriteString("\tTitle: ")
		sb.WriteString(fmt.Sprint(i.Title))
		sb.WriteString(",\n")
	}
	if i.Flags.Has(2) {
		sb.WriteString("\tDescription: ")
		sb.WriteString(fmt.Sprint(i.Description))
		sb.WriteString(",\n")
	}
	sb.WriteString("\tDocument: ")
	sb.WriteString(i.Document.String())
	sb.WriteString(",\n")
	sb.WriteString("\tSendMessage: ")
	sb.WriteString(i.SendMessage.String())
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (i *InputBotInlineResultDocument) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputBotInlineResultDocument#fff8fdc4 as nil")
	}
	b.PutID(InputBotInlineResultDocumentTypeID)
	if err := i.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode inputBotInlineResultDocument#fff8fdc4: field flags: %w", err)
	}
	b.PutString(i.ID)
	b.PutString(i.Type)
	if i.Flags.Has(1) {
		b.PutString(i.Title)
	}
	if i.Flags.Has(2) {
		b.PutString(i.Description)
	}
	if i.Document == nil {
		return fmt.Errorf("unable to encode inputBotInlineResultDocument#fff8fdc4: field document is nil")
	}
	if err := i.Document.Encode(b); err != nil {
		return fmt.Errorf("unable to encode inputBotInlineResultDocument#fff8fdc4: field document: %w", err)
	}
	if i.SendMessage == nil {
		return fmt.Errorf("unable to encode inputBotInlineResultDocument#fff8fdc4: field send_message is nil")
	}
	if err := i.SendMessage.Encode(b); err != nil {
		return fmt.Errorf("unable to encode inputBotInlineResultDocument#fff8fdc4: field send_message: %w", err)
	}
	return nil
}

// SetTitle sets value of Title conditional field.
func (i *InputBotInlineResultDocument) SetTitle(value string) {
	i.Flags.Set(1)
	i.Title = value
}

// GetTitle returns value of Title conditional field and
// boolean which is true if field was set.
func (i *InputBotInlineResultDocument) GetTitle() (value string, ok bool) {
	if !i.Flags.Has(1) {
		return value, false
	}
	return i.Title, true
}

// SetDescription sets value of Description conditional field.
func (i *InputBotInlineResultDocument) SetDescription(value string) {
	i.Flags.Set(2)
	i.Description = value
}

// GetDescription returns value of Description conditional field and
// boolean which is true if field was set.
func (i *InputBotInlineResultDocument) GetDescription() (value string, ok bool) {
	if !i.Flags.Has(2) {
		return value, false
	}
	return i.Description, true
}

// Decode implements bin.Decoder.
func (i *InputBotInlineResultDocument) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputBotInlineResultDocument#fff8fdc4 to nil")
	}
	if err := b.ConsumeID(InputBotInlineResultDocumentTypeID); err != nil {
		return fmt.Errorf("unable to decode inputBotInlineResultDocument#fff8fdc4: %w", err)
	}
	{
		if err := i.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResultDocument#fff8fdc4: field flags: %w", err)
		}
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResultDocument#fff8fdc4: field id: %w", err)
		}
		i.ID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResultDocument#fff8fdc4: field type: %w", err)
		}
		i.Type = value
	}
	if i.Flags.Has(1) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResultDocument#fff8fdc4: field title: %w", err)
		}
		i.Title = value
	}
	if i.Flags.Has(2) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResultDocument#fff8fdc4: field description: %w", err)
		}
		i.Description = value
	}
	{
		value, err := DecodeInputDocument(b)
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResultDocument#fff8fdc4: field document: %w", err)
		}
		i.Document = value
	}
	{
		value, err := DecodeInputBotInlineMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResultDocument#fff8fdc4: field send_message: %w", err)
		}
		i.SendMessage = value
	}
	return nil
}

// construct implements constructor of InputBotInlineResultClass.
func (i InputBotInlineResultDocument) construct() InputBotInlineResultClass { return &i }

// Ensuring interfaces in compile-time for InputBotInlineResultDocument.
var (
	_ bin.Encoder = &InputBotInlineResultDocument{}
	_ bin.Decoder = &InputBotInlineResultDocument{}

	_ InputBotInlineResultClass = &InputBotInlineResultDocument{}
)

// InputBotInlineResultGame represents TL type `inputBotInlineResultGame#4fa417f2`.
// Game
//
// See https://core.telegram.org/constructor/inputBotInlineResultGame for reference.
type InputBotInlineResultGame struct {
	// Result ID
	ID string
	// Game short name
	ShortName string
	// Message to send when the result is selected
	SendMessage InputBotInlineMessageClass
}

// InputBotInlineResultGameTypeID is TL type id of InputBotInlineResultGame.
const InputBotInlineResultGameTypeID = 0x4fa417f2

// String implements fmt.Stringer.
func (i *InputBotInlineResultGame) String() string {
	if i == nil {
		return "InputBotInlineResultGame(nil)"
	}
	var sb strings.Builder
	sb.WriteString("InputBotInlineResultGame")
	sb.WriteString("{\n")
	sb.WriteString("\tID: ")
	sb.WriteString(fmt.Sprint(i.ID))
	sb.WriteString(",\n")
	sb.WriteString("\tShortName: ")
	sb.WriteString(fmt.Sprint(i.ShortName))
	sb.WriteString(",\n")
	sb.WriteString("\tSendMessage: ")
	sb.WriteString(i.SendMessage.String())
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (i *InputBotInlineResultGame) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputBotInlineResultGame#4fa417f2 as nil")
	}
	b.PutID(InputBotInlineResultGameTypeID)
	b.PutString(i.ID)
	b.PutString(i.ShortName)
	if i.SendMessage == nil {
		return fmt.Errorf("unable to encode inputBotInlineResultGame#4fa417f2: field send_message is nil")
	}
	if err := i.SendMessage.Encode(b); err != nil {
		return fmt.Errorf("unable to encode inputBotInlineResultGame#4fa417f2: field send_message: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (i *InputBotInlineResultGame) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputBotInlineResultGame#4fa417f2 to nil")
	}
	if err := b.ConsumeID(InputBotInlineResultGameTypeID); err != nil {
		return fmt.Errorf("unable to decode inputBotInlineResultGame#4fa417f2: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResultGame#4fa417f2: field id: %w", err)
		}
		i.ID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResultGame#4fa417f2: field short_name: %w", err)
		}
		i.ShortName = value
	}
	{
		value, err := DecodeInputBotInlineMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode inputBotInlineResultGame#4fa417f2: field send_message: %w", err)
		}
		i.SendMessage = value
	}
	return nil
}

// construct implements constructor of InputBotInlineResultClass.
func (i InputBotInlineResultGame) construct() InputBotInlineResultClass { return &i }

// Ensuring interfaces in compile-time for InputBotInlineResultGame.
var (
	_ bin.Encoder = &InputBotInlineResultGame{}
	_ bin.Decoder = &InputBotInlineResultGame{}

	_ InputBotInlineResultClass = &InputBotInlineResultGame{}
)

// InputBotInlineResultClass represents InputBotInlineResult generic type.
//
// See https://core.telegram.org/type/InputBotInlineResult for reference.
//
// Example:
//  g, err := DecodeInputBotInlineResult(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *InputBotInlineResult: // inputBotInlineResult#88bf9319
//  case *InputBotInlineResultPhoto: // inputBotInlineResultPhoto#a8d864a7
//  case *InputBotInlineResultDocument: // inputBotInlineResultDocument#fff8fdc4
//  case *InputBotInlineResultGame: // inputBotInlineResultGame#4fa417f2
//  default: panic(v)
//  }
type InputBotInlineResultClass interface {
	bin.Encoder
	bin.Decoder
	construct() InputBotInlineResultClass
	fmt.Stringer
}

// DecodeInputBotInlineResult implements binary de-serialization for InputBotInlineResultClass.
func DecodeInputBotInlineResult(buf *bin.Buffer) (InputBotInlineResultClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case InputBotInlineResultTypeID:
		// Decoding inputBotInlineResult#88bf9319.
		v := InputBotInlineResult{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InputBotInlineResultClass: %w", err)
		}
		return &v, nil
	case InputBotInlineResultPhotoTypeID:
		// Decoding inputBotInlineResultPhoto#a8d864a7.
		v := InputBotInlineResultPhoto{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InputBotInlineResultClass: %w", err)
		}
		return &v, nil
	case InputBotInlineResultDocumentTypeID:
		// Decoding inputBotInlineResultDocument#fff8fdc4.
		v := InputBotInlineResultDocument{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InputBotInlineResultClass: %w", err)
		}
		return &v, nil
	case InputBotInlineResultGameTypeID:
		// Decoding inputBotInlineResultGame#4fa417f2.
		v := InputBotInlineResultGame{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InputBotInlineResultClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode InputBotInlineResultClass: %w", bin.NewUnexpectedID(id))
	}
}

// InputBotInlineResult boxes the InputBotInlineResultClass providing a helper.
type InputBotInlineResultBox struct {
	InputBotInlineResult InputBotInlineResultClass
}

// Decode implements bin.Decoder for InputBotInlineResultBox.
func (b *InputBotInlineResultBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode InputBotInlineResultBox to nil")
	}
	v, err := DecodeInputBotInlineResult(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.InputBotInlineResult = v
	return nil
}

// Encode implements bin.Encode for InputBotInlineResultBox.
func (b *InputBotInlineResultBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.InputBotInlineResult == nil {
		return fmt.Errorf("unable to encode InputBotInlineResultClass as nil")
	}
	return b.InputBotInlineResult.Encode(buf)
}
