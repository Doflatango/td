// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// ChannelsEditBannedRequest represents TL type `channels.editBanned#72796912`.
type ChannelsEditBannedRequest struct {
	// Channel field of ChannelsEditBannedRequest.
	Channel InputChannelClass
	// UserID field of ChannelsEditBannedRequest.
	UserID InputUserClass
	// BannedRights field of ChannelsEditBannedRequest.
	BannedRights ChatBannedRights
}

// ChannelsEditBannedRequestTypeID is TL type id of ChannelsEditBannedRequest.
const ChannelsEditBannedRequestTypeID = 0x72796912

// Encode implements bin.Encoder.
func (e *ChannelsEditBannedRequest) Encode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode channels.editBanned#72796912 as nil")
	}
	b.PutID(ChannelsEditBannedRequestTypeID)
	if e.Channel == nil {
		return fmt.Errorf("unable to encode channels.editBanned#72796912: field channel is nil")
	}
	if err := e.Channel.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channels.editBanned#72796912: field channel: %w", err)
	}
	if e.UserID == nil {
		return fmt.Errorf("unable to encode channels.editBanned#72796912: field user_id is nil")
	}
	if err := e.UserID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channels.editBanned#72796912: field user_id: %w", err)
	}
	if err := e.BannedRights.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channels.editBanned#72796912: field banned_rights: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (e *ChannelsEditBannedRequest) Decode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode channels.editBanned#72796912 to nil")
	}
	if err := b.ConsumeID(ChannelsEditBannedRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode channels.editBanned#72796912: %w", err)
	}
	{
		value, err := DecodeInputChannel(b)
		if err != nil {
			return fmt.Errorf("unable to decode channels.editBanned#72796912: field channel: %w", err)
		}
		e.Channel = value
	}
	{
		value, err := DecodeInputUser(b)
		if err != nil {
			return fmt.Errorf("unable to decode channels.editBanned#72796912: field user_id: %w", err)
		}
		e.UserID = value
	}
	{
		if err := e.BannedRights.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channels.editBanned#72796912: field banned_rights: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for ChannelsEditBannedRequest.
var (
	_ bin.Encoder = &ChannelsEditBannedRequest{}
	_ bin.Decoder = &ChannelsEditBannedRequest{}
)

// ChannelsEditBanned invokes method channels.editBanned#72796912 returning error if any.
func (c *Client) ChannelsEditBanned(ctx context.Context, request *ChannelsEditBannedRequest) (UpdatesClass, error) {
	var result UpdatesBox
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
