// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// HelpAppUpdate represents TL type `help.appUpdate#1da7158f`.
type HelpAppUpdate struct {
	// Flags field of HelpAppUpdate.
	Flags bin.Fields
	// CanNotSkip field of HelpAppUpdate.
	CanNotSkip bool
	// ID field of HelpAppUpdate.
	ID int
	// Version field of HelpAppUpdate.
	Version string
	// Text field of HelpAppUpdate.
	Text string
	// Entities field of HelpAppUpdate.
	Entities []MessageEntityClass
	// Document field of HelpAppUpdate.
	//
	// Use SetDocument and GetDocument helpers.
	Document DocumentClass
	// URL field of HelpAppUpdate.
	//
	// Use SetURL and GetURL helpers.
	URL string
}

// HelpAppUpdateTypeID is TL type id of HelpAppUpdate.
const HelpAppUpdateTypeID = 0x1da7158f

// Encode implements bin.Encoder.
func (a *HelpAppUpdate) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode help.appUpdate#1da7158f as nil")
	}
	b.PutID(HelpAppUpdateTypeID)
	if err := a.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode help.appUpdate#1da7158f: field flags: %w", err)
	}
	b.PutInt(a.ID)
	b.PutString(a.Version)
	b.PutString(a.Text)
	b.PutVectorHeader(len(a.Entities))
	for idx, v := range a.Entities {
		if v == nil {
			return fmt.Errorf("unable to encode help.appUpdate#1da7158f: field entities element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode help.appUpdate#1da7158f: field entities element with index %d: %w", idx, err)
		}
	}
	if a.Flags.Has(1) {
		if a.Document == nil {
			return fmt.Errorf("unable to encode help.appUpdate#1da7158f: field document is nil")
		}
		if err := a.Document.Encode(b); err != nil {
			return fmt.Errorf("unable to encode help.appUpdate#1da7158f: field document: %w", err)
		}
	}
	if a.Flags.Has(2) {
		b.PutString(a.URL)
	}
	return nil
}

// SetCanNotSkip sets value of CanNotSkip conditional field.
func (a *HelpAppUpdate) SetCanNotSkip(value bool) {
	if value {
		a.Flags.Set(0)
	} else {
		a.Flags.Unset(0)
	}
}

// SetDocument sets value of Document conditional field.
func (a *HelpAppUpdate) SetDocument(value DocumentClass) {
	a.Flags.Set(1)
	a.Document = value
}

// GetDocument returns value of Document conditional field and
// boolean which is true if field was set.
func (a *HelpAppUpdate) GetDocument() (value DocumentClass, ok bool) {
	if !a.Flags.Has(1) {
		return value, false
	}
	return a.Document, true
}

// SetURL sets value of URL conditional field.
func (a *HelpAppUpdate) SetURL(value string) {
	a.Flags.Set(2)
	a.URL = value
}

// GetURL returns value of URL conditional field and
// boolean which is true if field was set.
func (a *HelpAppUpdate) GetURL() (value string, ok bool) {
	if !a.Flags.Has(2) {
		return value, false
	}
	return a.URL, true
}

// Decode implements bin.Decoder.
func (a *HelpAppUpdate) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode help.appUpdate#1da7158f to nil")
	}
	if err := b.ConsumeID(HelpAppUpdateTypeID); err != nil {
		return fmt.Errorf("unable to decode help.appUpdate#1da7158f: %w", err)
	}
	{
		if err := a.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode help.appUpdate#1da7158f: field flags: %w", err)
		}
	}
	a.CanNotSkip = a.Flags.Has(0)
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode help.appUpdate#1da7158f: field id: %w", err)
		}
		a.ID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode help.appUpdate#1da7158f: field version: %w", err)
		}
		a.Version = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode help.appUpdate#1da7158f: field text: %w", err)
		}
		a.Text = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode help.appUpdate#1da7158f: field entities: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeMessageEntity(b)
			if err != nil {
				return fmt.Errorf("unable to decode help.appUpdate#1da7158f: field entities: %w", err)
			}
			a.Entities = append(a.Entities, value)
		}
	}
	if a.Flags.Has(1) {
		value, err := DecodeDocument(b)
		if err != nil {
			return fmt.Errorf("unable to decode help.appUpdate#1da7158f: field document: %w", err)
		}
		a.Document = value
	}
	if a.Flags.Has(2) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode help.appUpdate#1da7158f: field url: %w", err)
		}
		a.URL = value
	}
	return nil
}

// construct implements constructor of HelpAppUpdateClass.
func (a HelpAppUpdate) construct() HelpAppUpdateClass { return &a }

// Ensuring interfaces in compile-time for HelpAppUpdate.
var (
	_ bin.Encoder = &HelpAppUpdate{}
	_ bin.Decoder = &HelpAppUpdate{}

	_ HelpAppUpdateClass = &HelpAppUpdate{}
)

// HelpNoAppUpdate represents TL type `help.noAppUpdate#c45a6536`.
type HelpNoAppUpdate struct {
}

// HelpNoAppUpdateTypeID is TL type id of HelpNoAppUpdate.
const HelpNoAppUpdateTypeID = 0xc45a6536

// Encode implements bin.Encoder.
func (n *HelpNoAppUpdate) Encode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't encode help.noAppUpdate#c45a6536 as nil")
	}
	b.PutID(HelpNoAppUpdateTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (n *HelpNoAppUpdate) Decode(b *bin.Buffer) error {
	if n == nil {
		return fmt.Errorf("can't decode help.noAppUpdate#c45a6536 to nil")
	}
	if err := b.ConsumeID(HelpNoAppUpdateTypeID); err != nil {
		return fmt.Errorf("unable to decode help.noAppUpdate#c45a6536: %w", err)
	}
	return nil
}

// construct implements constructor of HelpAppUpdateClass.
func (n HelpNoAppUpdate) construct() HelpAppUpdateClass { return &n }

// Ensuring interfaces in compile-time for HelpNoAppUpdate.
var (
	_ bin.Encoder = &HelpNoAppUpdate{}
	_ bin.Decoder = &HelpNoAppUpdate{}

	_ HelpAppUpdateClass = &HelpNoAppUpdate{}
)

// HelpAppUpdateClass represents help.AppUpdate generic type.
//
// Example:
//  g, err := DecodeHelpAppUpdate(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *HelpAppUpdate: // help.appUpdate#1da7158f
//  case *HelpNoAppUpdate: // help.noAppUpdate#c45a6536
//  default: panic(v)
//  }
type HelpAppUpdateClass interface {
	bin.Encoder
	bin.Decoder
	construct() HelpAppUpdateClass
}

// DecodeHelpAppUpdate implements binary de-serialization for HelpAppUpdateClass.
func DecodeHelpAppUpdate(buf *bin.Buffer) (HelpAppUpdateClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case HelpAppUpdateTypeID:
		// Decoding help.appUpdate#1da7158f.
		v := HelpAppUpdate{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode HelpAppUpdateClass: %w", err)
		}
		return &v, nil
	case HelpNoAppUpdateTypeID:
		// Decoding help.noAppUpdate#c45a6536.
		v := HelpNoAppUpdate{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode HelpAppUpdateClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode HelpAppUpdateClass: %w", bin.NewUnexpectedID(id))
	}
}

// HelpAppUpdate boxes the HelpAppUpdateClass providing a helper.
type HelpAppUpdateBox struct {
	HelpAppUpdate HelpAppUpdateClass
}

// Decode implements bin.Decoder for HelpAppUpdateBox.
func (b *HelpAppUpdateBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode HelpAppUpdateBox to nil")
	}
	v, err := DecodeHelpAppUpdate(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.HelpAppUpdate = v
	return nil
}

// Encode implements bin.Encode for HelpAppUpdateBox.
func (b *HelpAppUpdateBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.HelpAppUpdate == nil {
		return fmt.Errorf("unable to encode HelpAppUpdateClass as nil")
	}
	return b.HelpAppUpdate.Encode(buf)
}
