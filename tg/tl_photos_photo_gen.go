// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// PhotosPhoto represents TL type `photos.photo#20212ca8`.
//
// See https://core.telegram.org/constructor/photos.photo for reference.
type PhotosPhoto struct {
	// Photo field of PhotosPhoto.
	Photo PhotoClass
	// Users field of PhotosPhoto.
	Users []UserClass
}

// PhotosPhotoTypeID is TL type id of PhotosPhoto.
const PhotosPhotoTypeID = 0x20212ca8

// Encode implements bin.Encoder.
func (p *PhotosPhoto) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode photos.photo#20212ca8 as nil")
	}
	b.PutID(PhotosPhotoTypeID)
	if p.Photo == nil {
		return fmt.Errorf("unable to encode photos.photo#20212ca8: field photo is nil")
	}
	if err := p.Photo.Encode(b); err != nil {
		return fmt.Errorf("unable to encode photos.photo#20212ca8: field photo: %w", err)
	}
	b.PutVectorHeader(len(p.Users))
	for idx, v := range p.Users {
		if v == nil {
			return fmt.Errorf("unable to encode photos.photo#20212ca8: field users element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode photos.photo#20212ca8: field users element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (p *PhotosPhoto) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode photos.photo#20212ca8 to nil")
	}
	if err := b.ConsumeID(PhotosPhotoTypeID); err != nil {
		return fmt.Errorf("unable to decode photos.photo#20212ca8: %w", err)
	}
	{
		value, err := DecodePhoto(b)
		if err != nil {
			return fmt.Errorf("unable to decode photos.photo#20212ca8: field photo: %w", err)
		}
		p.Photo = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode photos.photo#20212ca8: field users: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(b)
			if err != nil {
				return fmt.Errorf("unable to decode photos.photo#20212ca8: field users: %w", err)
			}
			p.Users = append(p.Users, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for PhotosPhoto.
var (
	_ bin.Encoder = &PhotosPhoto{}
	_ bin.Decoder = &PhotosPhoto{}
)
