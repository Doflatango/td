// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// StatsPercentValue represents TL type `statsPercentValue#cbce2fe0`.
// Channel statistics percentage.
// Compute the percentage simply by doing part * total / 100
//
// See https://core.telegram.org/constructor/statsPercentValue for reference.
type StatsPercentValue struct {
	// Partial value
	Part float64
	// Total value
	Total float64
}

// StatsPercentValueTypeID is TL type id of StatsPercentValue.
const StatsPercentValueTypeID = 0xcbce2fe0

// String implements fmt.Stringer.
func (s *StatsPercentValue) String() string {
	if s == nil {
		return "StatsPercentValue(nil)"
	}
	var sb strings.Builder
	sb.WriteString("StatsPercentValue")
	sb.WriteString("{\n")
	sb.WriteString("\tPart: ")
	sb.WriteString(fmt.Sprint(s.Part))
	sb.WriteString(",\n")
	sb.WriteString("\tTotal: ")
	sb.WriteString(fmt.Sprint(s.Total))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (s *StatsPercentValue) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode statsPercentValue#cbce2fe0 as nil")
	}
	b.PutID(StatsPercentValueTypeID)
	b.PutDouble(s.Part)
	b.PutDouble(s.Total)
	return nil
}

// Decode implements bin.Decoder.
func (s *StatsPercentValue) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode statsPercentValue#cbce2fe0 to nil")
	}
	if err := b.ConsumeID(StatsPercentValueTypeID); err != nil {
		return fmt.Errorf("unable to decode statsPercentValue#cbce2fe0: %w", err)
	}
	{
		value, err := b.Double()
		if err != nil {
			return fmt.Errorf("unable to decode statsPercentValue#cbce2fe0: field part: %w", err)
		}
		s.Part = value
	}
	{
		value, err := b.Double()
		if err != nil {
			return fmt.Errorf("unable to decode statsPercentValue#cbce2fe0: field total: %w", err)
		}
		s.Total = value
	}
	return nil
}

// Ensuring interfaces in compile-time for StatsPercentValue.
var (
	_ bin.Encoder = &StatsPercentValue{}
	_ bin.Decoder = &StatsPercentValue{}
)
