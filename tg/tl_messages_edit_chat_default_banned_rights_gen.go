// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesEditChatDefaultBannedRightsRequest represents TL type `messages.editChatDefaultBannedRights#a5866b41`.
type MessagesEditChatDefaultBannedRightsRequest struct {
	// Peer field of MessagesEditChatDefaultBannedRightsRequest.
	Peer InputPeerClass
	// BannedRights field of MessagesEditChatDefaultBannedRightsRequest.
	BannedRights ChatBannedRights
}

// MessagesEditChatDefaultBannedRightsRequestTypeID is TL type id of MessagesEditChatDefaultBannedRightsRequest.
const MessagesEditChatDefaultBannedRightsRequestTypeID = 0xa5866b41

// Encode implements bin.Encoder.
func (e *MessagesEditChatDefaultBannedRightsRequest) Encode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode messages.editChatDefaultBannedRights#a5866b41 as nil")
	}
	b.PutID(MessagesEditChatDefaultBannedRightsRequestTypeID)
	if e.Peer == nil {
		return fmt.Errorf("unable to encode messages.editChatDefaultBannedRights#a5866b41: field peer is nil")
	}
	if err := e.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.editChatDefaultBannedRights#a5866b41: field peer: %w", err)
	}
	if err := e.BannedRights.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.editChatDefaultBannedRights#a5866b41: field banned_rights: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (e *MessagesEditChatDefaultBannedRightsRequest) Decode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode messages.editChatDefaultBannedRights#a5866b41 to nil")
	}
	if err := b.ConsumeID(MessagesEditChatDefaultBannedRightsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.editChatDefaultBannedRights#a5866b41: %w", err)
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.editChatDefaultBannedRights#a5866b41: field peer: %w", err)
		}
		e.Peer = value
	}
	{
		if err := e.BannedRights.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.editChatDefaultBannedRights#a5866b41: field banned_rights: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesEditChatDefaultBannedRightsRequest.
var (
	_ bin.Encoder = &MessagesEditChatDefaultBannedRightsRequest{}
	_ bin.Decoder = &MessagesEditChatDefaultBannedRightsRequest{}
)

// MessagesEditChatDefaultBannedRights invokes method messages.editChatDefaultBannedRights#a5866b41 returning error if any.
func (c *Client) MessagesEditChatDefaultBannedRights(ctx context.Context, request *MessagesEditChatDefaultBannedRightsRequest) (UpdatesClass, error) {
	var result UpdatesBox
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
