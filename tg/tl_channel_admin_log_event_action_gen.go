// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// ChannelAdminLogEventActionChangeTitle represents TL type `channelAdminLogEventActionChangeTitle#e6dfb825`.
// Channel/supergroup title was changed
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionChangeTitle for reference.
type ChannelAdminLogEventActionChangeTitle struct {
	// Previous title
	PrevValue string `tl:"prev_value"`
	// New title
	NewValue string `tl:"new_value"`
}

// ChannelAdminLogEventActionChangeTitleTypeID is TL type id of ChannelAdminLogEventActionChangeTitle.
const ChannelAdminLogEventActionChangeTitleTypeID = 0xe6dfb825

func (c *ChannelAdminLogEventActionChangeTitle) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.PrevValue == "") {
		return false
	}
	if !(c.NewValue == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionChangeTitle) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionChangeTitle(nil)"
	}
	type Alias ChannelAdminLogEventActionChangeTitle
	return fmt.Sprintf("ChannelAdminLogEventActionChangeTitle%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionChangeTitle from given interface.
func (c *ChannelAdminLogEventActionChangeTitle) FillFrom(from interface {
	GetPrevValue() (value string)
	GetNewValue() (value string)
}) {
	c.PrevValue = from.GetPrevValue()
	c.NewValue = from.GetNewValue()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionChangeTitle) TypeID() uint32 {
	return ChannelAdminLogEventActionChangeTitleTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionChangeTitle) TypeName() string {
	return "channelAdminLogEventActionChangeTitle"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionChangeTitle) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionChangeTitle#e6dfb825 as nil")
	}
	b.PutID(ChannelAdminLogEventActionChangeTitleTypeID)
	b.PutString(c.PrevValue)
	b.PutString(c.NewValue)
	return nil
}

// GetPrevValue returns value of PrevValue field.
func (c *ChannelAdminLogEventActionChangeTitle) GetPrevValue() (value string) {
	return c.PrevValue
}

// GetNewValue returns value of NewValue field.
func (c *ChannelAdminLogEventActionChangeTitle) GetNewValue() (value string) {
	return c.NewValue
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionChangeTitle) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionChangeTitle#e6dfb825 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionChangeTitleTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionChangeTitle#e6dfb825: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeTitle#e6dfb825: field prev_value: %w", err)
		}
		c.PrevValue = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeTitle#e6dfb825: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionChangeTitle) construct() ChannelAdminLogEventActionClass { return &c }

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionChangeTitle.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionChangeTitle{}
	_ bin.Decoder = &ChannelAdminLogEventActionChangeTitle{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionChangeTitle{}
)

// ChannelAdminLogEventActionChangeAbout represents TL type `channelAdminLogEventActionChangeAbout#55188a2e`.
// The description was changed
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionChangeAbout for reference.
type ChannelAdminLogEventActionChangeAbout struct {
	// Previous description
	PrevValue string `tl:"prev_value"`
	// New description
	NewValue string `tl:"new_value"`
}

// ChannelAdminLogEventActionChangeAboutTypeID is TL type id of ChannelAdminLogEventActionChangeAbout.
const ChannelAdminLogEventActionChangeAboutTypeID = 0x55188a2e

func (c *ChannelAdminLogEventActionChangeAbout) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.PrevValue == "") {
		return false
	}
	if !(c.NewValue == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionChangeAbout) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionChangeAbout(nil)"
	}
	type Alias ChannelAdminLogEventActionChangeAbout
	return fmt.Sprintf("ChannelAdminLogEventActionChangeAbout%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionChangeAbout from given interface.
func (c *ChannelAdminLogEventActionChangeAbout) FillFrom(from interface {
	GetPrevValue() (value string)
	GetNewValue() (value string)
}) {
	c.PrevValue = from.GetPrevValue()
	c.NewValue = from.GetNewValue()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionChangeAbout) TypeID() uint32 {
	return ChannelAdminLogEventActionChangeAboutTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionChangeAbout) TypeName() string {
	return "channelAdminLogEventActionChangeAbout"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionChangeAbout) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionChangeAbout#55188a2e as nil")
	}
	b.PutID(ChannelAdminLogEventActionChangeAboutTypeID)
	b.PutString(c.PrevValue)
	b.PutString(c.NewValue)
	return nil
}

// GetPrevValue returns value of PrevValue field.
func (c *ChannelAdminLogEventActionChangeAbout) GetPrevValue() (value string) {
	return c.PrevValue
}

// GetNewValue returns value of NewValue field.
func (c *ChannelAdminLogEventActionChangeAbout) GetNewValue() (value string) {
	return c.NewValue
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionChangeAbout) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionChangeAbout#55188a2e to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionChangeAboutTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionChangeAbout#55188a2e: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeAbout#55188a2e: field prev_value: %w", err)
		}
		c.PrevValue = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeAbout#55188a2e: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionChangeAbout) construct() ChannelAdminLogEventActionClass { return &c }

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionChangeAbout.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionChangeAbout{}
	_ bin.Decoder = &ChannelAdminLogEventActionChangeAbout{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionChangeAbout{}
)

// ChannelAdminLogEventActionChangeUsername represents TL type `channelAdminLogEventActionChangeUsername#6a4afc38`.
// Channel/supergroup username was changed
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionChangeUsername for reference.
type ChannelAdminLogEventActionChangeUsername struct {
	// Old username
	PrevValue string `tl:"prev_value"`
	// New username
	NewValue string `tl:"new_value"`
}

// ChannelAdminLogEventActionChangeUsernameTypeID is TL type id of ChannelAdminLogEventActionChangeUsername.
const ChannelAdminLogEventActionChangeUsernameTypeID = 0x6a4afc38

func (c *ChannelAdminLogEventActionChangeUsername) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.PrevValue == "") {
		return false
	}
	if !(c.NewValue == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionChangeUsername) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionChangeUsername(nil)"
	}
	type Alias ChannelAdminLogEventActionChangeUsername
	return fmt.Sprintf("ChannelAdminLogEventActionChangeUsername%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionChangeUsername from given interface.
func (c *ChannelAdminLogEventActionChangeUsername) FillFrom(from interface {
	GetPrevValue() (value string)
	GetNewValue() (value string)
}) {
	c.PrevValue = from.GetPrevValue()
	c.NewValue = from.GetNewValue()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionChangeUsername) TypeID() uint32 {
	return ChannelAdminLogEventActionChangeUsernameTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionChangeUsername) TypeName() string {
	return "channelAdminLogEventActionChangeUsername"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionChangeUsername) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionChangeUsername#6a4afc38 as nil")
	}
	b.PutID(ChannelAdminLogEventActionChangeUsernameTypeID)
	b.PutString(c.PrevValue)
	b.PutString(c.NewValue)
	return nil
}

// GetPrevValue returns value of PrevValue field.
func (c *ChannelAdminLogEventActionChangeUsername) GetPrevValue() (value string) {
	return c.PrevValue
}

// GetNewValue returns value of NewValue field.
func (c *ChannelAdminLogEventActionChangeUsername) GetNewValue() (value string) {
	return c.NewValue
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionChangeUsername) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionChangeUsername#6a4afc38 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionChangeUsernameTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionChangeUsername#6a4afc38: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeUsername#6a4afc38: field prev_value: %w", err)
		}
		c.PrevValue = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeUsername#6a4afc38: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionChangeUsername) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionChangeUsername.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionChangeUsername{}
	_ bin.Decoder = &ChannelAdminLogEventActionChangeUsername{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionChangeUsername{}
)

// ChannelAdminLogEventActionChangePhoto represents TL type `channelAdminLogEventActionChangePhoto#434bd2af`.
// The channel/supergroup's picture was changed
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionChangePhoto for reference.
type ChannelAdminLogEventActionChangePhoto struct {
	// Previous picture
	PrevPhoto PhotoClass `tl:"prev_photo"`
	// New picture
	NewPhoto PhotoClass `tl:"new_photo"`
}

// ChannelAdminLogEventActionChangePhotoTypeID is TL type id of ChannelAdminLogEventActionChangePhoto.
const ChannelAdminLogEventActionChangePhotoTypeID = 0x434bd2af

func (c *ChannelAdminLogEventActionChangePhoto) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.PrevPhoto == nil) {
		return false
	}
	if !(c.NewPhoto == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionChangePhoto) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionChangePhoto(nil)"
	}
	type Alias ChannelAdminLogEventActionChangePhoto
	return fmt.Sprintf("ChannelAdminLogEventActionChangePhoto%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionChangePhoto from given interface.
func (c *ChannelAdminLogEventActionChangePhoto) FillFrom(from interface {
	GetPrevPhoto() (value PhotoClass)
	GetNewPhoto() (value PhotoClass)
}) {
	c.PrevPhoto = from.GetPrevPhoto()
	c.NewPhoto = from.GetNewPhoto()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionChangePhoto) TypeID() uint32 {
	return ChannelAdminLogEventActionChangePhotoTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionChangePhoto) TypeName() string {
	return "channelAdminLogEventActionChangePhoto"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionChangePhoto) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionChangePhoto#434bd2af as nil")
	}
	b.PutID(ChannelAdminLogEventActionChangePhotoTypeID)
	if c.PrevPhoto == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangePhoto#434bd2af: field prev_photo is nil")
	}
	if err := c.PrevPhoto.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangePhoto#434bd2af: field prev_photo: %w", err)
	}
	if c.NewPhoto == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangePhoto#434bd2af: field new_photo is nil")
	}
	if err := c.NewPhoto.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangePhoto#434bd2af: field new_photo: %w", err)
	}
	return nil
}

// GetPrevPhoto returns value of PrevPhoto field.
func (c *ChannelAdminLogEventActionChangePhoto) GetPrevPhoto() (value PhotoClass) {
	return c.PrevPhoto
}

// GetNewPhoto returns value of NewPhoto field.
func (c *ChannelAdminLogEventActionChangePhoto) GetNewPhoto() (value PhotoClass) {
	return c.NewPhoto
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionChangePhoto) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionChangePhoto#434bd2af to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionChangePhotoTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionChangePhoto#434bd2af: %w", err)
	}
	{
		value, err := DecodePhoto(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangePhoto#434bd2af: field prev_photo: %w", err)
		}
		c.PrevPhoto = value
	}
	{
		value, err := DecodePhoto(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangePhoto#434bd2af: field new_photo: %w", err)
		}
		c.NewPhoto = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionChangePhoto) construct() ChannelAdminLogEventActionClass { return &c }

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionChangePhoto.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionChangePhoto{}
	_ bin.Decoder = &ChannelAdminLogEventActionChangePhoto{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionChangePhoto{}
)

// ChannelAdminLogEventActionToggleInvites represents TL type `channelAdminLogEventActionToggleInvites#1b7907ae`.
// Invites were enabled/disabled
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionToggleInvites for reference.
type ChannelAdminLogEventActionToggleInvites struct {
	// New value
	NewValue bool `tl:"new_value"`
}

// ChannelAdminLogEventActionToggleInvitesTypeID is TL type id of ChannelAdminLogEventActionToggleInvites.
const ChannelAdminLogEventActionToggleInvitesTypeID = 0x1b7907ae

func (c *ChannelAdminLogEventActionToggleInvites) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.NewValue == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionToggleInvites) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionToggleInvites(nil)"
	}
	type Alias ChannelAdminLogEventActionToggleInvites
	return fmt.Sprintf("ChannelAdminLogEventActionToggleInvites%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionToggleInvites from given interface.
func (c *ChannelAdminLogEventActionToggleInvites) FillFrom(from interface {
	GetNewValue() (value bool)
}) {
	c.NewValue = from.GetNewValue()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionToggleInvites) TypeID() uint32 {
	return ChannelAdminLogEventActionToggleInvitesTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionToggleInvites) TypeName() string {
	return "channelAdminLogEventActionToggleInvites"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionToggleInvites) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionToggleInvites#1b7907ae as nil")
	}
	b.PutID(ChannelAdminLogEventActionToggleInvitesTypeID)
	b.PutBool(c.NewValue)
	return nil
}

// GetNewValue returns value of NewValue field.
func (c *ChannelAdminLogEventActionToggleInvites) GetNewValue() (value bool) {
	return c.NewValue
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionToggleInvites) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionToggleInvites#1b7907ae to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionToggleInvitesTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionToggleInvites#1b7907ae: %w", err)
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionToggleInvites#1b7907ae: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionToggleInvites) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionToggleInvites.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionToggleInvites{}
	_ bin.Decoder = &ChannelAdminLogEventActionToggleInvites{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionToggleInvites{}
)

// ChannelAdminLogEventActionToggleSignatures represents TL type `channelAdminLogEventActionToggleSignatures#26ae0971`.
// Channel signatures were enabled/disabled
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionToggleSignatures for reference.
type ChannelAdminLogEventActionToggleSignatures struct {
	// New value
	NewValue bool `tl:"new_value"`
}

// ChannelAdminLogEventActionToggleSignaturesTypeID is TL type id of ChannelAdminLogEventActionToggleSignatures.
const ChannelAdminLogEventActionToggleSignaturesTypeID = 0x26ae0971

func (c *ChannelAdminLogEventActionToggleSignatures) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.NewValue == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionToggleSignatures) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionToggleSignatures(nil)"
	}
	type Alias ChannelAdminLogEventActionToggleSignatures
	return fmt.Sprintf("ChannelAdminLogEventActionToggleSignatures%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionToggleSignatures from given interface.
func (c *ChannelAdminLogEventActionToggleSignatures) FillFrom(from interface {
	GetNewValue() (value bool)
}) {
	c.NewValue = from.GetNewValue()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionToggleSignatures) TypeID() uint32 {
	return ChannelAdminLogEventActionToggleSignaturesTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionToggleSignatures) TypeName() string {
	return "channelAdminLogEventActionToggleSignatures"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionToggleSignatures) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionToggleSignatures#26ae0971 as nil")
	}
	b.PutID(ChannelAdminLogEventActionToggleSignaturesTypeID)
	b.PutBool(c.NewValue)
	return nil
}

// GetNewValue returns value of NewValue field.
func (c *ChannelAdminLogEventActionToggleSignatures) GetNewValue() (value bool) {
	return c.NewValue
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionToggleSignatures) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionToggleSignatures#26ae0971 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionToggleSignaturesTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionToggleSignatures#26ae0971: %w", err)
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionToggleSignatures#26ae0971: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionToggleSignatures) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionToggleSignatures.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionToggleSignatures{}
	_ bin.Decoder = &ChannelAdminLogEventActionToggleSignatures{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionToggleSignatures{}
)

// ChannelAdminLogEventActionUpdatePinned represents TL type `channelAdminLogEventActionUpdatePinned#e9e82c18`.
// A message was pinned
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionUpdatePinned for reference.
type ChannelAdminLogEventActionUpdatePinned struct {
	// The message that was pinned
	Message MessageClass `tl:"message"`
}

// ChannelAdminLogEventActionUpdatePinnedTypeID is TL type id of ChannelAdminLogEventActionUpdatePinned.
const ChannelAdminLogEventActionUpdatePinnedTypeID = 0xe9e82c18

func (c *ChannelAdminLogEventActionUpdatePinned) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Message == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionUpdatePinned) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionUpdatePinned(nil)"
	}
	type Alias ChannelAdminLogEventActionUpdatePinned
	return fmt.Sprintf("ChannelAdminLogEventActionUpdatePinned%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionUpdatePinned from given interface.
func (c *ChannelAdminLogEventActionUpdatePinned) FillFrom(from interface {
	GetMessage() (value MessageClass)
}) {
	c.Message = from.GetMessage()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionUpdatePinned) TypeID() uint32 {
	return ChannelAdminLogEventActionUpdatePinnedTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionUpdatePinned) TypeName() string {
	return "channelAdminLogEventActionUpdatePinned"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionUpdatePinned) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionUpdatePinned#e9e82c18 as nil")
	}
	b.PutID(ChannelAdminLogEventActionUpdatePinnedTypeID)
	if c.Message == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionUpdatePinned#e9e82c18: field message is nil")
	}
	if err := c.Message.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionUpdatePinned#e9e82c18: field message: %w", err)
	}
	return nil
}

// GetMessage returns value of Message field.
func (c *ChannelAdminLogEventActionUpdatePinned) GetMessage() (value MessageClass) {
	return c.Message
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionUpdatePinned) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionUpdatePinned#e9e82c18 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionUpdatePinnedTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionUpdatePinned#e9e82c18: %w", err)
	}
	{
		value, err := DecodeMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionUpdatePinned#e9e82c18: field message: %w", err)
		}
		c.Message = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionUpdatePinned) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionUpdatePinned.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionUpdatePinned{}
	_ bin.Decoder = &ChannelAdminLogEventActionUpdatePinned{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionUpdatePinned{}
)

// ChannelAdminLogEventActionEditMessage represents TL type `channelAdminLogEventActionEditMessage#709b2405`.
// A message was edited
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionEditMessage for reference.
type ChannelAdminLogEventActionEditMessage struct {
	// Old message
	PrevMessage MessageClass `tl:"prev_message"`
	// New message
	NewMessage MessageClass `tl:"new_message"`
}

// ChannelAdminLogEventActionEditMessageTypeID is TL type id of ChannelAdminLogEventActionEditMessage.
const ChannelAdminLogEventActionEditMessageTypeID = 0x709b2405

func (c *ChannelAdminLogEventActionEditMessage) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.PrevMessage == nil) {
		return false
	}
	if !(c.NewMessage == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionEditMessage) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionEditMessage(nil)"
	}
	type Alias ChannelAdminLogEventActionEditMessage
	return fmt.Sprintf("ChannelAdminLogEventActionEditMessage%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionEditMessage from given interface.
func (c *ChannelAdminLogEventActionEditMessage) FillFrom(from interface {
	GetPrevMessage() (value MessageClass)
	GetNewMessage() (value MessageClass)
}) {
	c.PrevMessage = from.GetPrevMessage()
	c.NewMessage = from.GetNewMessage()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionEditMessage) TypeID() uint32 {
	return ChannelAdminLogEventActionEditMessageTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionEditMessage) TypeName() string {
	return "channelAdminLogEventActionEditMessage"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionEditMessage) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionEditMessage#709b2405 as nil")
	}
	b.PutID(ChannelAdminLogEventActionEditMessageTypeID)
	if c.PrevMessage == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionEditMessage#709b2405: field prev_message is nil")
	}
	if err := c.PrevMessage.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionEditMessage#709b2405: field prev_message: %w", err)
	}
	if c.NewMessage == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionEditMessage#709b2405: field new_message is nil")
	}
	if err := c.NewMessage.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionEditMessage#709b2405: field new_message: %w", err)
	}
	return nil
}

// GetPrevMessage returns value of PrevMessage field.
func (c *ChannelAdminLogEventActionEditMessage) GetPrevMessage() (value MessageClass) {
	return c.PrevMessage
}

// GetNewMessage returns value of NewMessage field.
func (c *ChannelAdminLogEventActionEditMessage) GetNewMessage() (value MessageClass) {
	return c.NewMessage
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionEditMessage) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionEditMessage#709b2405 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionEditMessageTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionEditMessage#709b2405: %w", err)
	}
	{
		value, err := DecodeMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionEditMessage#709b2405: field prev_message: %w", err)
		}
		c.PrevMessage = value
	}
	{
		value, err := DecodeMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionEditMessage#709b2405: field new_message: %w", err)
		}
		c.NewMessage = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionEditMessage) construct() ChannelAdminLogEventActionClass { return &c }

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionEditMessage.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionEditMessage{}
	_ bin.Decoder = &ChannelAdminLogEventActionEditMessage{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionEditMessage{}
)

// ChannelAdminLogEventActionDeleteMessage represents TL type `channelAdminLogEventActionDeleteMessage#42e047bb`.
// A message was deleted
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionDeleteMessage for reference.
type ChannelAdminLogEventActionDeleteMessage struct {
	// The message that was deleted
	Message MessageClass `tl:"message"`
}

// ChannelAdminLogEventActionDeleteMessageTypeID is TL type id of ChannelAdminLogEventActionDeleteMessage.
const ChannelAdminLogEventActionDeleteMessageTypeID = 0x42e047bb

func (c *ChannelAdminLogEventActionDeleteMessage) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Message == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionDeleteMessage) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionDeleteMessage(nil)"
	}
	type Alias ChannelAdminLogEventActionDeleteMessage
	return fmt.Sprintf("ChannelAdminLogEventActionDeleteMessage%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionDeleteMessage from given interface.
func (c *ChannelAdminLogEventActionDeleteMessage) FillFrom(from interface {
	GetMessage() (value MessageClass)
}) {
	c.Message = from.GetMessage()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionDeleteMessage) TypeID() uint32 {
	return ChannelAdminLogEventActionDeleteMessageTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionDeleteMessage) TypeName() string {
	return "channelAdminLogEventActionDeleteMessage"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionDeleteMessage) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionDeleteMessage#42e047bb as nil")
	}
	b.PutID(ChannelAdminLogEventActionDeleteMessageTypeID)
	if c.Message == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionDeleteMessage#42e047bb: field message is nil")
	}
	if err := c.Message.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionDeleteMessage#42e047bb: field message: %w", err)
	}
	return nil
}

// GetMessage returns value of Message field.
func (c *ChannelAdminLogEventActionDeleteMessage) GetMessage() (value MessageClass) {
	return c.Message
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionDeleteMessage) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionDeleteMessage#42e047bb to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionDeleteMessageTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionDeleteMessage#42e047bb: %w", err)
	}
	{
		value, err := DecodeMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionDeleteMessage#42e047bb: field message: %w", err)
		}
		c.Message = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionDeleteMessage) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionDeleteMessage.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionDeleteMessage{}
	_ bin.Decoder = &ChannelAdminLogEventActionDeleteMessage{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionDeleteMessage{}
)

// ChannelAdminLogEventActionParticipantJoin represents TL type `channelAdminLogEventActionParticipantJoin#183040d3`.
// A user has joined the group (in the case of big groups, info of the user that has joined isn't shown)
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionParticipantJoin for reference.
type ChannelAdminLogEventActionParticipantJoin struct {
}

// ChannelAdminLogEventActionParticipantJoinTypeID is TL type id of ChannelAdminLogEventActionParticipantJoin.
const ChannelAdminLogEventActionParticipantJoinTypeID = 0x183040d3

func (c *ChannelAdminLogEventActionParticipantJoin) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionParticipantJoin) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionParticipantJoin(nil)"
	}
	type Alias ChannelAdminLogEventActionParticipantJoin
	return fmt.Sprintf("ChannelAdminLogEventActionParticipantJoin%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionParticipantJoin) TypeID() uint32 {
	return ChannelAdminLogEventActionParticipantJoinTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionParticipantJoin) TypeName() string {
	return "channelAdminLogEventActionParticipantJoin"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionParticipantJoin) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionParticipantJoin#183040d3 as nil")
	}
	b.PutID(ChannelAdminLogEventActionParticipantJoinTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionParticipantJoin) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionParticipantJoin#183040d3 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionParticipantJoinTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantJoin#183040d3: %w", err)
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionParticipantJoin) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionParticipantJoin.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionParticipantJoin{}
	_ bin.Decoder = &ChannelAdminLogEventActionParticipantJoin{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionParticipantJoin{}
)

// ChannelAdminLogEventActionParticipantLeave represents TL type `channelAdminLogEventActionParticipantLeave#f89777f2`.
// A user left the channel/supergroup (in the case of big groups, info of the user that has joined isn't shown)
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionParticipantLeave for reference.
type ChannelAdminLogEventActionParticipantLeave struct {
}

// ChannelAdminLogEventActionParticipantLeaveTypeID is TL type id of ChannelAdminLogEventActionParticipantLeave.
const ChannelAdminLogEventActionParticipantLeaveTypeID = 0xf89777f2

func (c *ChannelAdminLogEventActionParticipantLeave) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionParticipantLeave) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionParticipantLeave(nil)"
	}
	type Alias ChannelAdminLogEventActionParticipantLeave
	return fmt.Sprintf("ChannelAdminLogEventActionParticipantLeave%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionParticipantLeave) TypeID() uint32 {
	return ChannelAdminLogEventActionParticipantLeaveTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionParticipantLeave) TypeName() string {
	return "channelAdminLogEventActionParticipantLeave"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionParticipantLeave) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionParticipantLeave#f89777f2 as nil")
	}
	b.PutID(ChannelAdminLogEventActionParticipantLeaveTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionParticipantLeave) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionParticipantLeave#f89777f2 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionParticipantLeaveTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantLeave#f89777f2: %w", err)
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionParticipantLeave) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionParticipantLeave.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionParticipantLeave{}
	_ bin.Decoder = &ChannelAdminLogEventActionParticipantLeave{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionParticipantLeave{}
)

// ChannelAdminLogEventActionParticipantInvite represents TL type `channelAdminLogEventActionParticipantInvite#e31c34d8`.
// A user was invited to the group
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionParticipantInvite for reference.
type ChannelAdminLogEventActionParticipantInvite struct {
	// The user that was invited
	Participant ChannelParticipantClass `tl:"participant"`
}

// ChannelAdminLogEventActionParticipantInviteTypeID is TL type id of ChannelAdminLogEventActionParticipantInvite.
const ChannelAdminLogEventActionParticipantInviteTypeID = 0xe31c34d8

func (c *ChannelAdminLogEventActionParticipantInvite) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Participant == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionParticipantInvite) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionParticipantInvite(nil)"
	}
	type Alias ChannelAdminLogEventActionParticipantInvite
	return fmt.Sprintf("ChannelAdminLogEventActionParticipantInvite%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionParticipantInvite from given interface.
func (c *ChannelAdminLogEventActionParticipantInvite) FillFrom(from interface {
	GetParticipant() (value ChannelParticipantClass)
}) {
	c.Participant = from.GetParticipant()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionParticipantInvite) TypeID() uint32 {
	return ChannelAdminLogEventActionParticipantInviteTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionParticipantInvite) TypeName() string {
	return "channelAdminLogEventActionParticipantInvite"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionParticipantInvite) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionParticipantInvite#e31c34d8 as nil")
	}
	b.PutID(ChannelAdminLogEventActionParticipantInviteTypeID)
	if c.Participant == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantInvite#e31c34d8: field participant is nil")
	}
	if err := c.Participant.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantInvite#e31c34d8: field participant: %w", err)
	}
	return nil
}

// GetParticipant returns value of Participant field.
func (c *ChannelAdminLogEventActionParticipantInvite) GetParticipant() (value ChannelParticipantClass) {
	return c.Participant
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionParticipantInvite) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionParticipantInvite#e31c34d8 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionParticipantInviteTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantInvite#e31c34d8: %w", err)
	}
	{
		value, err := DecodeChannelParticipant(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantInvite#e31c34d8: field participant: %w", err)
		}
		c.Participant = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionParticipantInvite) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionParticipantInvite.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionParticipantInvite{}
	_ bin.Decoder = &ChannelAdminLogEventActionParticipantInvite{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionParticipantInvite{}
)

// ChannelAdminLogEventActionParticipantToggleBan represents TL type `channelAdminLogEventActionParticipantToggleBan#e6d83d7e`.
// The banned rights¹ of a user were changed
//
// Links:
//  1) https://core.telegram.org/api/rights
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan for reference.
type ChannelAdminLogEventActionParticipantToggleBan struct {
	// Old banned rights of user
	PrevParticipant ChannelParticipantClass `tl:"prev_participant"`
	// New banned rights of user
	NewParticipant ChannelParticipantClass `tl:"new_participant"`
}

// ChannelAdminLogEventActionParticipantToggleBanTypeID is TL type id of ChannelAdminLogEventActionParticipantToggleBan.
const ChannelAdminLogEventActionParticipantToggleBanTypeID = 0xe6d83d7e

func (c *ChannelAdminLogEventActionParticipantToggleBan) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.PrevParticipant == nil) {
		return false
	}
	if !(c.NewParticipant == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionParticipantToggleBan) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionParticipantToggleBan(nil)"
	}
	type Alias ChannelAdminLogEventActionParticipantToggleBan
	return fmt.Sprintf("ChannelAdminLogEventActionParticipantToggleBan%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionParticipantToggleBan from given interface.
func (c *ChannelAdminLogEventActionParticipantToggleBan) FillFrom(from interface {
	GetPrevParticipant() (value ChannelParticipantClass)
	GetNewParticipant() (value ChannelParticipantClass)
}) {
	c.PrevParticipant = from.GetPrevParticipant()
	c.NewParticipant = from.GetNewParticipant()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionParticipantToggleBan) TypeID() uint32 {
	return ChannelAdminLogEventActionParticipantToggleBanTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionParticipantToggleBan) TypeName() string {
	return "channelAdminLogEventActionParticipantToggleBan"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionParticipantToggleBan) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionParticipantToggleBan#e6d83d7e as nil")
	}
	b.PutID(ChannelAdminLogEventActionParticipantToggleBanTypeID)
	if c.PrevParticipant == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantToggleBan#e6d83d7e: field prev_participant is nil")
	}
	if err := c.PrevParticipant.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantToggleBan#e6d83d7e: field prev_participant: %w", err)
	}
	if c.NewParticipant == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantToggleBan#e6d83d7e: field new_participant is nil")
	}
	if err := c.NewParticipant.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantToggleBan#e6d83d7e: field new_participant: %w", err)
	}
	return nil
}

// GetPrevParticipant returns value of PrevParticipant field.
func (c *ChannelAdminLogEventActionParticipantToggleBan) GetPrevParticipant() (value ChannelParticipantClass) {
	return c.PrevParticipant
}

// GetNewParticipant returns value of NewParticipant field.
func (c *ChannelAdminLogEventActionParticipantToggleBan) GetNewParticipant() (value ChannelParticipantClass) {
	return c.NewParticipant
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionParticipantToggleBan) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionParticipantToggleBan#e6d83d7e to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionParticipantToggleBanTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantToggleBan#e6d83d7e: %w", err)
	}
	{
		value, err := DecodeChannelParticipant(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantToggleBan#e6d83d7e: field prev_participant: %w", err)
		}
		c.PrevParticipant = value
	}
	{
		value, err := DecodeChannelParticipant(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantToggleBan#e6d83d7e: field new_participant: %w", err)
		}
		c.NewParticipant = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionParticipantToggleBan) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionParticipantToggleBan.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionParticipantToggleBan{}
	_ bin.Decoder = &ChannelAdminLogEventActionParticipantToggleBan{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionParticipantToggleBan{}
)

// ChannelAdminLogEventActionParticipantToggleAdmin represents TL type `channelAdminLogEventActionParticipantToggleAdmin#d5676710`.
// The admin rights¹ of a user were changed
//
// Links:
//  1) https://core.telegram.org/api/rights
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleAdmin for reference.
type ChannelAdminLogEventActionParticipantToggleAdmin struct {
	// Previous admin rights
	PrevParticipant ChannelParticipantClass `tl:"prev_participant"`
	// New admin rights
	NewParticipant ChannelParticipantClass `tl:"new_participant"`
}

// ChannelAdminLogEventActionParticipantToggleAdminTypeID is TL type id of ChannelAdminLogEventActionParticipantToggleAdmin.
const ChannelAdminLogEventActionParticipantToggleAdminTypeID = 0xd5676710

func (c *ChannelAdminLogEventActionParticipantToggleAdmin) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.PrevParticipant == nil) {
		return false
	}
	if !(c.NewParticipant == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionParticipantToggleAdmin) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionParticipantToggleAdmin(nil)"
	}
	type Alias ChannelAdminLogEventActionParticipantToggleAdmin
	return fmt.Sprintf("ChannelAdminLogEventActionParticipantToggleAdmin%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionParticipantToggleAdmin from given interface.
func (c *ChannelAdminLogEventActionParticipantToggleAdmin) FillFrom(from interface {
	GetPrevParticipant() (value ChannelParticipantClass)
	GetNewParticipant() (value ChannelParticipantClass)
}) {
	c.PrevParticipant = from.GetPrevParticipant()
	c.NewParticipant = from.GetNewParticipant()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionParticipantToggleAdmin) TypeID() uint32 {
	return ChannelAdminLogEventActionParticipantToggleAdminTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionParticipantToggleAdmin) TypeName() string {
	return "channelAdminLogEventActionParticipantToggleAdmin"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionParticipantToggleAdmin) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionParticipantToggleAdmin#d5676710 as nil")
	}
	b.PutID(ChannelAdminLogEventActionParticipantToggleAdminTypeID)
	if c.PrevParticipant == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantToggleAdmin#d5676710: field prev_participant is nil")
	}
	if err := c.PrevParticipant.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantToggleAdmin#d5676710: field prev_participant: %w", err)
	}
	if c.NewParticipant == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantToggleAdmin#d5676710: field new_participant is nil")
	}
	if err := c.NewParticipant.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantToggleAdmin#d5676710: field new_participant: %w", err)
	}
	return nil
}

// GetPrevParticipant returns value of PrevParticipant field.
func (c *ChannelAdminLogEventActionParticipantToggleAdmin) GetPrevParticipant() (value ChannelParticipantClass) {
	return c.PrevParticipant
}

// GetNewParticipant returns value of NewParticipant field.
func (c *ChannelAdminLogEventActionParticipantToggleAdmin) GetNewParticipant() (value ChannelParticipantClass) {
	return c.NewParticipant
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionParticipantToggleAdmin) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionParticipantToggleAdmin#d5676710 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionParticipantToggleAdminTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantToggleAdmin#d5676710: %w", err)
	}
	{
		value, err := DecodeChannelParticipant(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantToggleAdmin#d5676710: field prev_participant: %w", err)
		}
		c.PrevParticipant = value
	}
	{
		value, err := DecodeChannelParticipant(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantToggleAdmin#d5676710: field new_participant: %w", err)
		}
		c.NewParticipant = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionParticipantToggleAdmin) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionParticipantToggleAdmin.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionParticipantToggleAdmin{}
	_ bin.Decoder = &ChannelAdminLogEventActionParticipantToggleAdmin{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionParticipantToggleAdmin{}
)

// ChannelAdminLogEventActionChangeStickerSet represents TL type `channelAdminLogEventActionChangeStickerSet#b1c3caa7`.
// The supergroup's stickerset was changed
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionChangeStickerSet for reference.
type ChannelAdminLogEventActionChangeStickerSet struct {
	// Previous stickerset
	PrevStickerset InputStickerSetClass `tl:"prev_stickerset"`
	// New stickerset
	NewStickerset InputStickerSetClass `tl:"new_stickerset"`
}

// ChannelAdminLogEventActionChangeStickerSetTypeID is TL type id of ChannelAdminLogEventActionChangeStickerSet.
const ChannelAdminLogEventActionChangeStickerSetTypeID = 0xb1c3caa7

func (c *ChannelAdminLogEventActionChangeStickerSet) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.PrevStickerset == nil) {
		return false
	}
	if !(c.NewStickerset == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionChangeStickerSet) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionChangeStickerSet(nil)"
	}
	type Alias ChannelAdminLogEventActionChangeStickerSet
	return fmt.Sprintf("ChannelAdminLogEventActionChangeStickerSet%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionChangeStickerSet from given interface.
func (c *ChannelAdminLogEventActionChangeStickerSet) FillFrom(from interface {
	GetPrevStickerset() (value InputStickerSetClass)
	GetNewStickerset() (value InputStickerSetClass)
}) {
	c.PrevStickerset = from.GetPrevStickerset()
	c.NewStickerset = from.GetNewStickerset()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionChangeStickerSet) TypeID() uint32 {
	return ChannelAdminLogEventActionChangeStickerSetTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionChangeStickerSet) TypeName() string {
	return "channelAdminLogEventActionChangeStickerSet"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionChangeStickerSet) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionChangeStickerSet#b1c3caa7 as nil")
	}
	b.PutID(ChannelAdminLogEventActionChangeStickerSetTypeID)
	if c.PrevStickerset == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangeStickerSet#b1c3caa7: field prev_stickerset is nil")
	}
	if err := c.PrevStickerset.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangeStickerSet#b1c3caa7: field prev_stickerset: %w", err)
	}
	if c.NewStickerset == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangeStickerSet#b1c3caa7: field new_stickerset is nil")
	}
	if err := c.NewStickerset.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangeStickerSet#b1c3caa7: field new_stickerset: %w", err)
	}
	return nil
}

// GetPrevStickerset returns value of PrevStickerset field.
func (c *ChannelAdminLogEventActionChangeStickerSet) GetPrevStickerset() (value InputStickerSetClass) {
	return c.PrevStickerset
}

// GetNewStickerset returns value of NewStickerset field.
func (c *ChannelAdminLogEventActionChangeStickerSet) GetNewStickerset() (value InputStickerSetClass) {
	return c.NewStickerset
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionChangeStickerSet) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionChangeStickerSet#b1c3caa7 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionChangeStickerSetTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionChangeStickerSet#b1c3caa7: %w", err)
	}
	{
		value, err := DecodeInputStickerSet(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeStickerSet#b1c3caa7: field prev_stickerset: %w", err)
		}
		c.PrevStickerset = value
	}
	{
		value, err := DecodeInputStickerSet(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeStickerSet#b1c3caa7: field new_stickerset: %w", err)
		}
		c.NewStickerset = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionChangeStickerSet) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionChangeStickerSet.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionChangeStickerSet{}
	_ bin.Decoder = &ChannelAdminLogEventActionChangeStickerSet{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionChangeStickerSet{}
)

// ChannelAdminLogEventActionTogglePreHistoryHidden represents TL type `channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1`.
// The hidden prehistory setting was changed¹
//
// Links:
//  1) https://core.telegram.org/method/channels.togglePreHistoryHidden
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionTogglePreHistoryHidden for reference.
type ChannelAdminLogEventActionTogglePreHistoryHidden struct {
	// New value
	NewValue bool `tl:"new_value"`
}

// ChannelAdminLogEventActionTogglePreHistoryHiddenTypeID is TL type id of ChannelAdminLogEventActionTogglePreHistoryHidden.
const ChannelAdminLogEventActionTogglePreHistoryHiddenTypeID = 0x5f5c95f1

func (c *ChannelAdminLogEventActionTogglePreHistoryHidden) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.NewValue == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionTogglePreHistoryHidden) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionTogglePreHistoryHidden(nil)"
	}
	type Alias ChannelAdminLogEventActionTogglePreHistoryHidden
	return fmt.Sprintf("ChannelAdminLogEventActionTogglePreHistoryHidden%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionTogglePreHistoryHidden from given interface.
func (c *ChannelAdminLogEventActionTogglePreHistoryHidden) FillFrom(from interface {
	GetNewValue() (value bool)
}) {
	c.NewValue = from.GetNewValue()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionTogglePreHistoryHidden) TypeID() uint32 {
	return ChannelAdminLogEventActionTogglePreHistoryHiddenTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionTogglePreHistoryHidden) TypeName() string {
	return "channelAdminLogEventActionTogglePreHistoryHidden"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionTogglePreHistoryHidden) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1 as nil")
	}
	b.PutID(ChannelAdminLogEventActionTogglePreHistoryHiddenTypeID)
	b.PutBool(c.NewValue)
	return nil
}

// GetNewValue returns value of NewValue field.
func (c *ChannelAdminLogEventActionTogglePreHistoryHidden) GetNewValue() (value bool) {
	return c.NewValue
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionTogglePreHistoryHidden) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionTogglePreHistoryHiddenTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1: %w", err)
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionTogglePreHistoryHidden) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionTogglePreHistoryHidden.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionTogglePreHistoryHidden{}
	_ bin.Decoder = &ChannelAdminLogEventActionTogglePreHistoryHidden{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionTogglePreHistoryHidden{}
)

// ChannelAdminLogEventActionDefaultBannedRights represents TL type `channelAdminLogEventActionDefaultBannedRights#2df5fc0a`.
// The default banned rights were modified
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionDefaultBannedRights for reference.
type ChannelAdminLogEventActionDefaultBannedRights struct {
	// Previous global banned rights¹
	//
	// Links:
	//  1) https://core.telegram.org/api/rights
	PrevBannedRights ChatBannedRights `tl:"prev_banned_rights"`
	// New glboal banned rights¹.
	//
	// Links:
	//  1) https://core.telegram.org/api/rights
	NewBannedRights ChatBannedRights `tl:"new_banned_rights"`
}

// ChannelAdminLogEventActionDefaultBannedRightsTypeID is TL type id of ChannelAdminLogEventActionDefaultBannedRights.
const ChannelAdminLogEventActionDefaultBannedRightsTypeID = 0x2df5fc0a

func (c *ChannelAdminLogEventActionDefaultBannedRights) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.PrevBannedRights.Zero()) {
		return false
	}
	if !(c.NewBannedRights.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionDefaultBannedRights) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionDefaultBannedRights(nil)"
	}
	type Alias ChannelAdminLogEventActionDefaultBannedRights
	return fmt.Sprintf("ChannelAdminLogEventActionDefaultBannedRights%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionDefaultBannedRights from given interface.
func (c *ChannelAdminLogEventActionDefaultBannedRights) FillFrom(from interface {
	GetPrevBannedRights() (value ChatBannedRights)
	GetNewBannedRights() (value ChatBannedRights)
}) {
	c.PrevBannedRights = from.GetPrevBannedRights()
	c.NewBannedRights = from.GetNewBannedRights()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionDefaultBannedRights) TypeID() uint32 {
	return ChannelAdminLogEventActionDefaultBannedRightsTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionDefaultBannedRights) TypeName() string {
	return "channelAdminLogEventActionDefaultBannedRights"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionDefaultBannedRights) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionDefaultBannedRights#2df5fc0a as nil")
	}
	b.PutID(ChannelAdminLogEventActionDefaultBannedRightsTypeID)
	if err := c.PrevBannedRights.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionDefaultBannedRights#2df5fc0a: field prev_banned_rights: %w", err)
	}
	if err := c.NewBannedRights.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionDefaultBannedRights#2df5fc0a: field new_banned_rights: %w", err)
	}
	return nil
}

// GetPrevBannedRights returns value of PrevBannedRights field.
func (c *ChannelAdminLogEventActionDefaultBannedRights) GetPrevBannedRights() (value ChatBannedRights) {
	return c.PrevBannedRights
}

// GetNewBannedRights returns value of NewBannedRights field.
func (c *ChannelAdminLogEventActionDefaultBannedRights) GetNewBannedRights() (value ChatBannedRights) {
	return c.NewBannedRights
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionDefaultBannedRights) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionDefaultBannedRights#2df5fc0a to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionDefaultBannedRightsTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionDefaultBannedRights#2df5fc0a: %w", err)
	}
	{
		if err := c.PrevBannedRights.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionDefaultBannedRights#2df5fc0a: field prev_banned_rights: %w", err)
		}
	}
	{
		if err := c.NewBannedRights.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionDefaultBannedRights#2df5fc0a: field new_banned_rights: %w", err)
		}
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionDefaultBannedRights) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionDefaultBannedRights.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionDefaultBannedRights{}
	_ bin.Decoder = &ChannelAdminLogEventActionDefaultBannedRights{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionDefaultBannedRights{}
)

// ChannelAdminLogEventActionStopPoll represents TL type `channelAdminLogEventActionStopPoll#8f079643`.
// A poll was stopped
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionStopPoll for reference.
type ChannelAdminLogEventActionStopPoll struct {
	// The poll that was stopped
	Message MessageClass `tl:"message"`
}

// ChannelAdminLogEventActionStopPollTypeID is TL type id of ChannelAdminLogEventActionStopPoll.
const ChannelAdminLogEventActionStopPollTypeID = 0x8f079643

func (c *ChannelAdminLogEventActionStopPoll) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Message == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionStopPoll) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionStopPoll(nil)"
	}
	type Alias ChannelAdminLogEventActionStopPoll
	return fmt.Sprintf("ChannelAdminLogEventActionStopPoll%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionStopPoll from given interface.
func (c *ChannelAdminLogEventActionStopPoll) FillFrom(from interface {
	GetMessage() (value MessageClass)
}) {
	c.Message = from.GetMessage()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionStopPoll) TypeID() uint32 {
	return ChannelAdminLogEventActionStopPollTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionStopPoll) TypeName() string {
	return "channelAdminLogEventActionStopPoll"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionStopPoll) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionStopPoll#8f079643 as nil")
	}
	b.PutID(ChannelAdminLogEventActionStopPollTypeID)
	if c.Message == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionStopPoll#8f079643: field message is nil")
	}
	if err := c.Message.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionStopPoll#8f079643: field message: %w", err)
	}
	return nil
}

// GetMessage returns value of Message field.
func (c *ChannelAdminLogEventActionStopPoll) GetMessage() (value MessageClass) {
	return c.Message
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionStopPoll) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionStopPoll#8f079643 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionStopPollTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionStopPoll#8f079643: %w", err)
	}
	{
		value, err := DecodeMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionStopPoll#8f079643: field message: %w", err)
		}
		c.Message = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionStopPoll) construct() ChannelAdminLogEventActionClass { return &c }

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionStopPoll.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionStopPoll{}
	_ bin.Decoder = &ChannelAdminLogEventActionStopPoll{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionStopPoll{}
)

// ChannelAdminLogEventActionChangeLinkedChat represents TL type `channelAdminLogEventActionChangeLinkedChat#a26f881b`.
// The linked chat was changed
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionChangeLinkedChat for reference.
type ChannelAdminLogEventActionChangeLinkedChat struct {
	// Previous linked chat
	PrevValue int `tl:"prev_value"`
	// New linked chat
	NewValue int `tl:"new_value"`
}

// ChannelAdminLogEventActionChangeLinkedChatTypeID is TL type id of ChannelAdminLogEventActionChangeLinkedChat.
const ChannelAdminLogEventActionChangeLinkedChatTypeID = 0xa26f881b

func (c *ChannelAdminLogEventActionChangeLinkedChat) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.PrevValue == 0) {
		return false
	}
	if !(c.NewValue == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionChangeLinkedChat) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionChangeLinkedChat(nil)"
	}
	type Alias ChannelAdminLogEventActionChangeLinkedChat
	return fmt.Sprintf("ChannelAdminLogEventActionChangeLinkedChat%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionChangeLinkedChat from given interface.
func (c *ChannelAdminLogEventActionChangeLinkedChat) FillFrom(from interface {
	GetPrevValue() (value int)
	GetNewValue() (value int)
}) {
	c.PrevValue = from.GetPrevValue()
	c.NewValue = from.GetNewValue()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionChangeLinkedChat) TypeID() uint32 {
	return ChannelAdminLogEventActionChangeLinkedChatTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionChangeLinkedChat) TypeName() string {
	return "channelAdminLogEventActionChangeLinkedChat"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionChangeLinkedChat) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionChangeLinkedChat#a26f881b as nil")
	}
	b.PutID(ChannelAdminLogEventActionChangeLinkedChatTypeID)
	b.PutInt(c.PrevValue)
	b.PutInt(c.NewValue)
	return nil
}

// GetPrevValue returns value of PrevValue field.
func (c *ChannelAdminLogEventActionChangeLinkedChat) GetPrevValue() (value int) {
	return c.PrevValue
}

// GetNewValue returns value of NewValue field.
func (c *ChannelAdminLogEventActionChangeLinkedChat) GetNewValue() (value int) {
	return c.NewValue
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionChangeLinkedChat) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionChangeLinkedChat#a26f881b to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionChangeLinkedChatTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionChangeLinkedChat#a26f881b: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeLinkedChat#a26f881b: field prev_value: %w", err)
		}
		c.PrevValue = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeLinkedChat#a26f881b: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionChangeLinkedChat) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionChangeLinkedChat.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionChangeLinkedChat{}
	_ bin.Decoder = &ChannelAdminLogEventActionChangeLinkedChat{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionChangeLinkedChat{}
)

// ChannelAdminLogEventActionChangeLocation represents TL type `channelAdminLogEventActionChangeLocation#e6b76ae`.
// The geogroup location was changed
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionChangeLocation for reference.
type ChannelAdminLogEventActionChangeLocation struct {
	// Previous location
	PrevValue ChannelLocationClass `tl:"prev_value"`
	// New location
	NewValue ChannelLocationClass `tl:"new_value"`
}

// ChannelAdminLogEventActionChangeLocationTypeID is TL type id of ChannelAdminLogEventActionChangeLocation.
const ChannelAdminLogEventActionChangeLocationTypeID = 0xe6b76ae

func (c *ChannelAdminLogEventActionChangeLocation) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.PrevValue == nil) {
		return false
	}
	if !(c.NewValue == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionChangeLocation) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionChangeLocation(nil)"
	}
	type Alias ChannelAdminLogEventActionChangeLocation
	return fmt.Sprintf("ChannelAdminLogEventActionChangeLocation%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionChangeLocation from given interface.
func (c *ChannelAdminLogEventActionChangeLocation) FillFrom(from interface {
	GetPrevValue() (value ChannelLocationClass)
	GetNewValue() (value ChannelLocationClass)
}) {
	c.PrevValue = from.GetPrevValue()
	c.NewValue = from.GetNewValue()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionChangeLocation) TypeID() uint32 {
	return ChannelAdminLogEventActionChangeLocationTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionChangeLocation) TypeName() string {
	return "channelAdminLogEventActionChangeLocation"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionChangeLocation) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionChangeLocation#e6b76ae as nil")
	}
	b.PutID(ChannelAdminLogEventActionChangeLocationTypeID)
	if c.PrevValue == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangeLocation#e6b76ae: field prev_value is nil")
	}
	if err := c.PrevValue.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangeLocation#e6b76ae: field prev_value: %w", err)
	}
	if c.NewValue == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangeLocation#e6b76ae: field new_value is nil")
	}
	if err := c.NewValue.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangeLocation#e6b76ae: field new_value: %w", err)
	}
	return nil
}

// GetPrevValue returns value of PrevValue field.
func (c *ChannelAdminLogEventActionChangeLocation) GetPrevValue() (value ChannelLocationClass) {
	return c.PrevValue
}

// GetNewValue returns value of NewValue field.
func (c *ChannelAdminLogEventActionChangeLocation) GetNewValue() (value ChannelLocationClass) {
	return c.NewValue
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionChangeLocation) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionChangeLocation#e6b76ae to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionChangeLocationTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionChangeLocation#e6b76ae: %w", err)
	}
	{
		value, err := DecodeChannelLocation(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeLocation#e6b76ae: field prev_value: %w", err)
		}
		c.PrevValue = value
	}
	{
		value, err := DecodeChannelLocation(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeLocation#e6b76ae: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionChangeLocation) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionChangeLocation.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionChangeLocation{}
	_ bin.Decoder = &ChannelAdminLogEventActionChangeLocation{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionChangeLocation{}
)

// ChannelAdminLogEventActionToggleSlowMode represents TL type `channelAdminLogEventActionToggleSlowMode#53909779`.
// Slow mode setting for supergroups was changed¹
//
// Links:
//  1) https://core.telegram.org/method/channels.toggleSlowMode
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionToggleSlowMode for reference.
type ChannelAdminLogEventActionToggleSlowMode struct {
	// Previous slow mode value
	PrevValue int `tl:"prev_value"`
	// New slow mode value
	NewValue int `tl:"new_value"`
}

// ChannelAdminLogEventActionToggleSlowModeTypeID is TL type id of ChannelAdminLogEventActionToggleSlowMode.
const ChannelAdminLogEventActionToggleSlowModeTypeID = 0x53909779

func (c *ChannelAdminLogEventActionToggleSlowMode) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.PrevValue == 0) {
		return false
	}
	if !(c.NewValue == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionToggleSlowMode) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionToggleSlowMode(nil)"
	}
	type Alias ChannelAdminLogEventActionToggleSlowMode
	return fmt.Sprintf("ChannelAdminLogEventActionToggleSlowMode%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionToggleSlowMode from given interface.
func (c *ChannelAdminLogEventActionToggleSlowMode) FillFrom(from interface {
	GetPrevValue() (value int)
	GetNewValue() (value int)
}) {
	c.PrevValue = from.GetPrevValue()
	c.NewValue = from.GetNewValue()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionToggleSlowMode) TypeID() uint32 {
	return ChannelAdminLogEventActionToggleSlowModeTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionToggleSlowMode) TypeName() string {
	return "channelAdminLogEventActionToggleSlowMode"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionToggleSlowMode) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionToggleSlowMode#53909779 as nil")
	}
	b.PutID(ChannelAdminLogEventActionToggleSlowModeTypeID)
	b.PutInt(c.PrevValue)
	b.PutInt(c.NewValue)
	return nil
}

// GetPrevValue returns value of PrevValue field.
func (c *ChannelAdminLogEventActionToggleSlowMode) GetPrevValue() (value int) {
	return c.PrevValue
}

// GetNewValue returns value of NewValue field.
func (c *ChannelAdminLogEventActionToggleSlowMode) GetNewValue() (value int) {
	return c.NewValue
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionToggleSlowMode) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionToggleSlowMode#53909779 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionToggleSlowModeTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionToggleSlowMode#53909779: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionToggleSlowMode#53909779: field prev_value: %w", err)
		}
		c.PrevValue = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionToggleSlowMode#53909779: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionToggleSlowMode) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionToggleSlowMode.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionToggleSlowMode{}
	_ bin.Decoder = &ChannelAdminLogEventActionToggleSlowMode{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionToggleSlowMode{}
)

// ChannelAdminLogEventActionStartGroupCall represents TL type `channelAdminLogEventActionStartGroupCall#23209745`.
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionStartGroupCall for reference.
type ChannelAdminLogEventActionStartGroupCall struct {
	// Call field of ChannelAdminLogEventActionStartGroupCall.
	Call InputGroupCall `tl:"call"`
}

// ChannelAdminLogEventActionStartGroupCallTypeID is TL type id of ChannelAdminLogEventActionStartGroupCall.
const ChannelAdminLogEventActionStartGroupCallTypeID = 0x23209745

func (c *ChannelAdminLogEventActionStartGroupCall) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Call.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionStartGroupCall) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionStartGroupCall(nil)"
	}
	type Alias ChannelAdminLogEventActionStartGroupCall
	return fmt.Sprintf("ChannelAdminLogEventActionStartGroupCall%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionStartGroupCall from given interface.
func (c *ChannelAdminLogEventActionStartGroupCall) FillFrom(from interface {
	GetCall() (value InputGroupCall)
}) {
	c.Call = from.GetCall()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionStartGroupCall) TypeID() uint32 {
	return ChannelAdminLogEventActionStartGroupCallTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionStartGroupCall) TypeName() string {
	return "channelAdminLogEventActionStartGroupCall"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionStartGroupCall) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionStartGroupCall#23209745 as nil")
	}
	b.PutID(ChannelAdminLogEventActionStartGroupCallTypeID)
	if err := c.Call.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionStartGroupCall#23209745: field call: %w", err)
	}
	return nil
}

// GetCall returns value of Call field.
func (c *ChannelAdminLogEventActionStartGroupCall) GetCall() (value InputGroupCall) {
	return c.Call
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionStartGroupCall) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionStartGroupCall#23209745 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionStartGroupCallTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionStartGroupCall#23209745: %w", err)
	}
	{
		if err := c.Call.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionStartGroupCall#23209745: field call: %w", err)
		}
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionStartGroupCall) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionStartGroupCall.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionStartGroupCall{}
	_ bin.Decoder = &ChannelAdminLogEventActionStartGroupCall{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionStartGroupCall{}
)

// ChannelAdminLogEventActionDiscardGroupCall represents TL type `channelAdminLogEventActionDiscardGroupCall#db9f9140`.
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionDiscardGroupCall for reference.
type ChannelAdminLogEventActionDiscardGroupCall struct {
	// Call field of ChannelAdminLogEventActionDiscardGroupCall.
	Call InputGroupCall `tl:"call"`
}

// ChannelAdminLogEventActionDiscardGroupCallTypeID is TL type id of ChannelAdminLogEventActionDiscardGroupCall.
const ChannelAdminLogEventActionDiscardGroupCallTypeID = 0xdb9f9140

func (c *ChannelAdminLogEventActionDiscardGroupCall) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Call.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionDiscardGroupCall) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionDiscardGroupCall(nil)"
	}
	type Alias ChannelAdminLogEventActionDiscardGroupCall
	return fmt.Sprintf("ChannelAdminLogEventActionDiscardGroupCall%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionDiscardGroupCall from given interface.
func (c *ChannelAdminLogEventActionDiscardGroupCall) FillFrom(from interface {
	GetCall() (value InputGroupCall)
}) {
	c.Call = from.GetCall()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionDiscardGroupCall) TypeID() uint32 {
	return ChannelAdminLogEventActionDiscardGroupCallTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionDiscardGroupCall) TypeName() string {
	return "channelAdminLogEventActionDiscardGroupCall"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionDiscardGroupCall) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionDiscardGroupCall#db9f9140 as nil")
	}
	b.PutID(ChannelAdminLogEventActionDiscardGroupCallTypeID)
	if err := c.Call.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionDiscardGroupCall#db9f9140: field call: %w", err)
	}
	return nil
}

// GetCall returns value of Call field.
func (c *ChannelAdminLogEventActionDiscardGroupCall) GetCall() (value InputGroupCall) {
	return c.Call
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionDiscardGroupCall) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionDiscardGroupCall#db9f9140 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionDiscardGroupCallTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionDiscardGroupCall#db9f9140: %w", err)
	}
	{
		if err := c.Call.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionDiscardGroupCall#db9f9140: field call: %w", err)
		}
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionDiscardGroupCall) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionDiscardGroupCall.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionDiscardGroupCall{}
	_ bin.Decoder = &ChannelAdminLogEventActionDiscardGroupCall{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionDiscardGroupCall{}
)

// ChannelAdminLogEventActionParticipantMute represents TL type `channelAdminLogEventActionParticipantMute#f92424d2`.
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionParticipantMute for reference.
type ChannelAdminLogEventActionParticipantMute struct {
	// Participant field of ChannelAdminLogEventActionParticipantMute.
	Participant GroupCallParticipant `tl:"participant"`
}

// ChannelAdminLogEventActionParticipantMuteTypeID is TL type id of ChannelAdminLogEventActionParticipantMute.
const ChannelAdminLogEventActionParticipantMuteTypeID = 0xf92424d2

func (c *ChannelAdminLogEventActionParticipantMute) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Participant.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionParticipantMute) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionParticipantMute(nil)"
	}
	type Alias ChannelAdminLogEventActionParticipantMute
	return fmt.Sprintf("ChannelAdminLogEventActionParticipantMute%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionParticipantMute from given interface.
func (c *ChannelAdminLogEventActionParticipantMute) FillFrom(from interface {
	GetParticipant() (value GroupCallParticipant)
}) {
	c.Participant = from.GetParticipant()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionParticipantMute) TypeID() uint32 {
	return ChannelAdminLogEventActionParticipantMuteTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionParticipantMute) TypeName() string {
	return "channelAdminLogEventActionParticipantMute"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionParticipantMute) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionParticipantMute#f92424d2 as nil")
	}
	b.PutID(ChannelAdminLogEventActionParticipantMuteTypeID)
	if err := c.Participant.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantMute#f92424d2: field participant: %w", err)
	}
	return nil
}

// GetParticipant returns value of Participant field.
func (c *ChannelAdminLogEventActionParticipantMute) GetParticipant() (value GroupCallParticipant) {
	return c.Participant
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionParticipantMute) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionParticipantMute#f92424d2 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionParticipantMuteTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantMute#f92424d2: %w", err)
	}
	{
		if err := c.Participant.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantMute#f92424d2: field participant: %w", err)
		}
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionParticipantMute) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionParticipantMute.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionParticipantMute{}
	_ bin.Decoder = &ChannelAdminLogEventActionParticipantMute{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionParticipantMute{}
)

// ChannelAdminLogEventActionParticipantUnmute represents TL type `channelAdminLogEventActionParticipantUnmute#e64429c0`.
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionParticipantUnmute for reference.
type ChannelAdminLogEventActionParticipantUnmute struct {
	// Participant field of ChannelAdminLogEventActionParticipantUnmute.
	Participant GroupCallParticipant `tl:"participant"`
}

// ChannelAdminLogEventActionParticipantUnmuteTypeID is TL type id of ChannelAdminLogEventActionParticipantUnmute.
const ChannelAdminLogEventActionParticipantUnmuteTypeID = 0xe64429c0

func (c *ChannelAdminLogEventActionParticipantUnmute) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Participant.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionParticipantUnmute) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionParticipantUnmute(nil)"
	}
	type Alias ChannelAdminLogEventActionParticipantUnmute
	return fmt.Sprintf("ChannelAdminLogEventActionParticipantUnmute%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionParticipantUnmute from given interface.
func (c *ChannelAdminLogEventActionParticipantUnmute) FillFrom(from interface {
	GetParticipant() (value GroupCallParticipant)
}) {
	c.Participant = from.GetParticipant()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionParticipantUnmute) TypeID() uint32 {
	return ChannelAdminLogEventActionParticipantUnmuteTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionParticipantUnmute) TypeName() string {
	return "channelAdminLogEventActionParticipantUnmute"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionParticipantUnmute) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionParticipantUnmute#e64429c0 as nil")
	}
	b.PutID(ChannelAdminLogEventActionParticipantUnmuteTypeID)
	if err := c.Participant.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantUnmute#e64429c0: field participant: %w", err)
	}
	return nil
}

// GetParticipant returns value of Participant field.
func (c *ChannelAdminLogEventActionParticipantUnmute) GetParticipant() (value GroupCallParticipant) {
	return c.Participant
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionParticipantUnmute) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionParticipantUnmute#e64429c0 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionParticipantUnmuteTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantUnmute#e64429c0: %w", err)
	}
	{
		if err := c.Participant.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantUnmute#e64429c0: field participant: %w", err)
		}
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionParticipantUnmute) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionParticipantUnmute.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionParticipantUnmute{}
	_ bin.Decoder = &ChannelAdminLogEventActionParticipantUnmute{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionParticipantUnmute{}
)

// ChannelAdminLogEventActionToggleGroupCallSetting represents TL type `channelAdminLogEventActionToggleGroupCallSetting#56d6a247`.
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionToggleGroupCallSetting for reference.
type ChannelAdminLogEventActionToggleGroupCallSetting struct {
	// JoinMuted field of ChannelAdminLogEventActionToggleGroupCallSetting.
	JoinMuted bool `tl:"join_muted"`
}

// ChannelAdminLogEventActionToggleGroupCallSettingTypeID is TL type id of ChannelAdminLogEventActionToggleGroupCallSetting.
const ChannelAdminLogEventActionToggleGroupCallSettingTypeID = 0x56d6a247

func (c *ChannelAdminLogEventActionToggleGroupCallSetting) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.JoinMuted == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionToggleGroupCallSetting) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionToggleGroupCallSetting(nil)"
	}
	type Alias ChannelAdminLogEventActionToggleGroupCallSetting
	return fmt.Sprintf("ChannelAdminLogEventActionToggleGroupCallSetting%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionToggleGroupCallSetting from given interface.
func (c *ChannelAdminLogEventActionToggleGroupCallSetting) FillFrom(from interface {
	GetJoinMuted() (value bool)
}) {
	c.JoinMuted = from.GetJoinMuted()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionToggleGroupCallSetting) TypeID() uint32 {
	return ChannelAdminLogEventActionToggleGroupCallSettingTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionToggleGroupCallSetting) TypeName() string {
	return "channelAdminLogEventActionToggleGroupCallSetting"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionToggleGroupCallSetting) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionToggleGroupCallSetting#56d6a247 as nil")
	}
	b.PutID(ChannelAdminLogEventActionToggleGroupCallSettingTypeID)
	b.PutBool(c.JoinMuted)
	return nil
}

// GetJoinMuted returns value of JoinMuted field.
func (c *ChannelAdminLogEventActionToggleGroupCallSetting) GetJoinMuted() (value bool) {
	return c.JoinMuted
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionToggleGroupCallSetting) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionToggleGroupCallSetting#56d6a247 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionToggleGroupCallSettingTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionToggleGroupCallSetting#56d6a247: %w", err)
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionToggleGroupCallSetting#56d6a247: field join_muted: %w", err)
		}
		c.JoinMuted = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionToggleGroupCallSetting) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionToggleGroupCallSetting.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionToggleGroupCallSetting{}
	_ bin.Decoder = &ChannelAdminLogEventActionToggleGroupCallSetting{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionToggleGroupCallSetting{}
)

// ChannelAdminLogEventActionParticipantJoinByInvite represents TL type `channelAdminLogEventActionParticipantJoinByInvite#5cdada77`.
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionParticipantJoinByInvite for reference.
type ChannelAdminLogEventActionParticipantJoinByInvite struct {
	// Invite field of ChannelAdminLogEventActionParticipantJoinByInvite.
	Invite ChatInviteExported `tl:"invite"`
}

// ChannelAdminLogEventActionParticipantJoinByInviteTypeID is TL type id of ChannelAdminLogEventActionParticipantJoinByInvite.
const ChannelAdminLogEventActionParticipantJoinByInviteTypeID = 0x5cdada77

func (c *ChannelAdminLogEventActionParticipantJoinByInvite) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Invite.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionParticipantJoinByInvite) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionParticipantJoinByInvite(nil)"
	}
	type Alias ChannelAdminLogEventActionParticipantJoinByInvite
	return fmt.Sprintf("ChannelAdminLogEventActionParticipantJoinByInvite%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionParticipantJoinByInvite from given interface.
func (c *ChannelAdminLogEventActionParticipantJoinByInvite) FillFrom(from interface {
	GetInvite() (value ChatInviteExported)
}) {
	c.Invite = from.GetInvite()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionParticipantJoinByInvite) TypeID() uint32 {
	return ChannelAdminLogEventActionParticipantJoinByInviteTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionParticipantJoinByInvite) TypeName() string {
	return "channelAdminLogEventActionParticipantJoinByInvite"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionParticipantJoinByInvite) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionParticipantJoinByInvite#5cdada77 as nil")
	}
	b.PutID(ChannelAdminLogEventActionParticipantJoinByInviteTypeID)
	if err := c.Invite.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantJoinByInvite#5cdada77: field invite: %w", err)
	}
	return nil
}

// GetInvite returns value of Invite field.
func (c *ChannelAdminLogEventActionParticipantJoinByInvite) GetInvite() (value ChatInviteExported) {
	return c.Invite
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionParticipantJoinByInvite) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionParticipantJoinByInvite#5cdada77 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionParticipantJoinByInviteTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantJoinByInvite#5cdada77: %w", err)
	}
	{
		if err := c.Invite.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantJoinByInvite#5cdada77: field invite: %w", err)
		}
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionParticipantJoinByInvite) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionParticipantJoinByInvite.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionParticipantJoinByInvite{}
	_ bin.Decoder = &ChannelAdminLogEventActionParticipantJoinByInvite{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionParticipantJoinByInvite{}
)

// ChannelAdminLogEventActionExportedInviteDelete represents TL type `channelAdminLogEventActionExportedInviteDelete#5a50fca4`.
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionExportedInviteDelete for reference.
type ChannelAdminLogEventActionExportedInviteDelete struct {
	// Invite field of ChannelAdminLogEventActionExportedInviteDelete.
	Invite ChatInviteExported `tl:"invite"`
}

// ChannelAdminLogEventActionExportedInviteDeleteTypeID is TL type id of ChannelAdminLogEventActionExportedInviteDelete.
const ChannelAdminLogEventActionExportedInviteDeleteTypeID = 0x5a50fca4

func (c *ChannelAdminLogEventActionExportedInviteDelete) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Invite.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionExportedInviteDelete) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionExportedInviteDelete(nil)"
	}
	type Alias ChannelAdminLogEventActionExportedInviteDelete
	return fmt.Sprintf("ChannelAdminLogEventActionExportedInviteDelete%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionExportedInviteDelete from given interface.
func (c *ChannelAdminLogEventActionExportedInviteDelete) FillFrom(from interface {
	GetInvite() (value ChatInviteExported)
}) {
	c.Invite = from.GetInvite()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionExportedInviteDelete) TypeID() uint32 {
	return ChannelAdminLogEventActionExportedInviteDeleteTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionExportedInviteDelete) TypeName() string {
	return "channelAdminLogEventActionExportedInviteDelete"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionExportedInviteDelete) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionExportedInviteDelete#5a50fca4 as nil")
	}
	b.PutID(ChannelAdminLogEventActionExportedInviteDeleteTypeID)
	if err := c.Invite.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionExportedInviteDelete#5a50fca4: field invite: %w", err)
	}
	return nil
}

// GetInvite returns value of Invite field.
func (c *ChannelAdminLogEventActionExportedInviteDelete) GetInvite() (value ChatInviteExported) {
	return c.Invite
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionExportedInviteDelete) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionExportedInviteDelete#5a50fca4 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionExportedInviteDeleteTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionExportedInviteDelete#5a50fca4: %w", err)
	}
	{
		if err := c.Invite.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionExportedInviteDelete#5a50fca4: field invite: %w", err)
		}
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionExportedInviteDelete) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionExportedInviteDelete.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionExportedInviteDelete{}
	_ bin.Decoder = &ChannelAdminLogEventActionExportedInviteDelete{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionExportedInviteDelete{}
)

// ChannelAdminLogEventActionExportedInviteRevoke represents TL type `channelAdminLogEventActionExportedInviteRevoke#410a134e`.
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionExportedInviteRevoke for reference.
type ChannelAdminLogEventActionExportedInviteRevoke struct {
	// Invite field of ChannelAdminLogEventActionExportedInviteRevoke.
	Invite ChatInviteExported `tl:"invite"`
}

// ChannelAdminLogEventActionExportedInviteRevokeTypeID is TL type id of ChannelAdminLogEventActionExportedInviteRevoke.
const ChannelAdminLogEventActionExportedInviteRevokeTypeID = 0x410a134e

func (c *ChannelAdminLogEventActionExportedInviteRevoke) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Invite.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionExportedInviteRevoke) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionExportedInviteRevoke(nil)"
	}
	type Alias ChannelAdminLogEventActionExportedInviteRevoke
	return fmt.Sprintf("ChannelAdminLogEventActionExportedInviteRevoke%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionExportedInviteRevoke from given interface.
func (c *ChannelAdminLogEventActionExportedInviteRevoke) FillFrom(from interface {
	GetInvite() (value ChatInviteExported)
}) {
	c.Invite = from.GetInvite()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionExportedInviteRevoke) TypeID() uint32 {
	return ChannelAdminLogEventActionExportedInviteRevokeTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionExportedInviteRevoke) TypeName() string {
	return "channelAdminLogEventActionExportedInviteRevoke"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionExportedInviteRevoke) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionExportedInviteRevoke#410a134e as nil")
	}
	b.PutID(ChannelAdminLogEventActionExportedInviteRevokeTypeID)
	if err := c.Invite.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionExportedInviteRevoke#410a134e: field invite: %w", err)
	}
	return nil
}

// GetInvite returns value of Invite field.
func (c *ChannelAdminLogEventActionExportedInviteRevoke) GetInvite() (value ChatInviteExported) {
	return c.Invite
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionExportedInviteRevoke) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionExportedInviteRevoke#410a134e to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionExportedInviteRevokeTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionExportedInviteRevoke#410a134e: %w", err)
	}
	{
		if err := c.Invite.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionExportedInviteRevoke#410a134e: field invite: %w", err)
		}
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionExportedInviteRevoke) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionExportedInviteRevoke.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionExportedInviteRevoke{}
	_ bin.Decoder = &ChannelAdminLogEventActionExportedInviteRevoke{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionExportedInviteRevoke{}
)

// ChannelAdminLogEventActionExportedInviteEdit represents TL type `channelAdminLogEventActionExportedInviteEdit#e90ebb59`.
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionExportedInviteEdit for reference.
type ChannelAdminLogEventActionExportedInviteEdit struct {
	// PrevInvite field of ChannelAdminLogEventActionExportedInviteEdit.
	PrevInvite ChatInviteExported `tl:"prev_invite"`
	// NewInvite field of ChannelAdminLogEventActionExportedInviteEdit.
	NewInvite ChatInviteExported `tl:"new_invite"`
}

// ChannelAdminLogEventActionExportedInviteEditTypeID is TL type id of ChannelAdminLogEventActionExportedInviteEdit.
const ChannelAdminLogEventActionExportedInviteEditTypeID = 0xe90ebb59

func (c *ChannelAdminLogEventActionExportedInviteEdit) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.PrevInvite.Zero()) {
		return false
	}
	if !(c.NewInvite.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionExportedInviteEdit) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionExportedInviteEdit(nil)"
	}
	type Alias ChannelAdminLogEventActionExportedInviteEdit
	return fmt.Sprintf("ChannelAdminLogEventActionExportedInviteEdit%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionExportedInviteEdit from given interface.
func (c *ChannelAdminLogEventActionExportedInviteEdit) FillFrom(from interface {
	GetPrevInvite() (value ChatInviteExported)
	GetNewInvite() (value ChatInviteExported)
}) {
	c.PrevInvite = from.GetPrevInvite()
	c.NewInvite = from.GetNewInvite()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionExportedInviteEdit) TypeID() uint32 {
	return ChannelAdminLogEventActionExportedInviteEditTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionExportedInviteEdit) TypeName() string {
	return "channelAdminLogEventActionExportedInviteEdit"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionExportedInviteEdit) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionExportedInviteEdit#e90ebb59 as nil")
	}
	b.PutID(ChannelAdminLogEventActionExportedInviteEditTypeID)
	if err := c.PrevInvite.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionExportedInviteEdit#e90ebb59: field prev_invite: %w", err)
	}
	if err := c.NewInvite.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionExportedInviteEdit#e90ebb59: field new_invite: %w", err)
	}
	return nil
}

// GetPrevInvite returns value of PrevInvite field.
func (c *ChannelAdminLogEventActionExportedInviteEdit) GetPrevInvite() (value ChatInviteExported) {
	return c.PrevInvite
}

// GetNewInvite returns value of NewInvite field.
func (c *ChannelAdminLogEventActionExportedInviteEdit) GetNewInvite() (value ChatInviteExported) {
	return c.NewInvite
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionExportedInviteEdit) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionExportedInviteEdit#e90ebb59 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionExportedInviteEditTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionExportedInviteEdit#e90ebb59: %w", err)
	}
	{
		if err := c.PrevInvite.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionExportedInviteEdit#e90ebb59: field prev_invite: %w", err)
		}
	}
	{
		if err := c.NewInvite.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionExportedInviteEdit#e90ebb59: field new_invite: %w", err)
		}
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionExportedInviteEdit) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionExportedInviteEdit.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionExportedInviteEdit{}
	_ bin.Decoder = &ChannelAdminLogEventActionExportedInviteEdit{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionExportedInviteEdit{}
)

// ChannelAdminLogEventActionParticipantVolume represents TL type `channelAdminLogEventActionParticipantVolume#3e7f6847`.
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionParticipantVolume for reference.
type ChannelAdminLogEventActionParticipantVolume struct {
	// Participant field of ChannelAdminLogEventActionParticipantVolume.
	Participant GroupCallParticipant `tl:"participant"`
}

// ChannelAdminLogEventActionParticipantVolumeTypeID is TL type id of ChannelAdminLogEventActionParticipantVolume.
const ChannelAdminLogEventActionParticipantVolumeTypeID = 0x3e7f6847

func (c *ChannelAdminLogEventActionParticipantVolume) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Participant.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionParticipantVolume) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionParticipantVolume(nil)"
	}
	type Alias ChannelAdminLogEventActionParticipantVolume
	return fmt.Sprintf("ChannelAdminLogEventActionParticipantVolume%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionParticipantVolume from given interface.
func (c *ChannelAdminLogEventActionParticipantVolume) FillFrom(from interface {
	GetParticipant() (value GroupCallParticipant)
}) {
	c.Participant = from.GetParticipant()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionParticipantVolume) TypeID() uint32 {
	return ChannelAdminLogEventActionParticipantVolumeTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionParticipantVolume) TypeName() string {
	return "channelAdminLogEventActionParticipantVolume"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionParticipantVolume) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionParticipantVolume#3e7f6847 as nil")
	}
	b.PutID(ChannelAdminLogEventActionParticipantVolumeTypeID)
	if err := c.Participant.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantVolume#3e7f6847: field participant: %w", err)
	}
	return nil
}

// GetParticipant returns value of Participant field.
func (c *ChannelAdminLogEventActionParticipantVolume) GetParticipant() (value GroupCallParticipant) {
	return c.Participant
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionParticipantVolume) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionParticipantVolume#3e7f6847 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionParticipantVolumeTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantVolume#3e7f6847: %w", err)
	}
	{
		if err := c.Participant.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantVolume#3e7f6847: field participant: %w", err)
		}
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionParticipantVolume) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionParticipantVolume.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionParticipantVolume{}
	_ bin.Decoder = &ChannelAdminLogEventActionParticipantVolume{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionParticipantVolume{}
)

// ChannelAdminLogEventActionChangeHistoryTTL represents TL type `channelAdminLogEventActionChangeHistoryTTL#6e941a38`.
//
// See https://core.telegram.org/constructor/channelAdminLogEventActionChangeHistoryTTL for reference.
type ChannelAdminLogEventActionChangeHistoryTTL struct {
	// PrevValue field of ChannelAdminLogEventActionChangeHistoryTTL.
	PrevValue int `tl:"prev_value"`
	// NewValue field of ChannelAdminLogEventActionChangeHistoryTTL.
	NewValue int `tl:"new_value"`
}

// ChannelAdminLogEventActionChangeHistoryTTLTypeID is TL type id of ChannelAdminLogEventActionChangeHistoryTTL.
const ChannelAdminLogEventActionChangeHistoryTTLTypeID = 0x6e941a38

func (c *ChannelAdminLogEventActionChangeHistoryTTL) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.PrevValue == 0) {
		return false
	}
	if !(c.NewValue == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventActionChangeHistoryTTL) String() string {
	if c == nil {
		return "ChannelAdminLogEventActionChangeHistoryTTL(nil)"
	}
	type Alias ChannelAdminLogEventActionChangeHistoryTTL
	return fmt.Sprintf("ChannelAdminLogEventActionChangeHistoryTTL%+v", Alias(*c))
}

// FillFrom fills ChannelAdminLogEventActionChangeHistoryTTL from given interface.
func (c *ChannelAdminLogEventActionChangeHistoryTTL) FillFrom(from interface {
	GetPrevValue() (value int)
	GetNewValue() (value int)
}) {
	c.PrevValue = from.GetPrevValue()
	c.NewValue = from.GetNewValue()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelAdminLogEventActionChangeHistoryTTL) TypeID() uint32 {
	return ChannelAdminLogEventActionChangeHistoryTTLTypeID
}

// TypeName returns name of type in TL schema.
func (c *ChannelAdminLogEventActionChangeHistoryTTL) TypeName() string {
	return "channelAdminLogEventActionChangeHistoryTTL"
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionChangeHistoryTTL) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionChangeHistoryTTL#6e941a38 as nil")
	}
	b.PutID(ChannelAdminLogEventActionChangeHistoryTTLTypeID)
	b.PutInt(c.PrevValue)
	b.PutInt(c.NewValue)
	return nil
}

// GetPrevValue returns value of PrevValue field.
func (c *ChannelAdminLogEventActionChangeHistoryTTL) GetPrevValue() (value int) {
	return c.PrevValue
}

// GetNewValue returns value of NewValue field.
func (c *ChannelAdminLogEventActionChangeHistoryTTL) GetNewValue() (value int) {
	return c.NewValue
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionChangeHistoryTTL) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionChangeHistoryTTL#6e941a38 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionChangeHistoryTTLTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionChangeHistoryTTL#6e941a38: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeHistoryTTL#6e941a38: field prev_value: %w", err)
		}
		c.PrevValue = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeHistoryTTL#6e941a38: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionChangeHistoryTTL) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionChangeHistoryTTL.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionChangeHistoryTTL{}
	_ bin.Decoder = &ChannelAdminLogEventActionChangeHistoryTTL{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionChangeHistoryTTL{}
)

// ChannelAdminLogEventActionClass represents ChannelAdminLogEventAction generic type.
//
// See https://core.telegram.org/type/ChannelAdminLogEventAction for reference.
//
// Example:
//  g, err := tg.DecodeChannelAdminLogEventAction(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *tg.ChannelAdminLogEventActionChangeTitle: // channelAdminLogEventActionChangeTitle#e6dfb825
//  case *tg.ChannelAdminLogEventActionChangeAbout: // channelAdminLogEventActionChangeAbout#55188a2e
//  case *tg.ChannelAdminLogEventActionChangeUsername: // channelAdminLogEventActionChangeUsername#6a4afc38
//  case *tg.ChannelAdminLogEventActionChangePhoto: // channelAdminLogEventActionChangePhoto#434bd2af
//  case *tg.ChannelAdminLogEventActionToggleInvites: // channelAdminLogEventActionToggleInvites#1b7907ae
//  case *tg.ChannelAdminLogEventActionToggleSignatures: // channelAdminLogEventActionToggleSignatures#26ae0971
//  case *tg.ChannelAdminLogEventActionUpdatePinned: // channelAdminLogEventActionUpdatePinned#e9e82c18
//  case *tg.ChannelAdminLogEventActionEditMessage: // channelAdminLogEventActionEditMessage#709b2405
//  case *tg.ChannelAdminLogEventActionDeleteMessage: // channelAdminLogEventActionDeleteMessage#42e047bb
//  case *tg.ChannelAdminLogEventActionParticipantJoin: // channelAdminLogEventActionParticipantJoin#183040d3
//  case *tg.ChannelAdminLogEventActionParticipantLeave: // channelAdminLogEventActionParticipantLeave#f89777f2
//  case *tg.ChannelAdminLogEventActionParticipantInvite: // channelAdminLogEventActionParticipantInvite#e31c34d8
//  case *tg.ChannelAdminLogEventActionParticipantToggleBan: // channelAdminLogEventActionParticipantToggleBan#e6d83d7e
//  case *tg.ChannelAdminLogEventActionParticipantToggleAdmin: // channelAdminLogEventActionParticipantToggleAdmin#d5676710
//  case *tg.ChannelAdminLogEventActionChangeStickerSet: // channelAdminLogEventActionChangeStickerSet#b1c3caa7
//  case *tg.ChannelAdminLogEventActionTogglePreHistoryHidden: // channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1
//  case *tg.ChannelAdminLogEventActionDefaultBannedRights: // channelAdminLogEventActionDefaultBannedRights#2df5fc0a
//  case *tg.ChannelAdminLogEventActionStopPoll: // channelAdminLogEventActionStopPoll#8f079643
//  case *tg.ChannelAdminLogEventActionChangeLinkedChat: // channelAdminLogEventActionChangeLinkedChat#a26f881b
//  case *tg.ChannelAdminLogEventActionChangeLocation: // channelAdminLogEventActionChangeLocation#e6b76ae
//  case *tg.ChannelAdminLogEventActionToggleSlowMode: // channelAdminLogEventActionToggleSlowMode#53909779
//  case *tg.ChannelAdminLogEventActionStartGroupCall: // channelAdminLogEventActionStartGroupCall#23209745
//  case *tg.ChannelAdminLogEventActionDiscardGroupCall: // channelAdminLogEventActionDiscardGroupCall#db9f9140
//  case *tg.ChannelAdminLogEventActionParticipantMute: // channelAdminLogEventActionParticipantMute#f92424d2
//  case *tg.ChannelAdminLogEventActionParticipantUnmute: // channelAdminLogEventActionParticipantUnmute#e64429c0
//  case *tg.ChannelAdminLogEventActionToggleGroupCallSetting: // channelAdminLogEventActionToggleGroupCallSetting#56d6a247
//  case *tg.ChannelAdminLogEventActionParticipantJoinByInvite: // channelAdminLogEventActionParticipantJoinByInvite#5cdada77
//  case *tg.ChannelAdminLogEventActionExportedInviteDelete: // channelAdminLogEventActionExportedInviteDelete#5a50fca4
//  case *tg.ChannelAdminLogEventActionExportedInviteRevoke: // channelAdminLogEventActionExportedInviteRevoke#410a134e
//  case *tg.ChannelAdminLogEventActionExportedInviteEdit: // channelAdminLogEventActionExportedInviteEdit#e90ebb59
//  case *tg.ChannelAdminLogEventActionParticipantVolume: // channelAdminLogEventActionParticipantVolume#3e7f6847
//  case *tg.ChannelAdminLogEventActionChangeHistoryTTL: // channelAdminLogEventActionChangeHistoryTTL#6e941a38
//  default: panic(v)
//  }
type ChannelAdminLogEventActionClass interface {
	bin.Encoder
	bin.Decoder
	construct() ChannelAdminLogEventActionClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool
}

// DecodeChannelAdminLogEventAction implements binary de-serialization for ChannelAdminLogEventActionClass.
func DecodeChannelAdminLogEventAction(buf *bin.Buffer) (ChannelAdminLogEventActionClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case ChannelAdminLogEventActionChangeTitleTypeID:
		// Decoding channelAdminLogEventActionChangeTitle#e6dfb825.
		v := ChannelAdminLogEventActionChangeTitle{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionChangeAboutTypeID:
		// Decoding channelAdminLogEventActionChangeAbout#55188a2e.
		v := ChannelAdminLogEventActionChangeAbout{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionChangeUsernameTypeID:
		// Decoding channelAdminLogEventActionChangeUsername#6a4afc38.
		v := ChannelAdminLogEventActionChangeUsername{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionChangePhotoTypeID:
		// Decoding channelAdminLogEventActionChangePhoto#434bd2af.
		v := ChannelAdminLogEventActionChangePhoto{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionToggleInvitesTypeID:
		// Decoding channelAdminLogEventActionToggleInvites#1b7907ae.
		v := ChannelAdminLogEventActionToggleInvites{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionToggleSignaturesTypeID:
		// Decoding channelAdminLogEventActionToggleSignatures#26ae0971.
		v := ChannelAdminLogEventActionToggleSignatures{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionUpdatePinnedTypeID:
		// Decoding channelAdminLogEventActionUpdatePinned#e9e82c18.
		v := ChannelAdminLogEventActionUpdatePinned{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionEditMessageTypeID:
		// Decoding channelAdminLogEventActionEditMessage#709b2405.
		v := ChannelAdminLogEventActionEditMessage{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionDeleteMessageTypeID:
		// Decoding channelAdminLogEventActionDeleteMessage#42e047bb.
		v := ChannelAdminLogEventActionDeleteMessage{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionParticipantJoinTypeID:
		// Decoding channelAdminLogEventActionParticipantJoin#183040d3.
		v := ChannelAdminLogEventActionParticipantJoin{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionParticipantLeaveTypeID:
		// Decoding channelAdminLogEventActionParticipantLeave#f89777f2.
		v := ChannelAdminLogEventActionParticipantLeave{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionParticipantInviteTypeID:
		// Decoding channelAdminLogEventActionParticipantInvite#e31c34d8.
		v := ChannelAdminLogEventActionParticipantInvite{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionParticipantToggleBanTypeID:
		// Decoding channelAdminLogEventActionParticipantToggleBan#e6d83d7e.
		v := ChannelAdminLogEventActionParticipantToggleBan{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionParticipantToggleAdminTypeID:
		// Decoding channelAdminLogEventActionParticipantToggleAdmin#d5676710.
		v := ChannelAdminLogEventActionParticipantToggleAdmin{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionChangeStickerSetTypeID:
		// Decoding channelAdminLogEventActionChangeStickerSet#b1c3caa7.
		v := ChannelAdminLogEventActionChangeStickerSet{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionTogglePreHistoryHiddenTypeID:
		// Decoding channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1.
		v := ChannelAdminLogEventActionTogglePreHistoryHidden{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionDefaultBannedRightsTypeID:
		// Decoding channelAdminLogEventActionDefaultBannedRights#2df5fc0a.
		v := ChannelAdminLogEventActionDefaultBannedRights{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionStopPollTypeID:
		// Decoding channelAdminLogEventActionStopPoll#8f079643.
		v := ChannelAdminLogEventActionStopPoll{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionChangeLinkedChatTypeID:
		// Decoding channelAdminLogEventActionChangeLinkedChat#a26f881b.
		v := ChannelAdminLogEventActionChangeLinkedChat{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionChangeLocationTypeID:
		// Decoding channelAdminLogEventActionChangeLocation#e6b76ae.
		v := ChannelAdminLogEventActionChangeLocation{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionToggleSlowModeTypeID:
		// Decoding channelAdminLogEventActionToggleSlowMode#53909779.
		v := ChannelAdminLogEventActionToggleSlowMode{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionStartGroupCallTypeID:
		// Decoding channelAdminLogEventActionStartGroupCall#23209745.
		v := ChannelAdminLogEventActionStartGroupCall{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionDiscardGroupCallTypeID:
		// Decoding channelAdminLogEventActionDiscardGroupCall#db9f9140.
		v := ChannelAdminLogEventActionDiscardGroupCall{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionParticipantMuteTypeID:
		// Decoding channelAdminLogEventActionParticipantMute#f92424d2.
		v := ChannelAdminLogEventActionParticipantMute{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionParticipantUnmuteTypeID:
		// Decoding channelAdminLogEventActionParticipantUnmute#e64429c0.
		v := ChannelAdminLogEventActionParticipantUnmute{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionToggleGroupCallSettingTypeID:
		// Decoding channelAdminLogEventActionToggleGroupCallSetting#56d6a247.
		v := ChannelAdminLogEventActionToggleGroupCallSetting{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionParticipantJoinByInviteTypeID:
		// Decoding channelAdminLogEventActionParticipantJoinByInvite#5cdada77.
		v := ChannelAdminLogEventActionParticipantJoinByInvite{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionExportedInviteDeleteTypeID:
		// Decoding channelAdminLogEventActionExportedInviteDelete#5a50fca4.
		v := ChannelAdminLogEventActionExportedInviteDelete{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionExportedInviteRevokeTypeID:
		// Decoding channelAdminLogEventActionExportedInviteRevoke#410a134e.
		v := ChannelAdminLogEventActionExportedInviteRevoke{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionExportedInviteEditTypeID:
		// Decoding channelAdminLogEventActionExportedInviteEdit#e90ebb59.
		v := ChannelAdminLogEventActionExportedInviteEdit{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionParticipantVolumeTypeID:
		// Decoding channelAdminLogEventActionParticipantVolume#3e7f6847.
		v := ChannelAdminLogEventActionParticipantVolume{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionChangeHistoryTTLTypeID:
		// Decoding channelAdminLogEventActionChangeHistoryTTL#6e941a38.
		v := ChannelAdminLogEventActionChangeHistoryTTL{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", bin.NewUnexpectedID(id))
	}
}

// ChannelAdminLogEventAction boxes the ChannelAdminLogEventActionClass providing a helper.
type ChannelAdminLogEventActionBox struct {
	ChannelAdminLogEventAction ChannelAdminLogEventActionClass
}

// Decode implements bin.Decoder for ChannelAdminLogEventActionBox.
func (b *ChannelAdminLogEventActionBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode ChannelAdminLogEventActionBox to nil")
	}
	v, err := DecodeChannelAdminLogEventAction(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.ChannelAdminLogEventAction = v
	return nil
}

// Encode implements bin.Encode for ChannelAdminLogEventActionBox.
func (b *ChannelAdminLogEventActionBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.ChannelAdminLogEventAction == nil {
		return fmt.Errorf("unable to encode ChannelAdminLogEventActionClass as nil")
	}
	return b.ChannelAdminLogEventAction.Encode(buf)
}

// ChannelAdminLogEventActionClassSlice is adapter for slice of ChannelAdminLogEventActionClass.
type ChannelAdminLogEventActionClassSlice []ChannelAdminLogEventActionClass

// First returns first element of slice (if exists).
func (s ChannelAdminLogEventActionClassSlice) First() (v ChannelAdminLogEventActionClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s ChannelAdminLogEventActionClassSlice) Last() (v ChannelAdminLogEventActionClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *ChannelAdminLogEventActionClassSlice) PopFirst() (v ChannelAdminLogEventActionClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	a[len(a)-1] = nil
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *ChannelAdminLogEventActionClassSlice) Pop() (v ChannelAdminLogEventActionClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
