// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// ChannelAdminLogEventActionChangeTitle represents TL type `channelAdminLogEventActionChangeTitle#e6dfb825`.
type ChannelAdminLogEventActionChangeTitle struct {
	// PrevValue field of ChannelAdminLogEventActionChangeTitle.
	PrevValue string
	// NewValue field of ChannelAdminLogEventActionChangeTitle.
	NewValue string
}

// ChannelAdminLogEventActionChangeTitleTypeID is TL type id of ChannelAdminLogEventActionChangeTitle.
const ChannelAdminLogEventActionChangeTitleTypeID = 0xe6dfb825

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionChangeTitle) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionChangeTitle#e6dfb825 as nil")
	}
	b.PutID(ChannelAdminLogEventActionChangeTitleTypeID)
	b.PutString(c.PrevValue)
	b.PutString(c.NewValue)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionChangeTitle) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionChangeTitle#e6dfb825 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionChangeTitleTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionChangeTitle#e6dfb825: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeTitle#e6dfb825: field prev_value: %w", err)
		}
		c.PrevValue = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeTitle#e6dfb825: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionChangeTitle) construct() ChannelAdminLogEventActionClass { return &c }

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionChangeTitle.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionChangeTitle{}
	_ bin.Decoder = &ChannelAdminLogEventActionChangeTitle{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionChangeTitle{}
)

// ChannelAdminLogEventActionChangeAbout represents TL type `channelAdminLogEventActionChangeAbout#55188a2e`.
type ChannelAdminLogEventActionChangeAbout struct {
	// PrevValue field of ChannelAdminLogEventActionChangeAbout.
	PrevValue string
	// NewValue field of ChannelAdminLogEventActionChangeAbout.
	NewValue string
}

// ChannelAdminLogEventActionChangeAboutTypeID is TL type id of ChannelAdminLogEventActionChangeAbout.
const ChannelAdminLogEventActionChangeAboutTypeID = 0x55188a2e

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionChangeAbout) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionChangeAbout#55188a2e as nil")
	}
	b.PutID(ChannelAdminLogEventActionChangeAboutTypeID)
	b.PutString(c.PrevValue)
	b.PutString(c.NewValue)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionChangeAbout) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionChangeAbout#55188a2e to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionChangeAboutTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionChangeAbout#55188a2e: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeAbout#55188a2e: field prev_value: %w", err)
		}
		c.PrevValue = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeAbout#55188a2e: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionChangeAbout) construct() ChannelAdminLogEventActionClass { return &c }

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionChangeAbout.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionChangeAbout{}
	_ bin.Decoder = &ChannelAdminLogEventActionChangeAbout{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionChangeAbout{}
)

// ChannelAdminLogEventActionChangeUsername represents TL type `channelAdminLogEventActionChangeUsername#6a4afc38`.
type ChannelAdminLogEventActionChangeUsername struct {
	// PrevValue field of ChannelAdminLogEventActionChangeUsername.
	PrevValue string
	// NewValue field of ChannelAdminLogEventActionChangeUsername.
	NewValue string
}

// ChannelAdminLogEventActionChangeUsernameTypeID is TL type id of ChannelAdminLogEventActionChangeUsername.
const ChannelAdminLogEventActionChangeUsernameTypeID = 0x6a4afc38

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionChangeUsername) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionChangeUsername#6a4afc38 as nil")
	}
	b.PutID(ChannelAdminLogEventActionChangeUsernameTypeID)
	b.PutString(c.PrevValue)
	b.PutString(c.NewValue)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionChangeUsername) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionChangeUsername#6a4afc38 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionChangeUsernameTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionChangeUsername#6a4afc38: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeUsername#6a4afc38: field prev_value: %w", err)
		}
		c.PrevValue = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeUsername#6a4afc38: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionChangeUsername) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionChangeUsername.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionChangeUsername{}
	_ bin.Decoder = &ChannelAdminLogEventActionChangeUsername{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionChangeUsername{}
)

// ChannelAdminLogEventActionChangePhoto represents TL type `channelAdminLogEventActionChangePhoto#434bd2af`.
type ChannelAdminLogEventActionChangePhoto struct {
	// PrevPhoto field of ChannelAdminLogEventActionChangePhoto.
	PrevPhoto PhotoClass
	// NewPhoto field of ChannelAdminLogEventActionChangePhoto.
	NewPhoto PhotoClass
}

// ChannelAdminLogEventActionChangePhotoTypeID is TL type id of ChannelAdminLogEventActionChangePhoto.
const ChannelAdminLogEventActionChangePhotoTypeID = 0x434bd2af

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionChangePhoto) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionChangePhoto#434bd2af as nil")
	}
	b.PutID(ChannelAdminLogEventActionChangePhotoTypeID)
	if c.PrevPhoto == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangePhoto#434bd2af: field prev_photo is nil")
	}
	if err := c.PrevPhoto.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangePhoto#434bd2af: field prev_photo: %w", err)
	}
	if c.NewPhoto == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangePhoto#434bd2af: field new_photo is nil")
	}
	if err := c.NewPhoto.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangePhoto#434bd2af: field new_photo: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionChangePhoto) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionChangePhoto#434bd2af to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionChangePhotoTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionChangePhoto#434bd2af: %w", err)
	}
	{
		value, err := DecodePhoto(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangePhoto#434bd2af: field prev_photo: %w", err)
		}
		c.PrevPhoto = value
	}
	{
		value, err := DecodePhoto(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangePhoto#434bd2af: field new_photo: %w", err)
		}
		c.NewPhoto = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionChangePhoto) construct() ChannelAdminLogEventActionClass { return &c }

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionChangePhoto.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionChangePhoto{}
	_ bin.Decoder = &ChannelAdminLogEventActionChangePhoto{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionChangePhoto{}
)

// ChannelAdminLogEventActionToggleInvites represents TL type `channelAdminLogEventActionToggleInvites#1b7907ae`.
type ChannelAdminLogEventActionToggleInvites struct {
	// NewValue field of ChannelAdminLogEventActionToggleInvites.
	NewValue bool
}

// ChannelAdminLogEventActionToggleInvitesTypeID is TL type id of ChannelAdminLogEventActionToggleInvites.
const ChannelAdminLogEventActionToggleInvitesTypeID = 0x1b7907ae

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionToggleInvites) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionToggleInvites#1b7907ae as nil")
	}
	b.PutID(ChannelAdminLogEventActionToggleInvitesTypeID)
	b.PutBool(c.NewValue)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionToggleInvites) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionToggleInvites#1b7907ae to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionToggleInvitesTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionToggleInvites#1b7907ae: %w", err)
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionToggleInvites#1b7907ae: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionToggleInvites) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionToggleInvites.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionToggleInvites{}
	_ bin.Decoder = &ChannelAdminLogEventActionToggleInvites{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionToggleInvites{}
)

// ChannelAdminLogEventActionToggleSignatures represents TL type `channelAdminLogEventActionToggleSignatures#26ae0971`.
type ChannelAdminLogEventActionToggleSignatures struct {
	// NewValue field of ChannelAdminLogEventActionToggleSignatures.
	NewValue bool
}

// ChannelAdminLogEventActionToggleSignaturesTypeID is TL type id of ChannelAdminLogEventActionToggleSignatures.
const ChannelAdminLogEventActionToggleSignaturesTypeID = 0x26ae0971

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionToggleSignatures) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionToggleSignatures#26ae0971 as nil")
	}
	b.PutID(ChannelAdminLogEventActionToggleSignaturesTypeID)
	b.PutBool(c.NewValue)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionToggleSignatures) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionToggleSignatures#26ae0971 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionToggleSignaturesTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionToggleSignatures#26ae0971: %w", err)
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionToggleSignatures#26ae0971: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionToggleSignatures) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionToggleSignatures.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionToggleSignatures{}
	_ bin.Decoder = &ChannelAdminLogEventActionToggleSignatures{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionToggleSignatures{}
)

// ChannelAdminLogEventActionUpdatePinned represents TL type `channelAdminLogEventActionUpdatePinned#e9e82c18`.
type ChannelAdminLogEventActionUpdatePinned struct {
	// Message field of ChannelAdminLogEventActionUpdatePinned.
	Message MessageClass
}

// ChannelAdminLogEventActionUpdatePinnedTypeID is TL type id of ChannelAdminLogEventActionUpdatePinned.
const ChannelAdminLogEventActionUpdatePinnedTypeID = 0xe9e82c18

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionUpdatePinned) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionUpdatePinned#e9e82c18 as nil")
	}
	b.PutID(ChannelAdminLogEventActionUpdatePinnedTypeID)
	if c.Message == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionUpdatePinned#e9e82c18: field message is nil")
	}
	if err := c.Message.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionUpdatePinned#e9e82c18: field message: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionUpdatePinned) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionUpdatePinned#e9e82c18 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionUpdatePinnedTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionUpdatePinned#e9e82c18: %w", err)
	}
	{
		value, err := DecodeMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionUpdatePinned#e9e82c18: field message: %w", err)
		}
		c.Message = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionUpdatePinned) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionUpdatePinned.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionUpdatePinned{}
	_ bin.Decoder = &ChannelAdminLogEventActionUpdatePinned{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionUpdatePinned{}
)

// ChannelAdminLogEventActionEditMessage represents TL type `channelAdminLogEventActionEditMessage#709b2405`.
type ChannelAdminLogEventActionEditMessage struct {
	// PrevMessage field of ChannelAdminLogEventActionEditMessage.
	PrevMessage MessageClass
	// NewMessage field of ChannelAdminLogEventActionEditMessage.
	NewMessage MessageClass
}

// ChannelAdminLogEventActionEditMessageTypeID is TL type id of ChannelAdminLogEventActionEditMessage.
const ChannelAdminLogEventActionEditMessageTypeID = 0x709b2405

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionEditMessage) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionEditMessage#709b2405 as nil")
	}
	b.PutID(ChannelAdminLogEventActionEditMessageTypeID)
	if c.PrevMessage == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionEditMessage#709b2405: field prev_message is nil")
	}
	if err := c.PrevMessage.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionEditMessage#709b2405: field prev_message: %w", err)
	}
	if c.NewMessage == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionEditMessage#709b2405: field new_message is nil")
	}
	if err := c.NewMessage.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionEditMessage#709b2405: field new_message: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionEditMessage) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionEditMessage#709b2405 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionEditMessageTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionEditMessage#709b2405: %w", err)
	}
	{
		value, err := DecodeMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionEditMessage#709b2405: field prev_message: %w", err)
		}
		c.PrevMessage = value
	}
	{
		value, err := DecodeMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionEditMessage#709b2405: field new_message: %w", err)
		}
		c.NewMessage = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionEditMessage) construct() ChannelAdminLogEventActionClass { return &c }

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionEditMessage.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionEditMessage{}
	_ bin.Decoder = &ChannelAdminLogEventActionEditMessage{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionEditMessage{}
)

// ChannelAdminLogEventActionDeleteMessage represents TL type `channelAdminLogEventActionDeleteMessage#42e047bb`.
type ChannelAdminLogEventActionDeleteMessage struct {
	// Message field of ChannelAdminLogEventActionDeleteMessage.
	Message MessageClass
}

// ChannelAdminLogEventActionDeleteMessageTypeID is TL type id of ChannelAdminLogEventActionDeleteMessage.
const ChannelAdminLogEventActionDeleteMessageTypeID = 0x42e047bb

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionDeleteMessage) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionDeleteMessage#42e047bb as nil")
	}
	b.PutID(ChannelAdminLogEventActionDeleteMessageTypeID)
	if c.Message == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionDeleteMessage#42e047bb: field message is nil")
	}
	if err := c.Message.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionDeleteMessage#42e047bb: field message: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionDeleteMessage) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionDeleteMessage#42e047bb to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionDeleteMessageTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionDeleteMessage#42e047bb: %w", err)
	}
	{
		value, err := DecodeMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionDeleteMessage#42e047bb: field message: %w", err)
		}
		c.Message = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionDeleteMessage) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionDeleteMessage.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionDeleteMessage{}
	_ bin.Decoder = &ChannelAdminLogEventActionDeleteMessage{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionDeleteMessage{}
)

// ChannelAdminLogEventActionParticipantJoin represents TL type `channelAdminLogEventActionParticipantJoin#183040d3`.
type ChannelAdminLogEventActionParticipantJoin struct {
}

// ChannelAdminLogEventActionParticipantJoinTypeID is TL type id of ChannelAdminLogEventActionParticipantJoin.
const ChannelAdminLogEventActionParticipantJoinTypeID = 0x183040d3

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionParticipantJoin) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionParticipantJoin#183040d3 as nil")
	}
	b.PutID(ChannelAdminLogEventActionParticipantJoinTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionParticipantJoin) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionParticipantJoin#183040d3 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionParticipantJoinTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantJoin#183040d3: %w", err)
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionParticipantJoin) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionParticipantJoin.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionParticipantJoin{}
	_ bin.Decoder = &ChannelAdminLogEventActionParticipantJoin{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionParticipantJoin{}
)

// ChannelAdminLogEventActionParticipantLeave represents TL type `channelAdminLogEventActionParticipantLeave#f89777f2`.
type ChannelAdminLogEventActionParticipantLeave struct {
}

// ChannelAdminLogEventActionParticipantLeaveTypeID is TL type id of ChannelAdminLogEventActionParticipantLeave.
const ChannelAdminLogEventActionParticipantLeaveTypeID = 0xf89777f2

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionParticipantLeave) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionParticipantLeave#f89777f2 as nil")
	}
	b.PutID(ChannelAdminLogEventActionParticipantLeaveTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionParticipantLeave) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionParticipantLeave#f89777f2 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionParticipantLeaveTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantLeave#f89777f2: %w", err)
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionParticipantLeave) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionParticipantLeave.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionParticipantLeave{}
	_ bin.Decoder = &ChannelAdminLogEventActionParticipantLeave{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionParticipantLeave{}
)

// ChannelAdminLogEventActionParticipantInvite represents TL type `channelAdminLogEventActionParticipantInvite#e31c34d8`.
type ChannelAdminLogEventActionParticipantInvite struct {
	// Participant field of ChannelAdminLogEventActionParticipantInvite.
	Participant ChannelParticipantClass
}

// ChannelAdminLogEventActionParticipantInviteTypeID is TL type id of ChannelAdminLogEventActionParticipantInvite.
const ChannelAdminLogEventActionParticipantInviteTypeID = 0xe31c34d8

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionParticipantInvite) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionParticipantInvite#e31c34d8 as nil")
	}
	b.PutID(ChannelAdminLogEventActionParticipantInviteTypeID)
	if c.Participant == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantInvite#e31c34d8: field participant is nil")
	}
	if err := c.Participant.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantInvite#e31c34d8: field participant: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionParticipantInvite) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionParticipantInvite#e31c34d8 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionParticipantInviteTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantInvite#e31c34d8: %w", err)
	}
	{
		value, err := DecodeChannelParticipant(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantInvite#e31c34d8: field participant: %w", err)
		}
		c.Participant = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionParticipantInvite) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionParticipantInvite.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionParticipantInvite{}
	_ bin.Decoder = &ChannelAdminLogEventActionParticipantInvite{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionParticipantInvite{}
)

// ChannelAdminLogEventActionParticipantToggleBan represents TL type `channelAdminLogEventActionParticipantToggleBan#e6d83d7e`.
type ChannelAdminLogEventActionParticipantToggleBan struct {
	// PrevParticipant field of ChannelAdminLogEventActionParticipantToggleBan.
	PrevParticipant ChannelParticipantClass
	// NewParticipant field of ChannelAdminLogEventActionParticipantToggleBan.
	NewParticipant ChannelParticipantClass
}

// ChannelAdminLogEventActionParticipantToggleBanTypeID is TL type id of ChannelAdminLogEventActionParticipantToggleBan.
const ChannelAdminLogEventActionParticipantToggleBanTypeID = 0xe6d83d7e

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionParticipantToggleBan) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionParticipantToggleBan#e6d83d7e as nil")
	}
	b.PutID(ChannelAdminLogEventActionParticipantToggleBanTypeID)
	if c.PrevParticipant == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantToggleBan#e6d83d7e: field prev_participant is nil")
	}
	if err := c.PrevParticipant.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantToggleBan#e6d83d7e: field prev_participant: %w", err)
	}
	if c.NewParticipant == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantToggleBan#e6d83d7e: field new_participant is nil")
	}
	if err := c.NewParticipant.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantToggleBan#e6d83d7e: field new_participant: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionParticipantToggleBan) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionParticipantToggleBan#e6d83d7e to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionParticipantToggleBanTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantToggleBan#e6d83d7e: %w", err)
	}
	{
		value, err := DecodeChannelParticipant(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantToggleBan#e6d83d7e: field prev_participant: %w", err)
		}
		c.PrevParticipant = value
	}
	{
		value, err := DecodeChannelParticipant(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantToggleBan#e6d83d7e: field new_participant: %w", err)
		}
		c.NewParticipant = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionParticipantToggleBan) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionParticipantToggleBan.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionParticipantToggleBan{}
	_ bin.Decoder = &ChannelAdminLogEventActionParticipantToggleBan{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionParticipantToggleBan{}
)

// ChannelAdminLogEventActionParticipantToggleAdmin represents TL type `channelAdminLogEventActionParticipantToggleAdmin#d5676710`.
type ChannelAdminLogEventActionParticipantToggleAdmin struct {
	// PrevParticipant field of ChannelAdminLogEventActionParticipantToggleAdmin.
	PrevParticipant ChannelParticipantClass
	// NewParticipant field of ChannelAdminLogEventActionParticipantToggleAdmin.
	NewParticipant ChannelParticipantClass
}

// ChannelAdminLogEventActionParticipantToggleAdminTypeID is TL type id of ChannelAdminLogEventActionParticipantToggleAdmin.
const ChannelAdminLogEventActionParticipantToggleAdminTypeID = 0xd5676710

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionParticipantToggleAdmin) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionParticipantToggleAdmin#d5676710 as nil")
	}
	b.PutID(ChannelAdminLogEventActionParticipantToggleAdminTypeID)
	if c.PrevParticipant == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantToggleAdmin#d5676710: field prev_participant is nil")
	}
	if err := c.PrevParticipant.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantToggleAdmin#d5676710: field prev_participant: %w", err)
	}
	if c.NewParticipant == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantToggleAdmin#d5676710: field new_participant is nil")
	}
	if err := c.NewParticipant.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionParticipantToggleAdmin#d5676710: field new_participant: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionParticipantToggleAdmin) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionParticipantToggleAdmin#d5676710 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionParticipantToggleAdminTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantToggleAdmin#d5676710: %w", err)
	}
	{
		value, err := DecodeChannelParticipant(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantToggleAdmin#d5676710: field prev_participant: %w", err)
		}
		c.PrevParticipant = value
	}
	{
		value, err := DecodeChannelParticipant(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionParticipantToggleAdmin#d5676710: field new_participant: %w", err)
		}
		c.NewParticipant = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionParticipantToggleAdmin) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionParticipantToggleAdmin.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionParticipantToggleAdmin{}
	_ bin.Decoder = &ChannelAdminLogEventActionParticipantToggleAdmin{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionParticipantToggleAdmin{}
)

// ChannelAdminLogEventActionChangeStickerSet represents TL type `channelAdminLogEventActionChangeStickerSet#b1c3caa7`.
type ChannelAdminLogEventActionChangeStickerSet struct {
	// PrevStickerset field of ChannelAdminLogEventActionChangeStickerSet.
	PrevStickerset InputStickerSetClass
	// NewStickerset field of ChannelAdminLogEventActionChangeStickerSet.
	NewStickerset InputStickerSetClass
}

// ChannelAdminLogEventActionChangeStickerSetTypeID is TL type id of ChannelAdminLogEventActionChangeStickerSet.
const ChannelAdminLogEventActionChangeStickerSetTypeID = 0xb1c3caa7

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionChangeStickerSet) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionChangeStickerSet#b1c3caa7 as nil")
	}
	b.PutID(ChannelAdminLogEventActionChangeStickerSetTypeID)
	if c.PrevStickerset == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangeStickerSet#b1c3caa7: field prev_stickerset is nil")
	}
	if err := c.PrevStickerset.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangeStickerSet#b1c3caa7: field prev_stickerset: %w", err)
	}
	if c.NewStickerset == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangeStickerSet#b1c3caa7: field new_stickerset is nil")
	}
	if err := c.NewStickerset.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangeStickerSet#b1c3caa7: field new_stickerset: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionChangeStickerSet) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionChangeStickerSet#b1c3caa7 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionChangeStickerSetTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionChangeStickerSet#b1c3caa7: %w", err)
	}
	{
		value, err := DecodeInputStickerSet(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeStickerSet#b1c3caa7: field prev_stickerset: %w", err)
		}
		c.PrevStickerset = value
	}
	{
		value, err := DecodeInputStickerSet(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeStickerSet#b1c3caa7: field new_stickerset: %w", err)
		}
		c.NewStickerset = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionChangeStickerSet) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionChangeStickerSet.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionChangeStickerSet{}
	_ bin.Decoder = &ChannelAdminLogEventActionChangeStickerSet{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionChangeStickerSet{}
)

// ChannelAdminLogEventActionTogglePreHistoryHidden represents TL type `channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1`.
type ChannelAdminLogEventActionTogglePreHistoryHidden struct {
	// NewValue field of ChannelAdminLogEventActionTogglePreHistoryHidden.
	NewValue bool
}

// ChannelAdminLogEventActionTogglePreHistoryHiddenTypeID is TL type id of ChannelAdminLogEventActionTogglePreHistoryHidden.
const ChannelAdminLogEventActionTogglePreHistoryHiddenTypeID = 0x5f5c95f1

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionTogglePreHistoryHidden) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1 as nil")
	}
	b.PutID(ChannelAdminLogEventActionTogglePreHistoryHiddenTypeID)
	b.PutBool(c.NewValue)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionTogglePreHistoryHidden) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionTogglePreHistoryHiddenTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1: %w", err)
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionTogglePreHistoryHidden) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionTogglePreHistoryHidden.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionTogglePreHistoryHidden{}
	_ bin.Decoder = &ChannelAdminLogEventActionTogglePreHistoryHidden{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionTogglePreHistoryHidden{}
)

// ChannelAdminLogEventActionDefaultBannedRights represents TL type `channelAdminLogEventActionDefaultBannedRights#2df5fc0a`.
type ChannelAdminLogEventActionDefaultBannedRights struct {
	// PrevBannedRights field of ChannelAdminLogEventActionDefaultBannedRights.
	PrevBannedRights ChatBannedRights
	// NewBannedRights field of ChannelAdminLogEventActionDefaultBannedRights.
	NewBannedRights ChatBannedRights
}

// ChannelAdminLogEventActionDefaultBannedRightsTypeID is TL type id of ChannelAdminLogEventActionDefaultBannedRights.
const ChannelAdminLogEventActionDefaultBannedRightsTypeID = 0x2df5fc0a

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionDefaultBannedRights) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionDefaultBannedRights#2df5fc0a as nil")
	}
	b.PutID(ChannelAdminLogEventActionDefaultBannedRightsTypeID)
	if err := c.PrevBannedRights.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionDefaultBannedRights#2df5fc0a: field prev_banned_rights: %w", err)
	}
	if err := c.NewBannedRights.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionDefaultBannedRights#2df5fc0a: field new_banned_rights: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionDefaultBannedRights) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionDefaultBannedRights#2df5fc0a to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionDefaultBannedRightsTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionDefaultBannedRights#2df5fc0a: %w", err)
	}
	{
		if err := c.PrevBannedRights.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionDefaultBannedRights#2df5fc0a: field prev_banned_rights: %w", err)
		}
	}
	{
		if err := c.NewBannedRights.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionDefaultBannedRights#2df5fc0a: field new_banned_rights: %w", err)
		}
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionDefaultBannedRights) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionDefaultBannedRights.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionDefaultBannedRights{}
	_ bin.Decoder = &ChannelAdminLogEventActionDefaultBannedRights{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionDefaultBannedRights{}
)

// ChannelAdminLogEventActionStopPoll represents TL type `channelAdminLogEventActionStopPoll#8f079643`.
type ChannelAdminLogEventActionStopPoll struct {
	// Message field of ChannelAdminLogEventActionStopPoll.
	Message MessageClass
}

// ChannelAdminLogEventActionStopPollTypeID is TL type id of ChannelAdminLogEventActionStopPoll.
const ChannelAdminLogEventActionStopPollTypeID = 0x8f079643

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionStopPoll) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionStopPoll#8f079643 as nil")
	}
	b.PutID(ChannelAdminLogEventActionStopPollTypeID)
	if c.Message == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionStopPoll#8f079643: field message is nil")
	}
	if err := c.Message.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionStopPoll#8f079643: field message: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionStopPoll) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionStopPoll#8f079643 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionStopPollTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionStopPoll#8f079643: %w", err)
	}
	{
		value, err := DecodeMessage(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionStopPoll#8f079643: field message: %w", err)
		}
		c.Message = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionStopPoll) construct() ChannelAdminLogEventActionClass { return &c }

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionStopPoll.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionStopPoll{}
	_ bin.Decoder = &ChannelAdminLogEventActionStopPoll{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionStopPoll{}
)

// ChannelAdminLogEventActionChangeLinkedChat represents TL type `channelAdminLogEventActionChangeLinkedChat#a26f881b`.
type ChannelAdminLogEventActionChangeLinkedChat struct {
	// PrevValue field of ChannelAdminLogEventActionChangeLinkedChat.
	PrevValue int
	// NewValue field of ChannelAdminLogEventActionChangeLinkedChat.
	NewValue int
}

// ChannelAdminLogEventActionChangeLinkedChatTypeID is TL type id of ChannelAdminLogEventActionChangeLinkedChat.
const ChannelAdminLogEventActionChangeLinkedChatTypeID = 0xa26f881b

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionChangeLinkedChat) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionChangeLinkedChat#a26f881b as nil")
	}
	b.PutID(ChannelAdminLogEventActionChangeLinkedChatTypeID)
	b.PutInt(c.PrevValue)
	b.PutInt(c.NewValue)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionChangeLinkedChat) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionChangeLinkedChat#a26f881b to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionChangeLinkedChatTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionChangeLinkedChat#a26f881b: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeLinkedChat#a26f881b: field prev_value: %w", err)
		}
		c.PrevValue = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeLinkedChat#a26f881b: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionChangeLinkedChat) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionChangeLinkedChat.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionChangeLinkedChat{}
	_ bin.Decoder = &ChannelAdminLogEventActionChangeLinkedChat{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionChangeLinkedChat{}
)

// ChannelAdminLogEventActionChangeLocation represents TL type `channelAdminLogEventActionChangeLocation#e6b76ae`.
type ChannelAdminLogEventActionChangeLocation struct {
	// PrevValue field of ChannelAdminLogEventActionChangeLocation.
	PrevValue ChannelLocationClass
	// NewValue field of ChannelAdminLogEventActionChangeLocation.
	NewValue ChannelLocationClass
}

// ChannelAdminLogEventActionChangeLocationTypeID is TL type id of ChannelAdminLogEventActionChangeLocation.
const ChannelAdminLogEventActionChangeLocationTypeID = 0xe6b76ae

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionChangeLocation) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionChangeLocation#e6b76ae as nil")
	}
	b.PutID(ChannelAdminLogEventActionChangeLocationTypeID)
	if c.PrevValue == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangeLocation#e6b76ae: field prev_value is nil")
	}
	if err := c.PrevValue.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangeLocation#e6b76ae: field prev_value: %w", err)
	}
	if c.NewValue == nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangeLocation#e6b76ae: field new_value is nil")
	}
	if err := c.NewValue.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventActionChangeLocation#e6b76ae: field new_value: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionChangeLocation) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionChangeLocation#e6b76ae to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionChangeLocationTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionChangeLocation#e6b76ae: %w", err)
	}
	{
		value, err := DecodeChannelLocation(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeLocation#e6b76ae: field prev_value: %w", err)
		}
		c.PrevValue = value
	}
	{
		value, err := DecodeChannelLocation(b)
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionChangeLocation#e6b76ae: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionChangeLocation) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionChangeLocation.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionChangeLocation{}
	_ bin.Decoder = &ChannelAdminLogEventActionChangeLocation{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionChangeLocation{}
)

// ChannelAdminLogEventActionToggleSlowMode represents TL type `channelAdminLogEventActionToggleSlowMode#53909779`.
type ChannelAdminLogEventActionToggleSlowMode struct {
	// PrevValue field of ChannelAdminLogEventActionToggleSlowMode.
	PrevValue int
	// NewValue field of ChannelAdminLogEventActionToggleSlowMode.
	NewValue int
}

// ChannelAdminLogEventActionToggleSlowModeTypeID is TL type id of ChannelAdminLogEventActionToggleSlowMode.
const ChannelAdminLogEventActionToggleSlowModeTypeID = 0x53909779

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventActionToggleSlowMode) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventActionToggleSlowMode#53909779 as nil")
	}
	b.PutID(ChannelAdminLogEventActionToggleSlowModeTypeID)
	b.PutInt(c.PrevValue)
	b.PutInt(c.NewValue)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventActionToggleSlowMode) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventActionToggleSlowMode#53909779 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventActionToggleSlowModeTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventActionToggleSlowMode#53909779: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionToggleSlowMode#53909779: field prev_value: %w", err)
		}
		c.PrevValue = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventActionToggleSlowMode#53909779: field new_value: %w", err)
		}
		c.NewValue = value
	}
	return nil
}

// construct implements constructor of ChannelAdminLogEventActionClass.
func (c ChannelAdminLogEventActionToggleSlowMode) construct() ChannelAdminLogEventActionClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventActionToggleSlowMode.
var (
	_ bin.Encoder = &ChannelAdminLogEventActionToggleSlowMode{}
	_ bin.Decoder = &ChannelAdminLogEventActionToggleSlowMode{}

	_ ChannelAdminLogEventActionClass = &ChannelAdminLogEventActionToggleSlowMode{}
)

// ChannelAdminLogEventActionClass represents ChannelAdminLogEventAction generic type.
//
// Example:
//  g, err := DecodeChannelAdminLogEventAction(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *ChannelAdminLogEventActionChangeTitle: // channelAdminLogEventActionChangeTitle#e6dfb825
//  case *ChannelAdminLogEventActionChangeAbout: // channelAdminLogEventActionChangeAbout#55188a2e
//  case *ChannelAdminLogEventActionChangeUsername: // channelAdminLogEventActionChangeUsername#6a4afc38
//  case *ChannelAdminLogEventActionChangePhoto: // channelAdminLogEventActionChangePhoto#434bd2af
//  case *ChannelAdminLogEventActionToggleInvites: // channelAdminLogEventActionToggleInvites#1b7907ae
//  case *ChannelAdminLogEventActionToggleSignatures: // channelAdminLogEventActionToggleSignatures#26ae0971
//  case *ChannelAdminLogEventActionUpdatePinned: // channelAdminLogEventActionUpdatePinned#e9e82c18
//  case *ChannelAdminLogEventActionEditMessage: // channelAdminLogEventActionEditMessage#709b2405
//  case *ChannelAdminLogEventActionDeleteMessage: // channelAdminLogEventActionDeleteMessage#42e047bb
//  case *ChannelAdminLogEventActionParticipantJoin: // channelAdminLogEventActionParticipantJoin#183040d3
//  case *ChannelAdminLogEventActionParticipantLeave: // channelAdminLogEventActionParticipantLeave#f89777f2
//  case *ChannelAdminLogEventActionParticipantInvite: // channelAdminLogEventActionParticipantInvite#e31c34d8
//  case *ChannelAdminLogEventActionParticipantToggleBan: // channelAdminLogEventActionParticipantToggleBan#e6d83d7e
//  case *ChannelAdminLogEventActionParticipantToggleAdmin: // channelAdminLogEventActionParticipantToggleAdmin#d5676710
//  case *ChannelAdminLogEventActionChangeStickerSet: // channelAdminLogEventActionChangeStickerSet#b1c3caa7
//  case *ChannelAdminLogEventActionTogglePreHistoryHidden: // channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1
//  case *ChannelAdminLogEventActionDefaultBannedRights: // channelAdminLogEventActionDefaultBannedRights#2df5fc0a
//  case *ChannelAdminLogEventActionStopPoll: // channelAdminLogEventActionStopPoll#8f079643
//  case *ChannelAdminLogEventActionChangeLinkedChat: // channelAdminLogEventActionChangeLinkedChat#a26f881b
//  case *ChannelAdminLogEventActionChangeLocation: // channelAdminLogEventActionChangeLocation#e6b76ae
//  case *ChannelAdminLogEventActionToggleSlowMode: // channelAdminLogEventActionToggleSlowMode#53909779
//  default: panic(v)
//  }
type ChannelAdminLogEventActionClass interface {
	bin.Encoder
	bin.Decoder
	construct() ChannelAdminLogEventActionClass
}

// DecodeChannelAdminLogEventAction implements binary de-serialization for ChannelAdminLogEventActionClass.
func DecodeChannelAdminLogEventAction(buf *bin.Buffer) (ChannelAdminLogEventActionClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case ChannelAdminLogEventActionChangeTitleTypeID:
		// Decoding channelAdminLogEventActionChangeTitle#e6dfb825.
		v := ChannelAdminLogEventActionChangeTitle{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionChangeAboutTypeID:
		// Decoding channelAdminLogEventActionChangeAbout#55188a2e.
		v := ChannelAdminLogEventActionChangeAbout{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionChangeUsernameTypeID:
		// Decoding channelAdminLogEventActionChangeUsername#6a4afc38.
		v := ChannelAdminLogEventActionChangeUsername{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionChangePhotoTypeID:
		// Decoding channelAdminLogEventActionChangePhoto#434bd2af.
		v := ChannelAdminLogEventActionChangePhoto{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionToggleInvitesTypeID:
		// Decoding channelAdminLogEventActionToggleInvites#1b7907ae.
		v := ChannelAdminLogEventActionToggleInvites{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionToggleSignaturesTypeID:
		// Decoding channelAdminLogEventActionToggleSignatures#26ae0971.
		v := ChannelAdminLogEventActionToggleSignatures{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionUpdatePinnedTypeID:
		// Decoding channelAdminLogEventActionUpdatePinned#e9e82c18.
		v := ChannelAdminLogEventActionUpdatePinned{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionEditMessageTypeID:
		// Decoding channelAdminLogEventActionEditMessage#709b2405.
		v := ChannelAdminLogEventActionEditMessage{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionDeleteMessageTypeID:
		// Decoding channelAdminLogEventActionDeleteMessage#42e047bb.
		v := ChannelAdminLogEventActionDeleteMessage{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionParticipantJoinTypeID:
		// Decoding channelAdminLogEventActionParticipantJoin#183040d3.
		v := ChannelAdminLogEventActionParticipantJoin{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionParticipantLeaveTypeID:
		// Decoding channelAdminLogEventActionParticipantLeave#f89777f2.
		v := ChannelAdminLogEventActionParticipantLeave{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionParticipantInviteTypeID:
		// Decoding channelAdminLogEventActionParticipantInvite#e31c34d8.
		v := ChannelAdminLogEventActionParticipantInvite{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionParticipantToggleBanTypeID:
		// Decoding channelAdminLogEventActionParticipantToggleBan#e6d83d7e.
		v := ChannelAdminLogEventActionParticipantToggleBan{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionParticipantToggleAdminTypeID:
		// Decoding channelAdminLogEventActionParticipantToggleAdmin#d5676710.
		v := ChannelAdminLogEventActionParticipantToggleAdmin{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionChangeStickerSetTypeID:
		// Decoding channelAdminLogEventActionChangeStickerSet#b1c3caa7.
		v := ChannelAdminLogEventActionChangeStickerSet{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionTogglePreHistoryHiddenTypeID:
		// Decoding channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1.
		v := ChannelAdminLogEventActionTogglePreHistoryHidden{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionDefaultBannedRightsTypeID:
		// Decoding channelAdminLogEventActionDefaultBannedRights#2df5fc0a.
		v := ChannelAdminLogEventActionDefaultBannedRights{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionStopPollTypeID:
		// Decoding channelAdminLogEventActionStopPoll#8f079643.
		v := ChannelAdminLogEventActionStopPoll{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionChangeLinkedChatTypeID:
		// Decoding channelAdminLogEventActionChangeLinkedChat#a26f881b.
		v := ChannelAdminLogEventActionChangeLinkedChat{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionChangeLocationTypeID:
		// Decoding channelAdminLogEventActionChangeLocation#e6b76ae.
		v := ChannelAdminLogEventActionChangeLocation{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	case ChannelAdminLogEventActionToggleSlowModeTypeID:
		// Decoding channelAdminLogEventActionToggleSlowMode#53909779.
		v := ChannelAdminLogEventActionToggleSlowMode{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode ChannelAdminLogEventActionClass: %w", bin.NewUnexpectedID(id))
	}
}

// ChannelAdminLogEventAction boxes the ChannelAdminLogEventActionClass providing a helper.
type ChannelAdminLogEventActionBox struct {
	ChannelAdminLogEventAction ChannelAdminLogEventActionClass
}

// Decode implements bin.Decoder for ChannelAdminLogEventActionBox.
func (b *ChannelAdminLogEventActionBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode ChannelAdminLogEventActionBox to nil")
	}
	v, err := DecodeChannelAdminLogEventAction(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.ChannelAdminLogEventAction = v
	return nil
}

// Encode implements bin.Encode for ChannelAdminLogEventActionBox.
func (b *ChannelAdminLogEventActionBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.ChannelAdminLogEventAction == nil {
		return fmt.Errorf("unable to encode ChannelAdminLogEventActionClass as nil")
	}
	return b.ChannelAdminLogEventAction.Encode(buf)
}
