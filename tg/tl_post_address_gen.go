// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// PostAddress represents TL type `postAddress#1e8caaeb`.
// Shipping address
//
// See https://core.telegram.org/constructor/postAddress for reference.
type PostAddress struct {
	// First line for the address
	StreetLine1 string
	// Second line for the address
	StreetLine2 string
	// City
	City string
	// State, if applicable (empty otherwise)
	State string
	// ISO 3166-1 alpha-2 country code
	CountryIso2 string
	// Address post code
	PostCode string
}

// PostAddressTypeID is TL type id of PostAddress.
const PostAddressTypeID = 0x1e8caaeb

// Encode implements bin.Encoder.
func (p *PostAddress) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode postAddress#1e8caaeb as nil")
	}
	b.PutID(PostAddressTypeID)
	b.PutString(p.StreetLine1)
	b.PutString(p.StreetLine2)
	b.PutString(p.City)
	b.PutString(p.State)
	b.PutString(p.CountryIso2)
	b.PutString(p.PostCode)
	return nil
}

// Decode implements bin.Decoder.
func (p *PostAddress) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode postAddress#1e8caaeb to nil")
	}
	if err := b.ConsumeID(PostAddressTypeID); err != nil {
		return fmt.Errorf("unable to decode postAddress#1e8caaeb: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode postAddress#1e8caaeb: field street_line1: %w", err)
		}
		p.StreetLine1 = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode postAddress#1e8caaeb: field street_line2: %w", err)
		}
		p.StreetLine2 = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode postAddress#1e8caaeb: field city: %w", err)
		}
		p.City = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode postAddress#1e8caaeb: field state: %w", err)
		}
		p.State = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode postAddress#1e8caaeb: field country_iso2: %w", err)
		}
		p.CountryIso2 = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode postAddress#1e8caaeb: field post_code: %w", err)
		}
		p.PostCode = value
	}
	return nil
}

// Ensuring interfaces in compile-time for PostAddress.
var (
	_ bin.Encoder = &PostAddress{}
	_ bin.Decoder = &PostAddress{}
)
