// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// UrlAuthResultRequest represents TL type `urlAuthResultRequest#92d33a0e`.
// Details about the authorization request, for more info click here »
//
// See https://core.telegram.org/constructor/urlAuthResultRequest for reference.
type UrlAuthResultRequest struct {
	// Flags, see TL conditional fields
	Flags bin.Fields
	// Whether the bot would like to send messages to the user
	RequestWriteAccess bool
	// Username of a bot, which will be used for user authorization. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details.
	Bot UserClass
	// The domain name of the website on which the user will log in.
	Domain string
}

// UrlAuthResultRequestTypeID is TL type id of UrlAuthResultRequest.
const UrlAuthResultRequestTypeID = 0x92d33a0e

// String implements fmt.Stringer.
func (u *UrlAuthResultRequest) String() string {
	if u == nil {
		return "UrlAuthResultRequest(nil)"
	}
	var sb strings.Builder
	sb.WriteString("UrlAuthResultRequest")
	sb.WriteString("{\n")
	sb.WriteString("\tFlags: ")
	sb.WriteString(u.Flags.String())
	sb.WriteString(",\n")
	sb.WriteString("\tBot: ")
	sb.WriteString(u.Bot.String())
	sb.WriteString(",\n")
	sb.WriteString("\tDomain: ")
	sb.WriteString(fmt.Sprint(u.Domain))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (u *UrlAuthResultRequest) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode urlAuthResultRequest#92d33a0e as nil")
	}
	b.PutID(UrlAuthResultRequestTypeID)
	if err := u.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode urlAuthResultRequest#92d33a0e: field flags: %w", err)
	}
	if u.Bot == nil {
		return fmt.Errorf("unable to encode urlAuthResultRequest#92d33a0e: field bot is nil")
	}
	if err := u.Bot.Encode(b); err != nil {
		return fmt.Errorf("unable to encode urlAuthResultRequest#92d33a0e: field bot: %w", err)
	}
	b.PutString(u.Domain)
	return nil
}

// SetRequestWriteAccess sets value of RequestWriteAccess conditional field.
func (u *UrlAuthResultRequest) SetRequestWriteAccess(value bool) {
	if value {
		u.Flags.Set(0)
	} else {
		u.Flags.Unset(0)
	}
}

// Decode implements bin.Decoder.
func (u *UrlAuthResultRequest) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode urlAuthResultRequest#92d33a0e to nil")
	}
	if err := b.ConsumeID(UrlAuthResultRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode urlAuthResultRequest#92d33a0e: %w", err)
	}
	{
		if err := u.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode urlAuthResultRequest#92d33a0e: field flags: %w", err)
		}
	}
	u.RequestWriteAccess = u.Flags.Has(0)
	{
		value, err := DecodeUser(b)
		if err != nil {
			return fmt.Errorf("unable to decode urlAuthResultRequest#92d33a0e: field bot: %w", err)
		}
		u.Bot = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode urlAuthResultRequest#92d33a0e: field domain: %w", err)
		}
		u.Domain = value
	}
	return nil
}

// construct implements constructor of UrlAuthResultClass.
func (u UrlAuthResultRequest) construct() UrlAuthResultClass { return &u }

// Ensuring interfaces in compile-time for UrlAuthResultRequest.
var (
	_ bin.Encoder = &UrlAuthResultRequest{}
	_ bin.Decoder = &UrlAuthResultRequest{}

	_ UrlAuthResultClass = &UrlAuthResultRequest{}
)

// UrlAuthResultAccepted represents TL type `urlAuthResultAccepted#8f8c0e4e`.
// Details about an accepted authorization request, for more info click here »
//
// See https://core.telegram.org/constructor/urlAuthResultAccepted for reference.
type UrlAuthResultAccepted struct {
	// The URL name of the website on which the user has logged in.
	URL string
}

// UrlAuthResultAcceptedTypeID is TL type id of UrlAuthResultAccepted.
const UrlAuthResultAcceptedTypeID = 0x8f8c0e4e

// String implements fmt.Stringer.
func (u *UrlAuthResultAccepted) String() string {
	if u == nil {
		return "UrlAuthResultAccepted(nil)"
	}
	var sb strings.Builder
	sb.WriteString("UrlAuthResultAccepted")
	sb.WriteString("{\n")
	sb.WriteString("\tURL: ")
	sb.WriteString(fmt.Sprint(u.URL))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (u *UrlAuthResultAccepted) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode urlAuthResultAccepted#8f8c0e4e as nil")
	}
	b.PutID(UrlAuthResultAcceptedTypeID)
	b.PutString(u.URL)
	return nil
}

// Decode implements bin.Decoder.
func (u *UrlAuthResultAccepted) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode urlAuthResultAccepted#8f8c0e4e to nil")
	}
	if err := b.ConsumeID(UrlAuthResultAcceptedTypeID); err != nil {
		return fmt.Errorf("unable to decode urlAuthResultAccepted#8f8c0e4e: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode urlAuthResultAccepted#8f8c0e4e: field url: %w", err)
		}
		u.URL = value
	}
	return nil
}

// construct implements constructor of UrlAuthResultClass.
func (u UrlAuthResultAccepted) construct() UrlAuthResultClass { return &u }

// Ensuring interfaces in compile-time for UrlAuthResultAccepted.
var (
	_ bin.Encoder = &UrlAuthResultAccepted{}
	_ bin.Decoder = &UrlAuthResultAccepted{}

	_ UrlAuthResultClass = &UrlAuthResultAccepted{}
)

// UrlAuthResultDefault represents TL type `urlAuthResultDefault#a9d6db1f`.
// Details about an accepted authorization request, for more info click here »
//
// See https://core.telegram.org/constructor/urlAuthResultDefault for reference.
type UrlAuthResultDefault struct {
}

// UrlAuthResultDefaultTypeID is TL type id of UrlAuthResultDefault.
const UrlAuthResultDefaultTypeID = 0xa9d6db1f

// String implements fmt.Stringer.
func (u *UrlAuthResultDefault) String() string {
	if u == nil {
		return "UrlAuthResultDefault(nil)"
	}
	var sb strings.Builder
	sb.WriteString("UrlAuthResultDefault")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (u *UrlAuthResultDefault) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode urlAuthResultDefault#a9d6db1f as nil")
	}
	b.PutID(UrlAuthResultDefaultTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (u *UrlAuthResultDefault) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode urlAuthResultDefault#a9d6db1f to nil")
	}
	if err := b.ConsumeID(UrlAuthResultDefaultTypeID); err != nil {
		return fmt.Errorf("unable to decode urlAuthResultDefault#a9d6db1f: %w", err)
	}
	return nil
}

// construct implements constructor of UrlAuthResultClass.
func (u UrlAuthResultDefault) construct() UrlAuthResultClass { return &u }

// Ensuring interfaces in compile-time for UrlAuthResultDefault.
var (
	_ bin.Encoder = &UrlAuthResultDefault{}
	_ bin.Decoder = &UrlAuthResultDefault{}

	_ UrlAuthResultClass = &UrlAuthResultDefault{}
)

// UrlAuthResultClass represents UrlAuthResult generic type.
//
// See https://core.telegram.org/type/UrlAuthResult for reference.
//
// Example:
//  g, err := DecodeUrlAuthResult(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *UrlAuthResultRequest: // urlAuthResultRequest#92d33a0e
//  case *UrlAuthResultAccepted: // urlAuthResultAccepted#8f8c0e4e
//  case *UrlAuthResultDefault: // urlAuthResultDefault#a9d6db1f
//  default: panic(v)
//  }
type UrlAuthResultClass interface {
	bin.Encoder
	bin.Decoder
	construct() UrlAuthResultClass
	fmt.Stringer
}

// DecodeUrlAuthResult implements binary de-serialization for UrlAuthResultClass.
func DecodeUrlAuthResult(buf *bin.Buffer) (UrlAuthResultClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case UrlAuthResultRequestTypeID:
		// Decoding urlAuthResultRequest#92d33a0e.
		v := UrlAuthResultRequest{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UrlAuthResultClass: %w", err)
		}
		return &v, nil
	case UrlAuthResultAcceptedTypeID:
		// Decoding urlAuthResultAccepted#8f8c0e4e.
		v := UrlAuthResultAccepted{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UrlAuthResultClass: %w", err)
		}
		return &v, nil
	case UrlAuthResultDefaultTypeID:
		// Decoding urlAuthResultDefault#a9d6db1f.
		v := UrlAuthResultDefault{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UrlAuthResultClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode UrlAuthResultClass: %w", bin.NewUnexpectedID(id))
	}
}

// UrlAuthResult boxes the UrlAuthResultClass providing a helper.
type UrlAuthResultBox struct {
	UrlAuthResult UrlAuthResultClass
}

// Decode implements bin.Decoder for UrlAuthResultBox.
func (b *UrlAuthResultBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode UrlAuthResultBox to nil")
	}
	v, err := DecodeUrlAuthResult(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.UrlAuthResult = v
	return nil
}

// Encode implements bin.Encode for UrlAuthResultBox.
func (b *UrlAuthResultBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.UrlAuthResult == nil {
		return fmt.Errorf("unable to encode UrlAuthResultClass as nil")
	}
	return b.UrlAuthResult.Encode(buf)
}
