// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// AuthSentCode represents TL type `auth.sentCode#5e002502`.
type AuthSentCode struct {
	// Flags field of AuthSentCode.
	Flags bin.Fields
	// Type field of AuthSentCode.
	Type AuthSentCodeTypeClass
	// PhoneCodeHash field of AuthSentCode.
	PhoneCodeHash string
	// NextType field of AuthSentCode.
	//
	// Use SetNextType and GetNextType helpers.
	NextType AuthCodeTypeClass
	// Timeout field of AuthSentCode.
	//
	// Use SetTimeout and GetTimeout helpers.
	Timeout int
}

// AuthSentCodeTypeID is TL type id of AuthSentCode.
const AuthSentCodeTypeID = 0x5e002502

// Encode implements bin.Encoder.
func (s *AuthSentCode) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode auth.sentCode#5e002502 as nil")
	}
	b.PutID(AuthSentCodeTypeID)
	if err := s.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode auth.sentCode#5e002502: field flags: %w", err)
	}
	if s.Type == nil {
		return fmt.Errorf("unable to encode auth.sentCode#5e002502: field type is nil")
	}
	if err := s.Type.Encode(b); err != nil {
		return fmt.Errorf("unable to encode auth.sentCode#5e002502: field type: %w", err)
	}
	b.PutString(s.PhoneCodeHash)
	if s.Flags.Has(1) {
		if s.NextType == nil {
			return fmt.Errorf("unable to encode auth.sentCode#5e002502: field next_type is nil")
		}
		if err := s.NextType.Encode(b); err != nil {
			return fmt.Errorf("unable to encode auth.sentCode#5e002502: field next_type: %w", err)
		}
	}
	if s.Flags.Has(2) {
		b.PutInt(s.Timeout)
	}
	return nil
}

// SetNextType sets value of NextType conditional field.
func (s *AuthSentCode) SetNextType(value AuthCodeTypeClass) {
	s.Flags.Set(1)
	s.NextType = value
}

// GetNextType returns value of NextType conditional field and
// boolean which is true if field was set.
func (s *AuthSentCode) GetNextType() (value AuthCodeTypeClass, ok bool) {
	if !s.Flags.Has(1) {
		return value, false
	}
	return s.NextType, true
}

// SetTimeout sets value of Timeout conditional field.
func (s *AuthSentCode) SetTimeout(value int) {
	s.Flags.Set(2)
	s.Timeout = value
}

// GetTimeout returns value of Timeout conditional field and
// boolean which is true if field was set.
func (s *AuthSentCode) GetTimeout() (value int, ok bool) {
	if !s.Flags.Has(2) {
		return value, false
	}
	return s.Timeout, true
}

// Decode implements bin.Decoder.
func (s *AuthSentCode) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode auth.sentCode#5e002502 to nil")
	}
	if err := b.ConsumeID(AuthSentCodeTypeID); err != nil {
		return fmt.Errorf("unable to decode auth.sentCode#5e002502: %w", err)
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode auth.sentCode#5e002502: field flags: %w", err)
		}
	}
	{
		value, err := DecodeAuthSentCodeType(b)
		if err != nil {
			return fmt.Errorf("unable to decode auth.sentCode#5e002502: field type: %w", err)
		}
		s.Type = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode auth.sentCode#5e002502: field phone_code_hash: %w", err)
		}
		s.PhoneCodeHash = value
	}
	if s.Flags.Has(1) {
		value, err := DecodeAuthCodeType(b)
		if err != nil {
			return fmt.Errorf("unable to decode auth.sentCode#5e002502: field next_type: %w", err)
		}
		s.NextType = value
	}
	if s.Flags.Has(2) {
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode auth.sentCode#5e002502: field timeout: %w", err)
		}
		s.Timeout = value
	}
	return nil
}

// Ensuring interfaces in compile-time for AuthSentCode.
var (
	_ bin.Encoder = &AuthSentCode{}
	_ bin.Decoder = &AuthSentCode{}
)
