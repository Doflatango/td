// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// AuthRequestPasswordRecoveryRequest represents TL type `auth.requestPasswordRecovery#d897bc66`.
// Request recovery code of a 2FA password, only for accounts with a recovery email configured.
//
// See https://core.telegram.org/method/auth.requestPasswordRecovery for reference.
type AuthRequestPasswordRecoveryRequest struct {
}

// AuthRequestPasswordRecoveryRequestTypeID is TL type id of AuthRequestPasswordRecoveryRequest.
const AuthRequestPasswordRecoveryRequestTypeID = 0xd897bc66

// Encode implements bin.Encoder.
func (r *AuthRequestPasswordRecoveryRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode auth.requestPasswordRecovery#d897bc66 as nil")
	}
	b.PutID(AuthRequestPasswordRecoveryRequestTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (r *AuthRequestPasswordRecoveryRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode auth.requestPasswordRecovery#d897bc66 to nil")
	}
	if err := b.ConsumeID(AuthRequestPasswordRecoveryRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode auth.requestPasswordRecovery#d897bc66: %w", err)
	}
	return nil
}

// Ensuring interfaces in compile-time for AuthRequestPasswordRecoveryRequest.
var (
	_ bin.Encoder = &AuthRequestPasswordRecoveryRequest{}
	_ bin.Decoder = &AuthRequestPasswordRecoveryRequest{}
)

// AuthRequestPasswordRecovery invokes method auth.requestPasswordRecovery#d897bc66 returning error if any.
// Request recovery code of a 2FA password, only for accounts with a recovery email configured.
//
// See https://core.telegram.org/method/auth.requestPasswordRecovery for reference.
func (c *Client) AuthRequestPasswordRecovery(ctx context.Context, request *AuthRequestPasswordRecoveryRequest) (*AuthPasswordRecovery, error) {
	var result AuthPasswordRecovery
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
