// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// PhonePhoneCall represents TL type `phone.phoneCall#ec82e140`.
//
// See https://core.telegram.org/constructor/phone.phoneCall for reference.
type PhonePhoneCall struct {
	// PhoneCall field of PhonePhoneCall.
	PhoneCall PhoneCallClass
	// Users field of PhonePhoneCall.
	Users []UserClass
}

// PhonePhoneCallTypeID is TL type id of PhonePhoneCall.
const PhonePhoneCallTypeID = 0xec82e140

// Encode implements bin.Encoder.
func (p *PhonePhoneCall) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode phone.phoneCall#ec82e140 as nil")
	}
	b.PutID(PhonePhoneCallTypeID)
	if p.PhoneCall == nil {
		return fmt.Errorf("unable to encode phone.phoneCall#ec82e140: field phone_call is nil")
	}
	if err := p.PhoneCall.Encode(b); err != nil {
		return fmt.Errorf("unable to encode phone.phoneCall#ec82e140: field phone_call: %w", err)
	}
	b.PutVectorHeader(len(p.Users))
	for idx, v := range p.Users {
		if v == nil {
			return fmt.Errorf("unable to encode phone.phoneCall#ec82e140: field users element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode phone.phoneCall#ec82e140: field users element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (p *PhonePhoneCall) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode phone.phoneCall#ec82e140 to nil")
	}
	if err := b.ConsumeID(PhonePhoneCallTypeID); err != nil {
		return fmt.Errorf("unable to decode phone.phoneCall#ec82e140: %w", err)
	}
	{
		value, err := DecodePhoneCall(b)
		if err != nil {
			return fmt.Errorf("unable to decode phone.phoneCall#ec82e140: field phone_call: %w", err)
		}
		p.PhoneCall = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode phone.phoneCall#ec82e140: field users: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(b)
			if err != nil {
				return fmt.Errorf("unable to decode phone.phoneCall#ec82e140: field users: %w", err)
			}
			p.Users = append(p.Users, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for PhonePhoneCall.
var (
	_ bin.Encoder = &PhonePhoneCall{}
	_ bin.Decoder = &PhonePhoneCall{}
)
