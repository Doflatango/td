// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// ContactsUnblockRequest represents TL type `contacts.unblock#bea65d50`.
type ContactsUnblockRequest struct {
	// ID field of ContactsUnblockRequest.
	ID InputPeerClass
}

// ContactsUnblockRequestTypeID is TL type id of ContactsUnblockRequest.
const ContactsUnblockRequestTypeID = 0xbea65d50

// Encode implements bin.Encoder.
func (u *ContactsUnblockRequest) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode contacts.unblock#bea65d50 as nil")
	}
	b.PutID(ContactsUnblockRequestTypeID)
	if u.ID == nil {
		return fmt.Errorf("unable to encode contacts.unblock#bea65d50: field id is nil")
	}
	if err := u.ID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode contacts.unblock#bea65d50: field id: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *ContactsUnblockRequest) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode contacts.unblock#bea65d50 to nil")
	}
	if err := b.ConsumeID(ContactsUnblockRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode contacts.unblock#bea65d50: %w", err)
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode contacts.unblock#bea65d50: field id: %w", err)
		}
		u.ID = value
	}
	return nil
}

// Ensuring interfaces in compile-time for ContactsUnblockRequest.
var (
	_ bin.Encoder = &ContactsUnblockRequest{}
	_ bin.Decoder = &ContactsUnblockRequest{}
)
