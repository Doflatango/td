// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesSetBotPrecheckoutResultsRequest represents TL type `messages.setBotPrecheckoutResults#9c2dd95`.
// Once the user has confirmed their payment and shipping details, the bot receives an updateBotPrecheckoutQuery update.
// Use this method to respond to such pre-checkout queries.
// Note: Telegram must receive an answer within 10 seconds after the pre-checkout query was sent.
//
// See https://core.telegram.org/method/messages.setBotPrecheckoutResults for reference.
type MessagesSetBotPrecheckoutResultsRequest struct {
	// Flags, see TL conditional fields
	Flags bin.Fields
	// Set this flag if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order, otherwise do not set it, and set the error field, instead
	Success bool
	// Unique identifier for the query to be answered
	QueryID int64
	// Required if the success isn't set. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
	//
	// Use SetError and GetError helpers.
	Error string
}

// MessagesSetBotPrecheckoutResultsRequestTypeID is TL type id of MessagesSetBotPrecheckoutResultsRequest.
const MessagesSetBotPrecheckoutResultsRequestTypeID = 0x9c2dd95

// Encode implements bin.Encoder.
func (s *MessagesSetBotPrecheckoutResultsRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode messages.setBotPrecheckoutResults#9c2dd95 as nil")
	}
	b.PutID(MessagesSetBotPrecheckoutResultsRequestTypeID)
	if err := s.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.setBotPrecheckoutResults#9c2dd95: field flags: %w", err)
	}
	b.PutLong(s.QueryID)
	if s.Flags.Has(0) {
		b.PutString(s.Error)
	}
	return nil
}

// SetSuccess sets value of Success conditional field.
func (s *MessagesSetBotPrecheckoutResultsRequest) SetSuccess(value bool) {
	if value {
		s.Flags.Set(1)
	} else {
		s.Flags.Unset(1)
	}
}

// SetError sets value of Error conditional field.
func (s *MessagesSetBotPrecheckoutResultsRequest) SetError(value string) {
	s.Flags.Set(0)
	s.Error = value
}

// GetError returns value of Error conditional field and
// boolean which is true if field was set.
func (s *MessagesSetBotPrecheckoutResultsRequest) GetError() (value string, ok bool) {
	if !s.Flags.Has(0) {
		return value, false
	}
	return s.Error, true
}

// Decode implements bin.Decoder.
func (s *MessagesSetBotPrecheckoutResultsRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode messages.setBotPrecheckoutResults#9c2dd95 to nil")
	}
	if err := b.ConsumeID(MessagesSetBotPrecheckoutResultsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.setBotPrecheckoutResults#9c2dd95: %w", err)
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.setBotPrecheckoutResults#9c2dd95: field flags: %w", err)
		}
	}
	s.Success = s.Flags.Has(1)
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode messages.setBotPrecheckoutResults#9c2dd95: field query_id: %w", err)
		}
		s.QueryID = value
	}
	if s.Flags.Has(0) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messages.setBotPrecheckoutResults#9c2dd95: field error: %w", err)
		}
		s.Error = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesSetBotPrecheckoutResultsRequest.
var (
	_ bin.Encoder = &MessagesSetBotPrecheckoutResultsRequest{}
	_ bin.Decoder = &MessagesSetBotPrecheckoutResultsRequest{}
)

// MessagesSetBotPrecheckoutResults invokes method messages.setBotPrecheckoutResults#9c2dd95 returning error if any.
// Once the user has confirmed their payment and shipping details, the bot receives an updateBotPrecheckoutQuery update.
// Use this method to respond to such pre-checkout queries.
// Note: Telegram must receive an answer within 10 seconds after the pre-checkout query was sent.
//
// See https://core.telegram.org/method/messages.setBotPrecheckoutResults for reference.
func (c *Client) MessagesSetBotPrecheckoutResults(ctx context.Context, request *MessagesSetBotPrecheckoutResultsRequest) (bool, error) {
	var result BoolBox
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
