// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// AccountResetAuthorizationRequest represents TL type `account.resetAuthorization#df77f3bc`.
// Log out an active authorized session¹ by its hash
//
// Links:
//  1) https://core.telegram.org/api/auth
//
// See https://core.telegram.org/method/account.resetAuthorization for reference.
type AccountResetAuthorizationRequest struct {
	// Session hash
	Hash int64
}

// AccountResetAuthorizationRequestTypeID is TL type id of AccountResetAuthorizationRequest.
const AccountResetAuthorizationRequestTypeID = 0xdf77f3bc

func (r *AccountResetAuthorizationRequest) Zero() bool {
	if r == nil {
		return true
	}
	if !(r.Hash == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (r *AccountResetAuthorizationRequest) String() string {
	if r == nil {
		return "AccountResetAuthorizationRequest(nil)"
	}
	var sb strings.Builder
	sb.WriteString("AccountResetAuthorizationRequest")
	sb.WriteString("{\n")
	sb.WriteString("\tHash: ")
	sb.WriteString(fmt.Sprint(r.Hash))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (r *AccountResetAuthorizationRequest) TypeID() uint32 {
	return AccountResetAuthorizationRequestTypeID
}

// Encode implements bin.Encoder.
func (r *AccountResetAuthorizationRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode account.resetAuthorization#df77f3bc as nil")
	}
	b.PutID(AccountResetAuthorizationRequestTypeID)
	b.PutLong(r.Hash)
	return nil
}

// GetHash returns value of Hash field.
func (r *AccountResetAuthorizationRequest) GetHash() (value int64) {
	return r.Hash
}

// Decode implements bin.Decoder.
func (r *AccountResetAuthorizationRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode account.resetAuthorization#df77f3bc to nil")
	}
	if err := b.ConsumeID(AccountResetAuthorizationRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode account.resetAuthorization#df77f3bc: %w", err)
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode account.resetAuthorization#df77f3bc: field hash: %w", err)
		}
		r.Hash = value
	}
	return nil
}

// Ensuring interfaces in compile-time for AccountResetAuthorizationRequest.
var (
	_ bin.Encoder = &AccountResetAuthorizationRequest{}
	_ bin.Decoder = &AccountResetAuthorizationRequest{}
)

// AccountResetAuthorization invokes method account.resetAuthorization#df77f3bc returning error if any.
// Log out an active authorized session¹ by its hash
//
// Links:
//  1) https://core.telegram.org/api/auth
//
// Possible errors:
//  406 FRESH_RESET_AUTHORISATION_FORBIDDEN: You can't logout other sessions if less than 24 hours have passed since you logged on the current session
//  400 HASH_INVALID: The provided hash is invalid
//
// See https://core.telegram.org/method/account.resetAuthorization for reference.
func (c *Client) AccountResetAuthorization(ctx context.Context, hash int64) (bool, error) {
	var result BoolBox

	request := &AccountResetAuthorizationRequest{
		Hash: hash,
	}
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
