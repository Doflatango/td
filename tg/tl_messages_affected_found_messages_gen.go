// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is
var _ = sort.Ints

// MessagesAffectedFoundMessages represents TL type `messages.affectedFoundMessages#ef8d3e6c`.
//
// See https://core.telegram.org/constructor/messages.affectedFoundMessages for reference.
type MessagesAffectedFoundMessages struct {
	// Pts field of MessagesAffectedFoundMessages.
	Pts int `tl:"pts"`
	// PtsCount field of MessagesAffectedFoundMessages.
	PtsCount int `tl:"pts_count"`
	// Offset field of MessagesAffectedFoundMessages.
	Offset int `tl:"offset"`
	// Messages field of MessagesAffectedFoundMessages.
	Messages []int `tl:"messages"`
}

// MessagesAffectedFoundMessagesTypeID is TL type id of MessagesAffectedFoundMessages.
const MessagesAffectedFoundMessagesTypeID = 0xef8d3e6c

func (a *MessagesAffectedFoundMessages) Zero() bool {
	if a == nil {
		return true
	}
	if !(a.Pts == 0) {
		return false
	}
	if !(a.PtsCount == 0) {
		return false
	}
	if !(a.Offset == 0) {
		return false
	}
	if !(a.Messages == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (a *MessagesAffectedFoundMessages) String() string {
	if a == nil {
		return "MessagesAffectedFoundMessages(nil)"
	}
	type Alias MessagesAffectedFoundMessages
	return fmt.Sprintf("MessagesAffectedFoundMessages%+v", Alias(*a))
}

// FillFrom fills MessagesAffectedFoundMessages from given interface.
func (a *MessagesAffectedFoundMessages) FillFrom(from interface {
	GetPts() (value int)
	GetPtsCount() (value int)
	GetOffset() (value int)
	GetMessages() (value []int)
}) {
	a.Pts = from.GetPts()
	a.PtsCount = from.GetPtsCount()
	a.Offset = from.GetOffset()
	a.Messages = from.GetMessages()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (a *MessagesAffectedFoundMessages) TypeID() uint32 {
	return MessagesAffectedFoundMessagesTypeID
}

// TypeName returns name of type in TL schema.
func (a *MessagesAffectedFoundMessages) TypeName() string {
	return "messages.affectedFoundMessages"
}

// Encode implements bin.Encoder.
func (a *MessagesAffectedFoundMessages) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode messages.affectedFoundMessages#ef8d3e6c as nil")
	}
	b.PutID(MessagesAffectedFoundMessagesTypeID)
	b.PutInt(a.Pts)
	b.PutInt(a.PtsCount)
	b.PutInt(a.Offset)
	b.PutVectorHeader(len(a.Messages))
	for _, v := range a.Messages {
		b.PutInt(v)
	}
	return nil
}

// GetPts returns value of Pts field.
func (a *MessagesAffectedFoundMessages) GetPts() (value int) {
	return a.Pts
}

// GetPtsCount returns value of PtsCount field.
func (a *MessagesAffectedFoundMessages) GetPtsCount() (value int) {
	return a.PtsCount
}

// GetOffset returns value of Offset field.
func (a *MessagesAffectedFoundMessages) GetOffset() (value int) {
	return a.Offset
}

// GetMessages returns value of Messages field.
func (a *MessagesAffectedFoundMessages) GetMessages() (value []int) {
	return a.Messages
}

// Decode implements bin.Decoder.
func (a *MessagesAffectedFoundMessages) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode messages.affectedFoundMessages#ef8d3e6c to nil")
	}
	if err := b.ConsumeID(MessagesAffectedFoundMessagesTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.affectedFoundMessages#ef8d3e6c: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.affectedFoundMessages#ef8d3e6c: field pts: %w", err)
		}
		a.Pts = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.affectedFoundMessages#ef8d3e6c: field pts_count: %w", err)
		}
		a.PtsCount = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.affectedFoundMessages#ef8d3e6c: field offset: %w", err)
		}
		a.Offset = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.affectedFoundMessages#ef8d3e6c: field messages: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.Int()
			if err != nil {
				return fmt.Errorf("unable to decode messages.affectedFoundMessages#ef8d3e6c: field messages: %w", err)
			}
			a.Messages = append(a.Messages, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesAffectedFoundMessages.
var (
	_ bin.Encoder = &MessagesAffectedFoundMessages{}
	_ bin.Decoder = &MessagesAffectedFoundMessages{}
)
