// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// AccountUploadWallPaperRequest represents TL type `account.uploadWallPaper#dd853661`.
// Create and upload a new wallpaper
//
// See https://core.telegram.org/method/account.uploadWallPaper for reference.
type AccountUploadWallPaperRequest struct {
	// The JPG/PNG wallpaper
	File InputFileClass
	// MIME type of uploaded wallpaper
	MimeType string
	// Wallpaper settings
	Settings WallPaperSettings
}

// AccountUploadWallPaperRequestTypeID is TL type id of AccountUploadWallPaperRequest.
const AccountUploadWallPaperRequestTypeID = 0xdd853661

// String implements fmt.Stringer.
func (u *AccountUploadWallPaperRequest) String() string {
	if u == nil {
		return "AccountUploadWallPaperRequest(nil)"
	}
	var sb strings.Builder
	sb.WriteString("AccountUploadWallPaperRequest")
	sb.WriteString("{\n")
	sb.WriteString("\tFile: ")
	sb.WriteString(u.File.String())
	sb.WriteString(",\n")
	sb.WriteString("\tMimeType: ")
	sb.WriteString(fmt.Sprint(u.MimeType))
	sb.WriteString(",\n")
	sb.WriteString("\tSettings: ")
	sb.WriteString(u.Settings.String())
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (u *AccountUploadWallPaperRequest) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode account.uploadWallPaper#dd853661 as nil")
	}
	b.PutID(AccountUploadWallPaperRequestTypeID)
	if u.File == nil {
		return fmt.Errorf("unable to encode account.uploadWallPaper#dd853661: field file is nil")
	}
	if err := u.File.Encode(b); err != nil {
		return fmt.Errorf("unable to encode account.uploadWallPaper#dd853661: field file: %w", err)
	}
	b.PutString(u.MimeType)
	if err := u.Settings.Encode(b); err != nil {
		return fmt.Errorf("unable to encode account.uploadWallPaper#dd853661: field settings: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *AccountUploadWallPaperRequest) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode account.uploadWallPaper#dd853661 to nil")
	}
	if err := b.ConsumeID(AccountUploadWallPaperRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode account.uploadWallPaper#dd853661: %w", err)
	}
	{
		value, err := DecodeInputFile(b)
		if err != nil {
			return fmt.Errorf("unable to decode account.uploadWallPaper#dd853661: field file: %w", err)
		}
		u.File = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode account.uploadWallPaper#dd853661: field mime_type: %w", err)
		}
		u.MimeType = value
	}
	{
		if err := u.Settings.Decode(b); err != nil {
			return fmt.Errorf("unable to decode account.uploadWallPaper#dd853661: field settings: %w", err)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for AccountUploadWallPaperRequest.
var (
	_ bin.Encoder = &AccountUploadWallPaperRequest{}
	_ bin.Decoder = &AccountUploadWallPaperRequest{}
)

// AccountUploadWallPaper invokes method account.uploadWallPaper#dd853661 returning error if any.
// Create and upload a new wallpaper
//
// See https://core.telegram.org/method/account.uploadWallPaper for reference.
func (c *Client) AccountUploadWallPaper(ctx context.Context, request *AccountUploadWallPaperRequest) (WallPaperClass, error) {
	var result WallPaperBox

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.WallPaper, nil
}
