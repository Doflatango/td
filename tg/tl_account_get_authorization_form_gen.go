// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// AccountGetAuthorizationFormRequest represents TL type `account.getAuthorizationForm#b86ba8e1`.
// Returns a Telegram Passport authorization form for sharing data with a service
//
// See https://core.telegram.org/method/account.getAuthorizationForm for reference.
type AccountGetAuthorizationFormRequest struct {
	// User identifier of the service's bot
	BotID int `tl:"bot_id"`
	// Telegram Passport element types requested by the service
	Scope string `tl:"scope"`
	// Service's public key
	PublicKey string `tl:"public_key"`
}

// AccountGetAuthorizationFormRequestTypeID is TL type id of AccountGetAuthorizationFormRequest.
const AccountGetAuthorizationFormRequestTypeID = 0xb86ba8e1

func (g *AccountGetAuthorizationFormRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.BotID == 0) {
		return false
	}
	if !(g.Scope == "") {
		return false
	}
	if !(g.PublicKey == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *AccountGetAuthorizationFormRequest) String() string {
	if g == nil {
		return "AccountGetAuthorizationFormRequest(nil)"
	}
	type Alias AccountGetAuthorizationFormRequest
	return fmt.Sprintf("AccountGetAuthorizationFormRequest%+v", Alias(*g))
}

// FillFrom fills AccountGetAuthorizationFormRequest from given interface.
func (g *AccountGetAuthorizationFormRequest) FillFrom(from interface {
	GetBotID() (value int)
	GetScope() (value string)
	GetPublicKey() (value string)
}) {
	g.BotID = from.GetBotID()
	g.Scope = from.GetScope()
	g.PublicKey = from.GetPublicKey()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (g *AccountGetAuthorizationFormRequest) TypeID() uint32 {
	return AccountGetAuthorizationFormRequestTypeID
}

// TypeName returns name of type in TL schema.
func (g *AccountGetAuthorizationFormRequest) TypeName() string {
	return "account.getAuthorizationForm"
}

// Encode implements bin.Encoder.
func (g *AccountGetAuthorizationFormRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode account.getAuthorizationForm#b86ba8e1 as nil")
	}
	b.PutID(AccountGetAuthorizationFormRequestTypeID)
	b.PutInt(g.BotID)
	b.PutString(g.Scope)
	b.PutString(g.PublicKey)
	return nil
}

// GetBotID returns value of BotID field.
func (g *AccountGetAuthorizationFormRequest) GetBotID() (value int) {
	return g.BotID
}

// GetScope returns value of Scope field.
func (g *AccountGetAuthorizationFormRequest) GetScope() (value string) {
	return g.Scope
}

// GetPublicKey returns value of PublicKey field.
func (g *AccountGetAuthorizationFormRequest) GetPublicKey() (value string) {
	return g.PublicKey
}

// Decode implements bin.Decoder.
func (g *AccountGetAuthorizationFormRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode account.getAuthorizationForm#b86ba8e1 to nil")
	}
	if err := b.ConsumeID(AccountGetAuthorizationFormRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode account.getAuthorizationForm#b86ba8e1: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode account.getAuthorizationForm#b86ba8e1: field bot_id: %w", err)
		}
		g.BotID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode account.getAuthorizationForm#b86ba8e1: field scope: %w", err)
		}
		g.Scope = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode account.getAuthorizationForm#b86ba8e1: field public_key: %w", err)
		}
		g.PublicKey = value
	}
	return nil
}

// Ensuring interfaces in compile-time for AccountGetAuthorizationFormRequest.
var (
	_ bin.Encoder = &AccountGetAuthorizationFormRequest{}
	_ bin.Decoder = &AccountGetAuthorizationFormRequest{}
)

// AccountGetAuthorizationForm invokes method account.getAuthorizationForm#b86ba8e1 returning error if any.
// Returns a Telegram Passport authorization form for sharing data with a service
//
// See https://core.telegram.org/method/account.getAuthorizationForm for reference.
func (c *Client) AccountGetAuthorizationForm(ctx context.Context, request *AccountGetAuthorizationFormRequest) (*AccountAuthorizationForm, error) {
	var result AccountAuthorizationForm

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
