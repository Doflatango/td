// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesToggleStickerSetsRequest represents TL type `messages.toggleStickerSets#b5052fea`.
//
// See https://core.telegram.org/method/messages.toggleStickerSets for reference.
type MessagesToggleStickerSetsRequest struct {
	// Flags field of MessagesToggleStickerSetsRequest.
	Flags bin.Fields
	// Uninstall field of MessagesToggleStickerSetsRequest.
	Uninstall bool
	// Archive field of MessagesToggleStickerSetsRequest.
	Archive bool
	// Unarchive field of MessagesToggleStickerSetsRequest.
	Unarchive bool
	// Stickersets field of MessagesToggleStickerSetsRequest.
	Stickersets []InputStickerSetClass
}

// MessagesToggleStickerSetsRequestTypeID is TL type id of MessagesToggleStickerSetsRequest.
const MessagesToggleStickerSetsRequestTypeID = 0xb5052fea

// Encode implements bin.Encoder.
func (t *MessagesToggleStickerSetsRequest) Encode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't encode messages.toggleStickerSets#b5052fea as nil")
	}
	b.PutID(MessagesToggleStickerSetsRequestTypeID)
	if err := t.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.toggleStickerSets#b5052fea: field flags: %w", err)
	}
	b.PutVectorHeader(len(t.Stickersets))
	for idx, v := range t.Stickersets {
		if v == nil {
			return fmt.Errorf("unable to encode messages.toggleStickerSets#b5052fea: field stickersets element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.toggleStickerSets#b5052fea: field stickersets element with index %d: %w", idx, err)
		}
	}
	return nil
}

// SetUninstall sets value of Uninstall conditional field.
func (t *MessagesToggleStickerSetsRequest) SetUninstall(value bool) {
	if value {
		t.Flags.Set(0)
	} else {
		t.Flags.Unset(0)
	}
}

// SetArchive sets value of Archive conditional field.
func (t *MessagesToggleStickerSetsRequest) SetArchive(value bool) {
	if value {
		t.Flags.Set(1)
	} else {
		t.Flags.Unset(1)
	}
}

// SetUnarchive sets value of Unarchive conditional field.
func (t *MessagesToggleStickerSetsRequest) SetUnarchive(value bool) {
	if value {
		t.Flags.Set(2)
	} else {
		t.Flags.Unset(2)
	}
}

// Decode implements bin.Decoder.
func (t *MessagesToggleStickerSetsRequest) Decode(b *bin.Buffer) error {
	if t == nil {
		return fmt.Errorf("can't decode messages.toggleStickerSets#b5052fea to nil")
	}
	if err := b.ConsumeID(MessagesToggleStickerSetsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.toggleStickerSets#b5052fea: %w", err)
	}
	{
		if err := t.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.toggleStickerSets#b5052fea: field flags: %w", err)
		}
	}
	t.Uninstall = t.Flags.Has(0)
	t.Archive = t.Flags.Has(1)
	t.Unarchive = t.Flags.Has(2)
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.toggleStickerSets#b5052fea: field stickersets: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeInputStickerSet(b)
			if err != nil {
				return fmt.Errorf("unable to decode messages.toggleStickerSets#b5052fea: field stickersets: %w", err)
			}
			t.Stickersets = append(t.Stickersets, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesToggleStickerSetsRequest.
var (
	_ bin.Encoder = &MessagesToggleStickerSetsRequest{}
	_ bin.Decoder = &MessagesToggleStickerSetsRequest{}
)

// MessagesToggleStickerSets invokes method messages.toggleStickerSets#b5052fea returning error if any.
//
// See https://core.telegram.org/method/messages.toggleStickerSets for reference.
func (c *Client) MessagesToggleStickerSets(ctx context.Context, request *MessagesToggleStickerSetsRequest) (BoolClass, error) {
	var result BoolBox
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Bool, nil
}
