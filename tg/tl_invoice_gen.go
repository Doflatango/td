// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// Invoice represents TL type `invoice#c30aa358`.
type Invoice struct {
	// Flags field of Invoice.
	Flags bin.Fields
	// Test field of Invoice.
	Test bool
	// NameRequested field of Invoice.
	NameRequested bool
	// PhoneRequested field of Invoice.
	PhoneRequested bool
	// EmailRequested field of Invoice.
	EmailRequested bool
	// ShippingAddressRequested field of Invoice.
	ShippingAddressRequested bool
	// Flexible field of Invoice.
	Flexible bool
	// PhoneToProvider field of Invoice.
	PhoneToProvider bool
	// EmailToProvider field of Invoice.
	EmailToProvider bool
	// Currency field of Invoice.
	Currency string
	// Prices field of Invoice.
	Prices []LabeledPrice
}

// InvoiceTypeID is TL type id of Invoice.
const InvoiceTypeID = 0xc30aa358

// Encode implements bin.Encoder.
func (i *Invoice) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode invoice#c30aa358 as nil")
	}
	b.PutID(InvoiceTypeID)
	if err := i.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode invoice#c30aa358: field flags: %w", err)
	}
	b.PutString(i.Currency)
	b.PutVectorHeader(len(i.Prices))
	for idx, v := range i.Prices {
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode invoice#c30aa358: field prices element with index %d: %w", idx, err)
		}
	}
	return nil
}

// SetTest sets value of Test conditional field.
func (i *Invoice) SetTest(value bool) {
	if value {
		i.Flags.Set(0)
	} else {
		i.Flags.Unset(0)
	}
}

// SetNameRequested sets value of NameRequested conditional field.
func (i *Invoice) SetNameRequested(value bool) {
	if value {
		i.Flags.Set(1)
	} else {
		i.Flags.Unset(1)
	}
}

// SetPhoneRequested sets value of PhoneRequested conditional field.
func (i *Invoice) SetPhoneRequested(value bool) {
	if value {
		i.Flags.Set(2)
	} else {
		i.Flags.Unset(2)
	}
}

// SetEmailRequested sets value of EmailRequested conditional field.
func (i *Invoice) SetEmailRequested(value bool) {
	if value {
		i.Flags.Set(3)
	} else {
		i.Flags.Unset(3)
	}
}

// SetShippingAddressRequested sets value of ShippingAddressRequested conditional field.
func (i *Invoice) SetShippingAddressRequested(value bool) {
	if value {
		i.Flags.Set(4)
	} else {
		i.Flags.Unset(4)
	}
}

// SetFlexible sets value of Flexible conditional field.
func (i *Invoice) SetFlexible(value bool) {
	if value {
		i.Flags.Set(5)
	} else {
		i.Flags.Unset(5)
	}
}

// SetPhoneToProvider sets value of PhoneToProvider conditional field.
func (i *Invoice) SetPhoneToProvider(value bool) {
	if value {
		i.Flags.Set(6)
	} else {
		i.Flags.Unset(6)
	}
}

// SetEmailToProvider sets value of EmailToProvider conditional field.
func (i *Invoice) SetEmailToProvider(value bool) {
	if value {
		i.Flags.Set(7)
	} else {
		i.Flags.Unset(7)
	}
}

// Decode implements bin.Decoder.
func (i *Invoice) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode invoice#c30aa358 to nil")
	}
	if err := b.ConsumeID(InvoiceTypeID); err != nil {
		return fmt.Errorf("unable to decode invoice#c30aa358: %w", err)
	}
	{
		if err := i.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode invoice#c30aa358: field flags: %w", err)
		}
	}
	i.Test = i.Flags.Has(0)
	i.NameRequested = i.Flags.Has(1)
	i.PhoneRequested = i.Flags.Has(2)
	i.EmailRequested = i.Flags.Has(3)
	i.ShippingAddressRequested = i.Flags.Has(4)
	i.Flexible = i.Flags.Has(5)
	i.PhoneToProvider = i.Flags.Has(6)
	i.EmailToProvider = i.Flags.Has(7)
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode invoice#c30aa358: field currency: %w", err)
		}
		i.Currency = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode invoice#c30aa358: field prices: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value LabeledPrice
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode invoice#c30aa358: field prices: %w", err)
			}
			i.Prices = append(i.Prices, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for Invoice.
var (
	_ bin.Encoder = &Invoice{}
	_ bin.Decoder = &Invoice{}
)
