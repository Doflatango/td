// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// BotInfo represents TL type `botInfo#98e81d3a`.
type BotInfo struct {
	// UserID field of BotInfo.
	UserID int
	// Description field of BotInfo.
	Description string
	// Commands field of BotInfo.
	Commands []BotCommand
}

// BotInfoTypeID is TL type id of BotInfo.
const BotInfoTypeID = 0x98e81d3a

// Encode implements bin.Encoder.
func (b *BotInfo) Encode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode botInfo#98e81d3a as nil")
	}
	buf.PutID(BotInfoTypeID)
	buf.PutInt(b.UserID)
	buf.PutString(b.Description)
	buf.PutVectorHeader(len(b.Commands))
	for idx, v := range b.Commands {
		if err := v.Encode(buf); err != nil {
			return fmt.Errorf("unable to encode botInfo#98e81d3a: field commands element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (b *BotInfo) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode botInfo#98e81d3a to nil")
	}
	if err := buf.ConsumeID(BotInfoTypeID); err != nil {
		return fmt.Errorf("unable to decode botInfo#98e81d3a: %w", err)
	}
	{
		value, err := buf.Int()
		if err != nil {
			return fmt.Errorf("unable to decode botInfo#98e81d3a: field user_id: %w", err)
		}
		b.UserID = value
	}
	{
		value, err := buf.String()
		if err != nil {
			return fmt.Errorf("unable to decode botInfo#98e81d3a: field description: %w", err)
		}
		b.Description = value
	}
	{
		headerLen, err := buf.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode botInfo#98e81d3a: field commands: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value BotCommand
			if err := value.Decode(buf); err != nil {
				return fmt.Errorf("unable to decode botInfo#98e81d3a: field commands: %w", err)
			}
			b.Commands = append(b.Commands, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for BotInfo.
var (
	_ bin.Encoder = &BotInfo{}
	_ bin.Decoder = &BotInfo{}
)
