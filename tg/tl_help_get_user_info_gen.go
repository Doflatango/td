// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// HelpGetUserInfoRequest represents TL type `help.getUserInfo#38a08d3`.
type HelpGetUserInfoRequest struct {
	// UserID field of HelpGetUserInfoRequest.
	UserID InputUserClass
}

// HelpGetUserInfoRequestTypeID is TL type id of HelpGetUserInfoRequest.
const HelpGetUserInfoRequestTypeID = 0x38a08d3

// Encode implements bin.Encoder.
func (g *HelpGetUserInfoRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode help.getUserInfo#38a08d3 as nil")
	}
	b.PutID(HelpGetUserInfoRequestTypeID)
	if g.UserID == nil {
		return fmt.Errorf("unable to encode help.getUserInfo#38a08d3: field user_id is nil")
	}
	if err := g.UserID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode help.getUserInfo#38a08d3: field user_id: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (g *HelpGetUserInfoRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode help.getUserInfo#38a08d3 to nil")
	}
	if err := b.ConsumeID(HelpGetUserInfoRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode help.getUserInfo#38a08d3: %w", err)
	}
	{
		value, err := DecodeInputUser(b)
		if err != nil {
			return fmt.Errorf("unable to decode help.getUserInfo#38a08d3: field user_id: %w", err)
		}
		g.UserID = value
	}
	return nil
}

// Ensuring interfaces in compile-time for HelpGetUserInfoRequest.
var (
	_ bin.Encoder = &HelpGetUserInfoRequest{}
	_ bin.Decoder = &HelpGetUserInfoRequest{}
)
