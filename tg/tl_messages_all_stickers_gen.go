// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// MessagesAllStickersNotModified represents TL type `messages.allStickersNotModified#e86602c3`.
// Info about all installed stickers hasn't changed
//
// See https://core.telegram.org/constructor/messages.allStickersNotModified for reference.
type MessagesAllStickersNotModified struct {
}

// MessagesAllStickersNotModifiedTypeID is TL type id of MessagesAllStickersNotModified.
const MessagesAllStickersNotModifiedTypeID = 0xe86602c3

func (a *MessagesAllStickersNotModified) Zero() bool {
	if a == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (a *MessagesAllStickersNotModified) String() string {
	if a == nil {
		return "MessagesAllStickersNotModified(nil)"
	}
	type Alias MessagesAllStickersNotModified
	return fmt.Sprintf("MessagesAllStickersNotModified%+v", Alias(*a))
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (a *MessagesAllStickersNotModified) TypeID() uint32 {
	return MessagesAllStickersNotModifiedTypeID
}

// Encode implements bin.Encoder.
func (a *MessagesAllStickersNotModified) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode messages.allStickersNotModified#e86602c3 as nil")
	}
	b.PutID(MessagesAllStickersNotModifiedTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (a *MessagesAllStickersNotModified) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode messages.allStickersNotModified#e86602c3 to nil")
	}
	if err := b.ConsumeID(MessagesAllStickersNotModifiedTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.allStickersNotModified#e86602c3: %w", err)
	}
	return nil
}

// construct implements constructor of MessagesAllStickersClass.
func (a MessagesAllStickersNotModified) construct() MessagesAllStickersClass { return &a }

// Ensuring interfaces in compile-time for MessagesAllStickersNotModified.
var (
	_ bin.Encoder = &MessagesAllStickersNotModified{}
	_ bin.Decoder = &MessagesAllStickersNotModified{}

	_ MessagesAllStickersClass = &MessagesAllStickersNotModified{}
)

// MessagesAllStickers represents TL type `messages.allStickers#edfd405f`.
// Info about all installed stickers
//
// See https://core.telegram.org/constructor/messages.allStickers for reference.
type MessagesAllStickers struct {
	// Hash for pagination, for more info click hereÂ¹
	//
	// Links:
	//  1) https://core.telegram.org/api/offsets#hash-generation
	Hash int
	// All stickersets
	Sets []StickerSet
}

// MessagesAllStickersTypeID is TL type id of MessagesAllStickers.
const MessagesAllStickersTypeID = 0xedfd405f

func (a *MessagesAllStickers) Zero() bool {
	if a == nil {
		return true
	}
	if !(a.Hash == 0) {
		return false
	}
	if !(a.Sets == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (a *MessagesAllStickers) String() string {
	if a == nil {
		return "MessagesAllStickers(nil)"
	}
	type Alias MessagesAllStickers
	return fmt.Sprintf("MessagesAllStickers%+v", Alias(*a))
}

// FillFrom fills MessagesAllStickers from given interface.
func (a *MessagesAllStickers) FillFrom(from interface {
	GetHash() (value int)
	GetSets() (value []StickerSet)
}) {
	a.Hash = from.GetHash()
	a.Sets = from.GetSets()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (a *MessagesAllStickers) TypeID() uint32 {
	return MessagesAllStickersTypeID
}

// Encode implements bin.Encoder.
func (a *MessagesAllStickers) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode messages.allStickers#edfd405f as nil")
	}
	b.PutID(MessagesAllStickersTypeID)
	b.PutInt(a.Hash)
	b.PutVectorHeader(len(a.Sets))
	for idx, v := range a.Sets {
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.allStickers#edfd405f: field sets element with index %d: %w", idx, err)
		}
	}
	return nil
}

// GetHash returns value of Hash field.
func (a *MessagesAllStickers) GetHash() (value int) {
	return a.Hash
}

// GetSets returns value of Sets field.
func (a *MessagesAllStickers) GetSets() (value []StickerSet) {
	return a.Sets
}

// Decode implements bin.Decoder.
func (a *MessagesAllStickers) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode messages.allStickers#edfd405f to nil")
	}
	if err := b.ConsumeID(MessagesAllStickersTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.allStickers#edfd405f: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.allStickers#edfd405f: field hash: %w", err)
		}
		a.Hash = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.allStickers#edfd405f: field sets: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value StickerSet
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode messages.allStickers#edfd405f: field sets: %w", err)
			}
			a.Sets = append(a.Sets, value)
		}
	}
	return nil
}

// construct implements constructor of MessagesAllStickersClass.
func (a MessagesAllStickers) construct() MessagesAllStickersClass { return &a }

// Ensuring interfaces in compile-time for MessagesAllStickers.
var (
	_ bin.Encoder = &MessagesAllStickers{}
	_ bin.Decoder = &MessagesAllStickers{}

	_ MessagesAllStickersClass = &MessagesAllStickers{}
)

// MessagesAllStickersClass represents messages.AllStickers generic type.
//
// See https://core.telegram.org/type/messages.AllStickers for reference.
//
// Example:
//  g, err := tg.DecodeMessagesAllStickers(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *tg.MessagesAllStickersNotModified: // messages.allStickersNotModified#e86602c3
//  case *tg.MessagesAllStickers: // messages.allStickers#edfd405f
//  default: panic(v)
//  }
type MessagesAllStickersClass interface {
	bin.Encoder
	bin.Decoder
	construct() MessagesAllStickersClass

	// AsModified tries to map MessagesAllStickersClass to MessagesAllStickers.
	AsModified() (*MessagesAllStickers, bool)

	// TypeID returns MTProto type id (CRC code).
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool
}

// AsModified tries to map MessagesAllStickersClass to MessagesAllStickers.
func (a *MessagesAllStickersNotModified) AsModified() (*MessagesAllStickers, bool) {
	return nil, false
}

// AsModified tries to map MessagesAllStickersClass to MessagesAllStickers.
func (a *MessagesAllStickers) AsModified() (*MessagesAllStickers, bool) {
	return a, true
}

// DecodeMessagesAllStickers implements binary de-serialization for MessagesAllStickersClass.
func DecodeMessagesAllStickers(buf *bin.Buffer) (MessagesAllStickersClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case MessagesAllStickersNotModifiedTypeID:
		// Decoding messages.allStickersNotModified#e86602c3.
		v := MessagesAllStickersNotModified{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessagesAllStickersClass: %w", err)
		}
		return &v, nil
	case MessagesAllStickersTypeID:
		// Decoding messages.allStickers#edfd405f.
		v := MessagesAllStickers{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessagesAllStickersClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode MessagesAllStickersClass: %w", bin.NewUnexpectedID(id))
	}
}

// MessagesAllStickers boxes the MessagesAllStickersClass providing a helper.
type MessagesAllStickersBox struct {
	AllStickers MessagesAllStickersClass
}

// Decode implements bin.Decoder for MessagesAllStickersBox.
func (b *MessagesAllStickersBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode MessagesAllStickersBox to nil")
	}
	v, err := DecodeMessagesAllStickers(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.AllStickers = v
	return nil
}

// Encode implements bin.Encode for MessagesAllStickersBox.
func (b *MessagesAllStickersBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.AllStickers == nil {
		return fmt.Errorf("unable to encode MessagesAllStickersClass as nil")
	}
	return b.AllStickers.Encode(buf)
}

// MessagesAllStickersClassSlice is adapter for slice of MessagesAllStickersClass.
type MessagesAllStickersClassSlice []MessagesAllStickersClass

// AppendOnlyModified appends only Modified constructors to
// given slice.
func (s MessagesAllStickersClassSlice) AppendOnlyModified(to []*MessagesAllStickers) []*MessagesAllStickers {
	for _, elem := range s {
		value, ok := elem.AsModified()
		if !ok {
			continue
		}
		to = append(to, value)
	}

	return to
}

// AsModified returns copy with only Modified constructors.
func (s MessagesAllStickersClassSlice) AsModified() (to []*MessagesAllStickers) {
	return s.AppendOnlyModified(to)
}

// FirstAsModified returns first element of slice (if exists).
func (s MessagesAllStickersClassSlice) FirstAsModified() (v *MessagesAllStickers, ok bool) {
	value, ok := s.First()
	if !ok {
		return
	}
	return value.AsModified()
}

// LastAsModified returns last element of slice (if exists).
func (s MessagesAllStickersClassSlice) LastAsModified() (v *MessagesAllStickers, ok bool) {
	value, ok := s.Last()
	if !ok {
		return
	}
	return value.AsModified()
}

// First returns first element of slice (if exists).
func (s MessagesAllStickersClassSlice) First() (v MessagesAllStickersClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessagesAllStickersClassSlice) Last() (v MessagesAllStickersClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessagesAllStickersClassSlice) PopFirst() (v MessagesAllStickersClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	a[len(a)-1] = nil
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessagesAllStickersClassSlice) Pop() (v MessagesAllStickersClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
