// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// Error represents TL type `error#c4b9f9bb`.
// Error.
//
// See https://core.telegram.org/constructor/error for reference.
type Error struct {
	// Error code
	Code int
	// Message
	Text string
}

// ErrorTypeID is TL type id of Error.
const ErrorTypeID = 0xc4b9f9bb

// String implements fmt.Stringer.
func (e *Error) String() string {
	if e == nil {
		return "Error(nil)"
	}
	var sb strings.Builder
	sb.WriteString("Error")
	sb.WriteString("{\n")
	sb.WriteString("\tCode: ")
	sb.WriteString(fmt.Sprint(e.Code))
	sb.WriteString(",\n")
	sb.WriteString("\tText: ")
	sb.WriteString(fmt.Sprint(e.Text))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (e *Error) Encode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode error#c4b9f9bb as nil")
	}
	b.PutID(ErrorTypeID)
	b.PutInt(e.Code)
	b.PutString(e.Text)
	return nil
}

// Decode implements bin.Decoder.
func (e *Error) Decode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode error#c4b9f9bb to nil")
	}
	if err := b.ConsumeID(ErrorTypeID); err != nil {
		return fmt.Errorf("unable to decode error#c4b9f9bb: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode error#c4b9f9bb: field code: %w", err)
		}
		e.Code = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode error#c4b9f9bb: field text: %w", err)
		}
		e.Text = value
	}
	return nil
}

// Ensuring interfaces in compile-time for Error.
var (
	_ bin.Encoder = &Error{}
	_ bin.Decoder = &Error{}
)
