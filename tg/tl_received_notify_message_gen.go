// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// ReceivedNotifyMessage represents TL type `receivedNotifyMessage#a384b779`.
type ReceivedNotifyMessage struct {
	// ID field of ReceivedNotifyMessage.
	ID int
	// Flags field of ReceivedNotifyMessage.
	Flags int
}

// ReceivedNotifyMessageTypeID is TL type id of ReceivedNotifyMessage.
const ReceivedNotifyMessageTypeID = 0xa384b779

// Encode implements bin.Encoder.
func (r *ReceivedNotifyMessage) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode receivedNotifyMessage#a384b779 as nil")
	}
	b.PutID(ReceivedNotifyMessageTypeID)
	b.PutInt(r.ID)
	b.PutInt(r.Flags)
	return nil
}

// Decode implements bin.Decoder.
func (r *ReceivedNotifyMessage) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode receivedNotifyMessage#a384b779 to nil")
	}
	if err := b.ConsumeID(ReceivedNotifyMessageTypeID); err != nil {
		return fmt.Errorf("unable to decode receivedNotifyMessage#a384b779: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode receivedNotifyMessage#a384b779: field id: %w", err)
		}
		r.ID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode receivedNotifyMessage#a384b779: field flags: %w", err)
		}
		r.Flags = value
	}
	return nil
}

// Ensuring interfaces in compile-time for ReceivedNotifyMessage.
var (
	_ bin.Encoder = &ReceivedNotifyMessage{}
	_ bin.Decoder = &ReceivedNotifyMessage{}
)
