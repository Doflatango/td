// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// SecureData represents TL type `secureData#8aeabec3`.
type SecureData struct {
	// Data field of SecureData.
	Data []byte
	// DataHash field of SecureData.
	DataHash []byte
	// Secret field of SecureData.
	Secret []byte
}

// SecureDataTypeID is TL type id of SecureData.
const SecureDataTypeID = 0x8aeabec3

// Encode implements bin.Encoder.
func (s *SecureData) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode secureData#8aeabec3 as nil")
	}
	b.PutID(SecureDataTypeID)
	b.PutBytes(s.Data)
	b.PutBytes(s.DataHash)
	b.PutBytes(s.Secret)
	return nil
}

// Decode implements bin.Decoder.
func (s *SecureData) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode secureData#8aeabec3 to nil")
	}
	if err := b.ConsumeID(SecureDataTypeID); err != nil {
		return fmt.Errorf("unable to decode secureData#8aeabec3: %w", err)
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode secureData#8aeabec3: field data: %w", err)
		}
		s.Data = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode secureData#8aeabec3: field data_hash: %w", err)
		}
		s.DataHash = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode secureData#8aeabec3: field secret: %w", err)
		}
		s.Secret = value
	}
	return nil
}

// Ensuring interfaces in compile-time for SecureData.
var (
	_ bin.Encoder = &SecureData{}
	_ bin.Decoder = &SecureData{}
)
