// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// PhoneCheckGroupCallRequest represents TL type `phone.checkGroupCall#b74a7bea`.
//
// See https://core.telegram.org/method/phone.checkGroupCall for reference.
type PhoneCheckGroupCallRequest struct {
	// Call field of PhoneCheckGroupCallRequest.
	Call InputGroupCall
	// Source field of PhoneCheckGroupCallRequest.
	Source int
}

// PhoneCheckGroupCallRequestTypeID is TL type id of PhoneCheckGroupCallRequest.
const PhoneCheckGroupCallRequestTypeID = 0xb74a7bea

func (c *PhoneCheckGroupCallRequest) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Call.Zero()) {
		return false
	}
	if !(c.Source == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *PhoneCheckGroupCallRequest) String() string {
	if c == nil {
		return "PhoneCheckGroupCallRequest(nil)"
	}
	type Alias PhoneCheckGroupCallRequest
	return fmt.Sprintf("PhoneCheckGroupCallRequest%+v", Alias(*c))
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *PhoneCheckGroupCallRequest) TypeID() uint32 {
	return PhoneCheckGroupCallRequestTypeID
}

// Encode implements bin.Encoder.
func (c *PhoneCheckGroupCallRequest) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode phone.checkGroupCall#b74a7bea as nil")
	}
	b.PutID(PhoneCheckGroupCallRequestTypeID)
	if err := c.Call.Encode(b); err != nil {
		return fmt.Errorf("unable to encode phone.checkGroupCall#b74a7bea: field call: %w", err)
	}
	b.PutInt(c.Source)
	return nil
}

// GetCall returns value of Call field.
func (c *PhoneCheckGroupCallRequest) GetCall() (value InputGroupCall) {
	return c.Call
}

// GetSource returns value of Source field.
func (c *PhoneCheckGroupCallRequest) GetSource() (value int) {
	return c.Source
}

// Decode implements bin.Decoder.
func (c *PhoneCheckGroupCallRequest) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode phone.checkGroupCall#b74a7bea to nil")
	}
	if err := b.ConsumeID(PhoneCheckGroupCallRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode phone.checkGroupCall#b74a7bea: %w", err)
	}
	{
		if err := c.Call.Decode(b); err != nil {
			return fmt.Errorf("unable to decode phone.checkGroupCall#b74a7bea: field call: %w", err)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode phone.checkGroupCall#b74a7bea: field source: %w", err)
		}
		c.Source = value
	}
	return nil
}

// Ensuring interfaces in compile-time for PhoneCheckGroupCallRequest.
var (
	_ bin.Encoder = &PhoneCheckGroupCallRequest{}
	_ bin.Decoder = &PhoneCheckGroupCallRequest{}
)

// PhoneCheckGroupCall invokes method phone.checkGroupCall#b74a7bea returning error if any.
//
// See https://core.telegram.org/method/phone.checkGroupCall for reference.
func (c *Client) PhoneCheckGroupCall(ctx context.Context, request *PhoneCheckGroupCallRequest) (bool, error) {
	var result BoolBox

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
