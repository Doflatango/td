// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesReceivedQueueRequest represents TL type `messages.receivedQueue#55a5bb66`.
// Confirms receipt of messages in a secret chat by client, cancels push notifications.
//
// See https://core.telegram.org/method/messages.receivedQueue for reference.
type MessagesReceivedQueueRequest struct {
	// Maximum qts value available at the client
	MaxQts int
}

// MessagesReceivedQueueRequestTypeID is TL type id of MessagesReceivedQueueRequest.
const MessagesReceivedQueueRequestTypeID = 0x55a5bb66

// Encode implements bin.Encoder.
func (r *MessagesReceivedQueueRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode messages.receivedQueue#55a5bb66 as nil")
	}
	b.PutID(MessagesReceivedQueueRequestTypeID)
	b.PutInt(r.MaxQts)
	return nil
}

// Decode implements bin.Decoder.
func (r *MessagesReceivedQueueRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode messages.receivedQueue#55a5bb66 to nil")
	}
	if err := b.ConsumeID(MessagesReceivedQueueRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.receivedQueue#55a5bb66: %w", err)
	}

	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.receivedQueue#55a5bb66: field max_qts: %w", err)
		}
		r.MaxQts = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesReceivedQueueRequest.
var (
	_ bin.Encoder = &MessagesReceivedQueueRequest{}
	_ bin.Decoder = &MessagesReceivedQueueRequest{}
)

// MessagesReceivedQueue invokes method messages.receivedQueue#55a5bb66 returning error if any.
// Confirms receipt of messages in a secret chat by client, cancels push notifications.
//
// See https://core.telegram.org/method/messages.receivedQueue for reference.
func (c *Client) MessagesReceivedQueue(ctx context.Context, request *MessagesReceivedQueueRequest) ([]int64, error) {
	var result LongVector
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Elems, nil
}
