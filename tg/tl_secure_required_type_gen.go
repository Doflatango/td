// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// SecureRequiredType represents TL type `secureRequiredType#829d99da`.
// Required type
//
// See https://core.telegram.org/constructor/secureRequiredType for reference.
type SecureRequiredType struct {
	// Flags, see TL conditional fieldsÂ¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// Native names
	NativeNames bool
	// Is a selfie required
	SelfieRequired bool
	// Is a translation required
	TranslationRequired bool
	// Secure value type
	Type SecureValueTypeClass
}

// SecureRequiredTypeTypeID is TL type id of SecureRequiredType.
const SecureRequiredTypeTypeID = 0x829d99da

// String implements fmt.Stringer.
func (s *SecureRequiredType) String() string {
	if s == nil {
		return "SecureRequiredType(nil)"
	}
	var sb strings.Builder
	sb.WriteString("SecureRequiredType")
	sb.WriteString("{\n")
	sb.WriteString("\tFlags: ")
	sb.WriteString(s.Flags.String())
	sb.WriteString(",\n")
	sb.WriteString("\tType: ")
	sb.WriteString(s.Type.String())
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (s *SecureRequiredType) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode secureRequiredType#829d99da as nil")
	}
	b.PutID(SecureRequiredTypeTypeID)
	if err := s.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode secureRequiredType#829d99da: field flags: %w", err)
	}
	if s.Type == nil {
		return fmt.Errorf("unable to encode secureRequiredType#829d99da: field type is nil")
	}
	if err := s.Type.Encode(b); err != nil {
		return fmt.Errorf("unable to encode secureRequiredType#829d99da: field type: %w", err)
	}
	return nil
}

// SetNativeNames sets value of NativeNames conditional field.
func (s *SecureRequiredType) SetNativeNames(value bool) {
	if value {
		s.Flags.Set(0)
	} else {
		s.Flags.Unset(0)
	}
}

// SetSelfieRequired sets value of SelfieRequired conditional field.
func (s *SecureRequiredType) SetSelfieRequired(value bool) {
	if value {
		s.Flags.Set(1)
	} else {
		s.Flags.Unset(1)
	}
}

// SetTranslationRequired sets value of TranslationRequired conditional field.
func (s *SecureRequiredType) SetTranslationRequired(value bool) {
	if value {
		s.Flags.Set(2)
	} else {
		s.Flags.Unset(2)
	}
}

// Decode implements bin.Decoder.
func (s *SecureRequiredType) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode secureRequiredType#829d99da to nil")
	}
	if err := b.ConsumeID(SecureRequiredTypeTypeID); err != nil {
		return fmt.Errorf("unable to decode secureRequiredType#829d99da: %w", err)
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode secureRequiredType#829d99da: field flags: %w", err)
		}
	}
	s.NativeNames = s.Flags.Has(0)
	s.SelfieRequired = s.Flags.Has(1)
	s.TranslationRequired = s.Flags.Has(2)
	{
		value, err := DecodeSecureValueType(b)
		if err != nil {
			return fmt.Errorf("unable to decode secureRequiredType#829d99da: field type: %w", err)
		}
		s.Type = value
	}
	return nil
}

// construct implements constructor of SecureRequiredTypeClass.
func (s SecureRequiredType) construct() SecureRequiredTypeClass { return &s }

// Ensuring interfaces in compile-time for SecureRequiredType.
var (
	_ bin.Encoder = &SecureRequiredType{}
	_ bin.Decoder = &SecureRequiredType{}

	_ SecureRequiredTypeClass = &SecureRequiredType{}
)

// SecureRequiredTypeOneOf represents TL type `secureRequiredTypeOneOf#27477b4`.
// One of
//
// See https://core.telegram.org/constructor/secureRequiredTypeOneOf for reference.
type SecureRequiredTypeOneOf struct {
	// Secure required value types
	Types []SecureRequiredTypeClass
}

// SecureRequiredTypeOneOfTypeID is TL type id of SecureRequiredTypeOneOf.
const SecureRequiredTypeOneOfTypeID = 0x27477b4

// String implements fmt.Stringer.
func (s *SecureRequiredTypeOneOf) String() string {
	if s == nil {
		return "SecureRequiredTypeOneOf(nil)"
	}
	var sb strings.Builder
	sb.WriteString("SecureRequiredTypeOneOf")
	sb.WriteString("{\n")
	sb.WriteByte('[')
	for _, v := range s.Types {
		sb.WriteString(fmt.Sprint(v))
	}
	sb.WriteByte(']')
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (s *SecureRequiredTypeOneOf) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode secureRequiredTypeOneOf#27477b4 as nil")
	}
	b.PutID(SecureRequiredTypeOneOfTypeID)
	b.PutVectorHeader(len(s.Types))
	for idx, v := range s.Types {
		if v == nil {
			return fmt.Errorf("unable to encode secureRequiredTypeOneOf#27477b4: field types element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode secureRequiredTypeOneOf#27477b4: field types element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *SecureRequiredTypeOneOf) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode secureRequiredTypeOneOf#27477b4 to nil")
	}
	if err := b.ConsumeID(SecureRequiredTypeOneOfTypeID); err != nil {
		return fmt.Errorf("unable to decode secureRequiredTypeOneOf#27477b4: %w", err)
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode secureRequiredTypeOneOf#27477b4: field types: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeSecureRequiredType(b)
			if err != nil {
				return fmt.Errorf("unable to decode secureRequiredTypeOneOf#27477b4: field types: %w", err)
			}
			s.Types = append(s.Types, value)
		}
	}
	return nil
}

// construct implements constructor of SecureRequiredTypeClass.
func (s SecureRequiredTypeOneOf) construct() SecureRequiredTypeClass { return &s }

// Ensuring interfaces in compile-time for SecureRequiredTypeOneOf.
var (
	_ bin.Encoder = &SecureRequiredTypeOneOf{}
	_ bin.Decoder = &SecureRequiredTypeOneOf{}

	_ SecureRequiredTypeClass = &SecureRequiredTypeOneOf{}
)

// SecureRequiredTypeClass represents SecureRequiredType generic type.
//
// See https://core.telegram.org/type/SecureRequiredType for reference.
//
// Example:
//  g, err := DecodeSecureRequiredType(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *SecureRequiredType: // secureRequiredType#829d99da
//  case *SecureRequiredTypeOneOf: // secureRequiredTypeOneOf#27477b4
//  default: panic(v)
//  }
type SecureRequiredTypeClass interface {
	bin.Encoder
	bin.Decoder
	construct() SecureRequiredTypeClass
	fmt.Stringer
}

// DecodeSecureRequiredType implements binary de-serialization for SecureRequiredTypeClass.
func DecodeSecureRequiredType(buf *bin.Buffer) (SecureRequiredTypeClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case SecureRequiredTypeTypeID:
		// Decoding secureRequiredType#829d99da.
		v := SecureRequiredType{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode SecureRequiredTypeClass: %w", err)
		}
		return &v, nil
	case SecureRequiredTypeOneOfTypeID:
		// Decoding secureRequiredTypeOneOf#27477b4.
		v := SecureRequiredTypeOneOf{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode SecureRequiredTypeClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode SecureRequiredTypeClass: %w", bin.NewUnexpectedID(id))
	}
}

// SecureRequiredType boxes the SecureRequiredTypeClass providing a helper.
type SecureRequiredTypeBox struct {
	SecureRequiredType SecureRequiredTypeClass
}

// Decode implements bin.Decoder for SecureRequiredTypeBox.
func (b *SecureRequiredTypeBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode SecureRequiredTypeBox to nil")
	}
	v, err := DecodeSecureRequiredType(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.SecureRequiredType = v
	return nil
}

// Encode implements bin.Encode for SecureRequiredTypeBox.
func (b *SecureRequiredTypeBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.SecureRequiredType == nil {
		return fmt.Errorf("unable to encode SecureRequiredTypeClass as nil")
	}
	return b.SecureRequiredType.Encode(buf)
}
