// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// StickersCreateStickerSetRequest represents TL type `stickers.createStickerSet#f1036780`.
// Create a stickerset, bots only.
//
// See https://core.telegram.org/method/stickers.createStickerSet for reference.
type StickersCreateStickerSetRequest struct {
	// Flags, see TL conditional fieldsÂ¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// Whether this is a mask stickerset
	Masks bool
	// Whether this is an animated stickerset
	Animated bool
	// Stickerset owner
	UserID InputUserClass
	// Stickerset name, 1-64 chars
	Title string
	// Sticker set name. Can contain only English letters, digits and underscores. Must end with "by" ( is case insensitive); 1-64 characters
	ShortName string
	// Thumbnail
	//
	// Use SetThumb and GetThumb helpers.
	Thumb InputDocumentClass
	// Stickers
	Stickers []InputStickerSetItem
}

// StickersCreateStickerSetRequestTypeID is TL type id of StickersCreateStickerSetRequest.
const StickersCreateStickerSetRequestTypeID = 0xf1036780

// String implements fmt.Stringer.
func (c *StickersCreateStickerSetRequest) String() string {
	if c == nil {
		return "StickersCreateStickerSetRequest(nil)"
	}
	var sb strings.Builder
	sb.WriteString("StickersCreateStickerSetRequest")
	sb.WriteString("{\n")
	sb.WriteString("\tFlags: ")
	sb.WriteString(c.Flags.String())
	sb.WriteString(",\n")
	sb.WriteString("\tUserID: ")
	sb.WriteString(c.UserID.String())
	sb.WriteString(",\n")
	sb.WriteString("\tTitle: ")
	sb.WriteString(fmt.Sprint(c.Title))
	sb.WriteString(",\n")
	sb.WriteString("\tShortName: ")
	sb.WriteString(fmt.Sprint(c.ShortName))
	sb.WriteString(",\n")
	if c.Flags.Has(2) {
		sb.WriteString("\tThumb: ")
		sb.WriteString(c.Thumb.String())
		sb.WriteString(",\n")
	}
	sb.WriteByte('[')
	for _, v := range c.Stickers {
		sb.WriteString(fmt.Sprint(v))
	}
	sb.WriteByte(']')
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (c *StickersCreateStickerSetRequest) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode stickers.createStickerSet#f1036780 as nil")
	}
	b.PutID(StickersCreateStickerSetRequestTypeID)
	if err := c.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode stickers.createStickerSet#f1036780: field flags: %w", err)
	}
	if c.UserID == nil {
		return fmt.Errorf("unable to encode stickers.createStickerSet#f1036780: field user_id is nil")
	}
	if err := c.UserID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode stickers.createStickerSet#f1036780: field user_id: %w", err)
	}
	b.PutString(c.Title)
	b.PutString(c.ShortName)
	if c.Flags.Has(2) {
		if c.Thumb == nil {
			return fmt.Errorf("unable to encode stickers.createStickerSet#f1036780: field thumb is nil")
		}
		if err := c.Thumb.Encode(b); err != nil {
			return fmt.Errorf("unable to encode stickers.createStickerSet#f1036780: field thumb: %w", err)
		}
	}
	b.PutVectorHeader(len(c.Stickers))
	for idx, v := range c.Stickers {
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode stickers.createStickerSet#f1036780: field stickers element with index %d: %w", idx, err)
		}
	}
	return nil
}

// SetMasks sets value of Masks conditional field.
func (c *StickersCreateStickerSetRequest) SetMasks(value bool) {
	if value {
		c.Flags.Set(0)
	} else {
		c.Flags.Unset(0)
	}
}

// SetAnimated sets value of Animated conditional field.
func (c *StickersCreateStickerSetRequest) SetAnimated(value bool) {
	if value {
		c.Flags.Set(1)
	} else {
		c.Flags.Unset(1)
	}
}

// SetThumb sets value of Thumb conditional field.
func (c *StickersCreateStickerSetRequest) SetThumb(value InputDocumentClass) {
	c.Flags.Set(2)
	c.Thumb = value
}

// GetThumb returns value of Thumb conditional field and
// boolean which is true if field was set.
func (c *StickersCreateStickerSetRequest) GetThumb() (value InputDocumentClass, ok bool) {
	if !c.Flags.Has(2) {
		return value, false
	}
	return c.Thumb, true
}

// Decode implements bin.Decoder.
func (c *StickersCreateStickerSetRequest) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode stickers.createStickerSet#f1036780 to nil")
	}
	if err := b.ConsumeID(StickersCreateStickerSetRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode stickers.createStickerSet#f1036780: %w", err)
	}
	{
		if err := c.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode stickers.createStickerSet#f1036780: field flags: %w", err)
		}
	}
	c.Masks = c.Flags.Has(0)
	c.Animated = c.Flags.Has(1)
	{
		value, err := DecodeInputUser(b)
		if err != nil {
			return fmt.Errorf("unable to decode stickers.createStickerSet#f1036780: field user_id: %w", err)
		}
		c.UserID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode stickers.createStickerSet#f1036780: field title: %w", err)
		}
		c.Title = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode stickers.createStickerSet#f1036780: field short_name: %w", err)
		}
		c.ShortName = value
	}
	if c.Flags.Has(2) {
		value, err := DecodeInputDocument(b)
		if err != nil {
			return fmt.Errorf("unable to decode stickers.createStickerSet#f1036780: field thumb: %w", err)
		}
		c.Thumb = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode stickers.createStickerSet#f1036780: field stickers: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value InputStickerSetItem
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode stickers.createStickerSet#f1036780: field stickers: %w", err)
			}
			c.Stickers = append(c.Stickers, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for StickersCreateStickerSetRequest.
var (
	_ bin.Encoder = &StickersCreateStickerSetRequest{}
	_ bin.Decoder = &StickersCreateStickerSetRequest{}
)

// StickersCreateStickerSet invokes method stickers.createStickerSet#f1036780 returning error if any.
// Create a stickerset, bots only.
//
// See https://core.telegram.org/method/stickers.createStickerSet for reference.
func (c *Client) StickersCreateStickerSet(ctx context.Context, request *StickersCreateStickerSetRequest) (*MessagesStickerSet, error) {
	var result MessagesStickerSet

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
