// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesGetMaskStickersRequest represents TL type `messages.getMaskStickers#65b8c79f`.
// Get installed mask stickers
//
// See https://core.telegram.org/method/messages.getMaskStickers for reference.
type MessagesGetMaskStickersRequest struct {
	// Hash for pagination, for more info click hereÂ¹
	//
	// Links:
	//  1) https://core.telegram.org/api/offsets#hash-generation
	Hash int
}

// MessagesGetMaskStickersRequestTypeID is TL type id of MessagesGetMaskStickersRequest.
const MessagesGetMaskStickersRequestTypeID = 0x65b8c79f

// Encode implements bin.Encoder.
func (g *MessagesGetMaskStickersRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode messages.getMaskStickers#65b8c79f as nil")
	}
	b.PutID(MessagesGetMaskStickersRequestTypeID)
	b.PutInt(g.Hash)
	return nil
}

// Decode implements bin.Decoder.
func (g *MessagesGetMaskStickersRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode messages.getMaskStickers#65b8c79f to nil")
	}
	if err := b.ConsumeID(MessagesGetMaskStickersRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.getMaskStickers#65b8c79f: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.getMaskStickers#65b8c79f: field hash: %w", err)
		}
		g.Hash = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesGetMaskStickersRequest.
var (
	_ bin.Encoder = &MessagesGetMaskStickersRequest{}
	_ bin.Decoder = &MessagesGetMaskStickersRequest{}
)

// MessagesGetMaskStickers invokes method messages.getMaskStickers#65b8c79f returning error if any.
// Get installed mask stickers
//
// See https://core.telegram.org/method/messages.getMaskStickers for reference.
func (c *Client) MessagesGetMaskStickers(ctx context.Context, hash int) (MessagesAllStickersClass, error) {
	var result MessagesAllStickersBox

	request := &MessagesGetMaskStickersRequest{
		Hash: hash,
	}
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.AllStickers, nil
}
