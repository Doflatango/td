// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// InputSingleMedia represents TL type `inputSingleMedia#1cc6e91f`.
type InputSingleMedia struct {
	// Flags field of InputSingleMedia.
	Flags bin.Fields
	// Media field of InputSingleMedia.
	Media InputMediaClass
	// RandomID field of InputSingleMedia.
	RandomID int64
	// Message field of InputSingleMedia.
	Message string
	// Entities field of InputSingleMedia.
	//
	// Use SetEntities and GetEntities helpers.
	Entities []MessageEntityClass
}

// InputSingleMediaTypeID is TL type id of InputSingleMedia.
const InputSingleMediaTypeID = 0x1cc6e91f

// Encode implements bin.Encoder.
func (i *InputSingleMedia) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputSingleMedia#1cc6e91f as nil")
	}
	b.PutID(InputSingleMediaTypeID)
	if err := i.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode inputSingleMedia#1cc6e91f: field flags: %w", err)
	}
	if i.Media == nil {
		return fmt.Errorf("unable to encode inputSingleMedia#1cc6e91f: field media is nil")
	}
	if err := i.Media.Encode(b); err != nil {
		return fmt.Errorf("unable to encode inputSingleMedia#1cc6e91f: field media: %w", err)
	}
	b.PutLong(i.RandomID)
	b.PutString(i.Message)
	if i.Flags.Has(0) {
		b.PutVectorHeader(len(i.Entities))
		for idx, v := range i.Entities {
			if v == nil {
				return fmt.Errorf("unable to encode inputSingleMedia#1cc6e91f: field entities element with index %d is nil", idx)
			}
			if err := v.Encode(b); err != nil {
				return fmt.Errorf("unable to encode inputSingleMedia#1cc6e91f: field entities element with index %d: %w", idx, err)
			}
		}
	}
	return nil
}

// SetEntities sets value of Entities conditional field.
func (i *InputSingleMedia) SetEntities(value []MessageEntityClass) {
	i.Flags.Set(0)
	i.Entities = value
}

// GetEntities returns value of Entities conditional field and
// boolean which is true if field was set.
func (i *InputSingleMedia) GetEntities() (value []MessageEntityClass, ok bool) {
	if !i.Flags.Has(0) {
		return value, false
	}
	return i.Entities, true
}

// Decode implements bin.Decoder.
func (i *InputSingleMedia) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputSingleMedia#1cc6e91f to nil")
	}
	if err := b.ConsumeID(InputSingleMediaTypeID); err != nil {
		return fmt.Errorf("unable to decode inputSingleMedia#1cc6e91f: %w", err)
	}
	{
		if err := i.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode inputSingleMedia#1cc6e91f: field flags: %w", err)
		}
	}
	{
		value, err := DecodeInputMedia(b)
		if err != nil {
			return fmt.Errorf("unable to decode inputSingleMedia#1cc6e91f: field media: %w", err)
		}
		i.Media = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode inputSingleMedia#1cc6e91f: field random_id: %w", err)
		}
		i.RandomID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode inputSingleMedia#1cc6e91f: field message: %w", err)
		}
		i.Message = value
	}
	if i.Flags.Has(0) {
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode inputSingleMedia#1cc6e91f: field entities: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeMessageEntity(b)
			if err != nil {
				return fmt.Errorf("unable to decode inputSingleMedia#1cc6e91f: field entities: %w", err)
			}
			i.Entities = append(i.Entities, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for InputSingleMedia.
var (
	_ bin.Encoder = &InputSingleMedia{}
	_ bin.Decoder = &InputSingleMedia{}
)
