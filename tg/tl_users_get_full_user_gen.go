// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// UsersGetFullUserRequest represents TL type `users.getFullUser#ca30a5b1`.
//
// See https://core.telegram.org/method/users.getFullUser for reference.
type UsersGetFullUserRequest struct {
	// ID field of UsersGetFullUserRequest.
	ID InputUserClass
}

// UsersGetFullUserRequestTypeID is TL type id of UsersGetFullUserRequest.
const UsersGetFullUserRequestTypeID = 0xca30a5b1

// Encode implements bin.Encoder.
func (g *UsersGetFullUserRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode users.getFullUser#ca30a5b1 as nil")
	}
	b.PutID(UsersGetFullUserRequestTypeID)
	if g.ID == nil {
		return fmt.Errorf("unable to encode users.getFullUser#ca30a5b1: field id is nil")
	}
	if err := g.ID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode users.getFullUser#ca30a5b1: field id: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (g *UsersGetFullUserRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode users.getFullUser#ca30a5b1 to nil")
	}
	if err := b.ConsumeID(UsersGetFullUserRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode users.getFullUser#ca30a5b1: %w", err)
	}
	{
		value, err := DecodeInputUser(b)
		if err != nil {
			return fmt.Errorf("unable to decode users.getFullUser#ca30a5b1: field id: %w", err)
		}
		g.ID = value
	}
	return nil
}

// Ensuring interfaces in compile-time for UsersGetFullUserRequest.
var (
	_ bin.Encoder = &UsersGetFullUserRequest{}
	_ bin.Decoder = &UsersGetFullUserRequest{}
)

// UsersGetFullUser invokes method users.getFullUser#ca30a5b1 returning error if any.
//
// See https://core.telegram.org/method/users.getFullUser for reference.
func (c *Client) UsersGetFullUser(ctx context.Context, request *UsersGetFullUserRequest) (*UserFull, error) {
	var result UserFull
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
