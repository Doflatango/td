// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// UsersGetFullUserRequest represents TL type `users.getFullUser#ca30a5b1`.
// Returns extended user info by ID.
//
// See https://core.telegram.org/method/users.getFullUser for reference.
type UsersGetFullUserRequest struct {
	// User ID
	ID InputUserClass `tl:"id"`
}

// UsersGetFullUserRequestTypeID is TL type id of UsersGetFullUserRequest.
const UsersGetFullUserRequestTypeID = 0xca30a5b1

func (g *UsersGetFullUserRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.ID == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *UsersGetFullUserRequest) String() string {
	if g == nil {
		return "UsersGetFullUserRequest(nil)"
	}
	type Alias UsersGetFullUserRequest
	return fmt.Sprintf("UsersGetFullUserRequest%+v", Alias(*g))
}

// FillFrom fills UsersGetFullUserRequest from given interface.
func (g *UsersGetFullUserRequest) FillFrom(from interface {
	GetID() (value InputUserClass)
}) {
	g.ID = from.GetID()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (g *UsersGetFullUserRequest) TypeID() uint32 {
	return UsersGetFullUserRequestTypeID
}

// TypeName returns name of type in TL schema.
func (g *UsersGetFullUserRequest) TypeName() string {
	return "users.getFullUser"
}

// Encode implements bin.Encoder.
func (g *UsersGetFullUserRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode users.getFullUser#ca30a5b1 as nil")
	}
	b.PutID(UsersGetFullUserRequestTypeID)
	if g.ID == nil {
		return fmt.Errorf("unable to encode users.getFullUser#ca30a5b1: field id is nil")
	}
	if err := g.ID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode users.getFullUser#ca30a5b1: field id: %w", err)
	}
	return nil
}

// GetID returns value of ID field.
func (g *UsersGetFullUserRequest) GetID() (value InputUserClass) {
	return g.ID
}

// Decode implements bin.Decoder.
func (g *UsersGetFullUserRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode users.getFullUser#ca30a5b1 to nil")
	}
	if err := b.ConsumeID(UsersGetFullUserRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode users.getFullUser#ca30a5b1: %w", err)
	}
	{
		value, err := DecodeInputUser(b)
		if err != nil {
			return fmt.Errorf("unable to decode users.getFullUser#ca30a5b1: field id: %w", err)
		}
		g.ID = value
	}
	return nil
}

// Ensuring interfaces in compile-time for UsersGetFullUserRequest.
var (
	_ bin.Encoder = &UsersGetFullUserRequest{}
	_ bin.Decoder = &UsersGetFullUserRequest{}
)

// UsersGetFullUser invokes method users.getFullUser#ca30a5b1 returning error if any.
// Returns extended user info by ID.
//
// Possible errors:
//  400 CHANNEL_PRIVATE: You haven't joined this channel/supergroup
//  400 MSG_ID_INVALID: Invalid message ID provided
//  400 USER_ID_INVALID: The provided user ID is invalid
//
// See https://core.telegram.org/method/users.getFullUser for reference.
// Can be used by bots.
func (c *Client) UsersGetFullUser(ctx context.Context, id InputUserClass) (*UserFull, error) {
	var result UserFull

	request := &UsersGetFullUserRequest{
		ID: id,
	}
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
