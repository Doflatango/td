// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesReadMentionsRequest represents TL type `messages.readMentions#f0189d3`.
// Mark mentions as read
//
// See https://core.telegram.org/method/messages.readMentions for reference.
type MessagesReadMentionsRequest struct {
	// Dialog
	Peer InputPeerClass
}

// MessagesReadMentionsRequestTypeID is TL type id of MessagesReadMentionsRequest.
const MessagesReadMentionsRequestTypeID = 0xf0189d3

// Encode implements bin.Encoder.
func (r *MessagesReadMentionsRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode messages.readMentions#f0189d3 as nil")
	}
	b.PutID(MessagesReadMentionsRequestTypeID)
	if r.Peer == nil {
		return fmt.Errorf("unable to encode messages.readMentions#f0189d3: field peer is nil")
	}
	if err := r.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.readMentions#f0189d3: field peer: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (r *MessagesReadMentionsRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode messages.readMentions#f0189d3 to nil")
	}
	if err := b.ConsumeID(MessagesReadMentionsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.readMentions#f0189d3: %w", err)
	}

	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.readMentions#f0189d3: field peer: %w", err)
		}
		r.Peer = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesReadMentionsRequest.
var (
	_ bin.Encoder = &MessagesReadMentionsRequest{}
	_ bin.Decoder = &MessagesReadMentionsRequest{}
)

// MessagesReadMentions invokes method messages.readMentions#f0189d3 returning error if any.
// Mark mentions as read
//
// See https://core.telegram.org/method/messages.readMentions for reference.
func (c *Client) MessagesReadMentions(ctx context.Context, request *MessagesReadMentionsRequest) (*MessagesAffectedHistory, error) {
	var result MessagesAffectedHistory
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
