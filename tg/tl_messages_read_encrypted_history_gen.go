// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesReadEncryptedHistoryRequest represents TL type `messages.readEncryptedHistory#7f4b690a`.
type MessagesReadEncryptedHistoryRequest struct {
	// Peer field of MessagesReadEncryptedHistoryRequest.
	Peer InputEncryptedChat
	// MaxDate field of MessagesReadEncryptedHistoryRequest.
	MaxDate int
}

// MessagesReadEncryptedHistoryRequestTypeID is TL type id of MessagesReadEncryptedHistoryRequest.
const MessagesReadEncryptedHistoryRequestTypeID = 0x7f4b690a

// Encode implements bin.Encoder.
func (r *MessagesReadEncryptedHistoryRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode messages.readEncryptedHistory#7f4b690a as nil")
	}
	b.PutID(MessagesReadEncryptedHistoryRequestTypeID)
	if err := r.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.readEncryptedHistory#7f4b690a: field peer: %w", err)
	}
	b.PutInt(r.MaxDate)
	return nil
}

// Decode implements bin.Decoder.
func (r *MessagesReadEncryptedHistoryRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode messages.readEncryptedHistory#7f4b690a to nil")
	}
	if err := b.ConsumeID(MessagesReadEncryptedHistoryRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.readEncryptedHistory#7f4b690a: %w", err)
	}
	{
		if err := r.Peer.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.readEncryptedHistory#7f4b690a: field peer: %w", err)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.readEncryptedHistory#7f4b690a: field max_date: %w", err)
		}
		r.MaxDate = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesReadEncryptedHistoryRequest.
var (
	_ bin.Encoder = &MessagesReadEncryptedHistoryRequest{}
	_ bin.Decoder = &MessagesReadEncryptedHistoryRequest{}
)
