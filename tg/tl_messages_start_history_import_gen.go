// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is
var _ = sort.Ints

// MessagesStartHistoryImportRequest represents TL type `messages.startHistoryImport#b43df344`.
//
// See https://core.telegram.org/method/messages.startHistoryImport for reference.
type MessagesStartHistoryImportRequest struct {
	// Peer field of MessagesStartHistoryImportRequest.
	Peer InputPeerClass `tl:"peer"`
	// ImportID field of MessagesStartHistoryImportRequest.
	ImportID int64 `tl:"import_id"`
}

// MessagesStartHistoryImportRequestTypeID is TL type id of MessagesStartHistoryImportRequest.
const MessagesStartHistoryImportRequestTypeID = 0xb43df344

func (s *MessagesStartHistoryImportRequest) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Peer == nil) {
		return false
	}
	if !(s.ImportID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *MessagesStartHistoryImportRequest) String() string {
	if s == nil {
		return "MessagesStartHistoryImportRequest(nil)"
	}
	type Alias MessagesStartHistoryImportRequest
	return fmt.Sprintf("MessagesStartHistoryImportRequest%+v", Alias(*s))
}

// FillFrom fills MessagesStartHistoryImportRequest from given interface.
func (s *MessagesStartHistoryImportRequest) FillFrom(from interface {
	GetPeer() (value InputPeerClass)
	GetImportID() (value int64)
}) {
	s.Peer = from.GetPeer()
	s.ImportID = from.GetImportID()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (s *MessagesStartHistoryImportRequest) TypeID() uint32 {
	return MessagesStartHistoryImportRequestTypeID
}

// TypeName returns name of type in TL schema.
func (s *MessagesStartHistoryImportRequest) TypeName() string {
	return "messages.startHistoryImport"
}

// Encode implements bin.Encoder.
func (s *MessagesStartHistoryImportRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode messages.startHistoryImport#b43df344 as nil")
	}
	b.PutID(MessagesStartHistoryImportRequestTypeID)
	if s.Peer == nil {
		return fmt.Errorf("unable to encode messages.startHistoryImport#b43df344: field peer is nil")
	}
	if err := s.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.startHistoryImport#b43df344: field peer: %w", err)
	}
	b.PutLong(s.ImportID)
	return nil
}

// GetPeer returns value of Peer field.
func (s *MessagesStartHistoryImportRequest) GetPeer() (value InputPeerClass) {
	return s.Peer
}

// GetImportID returns value of ImportID field.
func (s *MessagesStartHistoryImportRequest) GetImportID() (value int64) {
	return s.ImportID
}

// Decode implements bin.Decoder.
func (s *MessagesStartHistoryImportRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode messages.startHistoryImport#b43df344 to nil")
	}
	if err := b.ConsumeID(MessagesStartHistoryImportRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.startHistoryImport#b43df344: %w", err)
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.startHistoryImport#b43df344: field peer: %w", err)
		}
		s.Peer = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode messages.startHistoryImport#b43df344: field import_id: %w", err)
		}
		s.ImportID = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesStartHistoryImportRequest.
var (
	_ bin.Encoder = &MessagesStartHistoryImportRequest{}
	_ bin.Decoder = &MessagesStartHistoryImportRequest{}
)

// MessagesStartHistoryImport invokes method messages.startHistoryImport#b43df344 returning error if any.
//
// See https://core.telegram.org/method/messages.startHistoryImport for reference.
func (c *Client) MessagesStartHistoryImport(ctx context.Context, request *MessagesStartHistoryImportRequest) (bool, error) {
	var result BoolBox

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
