// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// ChatParticipant represents TL type `chatParticipant#c8d7493e`.
type ChatParticipant struct {
	// UserID field of ChatParticipant.
	UserID int
	// InviterID field of ChatParticipant.
	InviterID int
	// Date field of ChatParticipant.
	Date int
}

// ChatParticipantTypeID is TL type id of ChatParticipant.
const ChatParticipantTypeID = 0xc8d7493e

// Encode implements bin.Encoder.
func (c *ChatParticipant) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatParticipant#c8d7493e as nil")
	}
	b.PutID(ChatParticipantTypeID)
	b.PutInt(c.UserID)
	b.PutInt(c.InviterID)
	b.PutInt(c.Date)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatParticipant) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatParticipant#c8d7493e to nil")
	}
	if err := b.ConsumeID(ChatParticipantTypeID); err != nil {
		return fmt.Errorf("unable to decode chatParticipant#c8d7493e: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode chatParticipant#c8d7493e: field user_id: %w", err)
		}
		c.UserID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode chatParticipant#c8d7493e: field inviter_id: %w", err)
		}
		c.InviterID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode chatParticipant#c8d7493e: field date: %w", err)
		}
		c.Date = value
	}
	return nil
}

// construct implements constructor of ChatParticipantClass.
func (c ChatParticipant) construct() ChatParticipantClass { return &c }

// Ensuring interfaces in compile-time for ChatParticipant.
var (
	_ bin.Encoder = &ChatParticipant{}
	_ bin.Decoder = &ChatParticipant{}

	_ ChatParticipantClass = &ChatParticipant{}
)

// ChatParticipantCreator represents TL type `chatParticipantCreator#da13538a`.
type ChatParticipantCreator struct {
	// UserID field of ChatParticipantCreator.
	UserID int
}

// ChatParticipantCreatorTypeID is TL type id of ChatParticipantCreator.
const ChatParticipantCreatorTypeID = 0xda13538a

// Encode implements bin.Encoder.
func (c *ChatParticipantCreator) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatParticipantCreator#da13538a as nil")
	}
	b.PutID(ChatParticipantCreatorTypeID)
	b.PutInt(c.UserID)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatParticipantCreator) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatParticipantCreator#da13538a to nil")
	}
	if err := b.ConsumeID(ChatParticipantCreatorTypeID); err != nil {
		return fmt.Errorf("unable to decode chatParticipantCreator#da13538a: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode chatParticipantCreator#da13538a: field user_id: %w", err)
		}
		c.UserID = value
	}
	return nil
}

// construct implements constructor of ChatParticipantClass.
func (c ChatParticipantCreator) construct() ChatParticipantClass { return &c }

// Ensuring interfaces in compile-time for ChatParticipantCreator.
var (
	_ bin.Encoder = &ChatParticipantCreator{}
	_ bin.Decoder = &ChatParticipantCreator{}

	_ ChatParticipantClass = &ChatParticipantCreator{}
)

// ChatParticipantAdmin represents TL type `chatParticipantAdmin#e2d6e436`.
type ChatParticipantAdmin struct {
	// UserID field of ChatParticipantAdmin.
	UserID int
	// InviterID field of ChatParticipantAdmin.
	InviterID int
	// Date field of ChatParticipantAdmin.
	Date int
}

// ChatParticipantAdminTypeID is TL type id of ChatParticipantAdmin.
const ChatParticipantAdminTypeID = 0xe2d6e436

// Encode implements bin.Encoder.
func (c *ChatParticipantAdmin) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatParticipantAdmin#e2d6e436 as nil")
	}
	b.PutID(ChatParticipantAdminTypeID)
	b.PutInt(c.UserID)
	b.PutInt(c.InviterID)
	b.PutInt(c.Date)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatParticipantAdmin) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatParticipantAdmin#e2d6e436 to nil")
	}
	if err := b.ConsumeID(ChatParticipantAdminTypeID); err != nil {
		return fmt.Errorf("unable to decode chatParticipantAdmin#e2d6e436: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode chatParticipantAdmin#e2d6e436: field user_id: %w", err)
		}
		c.UserID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode chatParticipantAdmin#e2d6e436: field inviter_id: %w", err)
		}
		c.InviterID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode chatParticipantAdmin#e2d6e436: field date: %w", err)
		}
		c.Date = value
	}
	return nil
}

// construct implements constructor of ChatParticipantClass.
func (c ChatParticipantAdmin) construct() ChatParticipantClass { return &c }

// Ensuring interfaces in compile-time for ChatParticipantAdmin.
var (
	_ bin.Encoder = &ChatParticipantAdmin{}
	_ bin.Decoder = &ChatParticipantAdmin{}

	_ ChatParticipantClass = &ChatParticipantAdmin{}
)

// ChatParticipantClass represents ChatParticipant generic type.
//
// Example:
//  g, err := DecodeChatParticipant(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *ChatParticipant: // chatParticipant#c8d7493e
//  case *ChatParticipantCreator: // chatParticipantCreator#da13538a
//  case *ChatParticipantAdmin: // chatParticipantAdmin#e2d6e436
//  default: panic(v)
//  }
type ChatParticipantClass interface {
	bin.Encoder
	bin.Decoder
	construct() ChatParticipantClass
}

// DecodeChatParticipant implements binary de-serialization for ChatParticipantClass.
func DecodeChatParticipant(buf *bin.Buffer) (ChatParticipantClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case ChatParticipantTypeID:
		// Decoding chatParticipant#c8d7493e.
		v := ChatParticipant{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatParticipantClass: %w", err)
		}
		return &v, nil
	case ChatParticipantCreatorTypeID:
		// Decoding chatParticipantCreator#da13538a.
		v := ChatParticipantCreator{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatParticipantClass: %w", err)
		}
		return &v, nil
	case ChatParticipantAdminTypeID:
		// Decoding chatParticipantAdmin#e2d6e436.
		v := ChatParticipantAdmin{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatParticipantClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode ChatParticipantClass: %w", bin.NewUnexpectedID(id))
	}
}

// ChatParticipant boxes the ChatParticipantClass providing a helper.
type ChatParticipantBox struct {
	ChatParticipant ChatParticipantClass
}

// Decode implements bin.Decoder for ChatParticipantBox.
func (b *ChatParticipantBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode ChatParticipantBox to nil")
	}
	v, err := DecodeChatParticipant(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.ChatParticipant = v
	return nil
}

// Encode implements bin.Encode for ChatParticipantBox.
func (b *ChatParticipantBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.ChatParticipant == nil {
		return fmt.Errorf("unable to encode ChatParticipantClass as nil")
	}
	return b.ChatParticipant.Encode(buf)
}
