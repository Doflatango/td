// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// AccountGetTmpPasswordRequest represents TL type `account.getTmpPassword#449e0b51`.
type AccountGetTmpPasswordRequest struct {
	// Password field of AccountGetTmpPasswordRequest.
	Password InputCheckPasswordSRPClass
	// Period field of AccountGetTmpPasswordRequest.
	Period int
}

// AccountGetTmpPasswordRequestTypeID is TL type id of AccountGetTmpPasswordRequest.
const AccountGetTmpPasswordRequestTypeID = 0x449e0b51

// Encode implements bin.Encoder.
func (g *AccountGetTmpPasswordRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode account.getTmpPassword#449e0b51 as nil")
	}
	b.PutID(AccountGetTmpPasswordRequestTypeID)
	if g.Password == nil {
		return fmt.Errorf("unable to encode account.getTmpPassword#449e0b51: field password is nil")
	}
	if err := g.Password.Encode(b); err != nil {
		return fmt.Errorf("unable to encode account.getTmpPassword#449e0b51: field password: %w", err)
	}
	b.PutInt(g.Period)
	return nil
}

// Decode implements bin.Decoder.
func (g *AccountGetTmpPasswordRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode account.getTmpPassword#449e0b51 to nil")
	}
	if err := b.ConsumeID(AccountGetTmpPasswordRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode account.getTmpPassword#449e0b51: %w", err)
	}
	{
		value, err := DecodeInputCheckPasswordSRP(b)
		if err != nil {
			return fmt.Errorf("unable to decode account.getTmpPassword#449e0b51: field password: %w", err)
		}
		g.Password = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode account.getTmpPassword#449e0b51: field period: %w", err)
		}
		g.Period = value
	}
	return nil
}

// Ensuring interfaces in compile-time for AccountGetTmpPasswordRequest.
var (
	_ bin.Encoder = &AccountGetTmpPasswordRequest{}
	_ bin.Decoder = &AccountGetTmpPasswordRequest{}
)
