// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// ChannelAdminLogEventsFilter represents TL type `channelAdminLogEventsFilter#ea107ae4`.
// Filter only certain admin log events
//
// See https://core.telegram.org/constructor/channelAdminLogEventsFilter for reference.
type ChannelAdminLogEventsFilter struct {
	// Flags, see TL conditional fields¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// Join events¹
	//
	// Links:
	//  1) https://core.telegram.org/constructor/channelAdminLogEventActionParticipantJoin
	Join bool
	// Leave events¹
	//
	// Links:
	//  1) https://core.telegram.org/constructor/channelAdminLogEventActionParticipantLeave
	Leave bool
	// Invite events¹
	//
	// Links:
	//  1) https://core.telegram.org/constructor/channelAdminLogEventActionParticipantInvite
	Invite bool
	// Ban events¹
	//
	// Links:
	//  1) https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan
	Ban bool
	// Unban events¹
	//
	// Links:
	//  1) https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan
	Unban bool
	// Kick events¹
	//
	// Links:
	//  1) https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan
	Kick bool
	// Unkick events¹
	//
	// Links:
	//  1) https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan
	Unkick bool
	// Admin promotion events¹
	//
	// Links:
	//  1) https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleAdmin
	Promote bool
	// Admin demotion events¹
	//
	// Links:
	//  1) https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleAdmin
	Demote bool
	// Info change events (when about¹, linked chat², location³, photo⁴, stickerset⁵, title⁶ or username⁷ data of a channel gets modified)
	//
	// Links:
	//  1) https://core.telegram.org/constructor/channelAdminLogEventActionChangeAbout
	//  2) https://core.telegram.org/constructor/channelAdminLogEventActionChangeLinkedChat
	//  3) https://core.telegram.org/constructor/channelAdminLogEventActionChangeLocation
	//  4) https://core.telegram.org/constructor/channelAdminLogEventActionChangePhoto
	//  5) https://core.telegram.org/constructor/channelAdminLogEventActionChangeStickerSet
	//  6) https://core.telegram.org/constructor/channelAdminLogEventActionChangeTitle
	//  7) https://core.telegram.org/constructor/channelAdminLogEventActionChangeUsername
	Info bool
	// Settings change events (invites¹, hidden prehistory², signatures³, default banned rights⁴)
	//
	// Links:
	//  1) https://core.telegram.org/constructor/channelAdminLogEventActionToggleInvites
	//  2) https://core.telegram.org/constructor/channelAdminLogEventActionTogglePreHistoryHidden
	//  3) https://core.telegram.org/constructor/channelAdminLogEventActionToggleSignatures
	//  4) https://core.telegram.org/constructor/channelAdminLogEventActionDefaultBannedRights
	Settings bool
	// Message pin events¹
	//
	// Links:
	//  1) https://core.telegram.org/constructor/channelAdminLogEventActionUpdatePinned
	Pinned bool
	// Message edit events¹
	//
	// Links:
	//  1) https://core.telegram.org/constructor/channelAdminLogEventActionEditMessage
	Edit bool
	// Message deletion events¹
	//
	// Links:
	//  1) https://core.telegram.org/constructor/channelAdminLogEventActionDeleteMessage
	Delete bool
	// GroupCall field of ChannelAdminLogEventsFilter.
	GroupCall bool
}

// ChannelAdminLogEventsFilterTypeID is TL type id of ChannelAdminLogEventsFilter.
const ChannelAdminLogEventsFilterTypeID = 0xea107ae4

// String implements fmt.Stringer.
func (c *ChannelAdminLogEventsFilter) String() string {
	if c == nil {
		return "ChannelAdminLogEventsFilter(nil)"
	}
	var sb strings.Builder
	sb.WriteString("ChannelAdminLogEventsFilter")
	sb.WriteString("{\n")
	sb.WriteString("\tFlags: ")
	sb.WriteString(c.Flags.String())
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (c *ChannelAdminLogEventsFilter) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelAdminLogEventsFilter#ea107ae4 as nil")
	}
	b.PutID(ChannelAdminLogEventsFilterTypeID)
	if err := c.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channelAdminLogEventsFilter#ea107ae4: field flags: %w", err)
	}
	return nil
}

// SetJoin sets value of Join conditional field.
func (c *ChannelAdminLogEventsFilter) SetJoin(value bool) {
	if value {
		c.Flags.Set(0)
		c.Join = true
	} else {
		c.Flags.Unset(0)
		c.Join = false
	}
}

// SetLeave sets value of Leave conditional field.
func (c *ChannelAdminLogEventsFilter) SetLeave(value bool) {
	if value {
		c.Flags.Set(1)
		c.Leave = true
	} else {
		c.Flags.Unset(1)
		c.Leave = false
	}
}

// SetInvite sets value of Invite conditional field.
func (c *ChannelAdminLogEventsFilter) SetInvite(value bool) {
	if value {
		c.Flags.Set(2)
		c.Invite = true
	} else {
		c.Flags.Unset(2)
		c.Invite = false
	}
}

// SetBan sets value of Ban conditional field.
func (c *ChannelAdminLogEventsFilter) SetBan(value bool) {
	if value {
		c.Flags.Set(3)
		c.Ban = true
	} else {
		c.Flags.Unset(3)
		c.Ban = false
	}
}

// SetUnban sets value of Unban conditional field.
func (c *ChannelAdminLogEventsFilter) SetUnban(value bool) {
	if value {
		c.Flags.Set(4)
		c.Unban = true
	} else {
		c.Flags.Unset(4)
		c.Unban = false
	}
}

// SetKick sets value of Kick conditional field.
func (c *ChannelAdminLogEventsFilter) SetKick(value bool) {
	if value {
		c.Flags.Set(5)
		c.Kick = true
	} else {
		c.Flags.Unset(5)
		c.Kick = false
	}
}

// SetUnkick sets value of Unkick conditional field.
func (c *ChannelAdminLogEventsFilter) SetUnkick(value bool) {
	if value {
		c.Flags.Set(6)
		c.Unkick = true
	} else {
		c.Flags.Unset(6)
		c.Unkick = false
	}
}

// SetPromote sets value of Promote conditional field.
func (c *ChannelAdminLogEventsFilter) SetPromote(value bool) {
	if value {
		c.Flags.Set(7)
		c.Promote = true
	} else {
		c.Flags.Unset(7)
		c.Promote = false
	}
}

// SetDemote sets value of Demote conditional field.
func (c *ChannelAdminLogEventsFilter) SetDemote(value bool) {
	if value {
		c.Flags.Set(8)
		c.Demote = true
	} else {
		c.Flags.Unset(8)
		c.Demote = false
	}
}

// SetInfo sets value of Info conditional field.
func (c *ChannelAdminLogEventsFilter) SetInfo(value bool) {
	if value {
		c.Flags.Set(9)
		c.Info = true
	} else {
		c.Flags.Unset(9)
		c.Info = false
	}
}

// SetSettings sets value of Settings conditional field.
func (c *ChannelAdminLogEventsFilter) SetSettings(value bool) {
	if value {
		c.Flags.Set(10)
		c.Settings = true
	} else {
		c.Flags.Unset(10)
		c.Settings = false
	}
}

// SetPinned sets value of Pinned conditional field.
func (c *ChannelAdminLogEventsFilter) SetPinned(value bool) {
	if value {
		c.Flags.Set(11)
		c.Pinned = true
	} else {
		c.Flags.Unset(11)
		c.Pinned = false
	}
}

// SetEdit sets value of Edit conditional field.
func (c *ChannelAdminLogEventsFilter) SetEdit(value bool) {
	if value {
		c.Flags.Set(12)
		c.Edit = true
	} else {
		c.Flags.Unset(12)
		c.Edit = false
	}
}

// SetDelete sets value of Delete conditional field.
func (c *ChannelAdminLogEventsFilter) SetDelete(value bool) {
	if value {
		c.Flags.Set(13)
		c.Delete = true
	} else {
		c.Flags.Unset(13)
		c.Delete = false
	}
}

// SetGroupCall sets value of GroupCall conditional field.
func (c *ChannelAdminLogEventsFilter) SetGroupCall(value bool) {
	if value {
		c.Flags.Set(14)
		c.GroupCall = true
	} else {
		c.Flags.Unset(14)
		c.GroupCall = false
	}
}

// Decode implements bin.Decoder.
func (c *ChannelAdminLogEventsFilter) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelAdminLogEventsFilter#ea107ae4 to nil")
	}
	if err := b.ConsumeID(ChannelAdminLogEventsFilterTypeID); err != nil {
		return fmt.Errorf("unable to decode channelAdminLogEventsFilter#ea107ae4: %w", err)
	}
	{
		if err := c.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode channelAdminLogEventsFilter#ea107ae4: field flags: %w", err)
		}
	}
	c.Join = c.Flags.Has(0)
	c.Leave = c.Flags.Has(1)
	c.Invite = c.Flags.Has(2)
	c.Ban = c.Flags.Has(3)
	c.Unban = c.Flags.Has(4)
	c.Kick = c.Flags.Has(5)
	c.Unkick = c.Flags.Has(6)
	c.Promote = c.Flags.Has(7)
	c.Demote = c.Flags.Has(8)
	c.Info = c.Flags.Has(9)
	c.Settings = c.Flags.Has(10)
	c.Pinned = c.Flags.Has(11)
	c.Edit = c.Flags.Has(12)
	c.Delete = c.Flags.Has(13)
	c.GroupCall = c.Flags.Has(14)
	return nil
}

// Ensuring interfaces in compile-time for ChannelAdminLogEventsFilter.
var (
	_ bin.Encoder = &ChannelAdminLogEventsFilter{}
	_ bin.Decoder = &ChannelAdminLogEventsFilter{}
)
