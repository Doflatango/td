// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// ChannelsChannelParticipants represents TL type `channels.channelParticipants#f56ee2a8`.
// Represents multiple channel participants
//
// See https://core.telegram.org/constructor/channels.channelParticipants for reference.
type ChannelsChannelParticipants struct {
	// Total number of participants that correspond to the given query
	Count int `schemaname:"count"`
	// Participants
	Participants []ChannelParticipantClass `schemaname:"participants"`
	// Users mentioned in participant info
	Users []UserClass `schemaname:"users"`
}

// ChannelsChannelParticipantsTypeID is TL type id of ChannelsChannelParticipants.
const ChannelsChannelParticipantsTypeID = 0xf56ee2a8

func (c *ChannelsChannelParticipants) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Count == 0) {
		return false
	}
	if !(c.Participants == nil) {
		return false
	}
	if !(c.Users == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelsChannelParticipants) String() string {
	if c == nil {
		return "ChannelsChannelParticipants(nil)"
	}
	type Alias ChannelsChannelParticipants
	return fmt.Sprintf("ChannelsChannelParticipants%+v", Alias(*c))
}

// FillFrom fills ChannelsChannelParticipants from given interface.
func (c *ChannelsChannelParticipants) FillFrom(from interface {
	GetCount() (value int)
	GetParticipants() (value []ChannelParticipantClass)
	GetUsers() (value []UserClass)
}) {
	c.Count = from.GetCount()
	c.Participants = from.GetParticipants()
	c.Users = from.GetUsers()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelsChannelParticipants) TypeID() uint32 {
	return ChannelsChannelParticipantsTypeID
}

// SchemaName returns MTProto type name.
func (c *ChannelsChannelParticipants) SchemaName() string {
	return "channels.channelParticipants"
}

// Encode implements bin.Encoder.
func (c *ChannelsChannelParticipants) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channels.channelParticipants#f56ee2a8 as nil")
	}
	b.PutID(ChannelsChannelParticipantsTypeID)
	b.PutInt(c.Count)
	b.PutVectorHeader(len(c.Participants))
	for idx, v := range c.Participants {
		if v == nil {
			return fmt.Errorf("unable to encode channels.channelParticipants#f56ee2a8: field participants element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode channels.channelParticipants#f56ee2a8: field participants element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(c.Users))
	for idx, v := range c.Users {
		if v == nil {
			return fmt.Errorf("unable to encode channels.channelParticipants#f56ee2a8: field users element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode channels.channelParticipants#f56ee2a8: field users element with index %d: %w", idx, err)
		}
	}
	return nil
}

// GetCount returns value of Count field.
func (c *ChannelsChannelParticipants) GetCount() (value int) {
	return c.Count
}

// GetParticipants returns value of Participants field.
func (c *ChannelsChannelParticipants) GetParticipants() (value []ChannelParticipantClass) {
	return c.Participants
}

// MapParticipants returns field Participants wrapped in ChannelParticipantClassSlice helper.
func (c *ChannelsChannelParticipants) MapParticipants() (value ChannelParticipantClassSlice) {
	return ChannelParticipantClassSlice(c.Participants)
}

// GetUsers returns value of Users field.
func (c *ChannelsChannelParticipants) GetUsers() (value []UserClass) {
	return c.Users
}

// MapUsers returns field Users wrapped in UserClassSlice helper.
func (c *ChannelsChannelParticipants) MapUsers() (value UserClassSlice) {
	return UserClassSlice(c.Users)
}

// Decode implements bin.Decoder.
func (c *ChannelsChannelParticipants) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channels.channelParticipants#f56ee2a8 to nil")
	}
	if err := b.ConsumeID(ChannelsChannelParticipantsTypeID); err != nil {
		return fmt.Errorf("unable to decode channels.channelParticipants#f56ee2a8: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channels.channelParticipants#f56ee2a8: field count: %w", err)
		}
		c.Count = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode channels.channelParticipants#f56ee2a8: field participants: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeChannelParticipant(b)
			if err != nil {
				return fmt.Errorf("unable to decode channels.channelParticipants#f56ee2a8: field participants: %w", err)
			}
			c.Participants = append(c.Participants, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode channels.channelParticipants#f56ee2a8: field users: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(b)
			if err != nil {
				return fmt.Errorf("unable to decode channels.channelParticipants#f56ee2a8: field users: %w", err)
			}
			c.Users = append(c.Users, value)
		}
	}
	return nil
}

// construct implements constructor of ChannelsChannelParticipantsClass.
func (c ChannelsChannelParticipants) construct() ChannelsChannelParticipantsClass { return &c }

// Ensuring interfaces in compile-time for ChannelsChannelParticipants.
var (
	_ bin.Encoder = &ChannelsChannelParticipants{}
	_ bin.Decoder = &ChannelsChannelParticipants{}

	_ ChannelsChannelParticipantsClass = &ChannelsChannelParticipants{}
)

// ChannelsChannelParticipantsNotModified represents TL type `channels.channelParticipantsNotModified#f0173fe9`.
// No new participant info could be found
//
// See https://core.telegram.org/constructor/channels.channelParticipantsNotModified for reference.
type ChannelsChannelParticipantsNotModified struct {
}

// ChannelsChannelParticipantsNotModifiedTypeID is TL type id of ChannelsChannelParticipantsNotModified.
const ChannelsChannelParticipantsNotModifiedTypeID = 0xf0173fe9

func (c *ChannelsChannelParticipantsNotModified) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelsChannelParticipantsNotModified) String() string {
	if c == nil {
		return "ChannelsChannelParticipantsNotModified(nil)"
	}
	type Alias ChannelsChannelParticipantsNotModified
	return fmt.Sprintf("ChannelsChannelParticipantsNotModified%+v", Alias(*c))
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (c *ChannelsChannelParticipantsNotModified) TypeID() uint32 {
	return ChannelsChannelParticipantsNotModifiedTypeID
}

// SchemaName returns MTProto type name.
func (c *ChannelsChannelParticipantsNotModified) SchemaName() string {
	return "channels.channelParticipantsNotModified"
}

// Encode implements bin.Encoder.
func (c *ChannelsChannelParticipantsNotModified) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channels.channelParticipantsNotModified#f0173fe9 as nil")
	}
	b.PutID(ChannelsChannelParticipantsNotModifiedTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelsChannelParticipantsNotModified) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channels.channelParticipantsNotModified#f0173fe9 to nil")
	}
	if err := b.ConsumeID(ChannelsChannelParticipantsNotModifiedTypeID); err != nil {
		return fmt.Errorf("unable to decode channels.channelParticipantsNotModified#f0173fe9: %w", err)
	}
	return nil
}

// construct implements constructor of ChannelsChannelParticipantsClass.
func (c ChannelsChannelParticipantsNotModified) construct() ChannelsChannelParticipantsClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelsChannelParticipantsNotModified.
var (
	_ bin.Encoder = &ChannelsChannelParticipantsNotModified{}
	_ bin.Decoder = &ChannelsChannelParticipantsNotModified{}

	_ ChannelsChannelParticipantsClass = &ChannelsChannelParticipantsNotModified{}
)

// ChannelsChannelParticipantsClass represents channels.ChannelParticipants generic type.
//
// See https://core.telegram.org/type/channels.ChannelParticipants for reference.
//
// Example:
//  g, err := tg.DecodeChannelsChannelParticipants(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *tg.ChannelsChannelParticipants: // channels.channelParticipants#f56ee2a8
//  case *tg.ChannelsChannelParticipantsNotModified: // channels.channelParticipantsNotModified#f0173fe9
//  default: panic(v)
//  }
type ChannelsChannelParticipantsClass interface {
	bin.Encoder
	bin.Decoder
	construct() ChannelsChannelParticipantsClass

	// TypeID returns MTProto type id (CRC code).
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// SchemaName returns MTProto type name.
	SchemaName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	// AsModified tries to map ChannelsChannelParticipantsClass to ChannelsChannelParticipants.
	AsModified() (*ChannelsChannelParticipants, bool)
}

// AsModified tries to map ChannelsChannelParticipants to ChannelsChannelParticipants.
func (c *ChannelsChannelParticipants) AsModified() (*ChannelsChannelParticipants, bool) {
	return c, true
}

// AsModified tries to map ChannelsChannelParticipantsNotModified to ChannelsChannelParticipants.
func (c *ChannelsChannelParticipantsNotModified) AsModified() (*ChannelsChannelParticipants, bool) {
	return nil, false
}

// DecodeChannelsChannelParticipants implements binary de-serialization for ChannelsChannelParticipantsClass.
func DecodeChannelsChannelParticipants(buf *bin.Buffer) (ChannelsChannelParticipantsClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case ChannelsChannelParticipantsTypeID:
		// Decoding channels.channelParticipants#f56ee2a8.
		v := ChannelsChannelParticipants{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelsChannelParticipantsClass: %w", err)
		}
		return &v, nil
	case ChannelsChannelParticipantsNotModifiedTypeID:
		// Decoding channels.channelParticipantsNotModified#f0173fe9.
		v := ChannelsChannelParticipantsNotModified{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelsChannelParticipantsClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode ChannelsChannelParticipantsClass: %w", bin.NewUnexpectedID(id))
	}
}

// ChannelsChannelParticipants boxes the ChannelsChannelParticipantsClass providing a helper.
type ChannelsChannelParticipantsBox struct {
	ChannelParticipants ChannelsChannelParticipantsClass
}

// Decode implements bin.Decoder for ChannelsChannelParticipantsBox.
func (b *ChannelsChannelParticipantsBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode ChannelsChannelParticipantsBox to nil")
	}
	v, err := DecodeChannelsChannelParticipants(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.ChannelParticipants = v
	return nil
}

// Encode implements bin.Encode for ChannelsChannelParticipantsBox.
func (b *ChannelsChannelParticipantsBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.ChannelParticipants == nil {
		return fmt.Errorf("unable to encode ChannelsChannelParticipantsClass as nil")
	}
	return b.ChannelParticipants.Encode(buf)
}

// ChannelsChannelParticipantsClassSlice is adapter for slice of ChannelsChannelParticipantsClass.
type ChannelsChannelParticipantsClassSlice []ChannelsChannelParticipantsClass

// AppendOnlyModified appends only Modified constructors to
// given slice.
func (s ChannelsChannelParticipantsClassSlice) AppendOnlyModified(to []*ChannelsChannelParticipants) []*ChannelsChannelParticipants {
	for _, elem := range s {
		value, ok := elem.AsModified()
		if !ok {
			continue
		}
		to = append(to, value)
	}

	return to
}

// AsModified returns copy with only Modified constructors.
func (s ChannelsChannelParticipantsClassSlice) AsModified() (to []*ChannelsChannelParticipants) {
	return s.AppendOnlyModified(to)
}

// FirstAsModified returns first element of slice (if exists).
func (s ChannelsChannelParticipantsClassSlice) FirstAsModified() (v *ChannelsChannelParticipants, ok bool) {
	value, ok := s.First()
	if !ok {
		return
	}
	return value.AsModified()
}

// LastAsModified returns last element of slice (if exists).
func (s ChannelsChannelParticipantsClassSlice) LastAsModified() (v *ChannelsChannelParticipants, ok bool) {
	value, ok := s.Last()
	if !ok {
		return
	}
	return value.AsModified()
}

// PopFirstAsModified returns element of slice (if exists).
func (s *ChannelsChannelParticipantsClassSlice) PopFirstAsModified() (v *ChannelsChannelParticipants, ok bool) {
	value, ok := s.PopFirst()
	if !ok {
		return
	}
	return value.AsModified()
}

// PopAsModified returns element of slice (if exists).
func (s *ChannelsChannelParticipantsClassSlice) PopAsModified() (v *ChannelsChannelParticipants, ok bool) {
	value, ok := s.Pop()
	if !ok {
		return
	}
	return value.AsModified()
}

// First returns first element of slice (if exists).
func (s ChannelsChannelParticipantsClassSlice) First() (v ChannelsChannelParticipantsClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s ChannelsChannelParticipantsClassSlice) Last() (v ChannelsChannelParticipantsClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *ChannelsChannelParticipantsClassSlice) PopFirst() (v ChannelsChannelParticipantsClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	a[len(a)-1] = nil
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *ChannelsChannelParticipantsClassSlice) Pop() (v ChannelsChannelParticipantsClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
