// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// ChannelsChannelParticipants represents TL type `channels.channelParticipants#f56ee2a8`.
// Represents multiple channel participants
//
// See https://core.telegram.org/constructor/channels.channelParticipants for reference.
type ChannelsChannelParticipants struct {
	// Total number of participants that correspond to the given query
	Count int
	// Participants
	Participants []ChannelParticipantClass
	// Users mentioned in participant info
	Users []UserClass
}

// ChannelsChannelParticipantsTypeID is TL type id of ChannelsChannelParticipants.
const ChannelsChannelParticipantsTypeID = 0xf56ee2a8

// String implements fmt.Stringer.
func (c *ChannelsChannelParticipants) String() string {
	if c == nil {
		return "ChannelsChannelParticipants(nil)"
	}
	var sb strings.Builder
	sb.WriteString("ChannelsChannelParticipants")
	sb.WriteString("{\n")
	sb.WriteString("\tCount: ")
	sb.WriteString(fmt.Sprint(c.Count))
	sb.WriteString(",\n")
	sb.WriteByte('[')
	for _, v := range c.Participants {
		sb.WriteString(fmt.Sprint(v))
	}
	sb.WriteByte(']')
	sb.WriteByte('[')
	for _, v := range c.Users {
		sb.WriteString(fmt.Sprint(v))
	}
	sb.WriteByte(']')
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (c *ChannelsChannelParticipants) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channels.channelParticipants#f56ee2a8 as nil")
	}
	b.PutID(ChannelsChannelParticipantsTypeID)
	b.PutInt(c.Count)
	b.PutVectorHeader(len(c.Participants))
	for idx, v := range c.Participants {
		if v == nil {
			return fmt.Errorf("unable to encode channels.channelParticipants#f56ee2a8: field participants element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode channels.channelParticipants#f56ee2a8: field participants element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(c.Users))
	for idx, v := range c.Users {
		if v == nil {
			return fmt.Errorf("unable to encode channels.channelParticipants#f56ee2a8: field users element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode channels.channelParticipants#f56ee2a8: field users element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelsChannelParticipants) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channels.channelParticipants#f56ee2a8 to nil")
	}
	if err := b.ConsumeID(ChannelsChannelParticipantsTypeID); err != nil {
		return fmt.Errorf("unable to decode channels.channelParticipants#f56ee2a8: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channels.channelParticipants#f56ee2a8: field count: %w", err)
		}
		c.Count = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode channels.channelParticipants#f56ee2a8: field participants: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeChannelParticipant(b)
			if err != nil {
				return fmt.Errorf("unable to decode channels.channelParticipants#f56ee2a8: field participants: %w", err)
			}
			c.Participants = append(c.Participants, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode channels.channelParticipants#f56ee2a8: field users: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(b)
			if err != nil {
				return fmt.Errorf("unable to decode channels.channelParticipants#f56ee2a8: field users: %w", err)
			}
			c.Users = append(c.Users, value)
		}
	}
	return nil
}

// construct implements constructor of ChannelsChannelParticipantsClass.
func (c ChannelsChannelParticipants) construct() ChannelsChannelParticipantsClass { return &c }

// Ensuring interfaces in compile-time for ChannelsChannelParticipants.
var (
	_ bin.Encoder = &ChannelsChannelParticipants{}
	_ bin.Decoder = &ChannelsChannelParticipants{}

	_ ChannelsChannelParticipantsClass = &ChannelsChannelParticipants{}
)

// ChannelsChannelParticipantsNotModified represents TL type `channels.channelParticipantsNotModified#f0173fe9`.
// No new participant info could be found
//
// See https://core.telegram.org/constructor/channels.channelParticipantsNotModified for reference.
type ChannelsChannelParticipantsNotModified struct {
}

// ChannelsChannelParticipantsNotModifiedTypeID is TL type id of ChannelsChannelParticipantsNotModified.
const ChannelsChannelParticipantsNotModifiedTypeID = 0xf0173fe9

// String implements fmt.Stringer.
func (c *ChannelsChannelParticipantsNotModified) String() string {
	if c == nil {
		return "ChannelsChannelParticipantsNotModified(nil)"
	}
	var sb strings.Builder
	sb.WriteString("ChannelsChannelParticipantsNotModified")
	sb.WriteString("{\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (c *ChannelsChannelParticipantsNotModified) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channels.channelParticipantsNotModified#f0173fe9 as nil")
	}
	b.PutID(ChannelsChannelParticipantsNotModifiedTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelsChannelParticipantsNotModified) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channels.channelParticipantsNotModified#f0173fe9 to nil")
	}
	if err := b.ConsumeID(ChannelsChannelParticipantsNotModifiedTypeID); err != nil {
		return fmt.Errorf("unable to decode channels.channelParticipantsNotModified#f0173fe9: %w", err)
	}
	return nil
}

// construct implements constructor of ChannelsChannelParticipantsClass.
func (c ChannelsChannelParticipantsNotModified) construct() ChannelsChannelParticipantsClass {
	return &c
}

// Ensuring interfaces in compile-time for ChannelsChannelParticipantsNotModified.
var (
	_ bin.Encoder = &ChannelsChannelParticipantsNotModified{}
	_ bin.Decoder = &ChannelsChannelParticipantsNotModified{}

	_ ChannelsChannelParticipantsClass = &ChannelsChannelParticipantsNotModified{}
)

// ChannelsChannelParticipantsClass represents channels.ChannelParticipants generic type.
//
// See https://core.telegram.org/type/channels.ChannelParticipants for reference.
//
// Example:
//  g, err := DecodeChannelsChannelParticipants(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *ChannelsChannelParticipants: // channels.channelParticipants#f56ee2a8
//  case *ChannelsChannelParticipantsNotModified: // channels.channelParticipantsNotModified#f0173fe9
//  default: panic(v)
//  }
type ChannelsChannelParticipantsClass interface {
	bin.Encoder
	bin.Decoder
	construct() ChannelsChannelParticipantsClass
	fmt.Stringer
}

// DecodeChannelsChannelParticipants implements binary de-serialization for ChannelsChannelParticipantsClass.
func DecodeChannelsChannelParticipants(buf *bin.Buffer) (ChannelsChannelParticipantsClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case ChannelsChannelParticipantsTypeID:
		// Decoding channels.channelParticipants#f56ee2a8.
		v := ChannelsChannelParticipants{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelsChannelParticipantsClass: %w", err)
		}
		return &v, nil
	case ChannelsChannelParticipantsNotModifiedTypeID:
		// Decoding channels.channelParticipantsNotModified#f0173fe9.
		v := ChannelsChannelParticipantsNotModified{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelsChannelParticipantsClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode ChannelsChannelParticipantsClass: %w", bin.NewUnexpectedID(id))
	}
}

// ChannelsChannelParticipants boxes the ChannelsChannelParticipantsClass providing a helper.
type ChannelsChannelParticipantsBox struct {
	ChannelParticipants ChannelsChannelParticipantsClass
}

// Decode implements bin.Decoder for ChannelsChannelParticipantsBox.
func (b *ChannelsChannelParticipantsBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode ChannelsChannelParticipantsBox to nil")
	}
	v, err := DecodeChannelsChannelParticipants(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.ChannelParticipants = v
	return nil
}

// Encode implements bin.Encode for ChannelsChannelParticipantsBox.
func (b *ChannelsChannelParticipantsBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.ChannelParticipants == nil {
		return fmt.Errorf("unable to encode ChannelsChannelParticipantsClass as nil")
	}
	return b.ChannelParticipants.Encode(buf)
}
