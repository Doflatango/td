// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// StatsGraphAsync represents TL type `statsGraphAsync#4a27eb2d`.
// This channel statistics graph must be generated asynchronously using stats.loadAsyncGraph to reduce server load
//
// See https://core.telegram.org/constructor/statsGraphAsync for reference.
type StatsGraphAsync struct {
	// Token to use for fetching the async graph
	Token string
}

// StatsGraphAsyncTypeID is TL type id of StatsGraphAsync.
const StatsGraphAsyncTypeID = 0x4a27eb2d

// String implements fmt.Stringer.
func (s *StatsGraphAsync) String() string {
	if s == nil {
		return "StatsGraphAsync(nil)"
	}
	var sb strings.Builder
	sb.WriteString("StatsGraphAsync")
	sb.WriteString("{\n")
	sb.WriteString("\tToken: ")
	sb.WriteString(fmt.Sprint(s.Token))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (s *StatsGraphAsync) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode statsGraphAsync#4a27eb2d as nil")
	}
	b.PutID(StatsGraphAsyncTypeID)
	b.PutString(s.Token)
	return nil
}

// Decode implements bin.Decoder.
func (s *StatsGraphAsync) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode statsGraphAsync#4a27eb2d to nil")
	}
	if err := b.ConsumeID(StatsGraphAsyncTypeID); err != nil {
		return fmt.Errorf("unable to decode statsGraphAsync#4a27eb2d: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode statsGraphAsync#4a27eb2d: field token: %w", err)
		}
		s.Token = value
	}
	return nil
}

// construct implements constructor of StatsGraphClass.
func (s StatsGraphAsync) construct() StatsGraphClass { return &s }

// Ensuring interfaces in compile-time for StatsGraphAsync.
var (
	_ bin.Encoder = &StatsGraphAsync{}
	_ bin.Decoder = &StatsGraphAsync{}

	_ StatsGraphClass = &StatsGraphAsync{}
)

// StatsGraphError represents TL type `statsGraphError#bedc9822`.
// An error occurred while generating the statistics graph
//
// See https://core.telegram.org/constructor/statsGraphError for reference.
type StatsGraphError struct {
	// The error
	Error string
}

// StatsGraphErrorTypeID is TL type id of StatsGraphError.
const StatsGraphErrorTypeID = 0xbedc9822

// String implements fmt.Stringer.
func (s *StatsGraphError) String() string {
	if s == nil {
		return "StatsGraphError(nil)"
	}
	var sb strings.Builder
	sb.WriteString("StatsGraphError")
	sb.WriteString("{\n")
	sb.WriteString("\tError: ")
	sb.WriteString(fmt.Sprint(s.Error))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (s *StatsGraphError) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode statsGraphError#bedc9822 as nil")
	}
	b.PutID(StatsGraphErrorTypeID)
	b.PutString(s.Error)
	return nil
}

// Decode implements bin.Decoder.
func (s *StatsGraphError) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode statsGraphError#bedc9822 to nil")
	}
	if err := b.ConsumeID(StatsGraphErrorTypeID); err != nil {
		return fmt.Errorf("unable to decode statsGraphError#bedc9822: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode statsGraphError#bedc9822: field error: %w", err)
		}
		s.Error = value
	}
	return nil
}

// construct implements constructor of StatsGraphClass.
func (s StatsGraphError) construct() StatsGraphClass { return &s }

// Ensuring interfaces in compile-time for StatsGraphError.
var (
	_ bin.Encoder = &StatsGraphError{}
	_ bin.Decoder = &StatsGraphError{}

	_ StatsGraphClass = &StatsGraphError{}
)

// StatsGraph represents TL type `statsGraph#8ea464b6`.
// Channel statistics graph
//
// See https://core.telegram.org/constructor/statsGraph for reference.
type StatsGraph struct {
	// Flags, see TL conditional fields
	Flags bin.Fields
	// Statistics data
	JSON DataJSON
	// Zoom token
	//
	// Use SetZoomToken and GetZoomToken helpers.
	ZoomToken string
}

// StatsGraphTypeID is TL type id of StatsGraph.
const StatsGraphTypeID = 0x8ea464b6

// String implements fmt.Stringer.
func (s *StatsGraph) String() string {
	if s == nil {
		return "StatsGraph(nil)"
	}
	var sb strings.Builder
	sb.WriteString("StatsGraph")
	sb.WriteString("{\n")
	sb.WriteString("\tFlags: ")
	sb.WriteString(s.Flags.String())
	sb.WriteString(",\n")
	sb.WriteString("\tJSON: ")
	sb.WriteString(s.JSON.String())
	sb.WriteString(",\n")
	if s.Flags.Has(0) {
		sb.WriteString("\tZoomToken: ")
		sb.WriteString(fmt.Sprint(s.ZoomToken))
		sb.WriteString(",\n")
	}
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (s *StatsGraph) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode statsGraph#8ea464b6 as nil")
	}
	b.PutID(StatsGraphTypeID)
	if err := s.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode statsGraph#8ea464b6: field flags: %w", err)
	}
	if err := s.JSON.Encode(b); err != nil {
		return fmt.Errorf("unable to encode statsGraph#8ea464b6: field json: %w", err)
	}
	if s.Flags.Has(0) {
		b.PutString(s.ZoomToken)
	}
	return nil
}

// SetZoomToken sets value of ZoomToken conditional field.
func (s *StatsGraph) SetZoomToken(value string) {
	s.Flags.Set(0)
	s.ZoomToken = value
}

// GetZoomToken returns value of ZoomToken conditional field and
// boolean which is true if field was set.
func (s *StatsGraph) GetZoomToken() (value string, ok bool) {
	if !s.Flags.Has(0) {
		return value, false
	}
	return s.ZoomToken, true
}

// Decode implements bin.Decoder.
func (s *StatsGraph) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode statsGraph#8ea464b6 to nil")
	}
	if err := b.ConsumeID(StatsGraphTypeID); err != nil {
		return fmt.Errorf("unable to decode statsGraph#8ea464b6: %w", err)
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode statsGraph#8ea464b6: field flags: %w", err)
		}
	}
	{
		if err := s.JSON.Decode(b); err != nil {
			return fmt.Errorf("unable to decode statsGraph#8ea464b6: field json: %w", err)
		}
	}
	if s.Flags.Has(0) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode statsGraph#8ea464b6: field zoom_token: %w", err)
		}
		s.ZoomToken = value
	}
	return nil
}

// construct implements constructor of StatsGraphClass.
func (s StatsGraph) construct() StatsGraphClass { return &s }

// Ensuring interfaces in compile-time for StatsGraph.
var (
	_ bin.Encoder = &StatsGraph{}
	_ bin.Decoder = &StatsGraph{}

	_ StatsGraphClass = &StatsGraph{}
)

// StatsGraphClass represents StatsGraph generic type.
//
// See https://core.telegram.org/type/StatsGraph for reference.
//
// Example:
//  g, err := DecodeStatsGraph(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *StatsGraphAsync: // statsGraphAsync#4a27eb2d
//  case *StatsGraphError: // statsGraphError#bedc9822
//  case *StatsGraph: // statsGraph#8ea464b6
//  default: panic(v)
//  }
type StatsGraphClass interface {
	bin.Encoder
	bin.Decoder
	construct() StatsGraphClass
	fmt.Stringer
}

// DecodeStatsGraph implements binary de-serialization for StatsGraphClass.
func DecodeStatsGraph(buf *bin.Buffer) (StatsGraphClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case StatsGraphAsyncTypeID:
		// Decoding statsGraphAsync#4a27eb2d.
		v := StatsGraphAsync{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StatsGraphClass: %w", err)
		}
		return &v, nil
	case StatsGraphErrorTypeID:
		// Decoding statsGraphError#bedc9822.
		v := StatsGraphError{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StatsGraphClass: %w", err)
		}
		return &v, nil
	case StatsGraphTypeID:
		// Decoding statsGraph#8ea464b6.
		v := StatsGraph{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StatsGraphClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode StatsGraphClass: %w", bin.NewUnexpectedID(id))
	}
}

// StatsGraph boxes the StatsGraphClass providing a helper.
type StatsGraphBox struct {
	StatsGraph StatsGraphClass
}

// Decode implements bin.Decoder for StatsGraphBox.
func (b *StatsGraphBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode StatsGraphBox to nil")
	}
	v, err := DecodeStatsGraph(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.StatsGraph = v
	return nil
}

// Encode implements bin.Encode for StatsGraphBox.
func (b *StatsGraphBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.StatsGraph == nil {
		return fmt.Errorf("unable to encode StatsGraphClass as nil")
	}
	return b.StatsGraph.Encode(buf)
}
