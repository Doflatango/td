// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// HelpSupportName represents TL type `help.supportName#8c05f1c9`.
type HelpSupportName struct {
	// Name field of HelpSupportName.
	Name string
}

// HelpSupportNameTypeID is TL type id of HelpSupportName.
const HelpSupportNameTypeID = 0x8c05f1c9

// Encode implements bin.Encoder.
func (s *HelpSupportName) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode help.supportName#8c05f1c9 as nil")
	}
	b.PutID(HelpSupportNameTypeID)
	b.PutString(s.Name)
	return nil
}

// Decode implements bin.Decoder.
func (s *HelpSupportName) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode help.supportName#8c05f1c9 to nil")
	}
	if err := b.ConsumeID(HelpSupportNameTypeID); err != nil {
		return fmt.Errorf("unable to decode help.supportName#8c05f1c9: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode help.supportName#8c05f1c9: field name: %w", err)
		}
		s.Name = value
	}
	return nil
}

// Ensuring interfaces in compile-time for HelpSupportName.
var (
	_ bin.Encoder = &HelpSupportName{}
	_ bin.Decoder = &HelpSupportName{}
)
