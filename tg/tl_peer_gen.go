// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// PeerUser represents TL type `peerUser#9db1bc6d`.
// Chat partner
//
// See https://core.telegram.org/constructor/peerUser for reference.
type PeerUser struct {
	// User identifier
	UserID int
}

// PeerUserTypeID is TL type id of PeerUser.
const PeerUserTypeID = 0x9db1bc6d

func (p *PeerUser) Zero() bool {
	if p == nil {
		return true
	}
	if !(p.UserID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (p *PeerUser) String() string {
	if p == nil {
		return "PeerUser(nil)"
	}
	var sb strings.Builder
	sb.WriteString("PeerUser")
	sb.WriteString("{\n")
	sb.WriteString("\tUserID: ")
	sb.WriteString(fmt.Sprint(p.UserID))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (p *PeerUser) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode peerUser#9db1bc6d as nil")
	}
	b.PutID(PeerUserTypeID)
	b.PutInt(p.UserID)
	return nil
}

// Decode implements bin.Decoder.
func (p *PeerUser) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode peerUser#9db1bc6d to nil")
	}
	if err := b.ConsumeID(PeerUserTypeID); err != nil {
		return fmt.Errorf("unable to decode peerUser#9db1bc6d: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode peerUser#9db1bc6d: field user_id: %w", err)
		}
		p.UserID = value
	}
	return nil
}

// construct implements constructor of PeerClass.
func (p PeerUser) construct() PeerClass { return &p }

// Ensuring interfaces in compile-time for PeerUser.
var (
	_ bin.Encoder = &PeerUser{}
	_ bin.Decoder = &PeerUser{}

	_ PeerClass = &PeerUser{}
)

// PeerChat represents TL type `peerChat#bad0e5bb`.
// Group.
//
// See https://core.telegram.org/constructor/peerChat for reference.
type PeerChat struct {
	// Group identifier
	ChatID int
}

// PeerChatTypeID is TL type id of PeerChat.
const PeerChatTypeID = 0xbad0e5bb

func (p *PeerChat) Zero() bool {
	if p == nil {
		return true
	}
	if !(p.ChatID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (p *PeerChat) String() string {
	if p == nil {
		return "PeerChat(nil)"
	}
	var sb strings.Builder
	sb.WriteString("PeerChat")
	sb.WriteString("{\n")
	sb.WriteString("\tChatID: ")
	sb.WriteString(fmt.Sprint(p.ChatID))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (p *PeerChat) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode peerChat#bad0e5bb as nil")
	}
	b.PutID(PeerChatTypeID)
	b.PutInt(p.ChatID)
	return nil
}

// Decode implements bin.Decoder.
func (p *PeerChat) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode peerChat#bad0e5bb to nil")
	}
	if err := b.ConsumeID(PeerChatTypeID); err != nil {
		return fmt.Errorf("unable to decode peerChat#bad0e5bb: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode peerChat#bad0e5bb: field chat_id: %w", err)
		}
		p.ChatID = value
	}
	return nil
}

// construct implements constructor of PeerClass.
func (p PeerChat) construct() PeerClass { return &p }

// Ensuring interfaces in compile-time for PeerChat.
var (
	_ bin.Encoder = &PeerChat{}
	_ bin.Decoder = &PeerChat{}

	_ PeerClass = &PeerChat{}
)

// PeerChannel represents TL type `peerChannel#bddde532`.
// Channel/supergroup
//
// See https://core.telegram.org/constructor/peerChannel for reference.
type PeerChannel struct {
	// Channel ID
	ChannelID int
}

// PeerChannelTypeID is TL type id of PeerChannel.
const PeerChannelTypeID = 0xbddde532

func (p *PeerChannel) Zero() bool {
	if p == nil {
		return true
	}
	if !(p.ChannelID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (p *PeerChannel) String() string {
	if p == nil {
		return "PeerChannel(nil)"
	}
	var sb strings.Builder
	sb.WriteString("PeerChannel")
	sb.WriteString("{\n")
	sb.WriteString("\tChannelID: ")
	sb.WriteString(fmt.Sprint(p.ChannelID))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (p *PeerChannel) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode peerChannel#bddde532 as nil")
	}
	b.PutID(PeerChannelTypeID)
	b.PutInt(p.ChannelID)
	return nil
}

// Decode implements bin.Decoder.
func (p *PeerChannel) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode peerChannel#bddde532 to nil")
	}
	if err := b.ConsumeID(PeerChannelTypeID); err != nil {
		return fmt.Errorf("unable to decode peerChannel#bddde532: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode peerChannel#bddde532: field channel_id: %w", err)
		}
		p.ChannelID = value
	}
	return nil
}

// construct implements constructor of PeerClass.
func (p PeerChannel) construct() PeerClass { return &p }

// Ensuring interfaces in compile-time for PeerChannel.
var (
	_ bin.Encoder = &PeerChannel{}
	_ bin.Decoder = &PeerChannel{}

	_ PeerClass = &PeerChannel{}
)

// PeerClass represents Peer generic type.
//
// See https://core.telegram.org/type/Peer for reference.
//
// Example:
//  g, err := DecodePeer(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *PeerUser: // peerUser#9db1bc6d
//  case *PeerChat: // peerChat#bad0e5bb
//  case *PeerChannel: // peerChannel#bddde532
//  default: panic(v)
//  }
type PeerClass interface {
	bin.Encoder
	bin.Decoder
	construct() PeerClass

	fmt.Stringer
	Zero() bool
}

// DecodePeer implements binary de-serialization for PeerClass.
func DecodePeer(buf *bin.Buffer) (PeerClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case PeerUserTypeID:
		// Decoding peerUser#9db1bc6d.
		v := PeerUser{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode PeerClass: %w", err)
		}
		return &v, nil
	case PeerChatTypeID:
		// Decoding peerChat#bad0e5bb.
		v := PeerChat{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode PeerClass: %w", err)
		}
		return &v, nil
	case PeerChannelTypeID:
		// Decoding peerChannel#bddde532.
		v := PeerChannel{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode PeerClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode PeerClass: %w", bin.NewUnexpectedID(id))
	}
}

// Peer boxes the PeerClass providing a helper.
type PeerBox struct {
	Peer PeerClass
}

// Decode implements bin.Decoder for PeerBox.
func (b *PeerBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode PeerBox to nil")
	}
	v, err := DecodePeer(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.Peer = v
	return nil
}

// Encode implements bin.Encode for PeerBox.
func (b *PeerBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.Peer == nil {
		return fmt.Errorf("unable to encode PeerClass as nil")
	}
	return b.Peer.Encode(buf)
}
