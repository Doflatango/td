// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// HelpCountryCode represents TL type `help.countryCode#4203c5ef`.
// Country code and phone number pattern of a specific country
//
// See https://core.telegram.org/constructor/help.countryCode for reference.
type HelpCountryCode struct {
	// Flags, see TL conditional fieldsÂ¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// ISO country code
	CountryCode string
	// Possible phone prefixes
	//
	// Use SetPrefixes and GetPrefixes helpers.
	Prefixes []string
	// Phone patterns: for example, XXX XXX XXX
	//
	// Use SetPatterns and GetPatterns helpers.
	Patterns []string
}

// HelpCountryCodeTypeID is TL type id of HelpCountryCode.
const HelpCountryCodeTypeID = 0x4203c5ef

// String implements fmt.Stringer.
func (c *HelpCountryCode) String() string {
	if c == nil {
		return "HelpCountryCode(nil)"
	}
	var sb strings.Builder
	sb.WriteString("HelpCountryCode")
	sb.WriteString("{\n")
	sb.WriteString("\tFlags: ")
	sb.WriteString(c.Flags.String())
	sb.WriteString(",\n")
	sb.WriteString("\tCountryCode: ")
	sb.WriteString(fmt.Sprint(c.CountryCode))
	sb.WriteString(",\n")
	if c.Flags.Has(0) {
		sb.WriteByte('[')
		for _, v := range c.Prefixes {
			sb.WriteString(fmt.Sprint(v))
		}
		sb.WriteByte(']')
	}
	if c.Flags.Has(1) {
		sb.WriteByte('[')
		for _, v := range c.Patterns {
			sb.WriteString(fmt.Sprint(v))
		}
		sb.WriteByte(']')
	}
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (c *HelpCountryCode) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode help.countryCode#4203c5ef as nil")
	}
	b.PutID(HelpCountryCodeTypeID)
	if err := c.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode help.countryCode#4203c5ef: field flags: %w", err)
	}
	b.PutString(c.CountryCode)
	if c.Flags.Has(0) {
		b.PutVectorHeader(len(c.Prefixes))
		for _, v := range c.Prefixes {
			b.PutString(v)
		}
	}
	if c.Flags.Has(1) {
		b.PutVectorHeader(len(c.Patterns))
		for _, v := range c.Patterns {
			b.PutString(v)
		}
	}
	return nil
}

// SetPrefixes sets value of Prefixes conditional field.
func (c *HelpCountryCode) SetPrefixes(value []string) {
	c.Flags.Set(0)
	c.Prefixes = value
}

// GetPrefixes returns value of Prefixes conditional field and
// boolean which is true if field was set.
func (c *HelpCountryCode) GetPrefixes() (value []string, ok bool) {
	if !c.Flags.Has(0) {
		return value, false
	}
	return c.Prefixes, true
}

// SetPatterns sets value of Patterns conditional field.
func (c *HelpCountryCode) SetPatterns(value []string) {
	c.Flags.Set(1)
	c.Patterns = value
}

// GetPatterns returns value of Patterns conditional field and
// boolean which is true if field was set.
func (c *HelpCountryCode) GetPatterns() (value []string, ok bool) {
	if !c.Flags.Has(1) {
		return value, false
	}
	return c.Patterns, true
}

// Decode implements bin.Decoder.
func (c *HelpCountryCode) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode help.countryCode#4203c5ef to nil")
	}
	if err := b.ConsumeID(HelpCountryCodeTypeID); err != nil {
		return fmt.Errorf("unable to decode help.countryCode#4203c5ef: %w", err)
	}
	{
		if err := c.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode help.countryCode#4203c5ef: field flags: %w", err)
		}
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode help.countryCode#4203c5ef: field country_code: %w", err)
		}
		c.CountryCode = value
	}
	if c.Flags.Has(0) {
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode help.countryCode#4203c5ef: field prefixes: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode help.countryCode#4203c5ef: field prefixes: %w", err)
			}
			c.Prefixes = append(c.Prefixes, value)
		}
	}
	if c.Flags.Has(1) {
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode help.countryCode#4203c5ef: field patterns: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode help.countryCode#4203c5ef: field patterns: %w", err)
			}
			c.Patterns = append(c.Patterns, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for HelpCountryCode.
var (
	_ bin.Encoder = &HelpCountryCode{}
	_ bin.Decoder = &HelpCountryCode{}
)
