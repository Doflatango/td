// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesSetGameScoreRequest represents TL type `messages.setGameScore#8ef8ecc0`.
// Use this method to set the score of the specified user in a game sent as a normal message (bots only).
//
// See https://core.telegram.org/method/messages.setGameScore for reference.
type MessagesSetGameScoreRequest struct {
	// Flags, see TL conditional fieldsÂ¹
	//
	// Links:
	//  1) https://core.telegram.org/mtproto/TL-combinators#conditional-fields
	Flags bin.Fields
	// Set this flag if the game message should be automatically edited to include the current scoreboard
	EditMessage bool
	// Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
	Force bool
	// Unique identifier of target chat
	Peer InputPeerClass
	// Identifier of the sent message
	ID int
	// User identifier
	UserID InputUserClass
	// New score
	Score int
}

// MessagesSetGameScoreRequestTypeID is TL type id of MessagesSetGameScoreRequest.
const MessagesSetGameScoreRequestTypeID = 0x8ef8ecc0

// Encode implements bin.Encoder.
func (s *MessagesSetGameScoreRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode messages.setGameScore#8ef8ecc0 as nil")
	}
	b.PutID(MessagesSetGameScoreRequestTypeID)
	if err := s.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.setGameScore#8ef8ecc0: field flags: %w", err)
	}
	if s.Peer == nil {
		return fmt.Errorf("unable to encode messages.setGameScore#8ef8ecc0: field peer is nil")
	}
	if err := s.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.setGameScore#8ef8ecc0: field peer: %w", err)
	}
	b.PutInt(s.ID)
	if s.UserID == nil {
		return fmt.Errorf("unable to encode messages.setGameScore#8ef8ecc0: field user_id is nil")
	}
	if err := s.UserID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.setGameScore#8ef8ecc0: field user_id: %w", err)
	}
	b.PutInt(s.Score)
	return nil
}

// SetEditMessage sets value of EditMessage conditional field.
func (s *MessagesSetGameScoreRequest) SetEditMessage(value bool) {
	if value {
		s.Flags.Set(0)
	} else {
		s.Flags.Unset(0)
	}
}

// SetForce sets value of Force conditional field.
func (s *MessagesSetGameScoreRequest) SetForce(value bool) {
	if value {
		s.Flags.Set(1)
	} else {
		s.Flags.Unset(1)
	}
}

// Decode implements bin.Decoder.
func (s *MessagesSetGameScoreRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode messages.setGameScore#8ef8ecc0 to nil")
	}
	if err := b.ConsumeID(MessagesSetGameScoreRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.setGameScore#8ef8ecc0: %w", err)
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.setGameScore#8ef8ecc0: field flags: %w", err)
		}
	}
	s.EditMessage = s.Flags.Has(0)
	s.Force = s.Flags.Has(1)
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.setGameScore#8ef8ecc0: field peer: %w", err)
		}
		s.Peer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.setGameScore#8ef8ecc0: field id: %w", err)
		}
		s.ID = value
	}
	{
		value, err := DecodeInputUser(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.setGameScore#8ef8ecc0: field user_id: %w", err)
		}
		s.UserID = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.setGameScore#8ef8ecc0: field score: %w", err)
		}
		s.Score = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesSetGameScoreRequest.
var (
	_ bin.Encoder = &MessagesSetGameScoreRequest{}
	_ bin.Decoder = &MessagesSetGameScoreRequest{}
)

// MessagesSetGameScore invokes method messages.setGameScore#8ef8ecc0 returning error if any.
// Use this method to set the score of the specified user in a game sent as a normal message (bots only).
//
// See https://core.telegram.org/method/messages.setGameScore for reference.
func (c *Client) MessagesSetGameScore(ctx context.Context, request *MessagesSetGameScoreRequest) (UpdatesClass, error) {
	var result UpdatesBox

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
