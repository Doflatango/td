// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// AccountDeleteAccountRequest represents TL type `account.deleteAccount#418d4e0b`.
// Delete the user's account from the telegram servers. Can be used, for example, to delete the account of a user that provided the login code, but forgot the 2FA password and no recovery method is configured.
//
// See https://core.telegram.org/method/account.deleteAccount for reference.
type AccountDeleteAccountRequest struct {
	// Why is the account being deleted, can be empty
	Reason string
}

// AccountDeleteAccountRequestTypeID is TL type id of AccountDeleteAccountRequest.
const AccountDeleteAccountRequestTypeID = 0x418d4e0b

// String implements fmt.Stringer.
func (d *AccountDeleteAccountRequest) String() string {
	if d == nil {
		return "AccountDeleteAccountRequest(nil)"
	}
	var sb strings.Builder
	sb.WriteString("AccountDeleteAccountRequest")
	sb.WriteString("{\n")
	sb.WriteString("\tReason: ")
	sb.WriteString(fmt.Sprint(d.Reason))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (d *AccountDeleteAccountRequest) Encode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode account.deleteAccount#418d4e0b as nil")
	}
	b.PutID(AccountDeleteAccountRequestTypeID)
	b.PutString(d.Reason)
	return nil
}

// Decode implements bin.Decoder.
func (d *AccountDeleteAccountRequest) Decode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode account.deleteAccount#418d4e0b to nil")
	}
	if err := b.ConsumeID(AccountDeleteAccountRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode account.deleteAccount#418d4e0b: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode account.deleteAccount#418d4e0b: field reason: %w", err)
		}
		d.Reason = value
	}
	return nil
}

// Ensuring interfaces in compile-time for AccountDeleteAccountRequest.
var (
	_ bin.Encoder = &AccountDeleteAccountRequest{}
	_ bin.Decoder = &AccountDeleteAccountRequest{}
)

// AccountDeleteAccount invokes method account.deleteAccount#418d4e0b returning error if any.
// Delete the user's account from the telegram servers. Can be used, for example, to delete the account of a user that provided the login code, but forgot the 2FA password and no recovery method is configured.
//
// See https://core.telegram.org/method/account.deleteAccount for reference.
func (c *Client) AccountDeleteAccount(ctx context.Context, reason string) (bool, error) {
	var result BoolBox

	request := &AccountDeleteAccountRequest{
		Reason: reason,
	}
	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
