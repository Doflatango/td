// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// HelpSupport represents TL type `help.support#17c6b5f6`.
type HelpSupport struct {
	// PhoneNumber field of HelpSupport.
	PhoneNumber string
	// User field of HelpSupport.
	User UserClass
}

// HelpSupportTypeID is TL type id of HelpSupport.
const HelpSupportTypeID = 0x17c6b5f6

// Encode implements bin.Encoder.
func (s *HelpSupport) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode help.support#17c6b5f6 as nil")
	}
	b.PutID(HelpSupportTypeID)
	b.PutString(s.PhoneNumber)
	if s.User == nil {
		return fmt.Errorf("unable to encode help.support#17c6b5f6: field user is nil")
	}
	if err := s.User.Encode(b); err != nil {
		return fmt.Errorf("unable to encode help.support#17c6b5f6: field user: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *HelpSupport) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode help.support#17c6b5f6 to nil")
	}
	if err := b.ConsumeID(HelpSupportTypeID); err != nil {
		return fmt.Errorf("unable to decode help.support#17c6b5f6: %w", err)
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode help.support#17c6b5f6: field phone_number: %w", err)
		}
		s.PhoneNumber = value
	}
	{
		value, err := DecodeUser(b)
		if err != nil {
			return fmt.Errorf("unable to decode help.support#17c6b5f6: field user: %w", err)
		}
		s.User = value
	}
	return nil
}

// Ensuring interfaces in compile-time for HelpSupport.
var (
	_ bin.Encoder = &HelpSupport{}
	_ bin.Decoder = &HelpSupport{}
)
