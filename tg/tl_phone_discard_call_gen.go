// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// PhoneDiscardCallRequest represents TL type `phone.discardCall#b2cbc1c0`.
// Refuse or end running call
//
// See https://core.telegram.org/method/phone.discardCall for reference.
type PhoneDiscardCallRequest struct {
	// Flags, see TL conditional fields
	Flags bin.Fields
	// Whether this is a video call
	Video bool
	// The phone call
	Peer InputPhoneCall
	// Call duration
	Duration int
	// Why was the call discarded
	Reason PhoneCallDiscardReasonClass
	// Preferred libtgvoip relay ID
	ConnectionID int64
}

// PhoneDiscardCallRequestTypeID is TL type id of PhoneDiscardCallRequest.
const PhoneDiscardCallRequestTypeID = 0xb2cbc1c0

// Encode implements bin.Encoder.
func (d *PhoneDiscardCallRequest) Encode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode phone.discardCall#b2cbc1c0 as nil")
	}
	b.PutID(PhoneDiscardCallRequestTypeID)
	if err := d.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode phone.discardCall#b2cbc1c0: field flags: %w", err)
	}
	if err := d.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode phone.discardCall#b2cbc1c0: field peer: %w", err)
	}
	b.PutInt(d.Duration)
	if d.Reason == nil {
		return fmt.Errorf("unable to encode phone.discardCall#b2cbc1c0: field reason is nil")
	}
	if err := d.Reason.Encode(b); err != nil {
		return fmt.Errorf("unable to encode phone.discardCall#b2cbc1c0: field reason: %w", err)
	}
	b.PutLong(d.ConnectionID)
	return nil
}

// SetVideo sets value of Video conditional field.
func (d *PhoneDiscardCallRequest) SetVideo(value bool) {
	if value {
		d.Flags.Set(0)
	} else {
		d.Flags.Unset(0)
	}
}

// Decode implements bin.Decoder.
func (d *PhoneDiscardCallRequest) Decode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode phone.discardCall#b2cbc1c0 to nil")
	}
	if err := b.ConsumeID(PhoneDiscardCallRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode phone.discardCall#b2cbc1c0: %w", err)
	}
	{
		if err := d.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode phone.discardCall#b2cbc1c0: field flags: %w", err)
		}
	}
	d.Video = d.Flags.Has(0)
	{
		if err := d.Peer.Decode(b); err != nil {
			return fmt.Errorf("unable to decode phone.discardCall#b2cbc1c0: field peer: %w", err)
		}
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode phone.discardCall#b2cbc1c0: field duration: %w", err)
		}
		d.Duration = value
	}
	{
		value, err := DecodePhoneCallDiscardReason(b)
		if err != nil {
			return fmt.Errorf("unable to decode phone.discardCall#b2cbc1c0: field reason: %w", err)
		}
		d.Reason = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode phone.discardCall#b2cbc1c0: field connection_id: %w", err)
		}
		d.ConnectionID = value
	}
	return nil
}

// Ensuring interfaces in compile-time for PhoneDiscardCallRequest.
var (
	_ bin.Encoder = &PhoneDiscardCallRequest{}
	_ bin.Decoder = &PhoneDiscardCallRequest{}
)

// PhoneDiscardCall invokes method phone.discardCall#b2cbc1c0 returning error if any.
// Refuse or end running call
//
// See https://core.telegram.org/method/phone.discardCall for reference.
func (c *Client) PhoneDiscardCall(ctx context.Context, request *PhoneDiscardCallRequest) (UpdatesClass, error) {
	var result UpdatesBox

	if err := c.rpc.InvokeRaw(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
