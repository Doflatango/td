// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is
var _ = sort.Ints
var _ = tdp.Format

type handler = func(UpdateContext, UpdateClass) error

type UpdateDispatcher struct {
	handlers map[int]handler
}

func NewUpdateDispatcher() UpdateDispatcher {
	return UpdateDispatcher{
		handlers: map[int]handler{},
	}
}

type UpdateContext struct {
	context.Context

	Short    bool
	Users    map[int]*User
	Chats    map[int]*Chat
	Channels map[int]*Channel
	init     bool
}

func (u *UpdateContext) lazyInitFromUpdates(updates *Updates) {
	if u.init {
		return
	}

	u.init = true
	u.Users = updates.MapUsers().NotEmptyToMap()
	chats := updates.MapChats()
	u.Chats = chats.ChatToMap()
	u.Channels = chats.ChannelToMap()
}

func (u *UpdateContext) short(ctx context.Context) {
	if u.init {
		return
	}
	u.init = true

	u.Context = ctx
	u.Short = true
	u.Users = make(map[int]*User, 0)
	u.Chats = make(map[int]*Chat, 0)
	u.Channels = make(map[int]*Channel, 0)
}

// Handle implements UpdateDispatcher.
func (u UpdateDispatcher) Handle(ctx context.Context, updates *Updates) error {
	uctx := UpdateContext{
		Context: ctx,
	}

	for _, update := range updates.Updates {
		uctx.lazyInitFromUpdates(updates)
		if err := u.dispatch(uctx, update); err != nil {
			return err
		}
	}
	return nil
}

// HandleShort implements UpdateDispatcher.
func (u UpdateDispatcher) HandleShort(ctx context.Context, short *UpdateShort) error {
	uctx := UpdateContext{}
	uctx.short(ctx)
	return u.dispatch(uctx, short.Update)
}

func (u UpdateDispatcher) dispatch(uctx UpdateContext, update UpdateClass) error {
	switch update.(type) {
	case *UpdateNewMessage:
		if handler, ok := u.handlers[UpdateNewMessageTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateMessageID:
		if handler, ok := u.handlers[UpdateMessageIDTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateDeleteMessages:
		if handler, ok := u.handlers[UpdateDeleteMessagesTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateUserTyping:
		if handler, ok := u.handlers[UpdateUserTypingTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateChatUserTyping:
		if handler, ok := u.handlers[UpdateChatUserTypingTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateChatParticipants:
		if handler, ok := u.handlers[UpdateChatParticipantsTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateUserStatus:
		if handler, ok := u.handlers[UpdateUserStatusTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateUserName:
		if handler, ok := u.handlers[UpdateUserNameTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateUserPhoto:
		if handler, ok := u.handlers[UpdateUserPhotoTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateNewEncryptedMessage:
		if handler, ok := u.handlers[UpdateNewEncryptedMessageTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateEncryptedChatTyping:
		if handler, ok := u.handlers[UpdateEncryptedChatTypingTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateEncryption:
		if handler, ok := u.handlers[UpdateEncryptionTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateEncryptedMessagesRead:
		if handler, ok := u.handlers[UpdateEncryptedMessagesReadTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateChatParticipantAdd:
		if handler, ok := u.handlers[UpdateChatParticipantAddTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateChatParticipantDelete:
		if handler, ok := u.handlers[UpdateChatParticipantDeleteTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateDCOptions:
		if handler, ok := u.handlers[UpdateDCOptionsTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateNotifySettings:
		if handler, ok := u.handlers[UpdateNotifySettingsTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateServiceNotification:
		if handler, ok := u.handlers[UpdateServiceNotificationTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdatePrivacy:
		if handler, ok := u.handlers[UpdatePrivacyTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateUserPhone:
		if handler, ok := u.handlers[UpdateUserPhoneTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateReadHistoryInbox:
		if handler, ok := u.handlers[UpdateReadHistoryInboxTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateReadHistoryOutbox:
		if handler, ok := u.handlers[UpdateReadHistoryOutboxTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateWebPage:
		if handler, ok := u.handlers[UpdateWebPageTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateReadMessagesContents:
		if handler, ok := u.handlers[UpdateReadMessagesContentsTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateChannelTooLong:
		if handler, ok := u.handlers[UpdateChannelTooLongTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateChannel:
		if handler, ok := u.handlers[UpdateChannelTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateNewChannelMessage:
		if handler, ok := u.handlers[UpdateNewChannelMessageTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateReadChannelInbox:
		if handler, ok := u.handlers[UpdateReadChannelInboxTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateDeleteChannelMessages:
		if handler, ok := u.handlers[UpdateDeleteChannelMessagesTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateChannelMessageViews:
		if handler, ok := u.handlers[UpdateChannelMessageViewsTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateChatParticipantAdmin:
		if handler, ok := u.handlers[UpdateChatParticipantAdminTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateNewStickerSet:
		if handler, ok := u.handlers[UpdateNewStickerSetTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateStickerSetsOrder:
		if handler, ok := u.handlers[UpdateStickerSetsOrderTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateStickerSets:
		if handler, ok := u.handlers[UpdateStickerSetsTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateSavedGifs:
		if handler, ok := u.handlers[UpdateSavedGifsTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateBotInlineQuery:
		if handler, ok := u.handlers[UpdateBotInlineQueryTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateBotInlineSend:
		if handler, ok := u.handlers[UpdateBotInlineSendTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateEditChannelMessage:
		if handler, ok := u.handlers[UpdateEditChannelMessageTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateBotCallbackQuery:
		if handler, ok := u.handlers[UpdateBotCallbackQueryTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateEditMessage:
		if handler, ok := u.handlers[UpdateEditMessageTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateInlineBotCallbackQuery:
		if handler, ok := u.handlers[UpdateInlineBotCallbackQueryTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateReadChannelOutbox:
		if handler, ok := u.handlers[UpdateReadChannelOutboxTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateDraftMessage:
		if handler, ok := u.handlers[UpdateDraftMessageTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateReadFeaturedStickers:
		if handler, ok := u.handlers[UpdateReadFeaturedStickersTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateRecentStickers:
		if handler, ok := u.handlers[UpdateRecentStickersTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateConfig:
		if handler, ok := u.handlers[UpdateConfigTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdatePtsChanged:
		if handler, ok := u.handlers[UpdatePtsChangedTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateChannelWebPage:
		if handler, ok := u.handlers[UpdateChannelWebPageTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateDialogPinned:
		if handler, ok := u.handlers[UpdateDialogPinnedTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdatePinnedDialogs:
		if handler, ok := u.handlers[UpdatePinnedDialogsTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateBotWebhookJSON:
		if handler, ok := u.handlers[UpdateBotWebhookJSONTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateBotWebhookJSONQuery:
		if handler, ok := u.handlers[UpdateBotWebhookJSONQueryTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateBotShippingQuery:
		if handler, ok := u.handlers[UpdateBotShippingQueryTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateBotPrecheckoutQuery:
		if handler, ok := u.handlers[UpdateBotPrecheckoutQueryTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdatePhoneCall:
		if handler, ok := u.handlers[UpdatePhoneCallTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateLangPackTooLong:
		if handler, ok := u.handlers[UpdateLangPackTooLongTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateLangPack:
		if handler, ok := u.handlers[UpdateLangPackTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateFavedStickers:
		if handler, ok := u.handlers[UpdateFavedStickersTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateChannelReadMessagesContents:
		if handler, ok := u.handlers[UpdateChannelReadMessagesContentsTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateContactsReset:
		if handler, ok := u.handlers[UpdateContactsResetTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateChannelAvailableMessages:
		if handler, ok := u.handlers[UpdateChannelAvailableMessagesTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateDialogUnreadMark:
		if handler, ok := u.handlers[UpdateDialogUnreadMarkTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateMessagePoll:
		if handler, ok := u.handlers[UpdateMessagePollTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateChatDefaultBannedRights:
		if handler, ok := u.handlers[UpdateChatDefaultBannedRightsTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateFolderPeers:
		if handler, ok := u.handlers[UpdateFolderPeersTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdatePeerSettings:
		if handler, ok := u.handlers[UpdatePeerSettingsTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdatePeerLocated:
		if handler, ok := u.handlers[UpdatePeerLocatedTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateNewScheduledMessage:
		if handler, ok := u.handlers[UpdateNewScheduledMessageTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateDeleteScheduledMessages:
		if handler, ok := u.handlers[UpdateDeleteScheduledMessagesTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateTheme:
		if handler, ok := u.handlers[UpdateThemeTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateGeoLiveViewed:
		if handler, ok := u.handlers[UpdateGeoLiveViewedTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateLoginToken:
		if handler, ok := u.handlers[UpdateLoginTokenTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateMessagePollVote:
		if handler, ok := u.handlers[UpdateMessagePollVoteTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateDialogFilter:
		if handler, ok := u.handlers[UpdateDialogFilterTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateDialogFilterOrder:
		if handler, ok := u.handlers[UpdateDialogFilterOrderTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateDialogFilters:
		if handler, ok := u.handlers[UpdateDialogFiltersTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdatePhoneCallSignalingData:
		if handler, ok := u.handlers[UpdatePhoneCallSignalingDataTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateChannelMessageForwards:
		if handler, ok := u.handlers[UpdateChannelMessageForwardsTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateReadChannelDiscussionInbox:
		if handler, ok := u.handlers[UpdateReadChannelDiscussionInboxTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateReadChannelDiscussionOutbox:
		if handler, ok := u.handlers[UpdateReadChannelDiscussionOutboxTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdatePeerBlocked:
		if handler, ok := u.handlers[UpdatePeerBlockedTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateChannelUserTyping:
		if handler, ok := u.handlers[UpdateChannelUserTypingTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdatePinnedMessages:
		if handler, ok := u.handlers[UpdatePinnedMessagesTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdatePinnedChannelMessages:
		if handler, ok := u.handlers[UpdatePinnedChannelMessagesTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateChat:
		if handler, ok := u.handlers[UpdateChatTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateGroupCallParticipants:
		if handler, ok := u.handlers[UpdateGroupCallParticipantsTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateGroupCall:
		if handler, ok := u.handlers[UpdateGroupCallTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdatePeerHistoryTTL:
		if handler, ok := u.handlers[UpdatePeerHistoryTTLTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateChatParticipant:
		if handler, ok := u.handlers[UpdateChatParticipantTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateChannelParticipant:
		if handler, ok := u.handlers[UpdateChannelParticipantTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	case *UpdateBotStopped:
		if handler, ok := u.handlers[UpdateBotStoppedTypeID]; ok {
			if err := handler(uctx, update); err != nil {
				return err
			}
		}
	}

	return nil
}

// NewMessageHandler is a NewMessage event handler.
type NewMessageHandler func(ctx UpdateContext, update *UpdateNewMessage) error

// OnNewMessage sets NewMessage handler.
func (u UpdateDispatcher) OnNewMessage(handler NewMessageHandler) {
	u.handlers[UpdateNewMessageTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateNewMessage))
	}
}

// MessageIDHandler is a MessageID event handler.
type MessageIDHandler func(ctx UpdateContext, update *UpdateMessageID) error

// OnMessageID sets MessageID handler.
func (u UpdateDispatcher) OnMessageID(handler MessageIDHandler) {
	u.handlers[UpdateMessageIDTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateMessageID))
	}
}

// DeleteMessagesHandler is a DeleteMessages event handler.
type DeleteMessagesHandler func(ctx UpdateContext, update *UpdateDeleteMessages) error

// OnDeleteMessages sets DeleteMessages handler.
func (u UpdateDispatcher) OnDeleteMessages(handler DeleteMessagesHandler) {
	u.handlers[UpdateDeleteMessagesTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateDeleteMessages))
	}
}

// UserTypingHandler is a UserTyping event handler.
type UserTypingHandler func(ctx UpdateContext, update *UpdateUserTyping) error

// OnUserTyping sets UserTyping handler.
func (u UpdateDispatcher) OnUserTyping(handler UserTypingHandler) {
	u.handlers[UpdateUserTypingTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateUserTyping))
	}
}

// ChatUserTypingHandler is a ChatUserTyping event handler.
type ChatUserTypingHandler func(ctx UpdateContext, update *UpdateChatUserTyping) error

// OnChatUserTyping sets ChatUserTyping handler.
func (u UpdateDispatcher) OnChatUserTyping(handler ChatUserTypingHandler) {
	u.handlers[UpdateChatUserTypingTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateChatUserTyping))
	}
}

// ChatParticipantsHandler is a ChatParticipants event handler.
type ChatParticipantsHandler func(ctx UpdateContext, update *UpdateChatParticipants) error

// OnChatParticipants sets ChatParticipants handler.
func (u UpdateDispatcher) OnChatParticipants(handler ChatParticipantsHandler) {
	u.handlers[UpdateChatParticipantsTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateChatParticipants))
	}
}

// UserStatusHandler is a UserStatus event handler.
type UserStatusHandler func(ctx UpdateContext, update *UpdateUserStatus) error

// OnUserStatus sets UserStatus handler.
func (u UpdateDispatcher) OnUserStatus(handler UserStatusHandler) {
	u.handlers[UpdateUserStatusTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateUserStatus))
	}
}

// UserNameHandler is a UserName event handler.
type UserNameHandler func(ctx UpdateContext, update *UpdateUserName) error

// OnUserName sets UserName handler.
func (u UpdateDispatcher) OnUserName(handler UserNameHandler) {
	u.handlers[UpdateUserNameTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateUserName))
	}
}

// UserPhotoHandler is a UserPhoto event handler.
type UserPhotoHandler func(ctx UpdateContext, update *UpdateUserPhoto) error

// OnUserPhoto sets UserPhoto handler.
func (u UpdateDispatcher) OnUserPhoto(handler UserPhotoHandler) {
	u.handlers[UpdateUserPhotoTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateUserPhoto))
	}
}

// NewEncryptedMessageHandler is a NewEncryptedMessage event handler.
type NewEncryptedMessageHandler func(ctx UpdateContext, update *UpdateNewEncryptedMessage) error

// OnNewEncryptedMessage sets NewEncryptedMessage handler.
func (u UpdateDispatcher) OnNewEncryptedMessage(handler NewEncryptedMessageHandler) {
	u.handlers[UpdateNewEncryptedMessageTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateNewEncryptedMessage))
	}
}

// EncryptedChatTypingHandler is a EncryptedChatTyping event handler.
type EncryptedChatTypingHandler func(ctx UpdateContext, update *UpdateEncryptedChatTyping) error

// OnEncryptedChatTyping sets EncryptedChatTyping handler.
func (u UpdateDispatcher) OnEncryptedChatTyping(handler EncryptedChatTypingHandler) {
	u.handlers[UpdateEncryptedChatTypingTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateEncryptedChatTyping))
	}
}

// EncryptionHandler is a Encryption event handler.
type EncryptionHandler func(ctx UpdateContext, update *UpdateEncryption) error

// OnEncryption sets Encryption handler.
func (u UpdateDispatcher) OnEncryption(handler EncryptionHandler) {
	u.handlers[UpdateEncryptionTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateEncryption))
	}
}

// EncryptedMessagesReadHandler is a EncryptedMessagesRead event handler.
type EncryptedMessagesReadHandler func(ctx UpdateContext, update *UpdateEncryptedMessagesRead) error

// OnEncryptedMessagesRead sets EncryptedMessagesRead handler.
func (u UpdateDispatcher) OnEncryptedMessagesRead(handler EncryptedMessagesReadHandler) {
	u.handlers[UpdateEncryptedMessagesReadTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateEncryptedMessagesRead))
	}
}

// ChatParticipantAddHandler is a ChatParticipantAdd event handler.
type ChatParticipantAddHandler func(ctx UpdateContext, update *UpdateChatParticipantAdd) error

// OnChatParticipantAdd sets ChatParticipantAdd handler.
func (u UpdateDispatcher) OnChatParticipantAdd(handler ChatParticipantAddHandler) {
	u.handlers[UpdateChatParticipantAddTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateChatParticipantAdd))
	}
}

// ChatParticipantDeleteHandler is a ChatParticipantDelete event handler.
type ChatParticipantDeleteHandler func(ctx UpdateContext, update *UpdateChatParticipantDelete) error

// OnChatParticipantDelete sets ChatParticipantDelete handler.
func (u UpdateDispatcher) OnChatParticipantDelete(handler ChatParticipantDeleteHandler) {
	u.handlers[UpdateChatParticipantDeleteTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateChatParticipantDelete))
	}
}

// DCOptionsHandler is a DCOptions event handler.
type DCOptionsHandler func(ctx UpdateContext, update *UpdateDCOptions) error

// OnDCOptions sets DCOptions handler.
func (u UpdateDispatcher) OnDCOptions(handler DCOptionsHandler) {
	u.handlers[UpdateDCOptionsTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateDCOptions))
	}
}

// NotifySettingsHandler is a NotifySettings event handler.
type NotifySettingsHandler func(ctx UpdateContext, update *UpdateNotifySettings) error

// OnNotifySettings sets NotifySettings handler.
func (u UpdateDispatcher) OnNotifySettings(handler NotifySettingsHandler) {
	u.handlers[UpdateNotifySettingsTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateNotifySettings))
	}
}

// ServiceNotificationHandler is a ServiceNotification event handler.
type ServiceNotificationHandler func(ctx UpdateContext, update *UpdateServiceNotification) error

// OnServiceNotification sets ServiceNotification handler.
func (u UpdateDispatcher) OnServiceNotification(handler ServiceNotificationHandler) {
	u.handlers[UpdateServiceNotificationTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateServiceNotification))
	}
}

// PrivacyHandler is a Privacy event handler.
type PrivacyHandler func(ctx UpdateContext, update *UpdatePrivacy) error

// OnPrivacy sets Privacy handler.
func (u UpdateDispatcher) OnPrivacy(handler PrivacyHandler) {
	u.handlers[UpdatePrivacyTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdatePrivacy))
	}
}

// UserPhoneHandler is a UserPhone event handler.
type UserPhoneHandler func(ctx UpdateContext, update *UpdateUserPhone) error

// OnUserPhone sets UserPhone handler.
func (u UpdateDispatcher) OnUserPhone(handler UserPhoneHandler) {
	u.handlers[UpdateUserPhoneTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateUserPhone))
	}
}

// ReadHistoryInboxHandler is a ReadHistoryInbox event handler.
type ReadHistoryInboxHandler func(ctx UpdateContext, update *UpdateReadHistoryInbox) error

// OnReadHistoryInbox sets ReadHistoryInbox handler.
func (u UpdateDispatcher) OnReadHistoryInbox(handler ReadHistoryInboxHandler) {
	u.handlers[UpdateReadHistoryInboxTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateReadHistoryInbox))
	}
}

// ReadHistoryOutboxHandler is a ReadHistoryOutbox event handler.
type ReadHistoryOutboxHandler func(ctx UpdateContext, update *UpdateReadHistoryOutbox) error

// OnReadHistoryOutbox sets ReadHistoryOutbox handler.
func (u UpdateDispatcher) OnReadHistoryOutbox(handler ReadHistoryOutboxHandler) {
	u.handlers[UpdateReadHistoryOutboxTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateReadHistoryOutbox))
	}
}

// WebPageHandler is a WebPage event handler.
type WebPageHandler func(ctx UpdateContext, update *UpdateWebPage) error

// OnWebPage sets WebPage handler.
func (u UpdateDispatcher) OnWebPage(handler WebPageHandler) {
	u.handlers[UpdateWebPageTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateWebPage))
	}
}

// ReadMessagesContentsHandler is a ReadMessagesContents event handler.
type ReadMessagesContentsHandler func(ctx UpdateContext, update *UpdateReadMessagesContents) error

// OnReadMessagesContents sets ReadMessagesContents handler.
func (u UpdateDispatcher) OnReadMessagesContents(handler ReadMessagesContentsHandler) {
	u.handlers[UpdateReadMessagesContentsTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateReadMessagesContents))
	}
}

// ChannelTooLongHandler is a ChannelTooLong event handler.
type ChannelTooLongHandler func(ctx UpdateContext, update *UpdateChannelTooLong) error

// OnChannelTooLong sets ChannelTooLong handler.
func (u UpdateDispatcher) OnChannelTooLong(handler ChannelTooLongHandler) {
	u.handlers[UpdateChannelTooLongTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateChannelTooLong))
	}
}

// ChannelHandler is a Channel event handler.
type ChannelHandler func(ctx UpdateContext, update *UpdateChannel) error

// OnChannel sets Channel handler.
func (u UpdateDispatcher) OnChannel(handler ChannelHandler) {
	u.handlers[UpdateChannelTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateChannel))
	}
}

// NewChannelMessageHandler is a NewChannelMessage event handler.
type NewChannelMessageHandler func(ctx UpdateContext, update *UpdateNewChannelMessage) error

// OnNewChannelMessage sets NewChannelMessage handler.
func (u UpdateDispatcher) OnNewChannelMessage(handler NewChannelMessageHandler) {
	u.handlers[UpdateNewChannelMessageTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateNewChannelMessage))
	}
}

// ReadChannelInboxHandler is a ReadChannelInbox event handler.
type ReadChannelInboxHandler func(ctx UpdateContext, update *UpdateReadChannelInbox) error

// OnReadChannelInbox sets ReadChannelInbox handler.
func (u UpdateDispatcher) OnReadChannelInbox(handler ReadChannelInboxHandler) {
	u.handlers[UpdateReadChannelInboxTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateReadChannelInbox))
	}
}

// DeleteChannelMessagesHandler is a DeleteChannelMessages event handler.
type DeleteChannelMessagesHandler func(ctx UpdateContext, update *UpdateDeleteChannelMessages) error

// OnDeleteChannelMessages sets DeleteChannelMessages handler.
func (u UpdateDispatcher) OnDeleteChannelMessages(handler DeleteChannelMessagesHandler) {
	u.handlers[UpdateDeleteChannelMessagesTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateDeleteChannelMessages))
	}
}

// ChannelMessageViewsHandler is a ChannelMessageViews event handler.
type ChannelMessageViewsHandler func(ctx UpdateContext, update *UpdateChannelMessageViews) error

// OnChannelMessageViews sets ChannelMessageViews handler.
func (u UpdateDispatcher) OnChannelMessageViews(handler ChannelMessageViewsHandler) {
	u.handlers[UpdateChannelMessageViewsTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateChannelMessageViews))
	}
}

// ChatParticipantAdminHandler is a ChatParticipantAdmin event handler.
type ChatParticipantAdminHandler func(ctx UpdateContext, update *UpdateChatParticipantAdmin) error

// OnChatParticipantAdmin sets ChatParticipantAdmin handler.
func (u UpdateDispatcher) OnChatParticipantAdmin(handler ChatParticipantAdminHandler) {
	u.handlers[UpdateChatParticipantAdminTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateChatParticipantAdmin))
	}
}

// NewStickerSetHandler is a NewStickerSet event handler.
type NewStickerSetHandler func(ctx UpdateContext, update *UpdateNewStickerSet) error

// OnNewStickerSet sets NewStickerSet handler.
func (u UpdateDispatcher) OnNewStickerSet(handler NewStickerSetHandler) {
	u.handlers[UpdateNewStickerSetTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateNewStickerSet))
	}
}

// StickerSetsOrderHandler is a StickerSetsOrder event handler.
type StickerSetsOrderHandler func(ctx UpdateContext, update *UpdateStickerSetsOrder) error

// OnStickerSetsOrder sets StickerSetsOrder handler.
func (u UpdateDispatcher) OnStickerSetsOrder(handler StickerSetsOrderHandler) {
	u.handlers[UpdateStickerSetsOrderTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateStickerSetsOrder))
	}
}

// StickerSetsHandler is a StickerSets event handler.
type StickerSetsHandler func(ctx UpdateContext, update *UpdateStickerSets) error

// OnStickerSets sets StickerSets handler.
func (u UpdateDispatcher) OnStickerSets(handler StickerSetsHandler) {
	u.handlers[UpdateStickerSetsTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateStickerSets))
	}
}

// SavedGifsHandler is a SavedGifs event handler.
type SavedGifsHandler func(ctx UpdateContext, update *UpdateSavedGifs) error

// OnSavedGifs sets SavedGifs handler.
func (u UpdateDispatcher) OnSavedGifs(handler SavedGifsHandler) {
	u.handlers[UpdateSavedGifsTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateSavedGifs))
	}
}

// BotInlineQueryHandler is a BotInlineQuery event handler.
type BotInlineQueryHandler func(ctx UpdateContext, update *UpdateBotInlineQuery) error

// OnBotInlineQuery sets BotInlineQuery handler.
func (u UpdateDispatcher) OnBotInlineQuery(handler BotInlineQueryHandler) {
	u.handlers[UpdateBotInlineQueryTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateBotInlineQuery))
	}
}

// BotInlineSendHandler is a BotInlineSend event handler.
type BotInlineSendHandler func(ctx UpdateContext, update *UpdateBotInlineSend) error

// OnBotInlineSend sets BotInlineSend handler.
func (u UpdateDispatcher) OnBotInlineSend(handler BotInlineSendHandler) {
	u.handlers[UpdateBotInlineSendTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateBotInlineSend))
	}
}

// EditChannelMessageHandler is a EditChannelMessage event handler.
type EditChannelMessageHandler func(ctx UpdateContext, update *UpdateEditChannelMessage) error

// OnEditChannelMessage sets EditChannelMessage handler.
func (u UpdateDispatcher) OnEditChannelMessage(handler EditChannelMessageHandler) {
	u.handlers[UpdateEditChannelMessageTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateEditChannelMessage))
	}
}

// BotCallbackQueryHandler is a BotCallbackQuery event handler.
type BotCallbackQueryHandler func(ctx UpdateContext, update *UpdateBotCallbackQuery) error

// OnBotCallbackQuery sets BotCallbackQuery handler.
func (u UpdateDispatcher) OnBotCallbackQuery(handler BotCallbackQueryHandler) {
	u.handlers[UpdateBotCallbackQueryTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateBotCallbackQuery))
	}
}

// EditMessageHandler is a EditMessage event handler.
type EditMessageHandler func(ctx UpdateContext, update *UpdateEditMessage) error

// OnEditMessage sets EditMessage handler.
func (u UpdateDispatcher) OnEditMessage(handler EditMessageHandler) {
	u.handlers[UpdateEditMessageTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateEditMessage))
	}
}

// InlineBotCallbackQueryHandler is a InlineBotCallbackQuery event handler.
type InlineBotCallbackQueryHandler func(ctx UpdateContext, update *UpdateInlineBotCallbackQuery) error

// OnInlineBotCallbackQuery sets InlineBotCallbackQuery handler.
func (u UpdateDispatcher) OnInlineBotCallbackQuery(handler InlineBotCallbackQueryHandler) {
	u.handlers[UpdateInlineBotCallbackQueryTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateInlineBotCallbackQuery))
	}
}

// ReadChannelOutboxHandler is a ReadChannelOutbox event handler.
type ReadChannelOutboxHandler func(ctx UpdateContext, update *UpdateReadChannelOutbox) error

// OnReadChannelOutbox sets ReadChannelOutbox handler.
func (u UpdateDispatcher) OnReadChannelOutbox(handler ReadChannelOutboxHandler) {
	u.handlers[UpdateReadChannelOutboxTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateReadChannelOutbox))
	}
}

// DraftMessageHandler is a DraftMessage event handler.
type DraftMessageHandler func(ctx UpdateContext, update *UpdateDraftMessage) error

// OnDraftMessage sets DraftMessage handler.
func (u UpdateDispatcher) OnDraftMessage(handler DraftMessageHandler) {
	u.handlers[UpdateDraftMessageTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateDraftMessage))
	}
}

// ReadFeaturedStickersHandler is a ReadFeaturedStickers event handler.
type ReadFeaturedStickersHandler func(ctx UpdateContext, update *UpdateReadFeaturedStickers) error

// OnReadFeaturedStickers sets ReadFeaturedStickers handler.
func (u UpdateDispatcher) OnReadFeaturedStickers(handler ReadFeaturedStickersHandler) {
	u.handlers[UpdateReadFeaturedStickersTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateReadFeaturedStickers))
	}
}

// RecentStickersHandler is a RecentStickers event handler.
type RecentStickersHandler func(ctx UpdateContext, update *UpdateRecentStickers) error

// OnRecentStickers sets RecentStickers handler.
func (u UpdateDispatcher) OnRecentStickers(handler RecentStickersHandler) {
	u.handlers[UpdateRecentStickersTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateRecentStickers))
	}
}

// ConfigHandler is a Config event handler.
type ConfigHandler func(ctx UpdateContext, update *UpdateConfig) error

// OnConfig sets Config handler.
func (u UpdateDispatcher) OnConfig(handler ConfigHandler) {
	u.handlers[UpdateConfigTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateConfig))
	}
}

// PtsChangedHandler is a PtsChanged event handler.
type PtsChangedHandler func(ctx UpdateContext, update *UpdatePtsChanged) error

// OnPtsChanged sets PtsChanged handler.
func (u UpdateDispatcher) OnPtsChanged(handler PtsChangedHandler) {
	u.handlers[UpdatePtsChangedTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdatePtsChanged))
	}
}

// ChannelWebPageHandler is a ChannelWebPage event handler.
type ChannelWebPageHandler func(ctx UpdateContext, update *UpdateChannelWebPage) error

// OnChannelWebPage sets ChannelWebPage handler.
func (u UpdateDispatcher) OnChannelWebPage(handler ChannelWebPageHandler) {
	u.handlers[UpdateChannelWebPageTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateChannelWebPage))
	}
}

// DialogPinnedHandler is a DialogPinned event handler.
type DialogPinnedHandler func(ctx UpdateContext, update *UpdateDialogPinned) error

// OnDialogPinned sets DialogPinned handler.
func (u UpdateDispatcher) OnDialogPinned(handler DialogPinnedHandler) {
	u.handlers[UpdateDialogPinnedTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateDialogPinned))
	}
}

// PinnedDialogsHandler is a PinnedDialogs event handler.
type PinnedDialogsHandler func(ctx UpdateContext, update *UpdatePinnedDialogs) error

// OnPinnedDialogs sets PinnedDialogs handler.
func (u UpdateDispatcher) OnPinnedDialogs(handler PinnedDialogsHandler) {
	u.handlers[UpdatePinnedDialogsTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdatePinnedDialogs))
	}
}

// BotWebhookJSONHandler is a BotWebhookJSON event handler.
type BotWebhookJSONHandler func(ctx UpdateContext, update *UpdateBotWebhookJSON) error

// OnBotWebhookJSON sets BotWebhookJSON handler.
func (u UpdateDispatcher) OnBotWebhookJSON(handler BotWebhookJSONHandler) {
	u.handlers[UpdateBotWebhookJSONTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateBotWebhookJSON))
	}
}

// BotWebhookJSONQueryHandler is a BotWebhookJSONQuery event handler.
type BotWebhookJSONQueryHandler func(ctx UpdateContext, update *UpdateBotWebhookJSONQuery) error

// OnBotWebhookJSONQuery sets BotWebhookJSONQuery handler.
func (u UpdateDispatcher) OnBotWebhookJSONQuery(handler BotWebhookJSONQueryHandler) {
	u.handlers[UpdateBotWebhookJSONQueryTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateBotWebhookJSONQuery))
	}
}

// BotShippingQueryHandler is a BotShippingQuery event handler.
type BotShippingQueryHandler func(ctx UpdateContext, update *UpdateBotShippingQuery) error

// OnBotShippingQuery sets BotShippingQuery handler.
func (u UpdateDispatcher) OnBotShippingQuery(handler BotShippingQueryHandler) {
	u.handlers[UpdateBotShippingQueryTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateBotShippingQuery))
	}
}

// BotPrecheckoutQueryHandler is a BotPrecheckoutQuery event handler.
type BotPrecheckoutQueryHandler func(ctx UpdateContext, update *UpdateBotPrecheckoutQuery) error

// OnBotPrecheckoutQuery sets BotPrecheckoutQuery handler.
func (u UpdateDispatcher) OnBotPrecheckoutQuery(handler BotPrecheckoutQueryHandler) {
	u.handlers[UpdateBotPrecheckoutQueryTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateBotPrecheckoutQuery))
	}
}

// PhoneCallHandler is a PhoneCall event handler.
type PhoneCallHandler func(ctx UpdateContext, update *UpdatePhoneCall) error

// OnPhoneCall sets PhoneCall handler.
func (u UpdateDispatcher) OnPhoneCall(handler PhoneCallHandler) {
	u.handlers[UpdatePhoneCallTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdatePhoneCall))
	}
}

// LangPackTooLongHandler is a LangPackTooLong event handler.
type LangPackTooLongHandler func(ctx UpdateContext, update *UpdateLangPackTooLong) error

// OnLangPackTooLong sets LangPackTooLong handler.
func (u UpdateDispatcher) OnLangPackTooLong(handler LangPackTooLongHandler) {
	u.handlers[UpdateLangPackTooLongTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateLangPackTooLong))
	}
}

// LangPackHandler is a LangPack event handler.
type LangPackHandler func(ctx UpdateContext, update *UpdateLangPack) error

// OnLangPack sets LangPack handler.
func (u UpdateDispatcher) OnLangPack(handler LangPackHandler) {
	u.handlers[UpdateLangPackTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateLangPack))
	}
}

// FavedStickersHandler is a FavedStickers event handler.
type FavedStickersHandler func(ctx UpdateContext, update *UpdateFavedStickers) error

// OnFavedStickers sets FavedStickers handler.
func (u UpdateDispatcher) OnFavedStickers(handler FavedStickersHandler) {
	u.handlers[UpdateFavedStickersTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateFavedStickers))
	}
}

// ChannelReadMessagesContentsHandler is a ChannelReadMessagesContents event handler.
type ChannelReadMessagesContentsHandler func(ctx UpdateContext, update *UpdateChannelReadMessagesContents) error

// OnChannelReadMessagesContents sets ChannelReadMessagesContents handler.
func (u UpdateDispatcher) OnChannelReadMessagesContents(handler ChannelReadMessagesContentsHandler) {
	u.handlers[UpdateChannelReadMessagesContentsTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateChannelReadMessagesContents))
	}
}

// ContactsResetHandler is a ContactsReset event handler.
type ContactsResetHandler func(ctx UpdateContext, update *UpdateContactsReset) error

// OnContactsReset sets ContactsReset handler.
func (u UpdateDispatcher) OnContactsReset(handler ContactsResetHandler) {
	u.handlers[UpdateContactsResetTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateContactsReset))
	}
}

// ChannelAvailableMessagesHandler is a ChannelAvailableMessages event handler.
type ChannelAvailableMessagesHandler func(ctx UpdateContext, update *UpdateChannelAvailableMessages) error

// OnChannelAvailableMessages sets ChannelAvailableMessages handler.
func (u UpdateDispatcher) OnChannelAvailableMessages(handler ChannelAvailableMessagesHandler) {
	u.handlers[UpdateChannelAvailableMessagesTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateChannelAvailableMessages))
	}
}

// DialogUnreadMarkHandler is a DialogUnreadMark event handler.
type DialogUnreadMarkHandler func(ctx UpdateContext, update *UpdateDialogUnreadMark) error

// OnDialogUnreadMark sets DialogUnreadMark handler.
func (u UpdateDispatcher) OnDialogUnreadMark(handler DialogUnreadMarkHandler) {
	u.handlers[UpdateDialogUnreadMarkTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateDialogUnreadMark))
	}
}

// MessagePollHandler is a MessagePoll event handler.
type MessagePollHandler func(ctx UpdateContext, update *UpdateMessagePoll) error

// OnMessagePoll sets MessagePoll handler.
func (u UpdateDispatcher) OnMessagePoll(handler MessagePollHandler) {
	u.handlers[UpdateMessagePollTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateMessagePoll))
	}
}

// ChatDefaultBannedRightsHandler is a ChatDefaultBannedRights event handler.
type ChatDefaultBannedRightsHandler func(ctx UpdateContext, update *UpdateChatDefaultBannedRights) error

// OnChatDefaultBannedRights sets ChatDefaultBannedRights handler.
func (u UpdateDispatcher) OnChatDefaultBannedRights(handler ChatDefaultBannedRightsHandler) {
	u.handlers[UpdateChatDefaultBannedRightsTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateChatDefaultBannedRights))
	}
}

// FolderPeersHandler is a FolderPeers event handler.
type FolderPeersHandler func(ctx UpdateContext, update *UpdateFolderPeers) error

// OnFolderPeers sets FolderPeers handler.
func (u UpdateDispatcher) OnFolderPeers(handler FolderPeersHandler) {
	u.handlers[UpdateFolderPeersTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateFolderPeers))
	}
}

// PeerSettingsHandler is a PeerSettings event handler.
type PeerSettingsHandler func(ctx UpdateContext, update *UpdatePeerSettings) error

// OnPeerSettings sets PeerSettings handler.
func (u UpdateDispatcher) OnPeerSettings(handler PeerSettingsHandler) {
	u.handlers[UpdatePeerSettingsTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdatePeerSettings))
	}
}

// PeerLocatedHandler is a PeerLocated event handler.
type PeerLocatedHandler func(ctx UpdateContext, update *UpdatePeerLocated) error

// OnPeerLocated sets PeerLocated handler.
func (u UpdateDispatcher) OnPeerLocated(handler PeerLocatedHandler) {
	u.handlers[UpdatePeerLocatedTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdatePeerLocated))
	}
}

// NewScheduledMessageHandler is a NewScheduledMessage event handler.
type NewScheduledMessageHandler func(ctx UpdateContext, update *UpdateNewScheduledMessage) error

// OnNewScheduledMessage sets NewScheduledMessage handler.
func (u UpdateDispatcher) OnNewScheduledMessage(handler NewScheduledMessageHandler) {
	u.handlers[UpdateNewScheduledMessageTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateNewScheduledMessage))
	}
}

// DeleteScheduledMessagesHandler is a DeleteScheduledMessages event handler.
type DeleteScheduledMessagesHandler func(ctx UpdateContext, update *UpdateDeleteScheduledMessages) error

// OnDeleteScheduledMessages sets DeleteScheduledMessages handler.
func (u UpdateDispatcher) OnDeleteScheduledMessages(handler DeleteScheduledMessagesHandler) {
	u.handlers[UpdateDeleteScheduledMessagesTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateDeleteScheduledMessages))
	}
}

// ThemeHandler is a Theme event handler.
type ThemeHandler func(ctx UpdateContext, update *UpdateTheme) error

// OnTheme sets Theme handler.
func (u UpdateDispatcher) OnTheme(handler ThemeHandler) {
	u.handlers[UpdateThemeTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateTheme))
	}
}

// GeoLiveViewedHandler is a GeoLiveViewed event handler.
type GeoLiveViewedHandler func(ctx UpdateContext, update *UpdateGeoLiveViewed) error

// OnGeoLiveViewed sets GeoLiveViewed handler.
func (u UpdateDispatcher) OnGeoLiveViewed(handler GeoLiveViewedHandler) {
	u.handlers[UpdateGeoLiveViewedTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateGeoLiveViewed))
	}
}

// LoginTokenHandler is a LoginToken event handler.
type LoginTokenHandler func(ctx UpdateContext, update *UpdateLoginToken) error

// OnLoginToken sets LoginToken handler.
func (u UpdateDispatcher) OnLoginToken(handler LoginTokenHandler) {
	u.handlers[UpdateLoginTokenTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateLoginToken))
	}
}

// MessagePollVoteHandler is a MessagePollVote event handler.
type MessagePollVoteHandler func(ctx UpdateContext, update *UpdateMessagePollVote) error

// OnMessagePollVote sets MessagePollVote handler.
func (u UpdateDispatcher) OnMessagePollVote(handler MessagePollVoteHandler) {
	u.handlers[UpdateMessagePollVoteTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateMessagePollVote))
	}
}

// DialogFilterHandler is a DialogFilter event handler.
type DialogFilterHandler func(ctx UpdateContext, update *UpdateDialogFilter) error

// OnDialogFilter sets DialogFilter handler.
func (u UpdateDispatcher) OnDialogFilter(handler DialogFilterHandler) {
	u.handlers[UpdateDialogFilterTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateDialogFilter))
	}
}

// DialogFilterOrderHandler is a DialogFilterOrder event handler.
type DialogFilterOrderHandler func(ctx UpdateContext, update *UpdateDialogFilterOrder) error

// OnDialogFilterOrder sets DialogFilterOrder handler.
func (u UpdateDispatcher) OnDialogFilterOrder(handler DialogFilterOrderHandler) {
	u.handlers[UpdateDialogFilterOrderTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateDialogFilterOrder))
	}
}

// DialogFiltersHandler is a DialogFilters event handler.
type DialogFiltersHandler func(ctx UpdateContext, update *UpdateDialogFilters) error

// OnDialogFilters sets DialogFilters handler.
func (u UpdateDispatcher) OnDialogFilters(handler DialogFiltersHandler) {
	u.handlers[UpdateDialogFiltersTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateDialogFilters))
	}
}

// PhoneCallSignalingDataHandler is a PhoneCallSignalingData event handler.
type PhoneCallSignalingDataHandler func(ctx UpdateContext, update *UpdatePhoneCallSignalingData) error

// OnPhoneCallSignalingData sets PhoneCallSignalingData handler.
func (u UpdateDispatcher) OnPhoneCallSignalingData(handler PhoneCallSignalingDataHandler) {
	u.handlers[UpdatePhoneCallSignalingDataTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdatePhoneCallSignalingData))
	}
}

// ChannelMessageForwardsHandler is a ChannelMessageForwards event handler.
type ChannelMessageForwardsHandler func(ctx UpdateContext, update *UpdateChannelMessageForwards) error

// OnChannelMessageForwards sets ChannelMessageForwards handler.
func (u UpdateDispatcher) OnChannelMessageForwards(handler ChannelMessageForwardsHandler) {
	u.handlers[UpdateChannelMessageForwardsTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateChannelMessageForwards))
	}
}

// ReadChannelDiscussionInboxHandler is a ReadChannelDiscussionInbox event handler.
type ReadChannelDiscussionInboxHandler func(ctx UpdateContext, update *UpdateReadChannelDiscussionInbox) error

// OnReadChannelDiscussionInbox sets ReadChannelDiscussionInbox handler.
func (u UpdateDispatcher) OnReadChannelDiscussionInbox(handler ReadChannelDiscussionInboxHandler) {
	u.handlers[UpdateReadChannelDiscussionInboxTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateReadChannelDiscussionInbox))
	}
}

// ReadChannelDiscussionOutboxHandler is a ReadChannelDiscussionOutbox event handler.
type ReadChannelDiscussionOutboxHandler func(ctx UpdateContext, update *UpdateReadChannelDiscussionOutbox) error

// OnReadChannelDiscussionOutbox sets ReadChannelDiscussionOutbox handler.
func (u UpdateDispatcher) OnReadChannelDiscussionOutbox(handler ReadChannelDiscussionOutboxHandler) {
	u.handlers[UpdateReadChannelDiscussionOutboxTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateReadChannelDiscussionOutbox))
	}
}

// PeerBlockedHandler is a PeerBlocked event handler.
type PeerBlockedHandler func(ctx UpdateContext, update *UpdatePeerBlocked) error

// OnPeerBlocked sets PeerBlocked handler.
func (u UpdateDispatcher) OnPeerBlocked(handler PeerBlockedHandler) {
	u.handlers[UpdatePeerBlockedTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdatePeerBlocked))
	}
}

// ChannelUserTypingHandler is a ChannelUserTyping event handler.
type ChannelUserTypingHandler func(ctx UpdateContext, update *UpdateChannelUserTyping) error

// OnChannelUserTyping sets ChannelUserTyping handler.
func (u UpdateDispatcher) OnChannelUserTyping(handler ChannelUserTypingHandler) {
	u.handlers[UpdateChannelUserTypingTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateChannelUserTyping))
	}
}

// PinnedMessagesHandler is a PinnedMessages event handler.
type PinnedMessagesHandler func(ctx UpdateContext, update *UpdatePinnedMessages) error

// OnPinnedMessages sets PinnedMessages handler.
func (u UpdateDispatcher) OnPinnedMessages(handler PinnedMessagesHandler) {
	u.handlers[UpdatePinnedMessagesTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdatePinnedMessages))
	}
}

// PinnedChannelMessagesHandler is a PinnedChannelMessages event handler.
type PinnedChannelMessagesHandler func(ctx UpdateContext, update *UpdatePinnedChannelMessages) error

// OnPinnedChannelMessages sets PinnedChannelMessages handler.
func (u UpdateDispatcher) OnPinnedChannelMessages(handler PinnedChannelMessagesHandler) {
	u.handlers[UpdatePinnedChannelMessagesTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdatePinnedChannelMessages))
	}
}

// ChatHandler is a Chat event handler.
type ChatHandler func(ctx UpdateContext, update *UpdateChat) error

// OnChat sets Chat handler.
func (u UpdateDispatcher) OnChat(handler ChatHandler) {
	u.handlers[UpdateChatTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateChat))
	}
}

// GroupCallParticipantsHandler is a GroupCallParticipants event handler.
type GroupCallParticipantsHandler func(ctx UpdateContext, update *UpdateGroupCallParticipants) error

// OnGroupCallParticipants sets GroupCallParticipants handler.
func (u UpdateDispatcher) OnGroupCallParticipants(handler GroupCallParticipantsHandler) {
	u.handlers[UpdateGroupCallParticipantsTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateGroupCallParticipants))
	}
}

// GroupCallHandler is a GroupCall event handler.
type GroupCallHandler func(ctx UpdateContext, update *UpdateGroupCall) error

// OnGroupCall sets GroupCall handler.
func (u UpdateDispatcher) OnGroupCall(handler GroupCallHandler) {
	u.handlers[UpdateGroupCallTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateGroupCall))
	}
}

// PeerHistoryTTLHandler is a PeerHistoryTTL event handler.
type PeerHistoryTTLHandler func(ctx UpdateContext, update *UpdatePeerHistoryTTL) error

// OnPeerHistoryTTL sets PeerHistoryTTL handler.
func (u UpdateDispatcher) OnPeerHistoryTTL(handler PeerHistoryTTLHandler) {
	u.handlers[UpdatePeerHistoryTTLTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdatePeerHistoryTTL))
	}
}

// ChatParticipantHandler is a ChatParticipant event handler.
type ChatParticipantHandler func(ctx UpdateContext, update *UpdateChatParticipant) error

// OnChatParticipant sets ChatParticipant handler.
func (u UpdateDispatcher) OnChatParticipant(handler ChatParticipantHandler) {
	u.handlers[UpdateChatParticipantTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateChatParticipant))
	}
}

// ChannelParticipantHandler is a ChannelParticipant event handler.
type ChannelParticipantHandler func(ctx UpdateContext, update *UpdateChannelParticipant) error

// OnChannelParticipant sets ChannelParticipant handler.
func (u UpdateDispatcher) OnChannelParticipant(handler ChannelParticipantHandler) {
	u.handlers[UpdateChannelParticipantTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateChannelParticipant))
	}
}

// BotStoppedHandler is a BotStopped event handler.
type BotStoppedHandler func(ctx UpdateContext, update *UpdateBotStopped) error

// OnBotStopped sets BotStopped handler.
func (u UpdateDispatcher) OnBotStopped(handler BotStoppedHandler) {
	u.handlers[UpdateBotStoppedTypeID] = func(ctx UpdateContext, update UpdateClass) error {
		return handler(ctx, update.(*UpdateBotStopped))
	}
}
