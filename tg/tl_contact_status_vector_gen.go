// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// ContactStatusVector is a box for Vector<ContactStatus>
type ContactStatusVector struct {
	// Elements of Vector<ContactStatus>
	Elems []ContactStatus
}

// Encode implements bin.Encoder.
func (vec *ContactStatusVector) Encode(b *bin.Buffer) error {
	if vec == nil {
		return fmt.Errorf("can't encode Vector<ContactStatus> as nil")
	}
	b.PutVectorHeader(len(vec.Elems))
	for idx, v := range vec.Elems {
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode Vector<ContactStatus>: field Elems element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (vec *ContactStatusVector) Decode(b *bin.Buffer) error {
	if vec == nil {
		return fmt.Errorf("can't decode Vector<ContactStatus> to nil")
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode Vector<ContactStatus>: field Elems: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value ContactStatus
			if err := value.Decode(b); err != nil {
				return fmt.Errorf("unable to decode Vector<ContactStatus>: field Elems: %w", err)
			}
			vec.Elems = append(vec.Elems, value)
		}
	}
	return nil
}

// Ensuring interfaces in compile-time for ContactStatusVector.
var (
	_ bin.Encoder = &ContactStatusVector{}
	_ bin.Decoder = &ContactStatusVector{}
)
