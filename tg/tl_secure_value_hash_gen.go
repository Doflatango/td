// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// SecureValueHash represents TL type `secureValueHash#ed1ecdb0`.
// Secure value hash
//
// See https://core.telegram.org/constructor/secureValueHash for reference.
type SecureValueHash struct {
	// Secure value type
	Type SecureValueTypeClass
	// Hash
	Hash []byte
}

// SecureValueHashTypeID is TL type id of SecureValueHash.
const SecureValueHashTypeID = 0xed1ecdb0

func (s *SecureValueHash) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Type == nil) {
		return false
	}
	if !(s.Hash == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *SecureValueHash) String() string {
	if s == nil {
		return "SecureValueHash(nil)"
	}
	var sb strings.Builder
	sb.WriteString("SecureValueHash")
	sb.WriteString("{\n")
	sb.WriteString("\tType: ")
	sb.WriteString(fmt.Sprint(s.Type))
	sb.WriteString(",\n")
	sb.WriteString("\tHash: ")
	sb.WriteString(fmt.Sprint(s.Hash))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// Encode implements bin.Encoder.
func (s *SecureValueHash) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode secureValueHash#ed1ecdb0 as nil")
	}
	b.PutID(SecureValueHashTypeID)
	if s.Type == nil {
		return fmt.Errorf("unable to encode secureValueHash#ed1ecdb0: field type is nil")
	}
	if err := s.Type.Encode(b); err != nil {
		return fmt.Errorf("unable to encode secureValueHash#ed1ecdb0: field type: %w", err)
	}
	b.PutBytes(s.Hash)
	return nil
}

// Decode implements bin.Decoder.
func (s *SecureValueHash) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode secureValueHash#ed1ecdb0 to nil")
	}
	if err := b.ConsumeID(SecureValueHashTypeID); err != nil {
		return fmt.Errorf("unable to decode secureValueHash#ed1ecdb0: %w", err)
	}
	{
		value, err := DecodeSecureValueType(b)
		if err != nil {
			return fmt.Errorf("unable to decode secureValueHash#ed1ecdb0: field type: %w", err)
		}
		s.Type = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode secureValueHash#ed1ecdb0: field hash: %w", err)
		}
		s.Hash = value
	}
	return nil
}

// Ensuring interfaces in compile-time for SecureValueHash.
var (
	_ bin.Encoder = &SecureValueHash{}
	_ bin.Decoder = &SecureValueHash{}
)
