// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}
var _ = errors.Is

// InputCheckPasswordEmpty represents TL type `inputCheckPasswordEmpty#9880f658`.
// There is no password
//
// See https://core.telegram.org/constructor/inputCheckPasswordEmpty for reference.
type InputCheckPasswordEmpty struct {
}

// InputCheckPasswordEmptyTypeID is TL type id of InputCheckPasswordEmpty.
const InputCheckPasswordEmptyTypeID = 0x9880f658

func (i *InputCheckPasswordEmpty) Zero() bool {
	if i == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (i *InputCheckPasswordEmpty) String() string {
	if i == nil {
		return "InputCheckPasswordEmpty(nil)"
	}
	type Alias InputCheckPasswordEmpty
	return fmt.Sprintf("InputCheckPasswordEmpty%+v", Alias(*i))
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (i *InputCheckPasswordEmpty) TypeID() uint32 {
	return InputCheckPasswordEmptyTypeID
}

// SchemaName returns MTProto type name.
func (i *InputCheckPasswordEmpty) SchemaName() string {
	return "inputCheckPasswordEmpty"
}

// Encode implements bin.Encoder.
func (i *InputCheckPasswordEmpty) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputCheckPasswordEmpty#9880f658 as nil")
	}
	b.PutID(InputCheckPasswordEmptyTypeID)
	return nil
}

// Decode implements bin.Decoder.
func (i *InputCheckPasswordEmpty) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputCheckPasswordEmpty#9880f658 to nil")
	}
	if err := b.ConsumeID(InputCheckPasswordEmptyTypeID); err != nil {
		return fmt.Errorf("unable to decode inputCheckPasswordEmpty#9880f658: %w", err)
	}
	return nil
}

// construct implements constructor of InputCheckPasswordSRPClass.
func (i InputCheckPasswordEmpty) construct() InputCheckPasswordSRPClass { return &i }

// Ensuring interfaces in compile-time for InputCheckPasswordEmpty.
var (
	_ bin.Encoder = &InputCheckPasswordEmpty{}
	_ bin.Decoder = &InputCheckPasswordEmpty{}

	_ InputCheckPasswordSRPClass = &InputCheckPasswordEmpty{}
)

// InputCheckPasswordSRP represents TL type `inputCheckPasswordSRP#d27ff082`.
// Constructor for checking the validity of a 2FA SRP password (see SRP¹)
//
// Links:
//  1) https://core.telegram.org/api/srp
//
// See https://core.telegram.org/constructor/inputCheckPasswordSRP for reference.
type InputCheckPasswordSRP struct {
	// SRP ID¹
	//
	// Links:
	//  1) https://core.telegram.org/api/srp
	SRPID int64 `schemaname:"srp_id"`
	// A parameter (see SRP¹)
	//
	// Links:
	//  1) https://core.telegram.org/api/srp
	A []byte `schemaname:"A"`
	// M1 parameter (see SRP¹)
	//
	// Links:
	//  1) https://core.telegram.org/api/srp
	M1 []byte `schemaname:"M1"`
}

// InputCheckPasswordSRPTypeID is TL type id of InputCheckPasswordSRP.
const InputCheckPasswordSRPTypeID = 0xd27ff082

func (i *InputCheckPasswordSRP) Zero() bool {
	if i == nil {
		return true
	}
	if !(i.SRPID == 0) {
		return false
	}
	if !(i.A == nil) {
		return false
	}
	if !(i.M1 == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (i *InputCheckPasswordSRP) String() string {
	if i == nil {
		return "InputCheckPasswordSRP(nil)"
	}
	type Alias InputCheckPasswordSRP
	return fmt.Sprintf("InputCheckPasswordSRP%+v", Alias(*i))
}

// FillFrom fills InputCheckPasswordSRP from given interface.
func (i *InputCheckPasswordSRP) FillFrom(from interface {
	GetSRPID() (value int64)
	GetA() (value []byte)
	GetM1() (value []byte)
}) {
	i.SRPID = from.GetSRPID()
	i.A = from.GetA()
	i.M1 = from.GetM1()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (i *InputCheckPasswordSRP) TypeID() uint32 {
	return InputCheckPasswordSRPTypeID
}

// SchemaName returns MTProto type name.
func (i *InputCheckPasswordSRP) SchemaName() string {
	return "inputCheckPasswordSRP"
}

// Encode implements bin.Encoder.
func (i *InputCheckPasswordSRP) Encode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't encode inputCheckPasswordSRP#d27ff082 as nil")
	}
	b.PutID(InputCheckPasswordSRPTypeID)
	b.PutLong(i.SRPID)
	b.PutBytes(i.A)
	b.PutBytes(i.M1)
	return nil
}

// GetSRPID returns value of SRPID field.
func (i *InputCheckPasswordSRP) GetSRPID() (value int64) {
	return i.SRPID
}

// GetA returns value of A field.
func (i *InputCheckPasswordSRP) GetA() (value []byte) {
	return i.A
}

// GetM1 returns value of M1 field.
func (i *InputCheckPasswordSRP) GetM1() (value []byte) {
	return i.M1
}

// Decode implements bin.Decoder.
func (i *InputCheckPasswordSRP) Decode(b *bin.Buffer) error {
	if i == nil {
		return fmt.Errorf("can't decode inputCheckPasswordSRP#d27ff082 to nil")
	}
	if err := b.ConsumeID(InputCheckPasswordSRPTypeID); err != nil {
		return fmt.Errorf("unable to decode inputCheckPasswordSRP#d27ff082: %w", err)
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode inputCheckPasswordSRP#d27ff082: field srp_id: %w", err)
		}
		i.SRPID = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode inputCheckPasswordSRP#d27ff082: field A: %w", err)
		}
		i.A = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode inputCheckPasswordSRP#d27ff082: field M1: %w", err)
		}
		i.M1 = value
	}
	return nil
}

// construct implements constructor of InputCheckPasswordSRPClass.
func (i InputCheckPasswordSRP) construct() InputCheckPasswordSRPClass { return &i }

// Ensuring interfaces in compile-time for InputCheckPasswordSRP.
var (
	_ bin.Encoder = &InputCheckPasswordSRP{}
	_ bin.Decoder = &InputCheckPasswordSRP{}

	_ InputCheckPasswordSRPClass = &InputCheckPasswordSRP{}
)

// InputCheckPasswordSRPClass represents InputCheckPasswordSRP generic type.
//
// See https://core.telegram.org/type/InputCheckPasswordSRP for reference.
//
// Example:
//  g, err := tg.DecodeInputCheckPasswordSRP(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *tg.InputCheckPasswordEmpty: // inputCheckPasswordEmpty#9880f658
//  case *tg.InputCheckPasswordSRP: // inputCheckPasswordSRP#d27ff082
//  default: panic(v)
//  }
type InputCheckPasswordSRPClass interface {
	bin.Encoder
	bin.Decoder
	construct() InputCheckPasswordSRPClass

	// TypeID returns MTProto type id (CRC code).
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// SchemaName returns MTProto type name.
	SchemaName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	// AsNotEmpty tries to map InputCheckPasswordSRPClass to InputCheckPasswordSRP.
	AsNotEmpty() (*InputCheckPasswordSRP, bool)
}

// AsNotEmpty tries to map InputCheckPasswordEmpty to InputCheckPasswordSRP.
func (i *InputCheckPasswordEmpty) AsNotEmpty() (*InputCheckPasswordSRP, bool) {
	return nil, false
}

// AsNotEmpty tries to map InputCheckPasswordSRP to InputCheckPasswordSRP.
func (i *InputCheckPasswordSRP) AsNotEmpty() (*InputCheckPasswordSRP, bool) {
	return i, true
}

// DecodeInputCheckPasswordSRP implements binary de-serialization for InputCheckPasswordSRPClass.
func DecodeInputCheckPasswordSRP(buf *bin.Buffer) (InputCheckPasswordSRPClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case InputCheckPasswordEmptyTypeID:
		// Decoding inputCheckPasswordEmpty#9880f658.
		v := InputCheckPasswordEmpty{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InputCheckPasswordSRPClass: %w", err)
		}
		return &v, nil
	case InputCheckPasswordSRPTypeID:
		// Decoding inputCheckPasswordSRP#d27ff082.
		v := InputCheckPasswordSRP{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode InputCheckPasswordSRPClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode InputCheckPasswordSRPClass: %w", bin.NewUnexpectedID(id))
	}
}

// InputCheckPasswordSRP boxes the InputCheckPasswordSRPClass providing a helper.
type InputCheckPasswordSRPBox struct {
	InputCheckPasswordSRP InputCheckPasswordSRPClass
}

// Decode implements bin.Decoder for InputCheckPasswordSRPBox.
func (b *InputCheckPasswordSRPBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode InputCheckPasswordSRPBox to nil")
	}
	v, err := DecodeInputCheckPasswordSRP(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.InputCheckPasswordSRP = v
	return nil
}

// Encode implements bin.Encode for InputCheckPasswordSRPBox.
func (b *InputCheckPasswordSRPBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.InputCheckPasswordSRP == nil {
		return fmt.Errorf("unable to encode InputCheckPasswordSRPClass as nil")
	}
	return b.InputCheckPasswordSRP.Encode(buf)
}

// InputCheckPasswordSRPClassSlice is adapter for slice of InputCheckPasswordSRPClass.
type InputCheckPasswordSRPClassSlice []InputCheckPasswordSRPClass

// AppendOnlyNotEmpty appends only NotEmpty constructors to
// given slice.
func (s InputCheckPasswordSRPClassSlice) AppendOnlyNotEmpty(to []*InputCheckPasswordSRP) []*InputCheckPasswordSRP {
	for _, elem := range s {
		value, ok := elem.AsNotEmpty()
		if !ok {
			continue
		}
		to = append(to, value)
	}

	return to
}

// AsNotEmpty returns copy with only NotEmpty constructors.
func (s InputCheckPasswordSRPClassSlice) AsNotEmpty() (to []*InputCheckPasswordSRP) {
	return s.AppendOnlyNotEmpty(to)
}

// FirstAsNotEmpty returns first element of slice (if exists).
func (s InputCheckPasswordSRPClassSlice) FirstAsNotEmpty() (v *InputCheckPasswordSRP, ok bool) {
	value, ok := s.First()
	if !ok {
		return
	}
	return value.AsNotEmpty()
}

// LastAsNotEmpty returns last element of slice (if exists).
func (s InputCheckPasswordSRPClassSlice) LastAsNotEmpty() (v *InputCheckPasswordSRP, ok bool) {
	value, ok := s.Last()
	if !ok {
		return
	}
	return value.AsNotEmpty()
}

// PopFirstAsNotEmpty returns element of slice (if exists).
func (s *InputCheckPasswordSRPClassSlice) PopFirstAsNotEmpty() (v *InputCheckPasswordSRP, ok bool) {
	value, ok := s.PopFirst()
	if !ok {
		return
	}
	return value.AsNotEmpty()
}

// PopAsNotEmpty returns element of slice (if exists).
func (s *InputCheckPasswordSRPClassSlice) PopAsNotEmpty() (v *InputCheckPasswordSRP, ok bool) {
	value, ok := s.Pop()
	if !ok {
		return
	}
	return value.AsNotEmpty()
}

// First returns first element of slice (if exists).
func (s InputCheckPasswordSRPClassSlice) First() (v InputCheckPasswordSRPClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s InputCheckPasswordSRPClassSlice) Last() (v InputCheckPasswordSRPClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *InputCheckPasswordSRPClassSlice) PopFirst() (v InputCheckPasswordSRPClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	a[len(a)-1] = nil
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *InputCheckPasswordSRPClassSlice) Pop() (v InputCheckPasswordSRPClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
