// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesGetPeerSettingsRequest represents TL type `messages.getPeerSettings#3672e09c`.
type MessagesGetPeerSettingsRequest struct {
	// Peer field of MessagesGetPeerSettingsRequest.
	Peer InputPeerClass
}

// MessagesGetPeerSettingsRequestTypeID is TL type id of MessagesGetPeerSettingsRequest.
const MessagesGetPeerSettingsRequestTypeID = 0x3672e09c

// Encode implements bin.Encoder.
func (g *MessagesGetPeerSettingsRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode messages.getPeerSettings#3672e09c as nil")
	}
	b.PutID(MessagesGetPeerSettingsRequestTypeID)
	if g.Peer == nil {
		return fmt.Errorf("unable to encode messages.getPeerSettings#3672e09c: field peer is nil")
	}
	if err := g.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.getPeerSettings#3672e09c: field peer: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (g *MessagesGetPeerSettingsRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode messages.getPeerSettings#3672e09c to nil")
	}
	if err := b.ConsumeID(MessagesGetPeerSettingsRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.getPeerSettings#3672e09c: %w", err)
	}
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.getPeerSettings#3672e09c: field peer: %w", err)
		}
		g.Peer = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesGetPeerSettingsRequest.
var (
	_ bin.Encoder = &MessagesGetPeerSettingsRequest{}
	_ bin.Decoder = &MessagesGetPeerSettingsRequest{}
)
