// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"fmt"

	"github.com/ernado/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)

// MessagesDeleteHistoryRequest represents TL type `messages.deleteHistory#1c015b09`.
type MessagesDeleteHistoryRequest struct {
	// Flags field of MessagesDeleteHistoryRequest.
	Flags bin.Fields
	// JustClear field of MessagesDeleteHistoryRequest.
	JustClear bool
	// Revoke field of MessagesDeleteHistoryRequest.
	Revoke bool
	// Peer field of MessagesDeleteHistoryRequest.
	Peer InputPeerClass
	// MaxID field of MessagesDeleteHistoryRequest.
	MaxID int
}

// MessagesDeleteHistoryRequestTypeID is TL type id of MessagesDeleteHistoryRequest.
const MessagesDeleteHistoryRequestTypeID = 0x1c015b09

// Encode implements bin.Encoder.
func (d *MessagesDeleteHistoryRequest) Encode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode messages.deleteHistory#1c015b09 as nil")
	}
	b.PutID(MessagesDeleteHistoryRequestTypeID)
	if err := d.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.deleteHistory#1c015b09: field flags: %w", err)
	}
	if d.Peer == nil {
		return fmt.Errorf("unable to encode messages.deleteHistory#1c015b09: field peer is nil")
	}
	if err := d.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messages.deleteHistory#1c015b09: field peer: %w", err)
	}
	b.PutInt(d.MaxID)
	return nil
}

// SetJustClear sets value of JustClear conditional field.
func (d *MessagesDeleteHistoryRequest) SetJustClear(value bool) {
	if value {
		d.Flags.Set(0)
	} else {
		d.Flags.Unset(0)
	}
}

// SetRevoke sets value of Revoke conditional field.
func (d *MessagesDeleteHistoryRequest) SetRevoke(value bool) {
	if value {
		d.Flags.Set(1)
	} else {
		d.Flags.Unset(1)
	}
}

// Decode implements bin.Decoder.
func (d *MessagesDeleteHistoryRequest) Decode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode messages.deleteHistory#1c015b09 to nil")
	}
	if err := b.ConsumeID(MessagesDeleteHistoryRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.deleteHistory#1c015b09: %w", err)
	}
	{
		if err := d.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messages.deleteHistory#1c015b09: field flags: %w", err)
		}
	}
	d.JustClear = d.Flags.Has(0)
	d.Revoke = d.Flags.Has(1)
	{
		value, err := DecodeInputPeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode messages.deleteHistory#1c015b09: field peer: %w", err)
		}
		d.Peer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.deleteHistory#1c015b09: field max_id: %w", err)
		}
		d.MaxID = value
	}
	return nil
}

// Ensuring interfaces in compile-time for MessagesDeleteHistoryRequest.
var (
	_ bin.Encoder = &MessagesDeleteHistoryRequest{}
	_ bin.Decoder = &MessagesDeleteHistoryRequest{}
)
